{
    "document_name": "33434-i10.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Specification has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\nIn the present document, modal verbs have the following meanings:\nshall\tindicates a mandatory requirement to do something\nshall not\tindicates an interdiction (prohibition) to do something\nThe constructions \"shall\" and \"shall not\" are confined to the context of normative provisions, and do not appear in Technical Reports.\nThe constructions \"must\" and \"must not\" are not used as substitutes for \"shall\" and \"shall not\". Their use is avoided insofar as possible, and they are not used in a normative context except in a direct citation from an external, referenced, non-3GPP document, or so as to maintain continuity of style when extending or modifying the provisions of such a referenced document.\nshould\tindicates a recommendation to do something\nshould not\tindicates a recommendation not to do something\nmay\tindicates permission to do something\nneed not\tindicates permission not to do something\nThe construction \"may not\" is ambiguous and is not used in normative elements. The unambiguous constructions \"might not\" or \"shall not\" are used instead, depending upon the meaning intended.\ncan\tindicates that something is possible\ncannot\tindicates that something is impossible\nThe constructions \"can\" and \"cannot\" are not substitutes for \"may\" and \"need not\".\nwill\tindicates that something is certain or expected to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nwill not\tindicates that something is certain or expected not to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nmight\tindicates a likelihood that something will happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nmight not\tindicates a likelihood that something will not happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nIn addition:\nis\t(or any other verb in the indicative mood) indicates a statement of fact\nis not\t(or any other negative verb in the indicative mood) indicates a statement of fact\nThe constructions \"is\" and \"is not\" do not indicate requirements.\n\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document specifies the security features and mechanisms to support the Service Enabler Architecture Layer (SEAL) in 5G. Specifically security architecture, functional model(s), security aspects of SEAL reference points (e.g. SEAL-UU, etc.), Key Management (KM) procedures, Identity Management (IdM) procedures and SEAL access authentication and authorization for supporting efficient use and deployment of vertical applications over the 3GPP systems are specified.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[2]\t3GPP TS 23.434: \"Service Enabler Architecture Layer for Verticals (SEAL); Functional architecture and information flows\".\n[3]\tIETF RFC 6749: \"The OAuth 2.0 Authorization Framework\".\n[4]\tIETF RFC 6750: \"The OAuth 2.0 Authorization Framework: Bearer Token Usage\".\n[5]\tOpenID Connect 1.0: \"OpenID Connect Core 1.0 incorporating errata set 1\", .\n[6]\t3GPP TS 33.310: \"Network Domain Security (NDS); Authentication Framework (AF)\".\n[7]\t3GPP TS 23.401: \"General Packet Radio Service (GPRS) enhancements for Evolved Universal Terrestrial Radio Access Network (E-UTRAN) access\".\n[8]\t3GPP TS 23.501: \"System Architecture for the 5G System; Stage 2\".\n[9]\tIETF RFC 7521: \"Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\".\n[10]\tIETF RFC 7523: \"JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\".\n[11]\tIETF RFC 7797: \" JSON Web Signature (JWS) Unencoded Payload Option \".\n[12]\tIETF RFC 7515: \"JSON Web Signature (JWS)\".\n[13]\tIETF RFC 7662: \"OAuth 2.0 Token Introspection\".\n[14]\t3GPP TS 33.210: \" 3G security; Network Domain Security (NDS); IP network layer security\".\n[15]\t3GPP TS 33.222: \"Generic Authentication Architecture (GAA); Access to network application functions using Hypertext Transfer Protocol over Transport Layer Security (HTTPS)\".\n[16]\t3GPP TS 33.501: \"Security architecture and procedures for 5G system\".\n[17]\t3GPP TS 29.122: \"T8 reference point for Northbound Application Programming Interfaces (APIs)\".\n[18]\tIETF RFC 7252: \"The Constrained Application Protocol (CoAP)\".\n[19]\tInternet draft draft-ietf-ace-oauth-authz-45: \"Authentication and Authorization for Constrained Environments (ACE) using the OAuth 2.0 Framework (ACE-OAuth)\".\n[20]\tIETF RFC 8152: \"CBOR Object Signing and Encryption (COSE)\".\n[21]\tInternet draft draft-ietf-ace-dtls-authorize-18: \"Datagram Transport Layer Security (DTLS) Profile for Authentication and Authorization for Constrained Environments (ACE)\".\n[22]\t IETF RFC 9175: \"CoAP: Echo, Request-Tag, and Token Processing\"\n[23]\tIETF RFC 8613: \"\"Object Security for Constrained RESTful Environments (OSCORE\")\".\n[24]\tInternet draft draft-ietf-ace-oscore-profile-19: \"OSCORE Profile of the Authentication and Authorization for Constrained Environments Framework\".\n[25]\tInternet draft draft-ietf-ace-extend-dtls-authorize-00: \"Extension of the ACE CoAP-DTLS Profile to TLS\".\n[26]\tIETF RFC 8392: \"CBOR Web Token (CWT)\".\n[27]\tIETF RFC 8747: \"Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs) \".\n[28]\tInternet draft draft-ietf-ace-oauth-params-16: \"Additional OAuth Parameters for Authorization in Constrained Environments (ACE)\".\n[29]\t3GPP TS 33.122: \"Security aspects of Common API Framework (CAPIF) for 3GPP northbound APIs\".\n[30]\t3GPP TS 23.433: \"Service Enabler Architecture Layer for Verticals (SEAL);Data Delivery enabler for vertical applications\".\n[31]\t3GPP TS 33.401: \"3GPP System Architecture Evolution (SAE); Security architecture\".\n[32]\t3GPP TS 33.246: \"3G Security; Security of Multimedia Broadcast/Multicast Service (MBMS)\".\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions of terms, symbols and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tTerms",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the terms given in TR 21.905 [1] and the following apply. A term defined in the present document takes precedence over the definition of the same term, if any, in TR 21.905 [1].\nFor the purposes of the present document, the terms and definitions given in TS 23.434 [2] apply.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tSymbols",
                    "description": "",
                    "summary": "",
                    "text_content": "Void.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.3\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in TR 21.905 [1] and the following apply. An abbreviation defined in the present document takes precedence over the definition of the same abbreviation, if any, in TR 21.905 [1].\nSEAL\tService Enabler Architecture Layer for Verticals\nSIM-C\tSEAL Identity Management Client\nSIM-S\tSEAL Identity Management Server\nSKM-C\tSEAL-Key Management Client\nSKM-S\tSEAL Key Management Server\nVAL\tVertical Application Layer\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tSEAL security requirements",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tVAL user authentication and authorization",
                    "description": "",
                    "summary": "",
                    "text_content": "[SEAL-SEC-4.1-a] All users of the VAL Service shall be authenticated.\n[SEAL-SEC-4.1-b] The VAL Client and the VAL Server shall mutually authenticate each other prior to providing the VAL UE with the VAL Service User profile and access to user-specific services.\n[SEAL-SEC-4.1-c] The transmission of configuration data and user profile data between an authorized VAL server in the network and the VAL UE shall be confidentiality protected, integrity protected and protected from replays.\n[SEAL-SEC-4.1-d] The VAL service should take measures to detect and mitigate DoS attacks to minimize the impact on the network and on VAL users.\n[SEAL-SEC-4.1-e] The VAL service shall provide a means to support confidentiality of VAL user identities.\n[SEAL-SEC-4.1-f] The VAL service shall provide a means to support confidentiality of VAL signalling.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.2\tInter-domain",
                    "description": "",
                    "summary": "",
                    "text_content": "[SEAL-SEC-4.2-a] VAL systems should take measures to protect themselves from external attacks at the system border.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "5\tProcedures",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "5.0\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The security procedures in this clause also applies to SEALDD as specified in TS 23.433 [30]. In the SEALDD scenario, the SEAL client, SEAL server and SEAL service are replaced by the SEALDD client, SEALDD server and SEALDD service, respectively.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.1\tSecurity for the SEAL interfaces",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.1.1\tSecurity for the application plane interfaces",
                            "text_content": "The security for the SEAL-UU, SEAL-C, SEAL-S and SEAL-E interfaces in this clause also applies to the corresponding SEALDD interfaces (i.e. SEALDD-UU, SEALDD-C, SEALDD-S and SEALDD-E) as specified in TS 23.433 [30].\nAs defined in TS 23.434 [2], the SEAL-X1 reference point, exists between the key management server and the group management server and uses HTTP-1 as defined in 3GPP TS 23.434 [2] for the transport and routing of security related information to the group management server. The SEAL-X1 shall be protected using HTTPS as defined in [3], [4] and [5]. The profile for TLS implementation and usage shall follow the provisions given in 3GPP TS 33.310 [6], annex E.\nThe SEAL-X2 reference point enables the group management server to interact with the location management server as defined in 3GPP TS 23.434 [2]. The SEAL-X2 shall be protected using HTTPS as defined in [3], [4] and [5] . The profile for TLS implementation and usage shall follow the provisions given in 3GPP TS 33.310 [6], annex E.\nIM-UU reference point is used between the identity management client and the identity management server. The security mechanism of SEAL-UU shall also be used for IM-UU.\nThe security established between the identity management server and the identity management client should be end-to-end. When this is not possible, then all sensitive material transferred between the identity management server and identity management client should be end-to-end protected with a mechanism that is out of scope of this document.\nThe KM-UU reference point is used between the Key Management Client and Key Management Server. The security mechanism of SEAL-UU shall also be used for KM-UU.\nThe KM-S reference point is a direct HTTP connection used between the VAL server and the key management server and shall be protected with the same mechanism used for the SEAL-S reference point.\nThe security established between the KM Server and the KM client should be end-to-end. When this is not possible, then all client related material transferred between the KM server and KM client should be end-to-end protected with a mechanism that is out of scope of the present document.\nA SEAL client interacts with a SEAL server over the generic SEAL-UU reference point as defined in TS 23.434 [2].. This interface shall be protected using HTTPS as defined in [3], [4] and [5] when using HTTP. The profile for TLS implementation and usage shall follow the provisions given in TS 33.310 [6], annex E.When using CoAP [18], the SEAL-UU between the SEAL client and the SEAL server shall be protected as defined in [19] (e.g., DTLS, TLS or OSCORE) with the additional security enhancements specified in [22]. When (D)TLS is used with CoAP, the (D)TLS and certificate profiling shall follow TS 33.210 [14] and TS 33.310 [6]. When OSCORE is used with CoAP, the mandatory to implement provisions given by RFC 8613 [23] shall be followed.\nThe VAL client interacts with VAL server over VAL-UU reference point as defined in TS 23.434 [2].\nNOTE:\tSecurity mechanism for the VAL-UU reference point is out of scope of present document.\nThe VAL client interacts with a SEAL client over the SEAL-C reference point as defined in TS 23.434 [2]. This reference point resides fully within the UE and therefore, security of this interface is left to the manufacturer and is out of scope for the present document.\nThe VAL server interacts with SEAL server over SEAL-S reference point as defined in TS 23.434 [2]. The protection of this interface shall be supported according to NDS/IP as specified in TS 33.210 [14].\nWhen CAPIF is not used, then TLS and OAuth 2.0 [3] shall be supported. When TLS is used, mutual authentication based on client and server certificates shall be performed between the SEAL server and VAL server using TLS. Certificate based authentication shall follow the profiles given in TS 33.310 [6], clause 6.1.3a. The identities in the end entity certificates shall be used for authentication and policy checks. The structure of the PKI used for the certificate is out of scope of the present document. TLS shall be used to provide integrity protection, replay protection and confidentiality protection for the interface between the SEAL server and the VAL server. Security profiles for TLS implementation and usage shall follow the provisions given in clause 6.2 of TS 33.210 [14]. After the authentication, the SEAL server determines whether the VAL server is authorized to send requests to the SEAL server. The SEAL server shall authorize the requests from VAL server using OAuth-based authorization mechanism, the specific authorization mechanisms shall follow the provisions given in RFC 6749 [3].\nWhen CAPIF is used as specified in TS 23.434 [2], the security mechanism for CAPIF specified in TS 33.122 [29] shall be followed. CAPIF core function shall choose the appropriate CAPIF-2e security method as defined in the clause 6.5.2 in TS 33.122 [29] for mutual authentication and protection of the SEAL server – VAL server interface. Before invoking the API exposed by the SEAL server, the VAL server as API invoker shall negotiate the security method (TLS-PSK, PKI or TLS with OAuth token) with CAPIF core function and ensure the SEAL server has information to authenticate the VAL server.\nA SEAL server interacts with another SEAL server over SEAL-E reference point as defined in TS 23.434 [2]. The protection of this interface shall be supported according to NDS/IP as specified in TS 33.210 [14].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.2\tSecurity for the Signalling control plane interfaces",
                            "text_content": "In order to authenticate the HTTP-1 reference point, authentication mechanisms shall be performed between the HTTP client and VAL UE using either certificate based authentication or pre-shared key based authentication. Certificate based authentication shall follow in annex B of 3GPP TS 33.222 [15], and the profiles given in 3GPP TS 33.310 [6]. The usage of pre-shared key based ciphersuites is specified in the TLS profile given in 3GPP TS 33.310 [6], annex E.\nThe HTTP-1 reference point exists between the VAL UE and the HTTP proxy. The HTTP-2 exists between the HTTP proxy and HTTP server. The HTTP-3 reference point exists between the HTTP proxies in different networks. The HTTP interfaces shall be protected using TLS. The profile for TLS implementation and usage shall follow the provisions given in 3GPP TS 33.310 [6], annex E.\nSecurity mechanisms to be used to secure the LWP interfaces depend on the realization of the interfaces. The Annex B in the present document defines security mechanism for the realizations of LWP defined in Annex C of TS 23.434 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.3\tSecurity for the network domain interfaces",
                            "text_content": "A VAL UE shall perform the authentication and security mechanisms as specified in 3GPP TS 33.501 [16] for 5G network access security.\nTo ensure security of the interfaces between network entities within a trusted domain and between trusted domains, 3GPP TS 33.210 [14] shall be applied to secure signalling messages on the reference points unless specified otherwise. SEG as specified in 3GPP TS 33.210 [14] may be used in the trusted domain to terminate the IPsec tunnel.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.4\tSecurity for the network domain interfaces in EPS",
                            "text_content": "A VAL UE shall perform the authentication and security mechanisms as specified in TS 33.401 [31] for LTE network access security.\nTo ensure security of the interfaces between network entities within a trusted domain and between trusted domains, TS 33.210 [14] shall be applied to secure signalling messages on the reference points unless specified otherwise. SEG as specified in TS 33.210 [14] may be used in the trusted domain to terminate the IPsec tunnel.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.2\tUser authentication and authorization",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.2.1\tVAL user authentication",
                            "text_content": "Figure 5.2.3-1 shows the Identity Management functional model which consists of the SEAL Identity Management Server (SIM-S) and SEAL Identity Management Client (SIM-C) of the UE. The IM-UU reference point between the SIM-S and SIM-C shall provide the interface for user authentication and shall support OpenID Connect 1.0 [5] and OAuth 2.0 [9, 10] when using HTTPS to obtain an access token for the VAL UE.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.2\tSEAL service authorization",
                            "text_content": "SEAL Service Authorization procedure shall validate the VAL user to access the SEAL services. In order to gain access to SEAL services, the SEAL client shall present an access token to the SEAL server for each service of interest. If the access token is valid, then the client shall be granted to use the service.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.3\tIdentity management functional model",
                            "text_content": "The SEAL Identity Management Server (SIM-S) and the SEAL Identity Management Client (SIM-C) provide the endpoints for VAL user authentication as shown in the SEAL Identity Management functional model in figure 5.2.3-1.\nThe reference point IM-UU utilizes Uu reference point as described in 3GPP TS 23.401 [7] and 3GPP TS 23.501 [8]. IM-UU shall support OpenID Connect 1.0 [5] and OAuth 2.0 [9] for VAL user authentication when using HTTPS.\nFigure 5.2.3-1 illustrates the functional model for SEAL Identity Management, showcasing the various components involved in managing identities within a secure environment. The figure highlights the Identity Provider (IdP), Service Provider (SP), and the Federated Identity Management (FIM) system, emphasizing the role of Attribute Exchange (AE) in facilitating secure authentication and authorization processes. The model emphasizes the importance of privacy and security measures, such as encryption and access controls, to ensure the integrity and confidentiality of user identities.\nFigure 5.2.3-1: Functional model for SEAL Identity Management\nIn order to support VAL user authentication, the SIM-S shall be provisioned with the VAL user ID and VAL service IDs (usage of VAL user ID and VAL service ID is described in clause 7 of TS 23.434 [2]). A mapping between the VAL user ID and VAL service ID(s) shall be created and maintained in the SIM-S. When a VAL user wishes to authenticate for the VAL services, the VAL user ID and credentials are provided via the UE Identity management client to the SIM-S as per OpenID Connect 1.0 [5] when using HTTPS. The SIM-S receives and shall verify the VAL user ID and credentials. If verification is successful, then the SIM-S returns an ID token, refresh token and access token to the UE Identity management client. The SIM-C shall learn the user's VAL service ID(s) from the ID token. Table 5.2.3-1 shows the SEAL specific tokens and their usage. These tokens are further defined in clause A.2.\nTable 5.2.3-1: VAL UE authentication token\n\nTo support the VAL service identity functional model, the VAL service ID(s):\n-\tShall be provisioned into the SEAL Identity management database and mapped to VAL UE IDs.\n-\tShall be provisioned into the SEAL Key management server (SKM-S) and mapped to UE specific key material.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 5.2.3-1: VAL UE authentication token",
                                    "table number": 3,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "5.2.4\tAuthentication framework",
                            "text_content": "Figure 5.2.4-1 describes the VAL Authentication Framework using the OpenID Connect protocol. when using HTTPS It describes the steps by which a VAL UE authenticates to the SIM-S, resulting in a set of credentials delivered to the UE uniquely identifying the VAL service ID(s). The authentication framework supports extensible user authentication solutions based on the VAL service provider policy (shown as step 3). User authentication methods in support of step 3 (e.g. biometrics, secureID, etc.) are possible but not defined here.\nFigure 5.2.4-1 illustrates the OpenID Connect (OIDC) flow supporting VAL user authentication, showcasing the process of user authentication through a series of steps. The figure begins with the user initiating the authentication process, which involves the user's client application sending a request to the authorization server. The server then checks the user's credentials and, if valid, redirects the user's browser to the authorization endpoint. The user's browser then proceeds to the login page, where they enter their credentials and submit the form. The authorization server then sends a redirect response to the user's browser, which then redirects the user back to the client application. The client application then validates the user's credentials and, if successful, redirects the user to the requested resource. The figure also includes a visual representation of the OAuth 2.0 authorization code flow, which is used to obtain an access token from the authorization server.\nFigure 5.2.4-1: OpenID Connect (OIDC) flow supporting VAL user authentication\nStep 1:\tVAL UE establishes a secure tunnel with the SIM-S.\nStep 2:\tVAL UE sends an OpenID Connect Authentication Request to the SIM-S. The request may contain an indication of authentication methods supported by the UE.\nStep 3: User Authentication is performed between VAL UE and the SIM-S.\nNOTE:\tThe primary credentials for user authentication (e.g. biometrics, secureID, OTP, username/password) are based on VAL service provider policy. The method chosen by the VAL service provider for authentication and authorization is neither defined nor limited by the present document, it depends on the Vertical services and authentication and authorization methods supported by it.\nStep 4:\tSIM-S sends an OpenID Connect Authentication Response to the UE containing an authorization code.\nStep 5:\tUE sends an OpenID Connect Token Request to the SIM-S, passing the authorization code.\nStep 6:\tSIM-S sends an OpenID Connect Token Response to the UE containing an ID token and an access token (each which uniquely identify the user of the VAL service or key management service). The ID token is consumed by the UE to personalize the VAL client for the VAL user, and the access token is used by the UE to communicate and authorize the identity of the VAL user to the VAL server(s) and the VAL services.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.5\tAuthorization framework",
                            "text_content": "Authorization framework when using HTTP is shown in figure 5.2.5-1. A secure HTTP tunnel using HTTPS between VAL UE and VAL server shall be established before VAL service authorization. Subsequent VAL service authorization messaging make use of this tunnel. The service clients in the VAL UE present the access tokens to the VAL server over HTTP. The VAL server authorizes the user for the requested services only if the access token is valid. The procedures may be repeated as necessary to obtain additional VAL user authorizations.\nFigure 5.2.5-1 illustrates the process of User Service Authorization (USA) within a Voice over LTE (VoLTE) system. The figure depicts the interaction between the Voice Application Server (VAS) and the Voice over IP (VoIP) Core Network Gateway (NCG). The VAS is responsible for managing the authorization of user services, while the NCG facilitates the connection between the VoLTE network and the VoIP network. The figure highlights the importance of secure and efficient authorization processes in ensuring a smooth and reliable communication experience for VoLTE users.\nFigure 5.2.5-1: VAL User Service Authorization\nAfter the VAL UE establishing a secure connection with the VAL server, the VAL UE sends an HTTP message containing the access token to the VAL server where service authorization is requested. The VAL server receives the message and validates the access token. If the access token is valid, The VAL server positively acknowledges the request. The VAL server may provide service related information to the VAL UE at this time.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.6\tVAL service authorization",
                            "text_content": "The VAL service authorization procedure shall validate the VAL user authorized to access the VAL services.  In order to gain access to VAL services, the VAL client shall present an access token to the VAL server for each VAL service of interest (see clause 5.2.5). If the access token is valid, then the VAL client shall be granted use of the requested VAL service.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.3\tSEAL key management procedure",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.3.1\tGeneral",
                            "text_content": "To enable security for VAL services, a SEAL KM client (located in either a VAL UE or VAL server) may request key material applicable to a particular VAL service, VAL client or user.\nPrior to making a key management request to the SEAL KMS (SKM-S), the VAL client or VAL user shall be authenticated by the SEAL identity management service (clause 5.2). In addition, secure connections shall be established between the SEAL client and the SKM-S (reference point KM-UU) and the VAL server and the SKM-S (reference point KM-S) prior to any associated key management requests.\nAs a result of the SEAL identity management authentication procedure, an access token scoped for key management services is provisioned to the SEAL UE. This access token is provided with each and every key management request to the SKM-S.\nA VAL server is provisioned with an access token scoped for SEAL key management services and is provided with each and every key management request to the SKM-S. The method for provisioning this access token into the VAL server is out of scope of the present document.\nFigure 5.3.1-1 shows the SEAL key management procedure. A SKM client may send a SEAL KM Request message to the SKM-S. The SKM-S validates and processes the request and responds with a SEAL KM Response message. The response contains key management material specific to the SEAL service or the VAL server request, or alternatively, an error code if the SKM-S encounters a failure condition.\nFigure 5.3.1-1 illustrates the key management procedure in a Secure Element Architecture (SEA) for a 5G network. The figure outlines the process of key generation, distribution, and revocation, emphasizing the secure exchange of cryptographic keys between the network core and the user equipment (UE). Key components include the Key Management Center (KMC), the UE, and the Security Support Package (SSP). The figure highlights the importance of secure key management in maintaining the confidentiality and integrity of data transmitted in a 5G network.\nFigure 5.3.1-1: SEAL key management procedure\nThe procedure in figure 5.3.1-1 is described here:\n1.\tThe SKM-C establishes a secure connection, using the mechanism specified in clause 5.1.1.4, to the SKM-S. Steps 2 and 3 are within this secure connection.\n2.\tThe SKM-C sends a SEAL KM Request message to the SKM-S. The request contains the authorization credentials obtained during authentication and message content specified in clause 5.3.2.\n3.\tThe SKM-S authorizes the request and if valid, sends a SEAL KM Response message containing the requested key material (or error code) as specified in clause 5.3.3.\nAs a successful result of this procedure, the VAL UE or VAL Server has securely obtained service specific key material for use within the VAL system.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.3.2\tSEAL KM Request message",
                            "text_content": "A SKM-C may send a SEAL KM Request message to the SKM-S. This request shall be protected (using the mechanism specified in clause 5.1.1.4) and shall contain the access token acquired during the SEAL identity management authentication procedure (clause 5.2).\nThe content of the SEAL KM Request is shown in table 5.3.2-1.\nTable 5.3.2-1: Contents of a SEAL KM Request\n\nThe identities listed in table 5.3.2-1 map to SEAL identities defined in 3GPP TS 23.434 [2]. Namely, the ServiceID maps to the VAL service identity (VAL service ID), the ClientID maps to the VAL client or client on the VAL server, the DeviceID maps to the VAL UE identity (VAL UE ID), and the UserID maps to the VAL user identity (VAL user ID).\nThe 'Version' field identifies the version of the SEAL KM Request message.  The current version is defined as \"1.0.0\".\nThe 'Date/Time' field is used primarily as an anti-replay mechanism for SEAL key management requests and responses.  If the 'Date/Time' field is significantly out of range (more than a few seconds), this could indicate a replay attack.\nUpon receipt of a SEAL KM Request message, the SKM-S shall verify that:\n-\tthe access token is valid;\n-\tthe signature is valid;\n-\tthe SKmsUri is the SKM-S URI of the target SEAL KMS where the key information is stored; and\n-\tthe Date/Time is within a recent time window (e.g. 5 seconds).\nIf valid, the request is accepted and processed by the SKM-S. A standalone ServiceID, or a ServiceID in combination with a ClientID, DeviceID, or UserID may be present in the SEAL KM Request message. This combination may be used by the KMS to identify a specific key material record. Each key management record may be unique to a VAL application or VAL service. The format and content of a key management record is defined and securely provisioned into the SEAL KMS by the VAL application or VAL service owner/operator.\nA SEAL KM client (SKM-C) located in the VAL server may use the SEAL key provisioning procedure described in clause 5.8 to provision the VAL service or VAL application key material into the KMS.\nThe method used to organize, manage, and maintain VAL service or VAL application key material within the KMS is out of scope of the present document.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 5.3.2-1: Contents of a SEAL KM Request",
                                    "table number": 4,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "5.3.3\tSEAL KM Response message",
                            "text_content": "The SEAL KM Response message is sent to the SKM-C in response to a SEAL KM Request message.\nA successful SEAL key management procedure results in a SEAL KM Response message, which typically includes a payload containing key management information uniquely applicable to the requested service, client or user. If an error occurs, an error code may be returned in the SEAL KM Response message.\nThe SEAL KM Response message shall be protected in transit using the mechanism specified in clause 5.1.1.4. The Payload within a SEAL KM Response message may be protected end-to-end between the SKM-C and SKM-S depending on the applicability of the underlying VAL service making the request. The method for securing a Payload end-to-end between the SKM-C and the SKM-S is outside the scope of the present document. The key material contents provided in a Payload are defined by the underlying VAL service and are outside the scope of the present document.\nThe content of a SEAL KM Response message is shown in table 5.3.3-1.\nTable 5.3.3-1: Contents of a SEAL KM Response message\n\nThe identities listed in table 5.3.3-1 are described in clause 5.3.2.\nIf the SKM-S does not encounter an error during processing of the SEAL KM Request message, the SEAL KM Response message carries a set of security parameters contained in the \"Payload\" field.\nIf the SKM-S encounters an error while processing the SEAL KM Request message, an error value described in table 5.3.3-2 shall be returned in the 'ErrorCode' field of the SEAL KM Response message and the 'Payload' field shall not be present.\nIn the event of an error, the user and/or the operator of the VAL service, UE, or client may be notified.\nTable 5.3.3-2: 'ErrorCode' values\n\nThe selection of the key material returned in the Payload of a SEAL KM Response message is determined by the ServiceID and (optionally) the ClientID, DeviceID or UserID. The combination of the ServiceID with the ClientID, DeviceID or UserID allows the VAL service to request a more specific set of key material.\nFor example, if a ClientID is included in the SEAL KM Request message, the KMS may return a Payload that contains a set of client specific key material applicable to the ClientID within the requesting VAL service (ServiceID). If the DeviceID is included, the KMS may return a Payload that contains device specific key material applicable to the DeviceID within the requesting VAL service (ServiceID). If the UserID is included, the KMS may return a Payload that contains user specific key material applicable to that UserID within the requesting VAL service (ServiceID).\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 5.3.3-1: Contents of a SEAL KM Response message",
                                    "table number": 5,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 5.3.3-2: 'ErrorCode' values",
                                    "table number": 6,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                },
                {
                    "title": "5.4\tSecurity procedures for interconnection",
                    "description": "",
                    "summary": "",
                    "text_content": "Interconnection between a primary VAL system and a partner VAL system is specified in 3GPP TS 23.434 [2].\nA VAL client shall perform user authorization only to VAL servers within their own VAL system. When communication is required by a VAL client from another interconnected VAL system, user authorization takes place in the serving VAL system and follows the VAL user service authorization procedures as defined in clause 5.2.\nVAL systems should protect themselves at the system border from external attackers.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.5\tAuthentication and authorization of devices over LWP interfaces",
                    "description": "",
                    "summary": "",
                    "text_content": "Authentication and authorization mechanism for devices over LWP interfaces depends on the application protocol. The Annex B in the present document defines authentication and authorization procedures for the realizations of application protocols defined in Annex C of TS 23.434 [2].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.6\tSecurity for inter-system switching between 5G and LTE",
                    "description": "",
                    "summary": "",
                    "text_content": "During inter-system mobility from 5G MBS session to LTE eMBMS/unicast bearer or from LTE eMBMS to 5G MBS sessions (either broadcast or multicast), when the target system is EPS, the security protection specified in TS 33.246 [32] applies and when the target system is 5GS, the security protection specified in TS 33.501 [16] applies.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.7\tSecurity for  VAL services over 5GS supporting EPS interworking",
                    "description": "",
                    "summary": "",
                    "text_content": "The VAL server consumes the network resource management services from the NRM server. For the VAL services over 5GS supporting EPS interworking, the security mechanisms as specified in TS 33.501 [16] are followed.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.8\tSEAL key provisioning procedure",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.8.1\tGeneral",
                            "text_content": "The SEAL key provisioning procedure may be used by a SEAL KM client (SKM-C) located in a VAL server to provision key information applicable to a particular VAL service, VAL client, VAL device, or VAL user.\nA VAL server shall be provisioned with an access token scoped for SEAL key provisioning services.  The method for provisioning this access token into the VAL server is out of scope of the present document.  The VAL server using the SKM-C shall provide this access token with every key provisioning request made to the SKM-S. In addition, a secure connection shall be established between the SKM-C and the SKM-S prior to any associated key provisioning requests.\nThe KMS shall authenticate and validate the presented access token (i.e. verifying that the SKeyProv parameter defined in clause A.2.2.3 is provided and correct), and shall validate that the requesting SKM-C has the authorization to perform key provisioning.\nFigure 5.8.1-1 shows the SEAL key provisioning procedure. A SKM-C may send a SEAL Key Provisioning Request message to the SKM-S. The SKM-S shall validate and process the request and respond with a SEAL KP Response message. The request contains key information specific to a particular VAL service, VAL client, VAL device, or VAL user.  The SEAL KP Response message provides either an acknowledgement or an error code (if the SKM-S encounters a failure condition).\nFigure 5.8.1-1 illustrates the step-by-step key provisioning procedure in a Secure Element Architecture (SEA) for a telecommunications system. The figure outlines the process, starting with the generation of a key pair by the Key Management Center (KMC) and the subsequent distribution of the public key to the SEA. The SEA then uses the public key to encrypt the private key, which is then stored securely within the Secure Element (SE). This process ensures that the private key remains protected and is accessible only to authorized users, maintaining the integrity and security of the system.\nFigure 5.8.1-1: SEAL key provisioning procedure\nThe procedure in figure 5.8.1-1 is described here:\n1.\tThe SKM-C establishes a secure connection to the SKM-S using the mechanism specified in clause 5.1.1.4. Steps 2 and 3 are within this secure connection.\n2.\tThe SKM-C sends a SEAL KP Request message to the SKM-S. The request contains the authorization credentials (i.e. access token) and message content specified in clause 5.8.2.\n3.\tThe SKM-S validates the credentials and verifies that the requesting SKM-C is an authorized key provisioning client.  Upon authorization, the SKM-S processes the request and returns a SEAL KP Response message to the SKM-C containing an acknowledgement (or error code) as specified in clause 5.8.3.\nAs a successful result of this procedure, the VAL Server has securely provisioned specific key information for use within the VAL system for a particular VAL service, VAL device, VAL client, or VAL user.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.8.2\tSEAL KP Request message",
                            "text_content": "An authorized SKM-C may send a SEAL KP Request message to the SKM-S. This request shall be protected (using the mechanism specified in clause 5.1.1.4) and shall contain the access token scoped for SEAL key provisioning (clause A.2).\nThe content of the SEAL KM Request is shown in table 5.8.2-1.\nTable 5.8.2-1: Contents of a SEAL KP Request\n\nThe identities listed in table 5.8.2-1 map to SEAL identities defined in 3GPP TS 23.434 [2], and identify the endpoints targets of the key information (Payload).  Namely, the ServiceID maps to the VAL service identity (VAL service ID), the ClientID maps to the VAL client or client on the VAL server, the DeviceID maps to the VAL UE identity (VAL UE ID), and the UserID maps to the VAL user identity (VAL user ID).\nThe 'Version' field identifies the version of the SEAL KP Request message.  The current version is defined as \"1.0.0\".\nThe 'Date/Time' field is primarily as an anti-replay mechanism for SEAL key provisioning requests and responses.  If the 'Date/Time' field is significantly out of range (more than a few seconds), this could indicate a replay attack.\nUpon receipt of a SEAL KP Request message, the SKM-S shall verify that:\n-\tthe access token is valid and contains the SKeyProv field;\n-\tthe signature is valid;\n-    the requesting SKM-C is authorized for key provisioning;\n-\tthe SKmsUri is the SKM-S URI of the target SEAL KMS where the key information shall be stored; and\n-\tthe Date/Time is within a recent time window (e.g. 5 seconds).\nIf valid, the request is accepted and processed by the SKM-S. A standalone ServiceID, or a ServiceID in combination with a ClientID, DeviceID, or UserID may be present in the SEAL KP Request message. This combination may be used by the KMS to map the key material in the Payload with a specific client, device, or user.  The format and content of a key provisioning Payload is defined by the VAL application or VAL service owner/operator and is out of scope of this document.  For example, such content may include VAL specific keys, additional tokens, credentials, or other important security related information.\nThe method used to organize, manage, and maintain VAL service or VAL application key material within the KMS is out of scope of the present document.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 5.8.2-1: Contents of a SEAL KP Request",
                                    "table number": 7,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "5.8.3\tSEAL KP Response message",
                            "text_content": "The SEAL KP Response message is sent by the SKM-S to the SKM-C in response to a SEAL KP Request message.\nA successful SEAL key provisioning procedure results in the KMS sending a SEAL KP Response message containing an acknowledgement indicating the KMS successfully received and processed the SEAL KP Request message.  If the KMS is unable to successfully process the SEAL KP Request message, the KMS may instead return an error code in the SEAL KP Response message.\nThe SEAL KP Response message shall be protected in transit using the mechanism specified in clause 5.1.1.4.\nThe content of a SEAL KP Response message is shown in table 5.8.3-1.\nTable 5.8.3-1: Contents of a SEAL KP Response message\n\nThe identities listed in table 5.8.3-1 are described in clause 5.8.2.\nIf the SKM-S encounters an error while processing the SEAL KP Request message, an error value described in table 5.8.3-2 should be returned in the 'ErrorCode' field of the SEAL KP Response message.\nIn the event of an error, the user and/or the operator of the VAL service may be notified.\nTable 5.8.3-2: 'ErrorCode' values\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 5.8.3-1: Contents of a SEAL KP Response message",
                                    "table number": 8,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 5.8.3-2: 'ErrorCode' values",
                                    "table number": 9,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "A.1\tGeneral",
            "description": "The information in this annex provides a normative description of the Authentication and Authorization framework based on the OpenID Connect 1.0 standard. Characterization of the ID token, access token, how to obtain tokens, how to validate tokens, and how to use the refresh token is explained.\nThe OpenID Connect 1.0 standard provides the source of the information contained in this annex. This annex profiles the OpenID Connect standard and includes the ID token and the access token, as well as the definition of VAL specific scopes for key management, VAL services, configuration management, and group management. This profile is compliant with OpenID Connect.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "A.2\tVAL tokens",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "A.2.1\tID token",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "A.2.1.1\tGeneral",
                            "text_content": "The ID Token shall be a JSON Web Token (JWT) and contain the following standard and VAL token claims. Token claims provide information pertaining to the authentication of the VAL client by the SIM-S as well as additional claims. The following clause profiles the required standard and VAL claims for the VAL Connect profile.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "A.2.1.2\tStandard claims",
                            "text_content": "These standard claims are defined by the OpenID Connect 1.0 specification and are REQUIRED for VAL implementation. Other claims defined by OpenID Connect are optional. The standards-based claims for a VAL Connect ID token are shown in table A.2.1.2-1.\nTable A.2.1.2-1: ID token standard claims\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table A.2.1.2-1: ID token standard claims",
                                    "table number": 10,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "A.2.1.3\tVAL claims",
                            "text_content": "The VAL Connect profile extends the OpenID Connect standard claims with the additional claims based on the VAL service.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "A.2.2\tAccess token",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "A.2.2.1\tIntroduction",
                            "text_content": "The access token is opaque to VAL clients and is consumed by the VAL resource servers. The access token shall be encoded as a JSON Web Token as defined in IETF RFC 7797 [11]. The access token shall include the JSON web digital signature profile as defined in IETF RFC 7515 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "A.2.2.2\tStandard claims",
                            "text_content": "VAL access tokens shall convey the following standards-based claims as defined in IETF RFC 7662 [13].\nTable A.2.2.2-1: Access token standard claims\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table A.2.2.2-1: Access token standard claims",
                                    "table number": 11,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "A.2.2.3\tVAL claims",
                            "text_content": "The VAL profile extends the standard claims defined in IETF RFC 7662 [13] with the additional claims based on the VAL service and those shown in table A.2.2.3-1.\nTable A.2.2.3-1: Access token VAL claims\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table A.2.2.3-1: Access token VAL claims",
                                    "table number": 12,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "A.3\tSIM-C registration",
            "description": "Before a SIM-C can obtain ID tokens and access tokens (required to access VAL resource servers) it shall first be registered with the SIM-S of the service provider as required by OpenID Connect 1.0. The method by which this is done is not specified by this profile. For native SIM-C, the following information shall be registered:\n-\tThe client is issued a client identifier. The client identifier represents the client's registration with the authorization server, and enables the SIM-S to reference parameters associated with that client's registration when being requested for an access token by the SIM-C.\n-\tRegistration of the client's redirect URIs.\nOther information about the SIM-C such as (for example): application name, website, description, logo image, legal terms to be consented to, may optionally be registered.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "A.4\tObtaining tokens",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "A.4.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "Once a SIM-C has been successfully registered with the SIM-S of the VAL service provider, the SIM-C may request ID tokens and access tokens (as required to access VAL service servers). Only native SIM-C are defined here. The exact method in which a SIM-C requests the access token depends upon the client profile. The SIM-C profiles, along with steps required from them to obtain OAuth access tokens, are explained below.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.4.2\tNative SIM-C",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "A.4.2.1\tGeneral",
                            "text_content": "This conforms to the Native Application profile of OAuth 2.0 as per IETF RFC 6749 [3].\nSIM-C fitting the Native application profile utilize the authorization code grant type with the PKCE extension for enhanced security as shown in figure A.4.2.1-1.\nFigure A.4.2.1-1 illustrates the authorization code flow in a mobile application, detailing the process of obtaining an authorization code from a server. The flow begins with the user initiating a request, which is then processed by the application's backend server. The server responds with an authorization code, which is then securely transmitted back to the application. The flow concludes with the application using the authorization code to access protected resources on behalf of the user. Key components include the client application, backend server, and secure communication channels. The diagram emphasizes the importance of secure communication and the use of authorization codes to protect user data.\nFigure A.4.2.1-1: Authorization Code flow\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "A.4.2.2\tAuthentication request",
                            "text_content": "As described in OpenID Connect 1.0, the SIM-C constructs a request URI by adding the following parameters to the query component of the authorization endpoint's URI using the \"application/x-www-form-urlencoded\" format, redirecting the user's web browser to the authorization endpoint of the SIM-S. The standard parameters shown in table A.4.2.2-1 are required by this Connect profile. Other parameters defined by the OpenID Connect specification are optional.\nTable A.4.2.2-1: Authentication Request standard required parameters\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table A.4.2.2-1: Authentication Request standard required parameters",
                                    "table number": 13,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "A.4.2.3\tAuthentication response",
                            "text_content": "The authorization endpoint running on the SIM-S issues an authorization code and delivers it to the SIM-C. The authorization code is used by the SIM-C to obtain an ID token, access token and refresh token from the SIM-S. The authorization code is added to the query component of the redirection URI using the \"application/x-www-form-urlencoded\" format. The authorization code standard parameters are shown in table A.4.2.3-1.\nTable A.4.2.3-1: Authentication Response standard required parameters\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table A.4.2.3-1: Authentication Response standard required parameters",
                                    "table number": 14,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "A.4.2.4\tAccess token request",
                            "text_content": "In order to exchange the authorization code for an ID token, access token and refresh token, the SIM-C makes a request to the authorization server's token endpoint by sending the following parameters using the \"application/x-www-form-urlencoded\" format, with a character encoding of UTF-8 in the HTTP request entity-body. Note that client authentication is REQUIRED for native applications (using PKCE) in order to exchange the authorization code for an access token. Assuming that client secrets are used, the client secret is sent in the HTTP Authorization Header. The access token request standard parameters are shown in table A.4.2.4-1.\nTable A.4.2.4-1: Access token request standard required parameters\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table A.4.2.4-1: Access token request standard required parameters",
                                    "table number": 15,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "A.4.2.5\tAccess token response",
                            "text_content": "If the access token request is valid and authorized, the SIM-S returns an ID token, access token and refresh token to the SIM-C in an access token response message; otherwise it will return an error.\nThe access token response standard parameters are shown in table A.4.2.5-1.\nTable A.4.2.5-1: Access token response standard parameters\n\nThe SIM-C may now validate the user with the ID token and configure itself for the user (e.g. by extracting the VAL service ID from the ID Token). The SIM-C then uses the access token to make authorized requests to the SIM resource servers on behalf of the end user.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table A.4.2.5-1: Access token response standard parameters",
                                    "table number": 16,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "A.5\tRefreshing an access token",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "A.5.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "To protect against leakage or other compromise, access token lifetimes are typically short lived (though it is ultimately a matter of security policy & configuration by the service provider). Some client types can be issued longer-lived refresh tokens, which enable them to refresh the access token and avoid having to prompt the user for authentication again when the access token expires. Refresh tokens are available only to clients utilizing the authorization code grant type. Figure A.5.1-1 shows how Native SIM-C can use the refresh token as a grant type to obtain new access tokens.\nFigure A.5.1-1 illustrates the process of requesting a new access token in a network security protocol. The figure depicts the interaction between the client and the authorization server, highlighting the exchange of JSON Web Tokens (JWT) for secure communication. The diagram emphasizes the importance of token validation and refresh mechanisms to maintain session integrity and prevent unauthorized access.\nFigure A.5.1-1: Requesting a new access token\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.5.2\tAccess token request",
                    "description": "",
                    "summary": "",
                    "text_content": "To obtain an access token from the SIM-S using a refresh token, the SIM-C makes an access token request to the token endpoint of the SIM-S. The SIM-C does this by adding the following parameters using the \"application/x-www-form-urlencoded\" format, with a character encoding of UTF-8 in the HTTP request entity-body. The access token request standard parameters are shown in table A.5.2-1.\nTable A.5.2-1: Access token request standard required parameters\n\nIf the SIM-C was provided with client credentials by the SIM-S, then the client shall authenticate with the token endpoint of the SIM-S utilizing the client credential (shared secret or public-private key pair) established during the client registration phase.\n",
                    "tables": [
                        {
                            "description": "Table A.5.2-1: Access token request standard required parameters",
                            "table number": 17,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.5.3\tAccess token response",
                    "description": "",
                    "summary": "",
                    "text_content": "In response to the access token request (above) the token endpoint on the SIM-S will return an access token to the SIM-C, and optionally another refresh token in an access token response message.\nThe access token response standard parameters are shown in table A.5.3-1.\nTable A.5.3-1: Access token response standard parameters\n\nIt is possible to configure the SIM-S to confirm that the user account is still valid each time the refresh token is presented, and to revoke the refresh token if not. This security practice is RECOMMENDED.\n",
                    "tables": [
                        {
                            "description": "Table A.5.3-1: Access token response standard parameters",
                            "table number": 18,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "A.6\tUsing the token to access VAL resource servers",
            "description": "Connect for VAL shall initially support the bearer access token type. Access tokens of type \"bearer\" shall be communicated from the VAL or SEAL Clients in UE to VAL resource servers by including the access token in the HTTP Authorization Header, per IETF RFC 6750 [4].\nThe access token is opaque to the VAL or SEAL Clients in UE, meaning that the client does not have any knowledge of the access token itself. The client will be given some metadata corresponding to the access token, such as its expiration time, so that it does not send an expired access token to VAL resource servers. If the access token is presented to a VAL resource server and the scope is invalid or the token is expired or revoked, the VAL resource server should return an error message indicating such to the VAL or SEAL Clients in UE.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "A.7\tToken validation",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "A.7.1\tID token validation",
                    "description": "",
                    "summary": "",
                    "text_content": "The VAL or SEAL Clients in UE shall validate the ID token as per clause 3.1.3.7 of the OpenID Connect 1.0 specification [5].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.7.2\tAccess token validation",
                    "description": "",
                    "summary": "",
                    "text_content": "VAL resource servers shall validate access tokens received from the VAL or SEAL Clients in UE according to IETF RFC 7797 [11].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "A.8\tToken revocation",
            "description": "In order to limit the time validity of a token, the \"exp\" and \"expires_in\" parameters may be used as a method of access token revocation. If either the \"exp\" or \"expires_in\" parameter is used as a method of access token revocation, then the following applies:\nWithin the standard claims of an access token, the \"exp\" parameter shall be used by the authorising server to determine whether or not the token is valid. If the current time is beyond the time specified by the \"exp\" parameter, the associated token shall no longer be considered valid and any requests made with an expired token shall be rejected by the authorising server.\nWithin the standard claims of an access token response, token exchange response or token response message, the \"expires_in\" parameter shall be used by the UE client(s) to determine validity of the associated token. If the current time is beyond the time specified by the \"expires_in\" parameter, the associated token shall no longer be considered valid and no client requests shall be made using the expired token. A refresh token may be used per clause A.5 to obtain a new access token.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "A.9\tSIM-S interface security",
            "description": "The support of Transport Layer Security (TLS) between the SIM-C in the VAL UE and the SIM-S is mandatory. The profile for TLS implementation and usage shall follow the provisions given in 3GPP TS 33.310 [6], annex E.\nIf PSK TLS based authentication is supported, the SIM-C in the VAL UE and the SIM-S shall support the TLS version, PSK ciphersuites and TLS Extensions as specified in the TLS profile given in 3GPP TS 33.310 [6], annex E. The usage of pre-shared key ciphersuites for TLS is specified in the TLS profile given in 3GPP TS 33.310 [6], annex E.\n\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "B.1\tGeneral",
            "description": "This annex specifies communication security, authentication and authorization mechanisms for protocol realizations of the light-weight protocol (LWP) in the signalling control plane.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "B.2\tCommunication security for CoAP",
            "description": "CoAP messages [18] shall be protected and deploy the security enhancements of [22]. When (D)TLS is used, the (D)TLS and certificate profiling shall follow TS 33.210 [14] and TS 33.310 [6]. When OSCORE is used, the mandatory to implement provisions given by RFC 8613 [23] shall be followed.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "B.3\tAuthentication and authorization mechanism on CoAP",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "B.3.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "When CoAP is used for the LWP, Authentication and authorization for Constrained Environments (ACE) using OAuth 2.0 Framework (ACE-OAuth) as specified in [19] shall be supported.\nFigure B.3.1-1 shows the functional model which consists of the SEAL Identity Management Server (SIM-S), SEAL Identity Management Client (SIM-C) and SEAL server. The IM-UU reference point between the SIM-S and the SIM-C and the SEAL-UU reference point between SEAL server and SIM-C shall support ACE-OAuth [19] and OAuth 2.0 [9] with COSE [20].\nFigure B.3.1-1 illustrates the functional model for the SEAL Identity management client, server, and SEAL server. The diagram showcases the interactions between these components, highlighting the authentication and authorization processes. Key elements include the client, server, and SEAL server, as well as the various communication channels and data flows. This model provides a comprehensive view of the system's architecture and the roles of each component in managing identities within the SEAL framework.\nFigure B.3.1-1: Functional model for SEAL Identity management client, server and SEAL server\nThe SIM-S, the SIM-C and a SEAL server respectively play the roles of the Authorization Server, the Client and the Resource Server in the ACE-OAuth framework.\nFor authentication of SIM-S, the security enhancements of CoAP specified in [22] shall be followed. When (D)TLS is used, the (D)TLS and certificate profiling shall follow TS 33.210 [14] and TS 33.310 [6]. When OSCORE is used, authentication shall be based on pre-shared secrets. The authentication method and credentials of the VAL-UE are out of scope of this specification.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.3.2\tVAL user authentication",
                    "description": "",
                    "summary": "",
                    "text_content": "VAL user authentication is executed by the SIM-S before providing access token for the VAL UE.\nNOTE 1:\tThe primary method and credentials for VAL user authentication are based on VAL service provider policy. The method chosen by the VAL service provider for authentication and authorization is neither defined nor limited by the present document.\nNOTE 2:\tVAL user may refer to the user or the device depending on the setting.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.3.3\tSEAL service authorization",
                    "description": "",
                    "summary": "",
                    "text_content": "SEAL Service Authorization procedure shall validate the VAL user to access the SEAL services. In order to gain access to SEAL services, the SEAL client shall present an access token to the SEAL server for each service of interest. If the access token is valid, then the client shall be granted to use the service.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.3.4\tAuthorization framework",
                    "description": "",
                    "summary": "",
                    "text_content": "Authorization framework is shown in figure B.3.4-1. The ACE-OAuth [19] framework is followed. The SIM-S and SIM-C shall perform mutual authentication as specified in B.3.1. After successful authentication, the SIM-C shall request and receive an access token from the SIM-S over CoAP as described in clause 5.8 of [19] indicated in steps 1 and 2 in the figure. Before providing the access token, SIM-S shall authorize the VAL UE for the requested service. The procedures may be repeated as necessary to obtain additional VAL UE authorizations.\nFigure B.3.4-1 illustrates the process of service authorization for a Value Added Licensed (VAL) User Equipment (UE) in a telecommunications network. The figure depicts the interaction between the UE, the Service Authorization and Management (SAM) entity, and the Network Element (NE) responsible for service provisioning. The UE initiates the authorization process by sending a request to the SAM, which then communicates with the NE to grant or deny the requested service. The NE's response is relayed back to the UE, indicating whether the service has been authorized or not. The figure emphasizes the importance of secure and efficient service authorization in maintaining network integrity and user satisfaction.\nFigure B.3.4-1: VAL UE Service Authorization\nAfter the VAL UE received an access token it shall establish a secure connection with the SEAL/VAL server as specified in B.2. The VAL UE shall send a CoAP message containing the access token to the SEAL/VAL server in a service authorization request as described in clause 5.10 of [19] indicated in steps 3 and 4 in the figure. On receiving the service authorization message, the SEAL/VAL server shall validate the access token. If the access token is valid, the SEAL/VAL server shall provide service-related information according to the rights granted to the VAL UE in response to subsequent requests indicated in steps 5 and 6.\nThe messages sent for the authorization shall be protected. When (D)TLS is used, the (D)TLS and certificate profiling shall in addition to [22] follow also TS 33.210 [14] and TS 33.310 [6]. When the VAL UE is authenticating directly to the SEAL/VAL server, then the DTLS or TLS profile of ACE [21,25] may be used. In order to authorize clients and protect communication across proxies, the OSCORE profile of ACE [24] shall be used.\nEditor's note: The references [21], [25] and [28] needs to be updated to refer the final version.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.3.5\tVAL service authorization",
                    "description": "",
                    "summary": "",
                    "text_content": "The VAL service authorization procedure shall validate the VAL user authorized to access the VAL services.  In order to gain access to VAL services, the VAL client shall present an access token to the VAL server for each VAL service of interest (see clause B.3.4). If the access token is valid, then the VAL client shall be granted use of the requested VAL service.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.3.6\tAccess token",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "B.3.6.1\tIntroduction",
                            "text_content": "The access token is opaque to VAL clients and is consumed by the VAL resource servers. The access token shall be encoded as a CBOR Web Token as defined in IETF RFC 8392 [26]. Depending on whether the CWT is signed, MACed or encrypted, the corresponding COSE object shall be used as defined in IETF RFC 8392 [26].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "B.3.6.2\tStandard claims",
                            "text_content": "VAL access tokens shall convey the following standards-based claims as specified in draft-ietf-ace-oauth-authz-46 [19].\nTable B.3.6.2-1: Access token standard claims\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table B.3.6.2-1: Access token standard claims",
                                    "table number": 19,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "B.3.6.3\tVAL claims",
                            "text_content": "The VAL profile extends the standard claims specified in draft-ietf-ace-oauth-authz-46 [19] with the additional claims based on the VAL service.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "B.3.7\tObtaining access tokens",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "B.3.7.1\tAccess token request",
                            "text_content": "In order to obtain an access token (and optionally a refresh token) the SEAL client makes a CoAP request to the authorization server's token endpoint by sending the following parameters using the \"application/ace+cbor\" Content-format, with a CBOR map in the CoAP payload. Note that mutual authentication is REQUIRED between SEAL client and SEAL server. The access token request standard parameters are shown in table B.3.7.1-1.\nTable B.3.7.1-1: Access token request standard required parameters\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table B.3.7.1-1: Access token request standard required parameters",
                                    "table number": 20,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "B.3.7.2\tAccess token response",
                            "text_content": "If the access token request is valid and authorized, the SEAL server returns an access token (and optionally a refresh token) to the SEAL client in an access token response message; otherwise, it will return an error.\nThe access token response standard parameters are shown in table B.3.7.2-1.\nTable B.3.7.2-1: Access token response standard parameters\n\nThe SEAL client may now use the access token to make protected and authorized requests to the SEAL server.\n\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table B.3.7.2-1: Access token response standard parameters",
                                    "table number": 21,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "",
                                    "table number": 22,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
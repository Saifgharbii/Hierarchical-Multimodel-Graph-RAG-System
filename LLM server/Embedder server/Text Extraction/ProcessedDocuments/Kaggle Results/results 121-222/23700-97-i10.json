{
    "document_name": "23700-97-i10.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Report has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\nIn the present document, modal verbs have the following meanings:\nshall\t\tindicates a mandatory requirement to do something\nshall not\tindicates an interdiction (prohibition) to do something\nThe constructions \"shall\" and \"shall not\" are confined to the context of normative provisions, and do not appear in Technical Reports.\nThe constructions \"must\" and \"must not\" are not used as substitutes for \"shall\" and \"shall not\". Their use is avoided insofar as possible, and they are not used in a normative context except in a direct citation from an external, referenced, non-3GPP document, or so as to maintain continuity of style when extending or modifying the provisions of such a referenced document.\nshould\t\tindicates a recommendation to do something\nshould not\tindicates a recommendation not to do something\nmay\t\tindicates permission to do something\nneed not\tindicates permission not to do something\nThe construction \"may not\" is ambiguous and is not used in normative elements. The unambiguous constructions \"might not\" or \"shall not\" are used instead, depending upon the meaning intended.\ncan\t\tindicates that something is possible\ncannot\t\tindicates that something is impossible\nThe constructions \"can\" and \"cannot\" are not substitutes for \"may\" and \"need not\".\nwill\t\tindicates that something is certain or expected to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nwill not\t\tindicates that something is certain or expected not to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nmight\tindicates a likelihood that something will happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nmight not\tindicates a likelihood that something will not happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nIn addition:\nis\t(or any other verb in the indicative mood) indicates a statement of fact\nis not\t(or any other negative verb in the indicative mood) indicates a statement of fact\nThe constructions \"is\" and \"is not\" do not indicate requirements.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document is a technical report which identifies SEAL functionality to support application capability exposure to general purpose servers or 3rd party IoT applications via IoT Platforms. Key issues and corresponding solutions necessary to ensure efficient use and deployment of IoT Platforms in the 5G network are included.\nThe study takes into consideration the existing work for Core Network exposure in 3GPP TS 23.502 [2] and provides recommendations for normative work.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[2]\t3GPP TS 23.502: \"Procedures for the 5G System; Stage 2\".\n[3]\t3GPP TR 23.503: \"Policy and charging control framework for the 5G System (5GS)\".\n[4]\t3GPP TR 22.101: \"Service aspects; Service principles\".\n[5]\t\t3GPP TS 29.522: \"5G System; Network Exposure Function Northbound APIs\"\n[6]\t3GPP TS 23.434: \"Service Enabler Architecture Layer for Verticals (SEAL); Functional architecture and information flows\"\n[7]\t3GPP TS 23.682: \"Architecture enhancements to facilitate communications with packet data networks and applications\"\n[8]\t3GPP TS 23.222: \"Functional architecture and information flows to support Common API Framework for 3GPP Northbound APIs; Stage 2\".\n[9]\t3GPP TR 23.700-98: \"Study on Enhanced architecture for enabling Edge Applications\".\n[10]\t3GPP TS 29.122: \" T8 reference point for Northbound APIs\".\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions of terms, symbols and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tTerms",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the terms given in 3GPP TR 21.905 [1] and the following apply. A term defined in the present document takes precedence over the definition of the same term, if any, in 3GPP TR 21.905 [1].\nInternet of Things (IoT): Network supporting interconnection of devices, machines, and low complexity entities.\nIoT Application: An application catering to one or more vertical domains which includes communication functionality for the Internet of Things.\nIoT Client: An entity that provides the client-side functionalities corresponding to a specific IoT Application.\nIoT Platform: An entity hosting a collection of services and enabling capabilities that supports IoT Applications.\nIoT Platform service: A generic name for a common service or enabling capability provided by an IoT Platform.\nIoT Platform Provider: A mobile network operator or a 3rd party service provider offering IoT Platform services to multiple 3rd party service providers or ASPs.\nIoT Server: An entity that provides the server side functionalities corresponding to a specific IoT Application.\nNOTE: The normative phase work will determine the mappings between these entities and SEAL entities.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tSymbols",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the following symbols apply:\n<symbol>\t<Explanation>\n\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.3\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in 3GPP TR 21.905 [1] and the following apply. An abbreviation defined in the present document takes precedence over the definition of the same abbreviation, if any, in 3GPP TR 21.905 [1].\nASM\tApplication Service Management\nASP\tApplication Service Provider\nBDT\tBackground Data Transfer\nCAPIF\tCommon API Framework for northbound APIs\nCIoT\tCellular IoT\nCP\tControl Plane\nCPP\tCommunication Patterns Parameters\nMIoT\tMassive IoT\nNEF\tNetwork Exposure Function\nNIDD\tNon-IP Data Delivery\nSEAL\tService Enablement Application Layer\nSCEF\tService Capability Exposure Function\nTAU\tTracking Area Update\nVAL\tVertical Application Layer\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tKey Issues",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tKey issue #1: Background Data Transfer negotiation",
                    "description": "",
                    "summary": "",
                    "text_content": "The cellular network provides background data transfer (BDT) capabilities which save network resources and reduce device energy consumption. The 5GS provides procedures for BDT negotiation services as described in 3GPP TS 23.502 [2] clause 4.16.7. The corresponding NEF services (see 3GPP TS 23.502 [2] clause 5.2.6.6) allow the servers to provide parameters for requesting or optimizing the background data traffic for a set of UEs.\nScenarios in which an IoT Platform interfaces with the Core Network to request future Background Data Transfer (BDT) Policies on behalf of IoT Servers need to be investigated further. In such scenarios the IoT Platform Provider leverages for its services a different business relationship with the MNO than the ASPs providing the individual IoT Applications. For example, a Smart City Platform may be configured to understand the reference to a charging rate based on the agreement with the operator (see 3GPP TS 23.503 [3] clause 6.1.2.4). At the same time, the ASP providing green building IoT applications hosted by the IoT Platform may rely on no special operator agreements.\nIn such scenarios, the IoT Servers provide the IoT Platform information such as expected data volume per UE, preferred time window or optional location, for a set of targeted IoT Clients. The IoT Platform negotiates future BDT policies with the Core Network as detailed in 3GPP TS 23.502[2] clause 4.16.7. Then the relevant information from the selected BDT policy is provided to the initiating IoT Servers, in order to initiate the data transfer.\nHence, it is required to study:\n-\tHow the SEAL functional model and deployment options may be leveraged for the implementation of IoT Platforms supporting such scenarios.\n-\tWhether and how the IoT Platform in this scenario can:\n-\tdetermine the reference to the charging rate (based on agreement with the operator) without exposure of this information to the IoT Servers.\n-\taggregate requirements/ requests from multiple IoT Servers resulting in a single future BDT negotiation request, e.g., when the same group of UEs is targeted.\n-\tselect a BDT Policy from a set of Possible Transfer Policies provided by the Core Network, based on IoT Server input.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.2\tKey issue #2: Application server monitoring and control of traffic",
                    "description": "",
                    "summary": "",
                    "text_content": "Clause 31 of 3GPP TS 22.101 [4] has provided requirements for control of traffic from UE-based applications toward associated server. When an application on a third-party server or the third-party server itself becomes congested or fails, the traffic towards that server needs to be controlled to avoid/mitigate potential issues caused by resulting unproductive use of 3GPP network resources. Following are some of the requirements:\nThe 3GPP network shall be able to control (i.e., block and/or prioritize) traffic from UEs to an application on a third-party server or the third-party server itself without affecting traffic to other applications on the third-party server or to other third-party servers.\nThe 3GPP network shall be able to receive a status indication from the third-party server when an application on it is experiencing congestion or failure, and when normal operation resumes. Such a status indication may be sent periodically, and/or when the status of the application changes.\nThe 3GPP network shall be able to detect and monitor a third-party server's operational status e.g., congestion levels, failure, and unavailability of the third-party server.\nConsider a scenario where an IoT application server serves millions of devices. In an event where the application server's response time is increased due to high traffic congestion at the application server, it is required to able to control (i.e., block and/or prioritize) the traffic from the UEs or IoT devices towards the application server.\nHence, it is required to study:\n1)\tHow to enhance the enabler layer (e.g., SEAL, CAPIF) to support service monitoring of third-party application servers?\n2)\tHow to monitor a third-party server's operational status e.g., congestion levels, failure, and unavailability of the third-party server? How to control/influence the traffic when the third-party application server is experiencing congestion or failure, and when normal operation resumes?\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.3\tKey issue #3: IoT Platform PSM monitoring and configuration",
                    "description": "",
                    "summary": "",
                    "text_content": "The cellular network exposes the capabilities for IoT Servers to provide network parameters such as: maximum response time, maximum latency, and suggested number of downlink packets. These parameters may then be used by the Core Network to derive periodic TAU Timer and Active time for the PSM mode, or to configure in-network extended buffering.\nIoT Platforms provide services to multiple IoT Servers with different services for the same UEs using PSM mode. Each IoT Sever is aware only of its own communication requirements, e.g., communication schedules, delay tolerance for regular or high-priority messaging. Based on these communication requirements, some IoT Servers may be able to derive how long the UE should be unreachable for power saving purposes, or how long the UE should stay active before returning to PSM. In the meantime, other IoT Servers may be agnostic of the of underlying network used, therefore unable to derive such information.\nIf separate Core Network parameter configurations are derived individually by each IoT Server for the same UE, the CN determines the final value. However, this determination does not have any service-level context information. In some cases, the greatest optimizations are achieved when the calculations take in consideration the current network parameter configuration, which currently can be inferred only through the use of device monitoring.\nWhen extended buffering is employed, the Network Parameter configuration can also be used by the application layer for retransmission timer configuration.\nScenarios in which an IoT Platform interfaces with the Core Network to provide optimal configuration of network parameters determined based on the communication characteristics from multiple IoT Servers need to be investigated further.\nHence, it is required to study whether and how the needs of multiple IoT servers can be satisfied via a single SEAL IoT Platform for the following:\n-\tCapability to determine optimal network parameter values based on communication characteristics (e.g., communication schedules, delay tolerance) of services from multiple IoT Servers.\n-\tCapability to configure device monitoring and receive Monitoring Event notifications via exposure APIs.\n-\tCapability to provide the network parameter values (e.g., maximum response time) via exposure APIs, to the Core Network.\n-\tCapability to expose the derived network parameter configuration (e.g., from monitoring events) to the application layer.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.4\tKey issue #4: Configuration of Communication Patterns",
                    "description": "",
                    "summary": "",
                    "text_content": "Many IoT devices have predicable communication behaviour. The Communication Pattern Parameters (CPP) Provisioning network exposure API has been introduced to make this information available to the network for resource planning and optimizations (see 3GPP 29.522 [5] clause 4.4.5). This capability provides optimizations for the devices as well, by way of reduction of signalling, energy saving, fewer sleep/awake transitions, etc.\nIoT Servers should be able to provide the IoT Platform information on the communication behavior of the application(s) supported. In turn, the IoT platform should be able to aggregate the communication patterns of multiple applications interacting with the same UE before providing them to the underlying network.\nGiven the scale and the importance of this functionality, the CPP Provisioning capability also supports providing single configurations for UE groups, e.g., for support of MIoT. An IoT platform implemented using SEAL services should be enabled to implement CPP Provisioning for groups of UE, along with performing group management. However, the IoT Platform needs to be enabled to be provided with corresponding input by the individual IoT Servers.\nHence, it is required to study:\n-\twhether and how use of the CPP Provisioning API can be enabled on IoT Platforms implemented using SEAL services, using configurations provided by multiple IoT Servers for the same UE.\n-\twhether and how use of CPP Provisioning API use can be enabled on IoT Platforms implemented using SEAL services to provide configurations for UE groups managed via the IoT Platform.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.5\tKey issue #5: NIDD configuration",
                    "description": "",
                    "summary": "",
                    "text_content": "Since Release 13, 3GPP introduced the ability to send data to and from the UE in NAS messaging though the \"Control Plane (CP) CIoT Optimizations\" feature. Since no data plane set up is required, using the CP CIoT optimizations results in a reduced total number of control plane messages that are required to send short data transactions. CIoT Optimizations include the option of exchanging NEF-anchored Non-IP Data.\nUse of Non-IP Data Delivery (NIDD) requires an initial NEF configuration step, which includes MTC Provider Information and Reliable Data Service Configuration, both of which usually require a pre-established relationship with the MNO. In addition, for the purpose of sending mobile-terminated Group NIDD messages, the NIDD Configuration procedure is used by the NEF to resolve the mapping of External Group Identifier to individual UEs. Therefore, an IoT platform implemented using SEAL services should be enabled to perform NIDD configuration for UE groups on behalf of the IoT Servers.\nHence, it is required to study whether and how NIDD configuration services by the IoT Platform implemented using SEAL services, on behalf of one or more IoT Servers, may be enabled. Configuration of group NIDD services should be also included in the study.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.6\tKey issue #6: Device Triggering services.",
                    "description": "",
                    "summary": "",
                    "text_content": "Currently, the SEAL specification in 3GPP TS 23.434 [6] does not include functionality for leveraging the Device Triggering network exposure API.\nTypically, commercial IoT Platforms store and maintain a \"digital twin\" of the device. Such digital twin is accessed and used by the device (e.g., to publish sensor readings to the IoT Platform or to receive commands from the IoT Platform) as well as by the IoT Applications to retrieve sensor readings of a device or to issue commands to a device. This digital twin has several benefits since it allows the IoT Platform to reduce communication loads and allows devices to go to sleep. This can be done without impacting the availability of device information to the IoT Applications.\nThe communication between the IoT Applications and the device is asynchronous and is managed by the IoT platform. The IoT platform needs to perform device triggering when synchronization between the digital twin is needed and the UE needs to establish connectivity.\nHence, it is required to study whether the IoT Applications should directly use the existing network exposure capability for device triggering or whether the IoT Platform should be enhanced to provide device triggering support on behalf of the IoT Applications.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "5\tSolutions",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "5.1\tSolution #1: Application Service Management Service",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.1.1\tFunctional model for application service management",
                            "text_content": "The Application Service Management (ASM) service provides application service monitoring and traffic control service. The functional model for the application service management is based on the generic functional model specified in clause 6 of 3GPP TS 23.434 [6]. It is organized into functional entities to describe a functional architecture which addresses the support for application service management aspects for vertical applications. The on-network functional model is specified in this clause.\nFigure 5.1.1.2-1 illustrates the generic on-network functional model for application service management.\nFigure 5 illustrates the on-network functional model for application service management, which includes the following components:\n\n1. **Application Service Management (ASM)**: This is the central component responsible for managing the application services provided by the network. It includes the following functions:\n   - **Application Service Definition (ASD)**: This is the blueprint of the application service, including its requirements, services, and interfaces.\n   - **Application Service Request (ASR)**: This is the request for the application service, including the requestor, requester, and service provider.\n   - **Application Service Response (ASR)**: This is the response to the application service request, including the response from the service provider and any necessary information.\n\n2. **Application Service Request (ASR)**: This is the request for the application service, including the requestor, requester, and service provider.\n\n3. **Application Service Response (ASR)**: This is the response to the application service request, including the response from the service provider and any necessary information.\n\n4. **Application Service Management (ASM)**: This is the central component responsible for managing the application services provided by the network. It includes the following functions:\nFigure 5.1.1.2-1: On-network functional model for application service management\nNOTE:\tThe normative phase work will determine whether and how service-based interfaces are used in this architecture.\nThe interface between ASM client and ASM server is ASM-UU interface. The ASM client interacts with VAL client using ASM-C interface and ASM server interacts with VAL server using ASM-S interface.\nThe ASM server communicates with the SCEF via T8 reference point or communicates with the NEF via N33 reference point to control application specific traffic from the underlying 3GPP network system.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.2\tFunctional entities description",
                            "text_content": "The functional entities for application service management SEAL service are described in the following subclauses.\nThe application service management client acts as a SEAL client for application service monitoring and traffic control function.\nThe ASM server is a functional entity used to configure one or more application servers related to 3GPP system information as well as the network. It also acts as a co-ordination layer in subscribing to the VAL sever and 3GPP network for any changes in the configuration and inform the other in order to perform necessary actions (like blocking or controlling traffic).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.3\tConfiguring VAL server",
                            "text_content": "To monitor status of the application service, the ASM server can configure the VAL server to monitor status information.\nFigure 5 illustrates the configuration of the VAL server, which is a crucial component in the network's security and management system. The VAL server is responsible for managing the network's security policies, ensuring that only authorized users can access certain resources. The figure shows the server's interface, with various buttons and sliders for configuring security settings such as user authentication, access control lists, and encryption. The server's status bar provides real-time information on the network's security status, allowing administrators to quickly address any issues.\nFigure 5.1.3-1: Configuring VAL server\n1)\tIn order to configure the VAL server, the ASM server sends ASM Configuration request towards VAL server including all parameters to be monitored the VAL server. The parameters include average request queue length, average time to process request, CPU usage, memory usage, etc.\n2)\tUpon received the request, the VAL server sends response and starts monitoring all activities.\nNOTE:\tIt is to be addressed in the normative phase whether configuring VAL server procedure is required or not.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.4\tRequest-response model",
                            "text_content": "The ASM server can request the VAL server to provide its status information. The ASM server may choose to request status information periodically, which can give the ASM server the possible trend of the VAL server status. Figure 5.1.4.1-1 shows the procedure for the ASM server to request on-demand status request from the VAL server.\nThe figure depicts a server in the network, specifically an ASM (Application Service Manager) server, requesting for on-demand status. The ASM server is responsible for managing the network's resources and ensuring that the network is functioning properly. The figure shows the server's interface, which includes a web-based interface for the network administrator to view and manage the network's status. The server is connected to the network through a network interface card (NIC) and is responsible for managing the network's resources, such as network bandwidth, storage, and computing power. The server also manages the network's security, ensuring that only authorized users can access the network. The figure provides a visual representation of the ASM server's role in the network and its importance in ensuring the network's functionality.\nFigure 5.1.4.1-1: ASM server requesting for on-demand status\n1)\tBased on configurations such monitoring status information request from other entities (e.g., VAL service provider), ASM server initiates the on-demand status request towards the VAL server.\n2)\tThe ASM server sends an on-demand status request to the VAL server. The request includes the configuration parameters whose status needs to be included in the response.\n3)\tThe VAL server immediately responds to the ASM server with a report containing status information identified by the ASM server and available to the VAL server.\n4)\tUpon receiving the report, the ASM server updates the monitoring status of the VAL Server to the other VAL UE(s), VAL Client(s) or 3GPP network as required.\nThe ASM client keeps monitoring the different service KPIs as experienced for the application service. The KPIs include application specific performance measurements like end-to-end response time, connection bandwidth, request rate, server availability time, etc. On request from user or VAL client or any other trigger conditions, the ASM client sends the service experience report about a VAL server to the ASM server. Figure 5.1.4.2-1 illustrates a scenario of ASM Client pushes service experience report to the ASM Server.\nPre-condition:\n1).\tASM client determines to send service experience report based on certain criteria (e.g. VAL User request, VAL client request, any preconfigured or explicit configured triggering event, periodic event, like so)\n\nThe figure depicts a client application in an ASM (Application Service Manager) environment, pushing a service experience report to the ASM Server. The ASM Server is responsible for managing the service experience report, ensuring that it is delivered to the appropriate users and departments. The ASM Client application is responsible for pushing the report to the ASM Server, which is a crucial step in ensuring that the service experience report is delivered in a timely and accurate manner.\nFigure 5.1.4.2-1: ASM Client pushes service experience report to the ASM Server\n1).\tThe ASM client sends Push service experience request to the ASM server. The request contains service experience report about a VAL server (e.g. end-to-end response time as experienced by client, connection bandwidth, request rate by client, VAL server availability, etc) and includes the VAL UE ID, VAL service ID, VAL server identity for which the report is being sent and time stamp of the report.\n2).\tUpon receiving the Push service experience request from the ASM client, the ASM server stores the report in to the database or permanent storage.\n3).\tThe ASM server may take further actions based on the analysis of the report as shared by the ASM client.\na) Based on service experience report, the ASM server may decide to collect additional information from other UEs or ASM clients which use the same VAL server (e.g. by using pull service experience procedure as specified in clause 5.1.4.3).\n4).\tThe ASM server sends Push service experience response to the ASM client.\nNOTE:\tStep 3 and 4 can be performed in parallel.\n5).\tThe ASM server may determine the corrective action as specified in clause 5.1.4.4. If the issue is identified with the VAL UE, the ASM server may inform the corrective actions to be taken by the VAL UE.\nFigure 5.1.4.3-1 illustrates the procedure for the ASM server to pull the service experience report from the ASM clients. The procedure can be initiated by the ASM server upon receiving a Push service experience request from an ASM client or upon receiving a request from application service provider (application server) to get the service experience report from the clients or any other event that requires the ASM server to determine the service experience data.\nThe figure depicts a server-client interaction scenario where the ASM Server pulls a service experience report from the ASM Client. The ASM Server is responsible for managing the service experience, while the ASM Client is the user interface that receives the report. The figure illustrates the flow of data between the two, with the ASM Server sending the report to the ASM Client, and the ASM Client displaying the report to the user.\nFigure 5.1.4.3-1: ASM Server pulls service experience report from the ASM Client\n1).\tThe ASM server sends Pull service experience request to the ASM client. The request contains identity of the specific VAL server for which the service experience report is required. The request includes the VAL service ID and VAL server identity for which the report is requested.\n2).\tUpon receiving the Pull service experience request from the ASM server, the ASM client takes user consent to send the report if the user consent is not available already.\n3).\tThe ASM client sends the Pull service experience response to the ASM server. The response contains result indicating whether the report is available or not. If report is available, the response contains service experience report about a VAL server (e.g. end-to-end response time as experienced by client, connection bandwidth, request rate by client, VAL server availability, etc) and includes the VAL UE ID, VAL service ID, VAL server identity for which the report is being sent and time stamp of the report.\n4).\tThe ASM server stores the service experience report into the database or permanent storage.\n5).\tThe ASM server may takes the corrective action as specified in clause 5.1.4.4.\nBased on the collective analysis of all reports, the ASM server performs following actions:\n1)\tDetermining the entity producing the issue, i.e. whether the reported issue is at VAL client or VAL server or 3GPP network.\nNOTE 1:\tHow the ASM server determines whether the issue is at the VAL client, VAL server or the 3GPP network is implementation specific\n2)\tOnce the entity causing the issue is identified, the ASM Server need to determine the corrective action for that entity.\nNOTE 2:\tThe ASM server may subscribe for monitoring events (e.g. UE reachability, Communication failure, PDU Session Status) to 5GC as specified in clause 5.2.6.2 of 3GPP TS 29.502 [2] and may uses the information received via notification (along with the service experience reports received from ASM client) in determining the entity producing the issue and the possible corrective action for that entity.\nNOTE 3:\tASM server logic and algorithm to determine the corrective action based on the entity causing the issue (i.e. issue is at VAL client or VAL server or the 3GPP network), is out of scope of this specification and implementation specific.\n3)\tASM server informs the corrective action towards the entity causing the issue.\nNOTE 4: How ASM server indicates the suggestion for action to VAL layer entities is implementation specific.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.5\tSubscribe-notify model",
                            "text_content": "Figure 5.1.5.1-1 shows the procedure for the ASM server to subscribe to the monitoring status information of the VAL server. The ASM server does not need to configure the VAL server in advance.\nThe figure depicts a server in the network, specifically an ASM (Application Service Manager) server, requesting for on-demand status. The ASM server is responsible for managing the network's resources and ensuring that the network is functioning properly. The figure shows the server's interface, which includes a user interface for the network administrator to view and manage the network's status. The server is connected to the network through a network interface card (NIC) and is responsible for managing the network's resources, such as network bandwidth, storage, and computing power. The server also manages the network's security, ensuring that only authorized users can access the network. The figure provides a visual representation of the ASM server's role in the network and its importance in ensuring the network's functionality.\nFigure 5.1.5.1-1: ASM server requesting for on-demand status\n1)\tBased on configurations request from other entities to provide monitoring status information periodically or based on event, ASM server decides to initiate the monitoring information subscribe request to the VAL server.\n2)\tThe ASM server sends a monitoring information subscribe request to the VAL server. The request includes all parameters to be monitored for UE and VAL server. The parameters include average request queue length, average time to process request, CPU usage, memory usage, etc. The request also includes events when the VAL server needs to send the notification.\n3)\tThe VAL server sends a monitoring information subscribe response to the ASM server containing success or failure of the request.\nFigure 5.1.5.2-1 shows the notification from VAL server towards the ASM server on occurrence of the event.\nPre-conditions:\n1)\tThe ASM server is subscribed to the monitoring status information.\nThe figure depicts a VAL server, which is a monitoring system used in telecommunication networks. It is responsible for notifying the monitoring status information to the monitoring center. The VAL server is connected to the network through a network interface card (NIC) and communicates with the monitoring center through a network protocol. The figure shows the server's connection to the network, the network interface card (NIC), and the network protocol. The VAL server is an essential component of the monitoring system, ensuring that the network is functioning properly and providing real-time information to the monitoring center.\nFigure 5.1.5.2-1: VAL server notifies the monitoring status information\n1)\tWhen the event occurs as specified by the ASM server in the subscription request, the VAL server sends monitoring information notification to the ASM server with a report containing status information identified by the ASM server and available to the VAL server.\n2)\tUpon receiving the report, the ASM server updates the monitoring status of the VAL to the other VAL UE(s), VAL Client(s) or 3GPP network as required.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.6\tReference Points",
                            "text_content": "This clause describes the reference points of the architecture for application service management.\nThis is the interface between ASM Client and VAL Client. It is used by ASM client to share information regarding application service monitoring and provisioning of UE clients.\nThis is the interface between ASM Client and ASM Server. It is utilized by ASM Server to configure UE and provide policies related to the application service. The ASM server uses this interface to provide notifications about possible actions to control the traffic.\nThis is the interface between ASM Server and VAL Server. It is used for provisioning and monitoring of VAL AS as per the policies and profiles of the VAL service. The 3GPP network status for the VAL service is monitored by ASM Server and notified to the VAL server if changes for it to take suitable action. This is service-based interface where VAL server and ASM Server exposes services as APIs, to be invoked by other entities.\n5.1.7\tEvaluation\nThe solution addresses KI#2 related to Application server monitoring. The solution proposes functional model for application service management, where ASM server collects data from VAL server or ASM client (along with VAL client) and if required, it decides corrective action to take for VAL client or VAL server. ASM server logic and algorithm to determine the corrective action is implementation specific. The solution proposes data collection procedures using request-response model and also subscribe-notify model.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.2\tSolution #2: IoT Platform deployment options",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.2.1\tGeneral",
                            "text_content": "IoT Platforms enable applications and services from multiple verticals by providing a set of common services for deploying dynamic, performant, scalable and resilient services which may be underlying-network agnostic.\nFig 5.2.1-1 depicts a generic IoT Platform with IoT Platform Common Services (IoT-PCS) servers enabling a set of applications deployed using corresponding servers (IoT-App), which may belong to different verticals. On the device side, corresponding IoT-PCS and IoT-App clients enable the client-side functionality.\nFigure 5 illustrates a generic representation of services enabled via IoT Platforms, showcasing various services such as smart home automation, smart city management, and smart manufacturing. The figure highlights the integration of IoT devices, sensors, and actuators, enabling real-time data collection and control.\nFigure 5.2.1-1: Generic representation of services enabled via IoT Platforms\n\nThe following clauses introduce functional models for supporting a variety of IoT Platform deployments based on the generic functional model specified in clause 6.2 of 3GPP TS 23.434 [6].\nNOTE:\tThe IoT Platform functional and deployment models in this document focus only on SEAL functionality to support application capability exposure to general purpose servers or 3rd party IoT applications.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.2\tDeployment models in single PLMN operator domain",
                            "text_content": "IoT Platform deployment models for single PLMN operator domain case are described in this clause.\nThe following models are differentiated primarily based on which entities have network exposure access and may implement the necessary functionality. Therefore, for the purpose of network exposure, IoT-PCS servers are implemented as SEAL servers. While some IoT-PCS services may be implemented as VAL services, the representation of that implementation option is abstracted in the following models.\nFigure 5.2.2.2-1 illustrates the single network exposure access deployment model in single PLMN operator domain\nThe given telecommunication figure, labeled as \"Figure 5,\" depicts a deployment model for single network exposure access in a single PLMN operator domain. The figure illustrates a simplified model of a network, with a single operator domain, where access to the network is granted to a single PLMN (Point-to-Multipoint Network). The figure shows the network topology, including the core switches, optical line terminals (OLTs), and distributed nodes. The layered design of the network aligns with SDN principles, allowing for efficient network management and control.\nFigure 5.2.2.2-1: Single network exposure access deployment model in single PLMN operator domain\n\nIn this model network interfaces are available to the IoT-PCS servers providing SEAL services via the SEAL-S reference point to IoT Application (IoT-App) servers as VAL servers. The IoT-PCS servers communicate with the SCEF via T8 reference point or with the NEF via N33 reference point.\nThe interface between the IoT-PCS client and IoT-PCS server is an instance of a SEAL-UU reference point, e.g., CM-UU. The IoT-PCS client interacts with IoT-App client (as a VAL client) using an instance of a SEAL-C reference point. The IoT-PCS server interacts with IoT-App server(s) over instance(s) of SEAL-S reference point(s).\nFigure 5.2.2.3-1 illustrates the distributed network exposure access deployment model in single PLMN operator domain\n\nThe figure depicts a deployment model for a single PLMN operator domain, showing the distribution of network exposure access points (NEAPs) across different operators. The model illustrates the use of a distributed network architecture, with each operator having their own NEAPs, and the ability to access the network through a single point of presence (POP). This model is designed to ensure network security and reliability, with each operator having their own access points and no single point of failure.\nFigure 5.2.2.3-1: Distributed network exposure access deployment model in single PLMN operator domain\n\nIn this model network interfaces are available to the IoT-PCS servers as well as to the IoT-App severs, therefore they both implement SEAL services.\nThe IoT Application uses both SEAL and VAL servers and clients. The IoT-PCS server(s) provides additional SEAL services via the SEAL-S reference point to IoT-App VAL servers.\nThe IoT-PCS and IoT-App SEAL severs communicate with the SCEF via T8 reference point or with the NEF via N33 reference point. It is assumed that each SEAL service deployed may be provided to a given IoT Application by either or both SEAL servers and that the IoT Platform provider can configure the PCS and IoT Applications in the IoT Platform with policies determining unambiguously which SEAL service to be used for the IoT application operations. The IoT-PCS and IoT-App SEAL servers may interact over an instance of SEAL-X reference point.\nThe interface between the IoT-PCS SEAL client and IoT-PCS SEAL server is an instance of a SEAL-UU reference point, e.g., GM-UU. The interface between the IoT-App SEAL client and IoT-App SEAL server is also instance of a SEAL-UU reference point, e.g., CM-UU.\nThe SEAL clients interact with VAL clients using SEAL-C reference points. The IoT-PCS SEAL server interacts with IoT-App VAL server over an instance of a SEAL-S reference point.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.3\tSolution #3: IoT Platform Functional Models",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.3.1\tGeneral",
                            "text_content": "The functional model for IoT Platform services is based on the generic SEAL functional model specified in 3GPP TS 23.434 [6] clause 6. It is organized into functional entities to describe a functional architecture which addresses the support for IoT Platforms.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.3.2\tOn-network functional models",
                            "text_content": "Figure 5.3.2-1 illustrates the generic on-network functional model for IoT Platform services in single network exposure access deployment mode.\n\nThe figure depicts a functional model for IoT-PCS (Internet of Things-Personal Communication System) networks, illustrating the interaction between IoT devices and their respective communication systems. The model includes three main components: IoT devices, communication systems, and access points (APs). The IoT devices are represented by circles, while the communication systems are represented by lines connecting the devices. The access points are represented by squares, and they are connected to the IoT devices through lines. The model also includes a layer of abstraction, represented by the dotted lines, which allows for the separation of the IoT devices and communication systems. This model is crucial for understanding the interactions between IoT devices and their communication systems, and for designing and implementing IoT-PCS networks.\nFigure 5.3.2-1: Functional model for IoT-PCS (single network exposure access)\nThe IoT-PCS client communicates with the IoT-PCS server over the IP-UU reference point, which is an instance of the SEAL-UU generic reference point. The IoT-PCS client provides IoT platform common services functionality to the IoT-App client(s) over IP- C reference point, which is an instance of the SEAL-C reference point. The VAL IoT-App server communicates with the IoT-PCS server over the IP-S reference point, which is an instance of the SEAL-S generic reference point.\nThe IoT-PCS server communicates with the SCEF via T8 reference point. The IoT-PCS server communicates with the NEF via N33 reference point by mechanisms defined in clause 5.2.6.2 of 3GPP TS 23.502 [2].\nWhen IoT Applications are deployed in a stand-alone mode, without the use of an IoT Platform service, the functional model in Figure 5.3.2-2 applies. In this case, SEAL services and network exposure may be implemented internally to IoT-App.\n\nThe figure depicts a functional model for stand-alone IoT applications, illustrating the various components and their interactions. It includes IoT-PCS services, which are essential for enabling IoT devices to communicate with each other and the cloud. The model highlights the importance of IoT-PCS services in enabling seamless connectivity and data exchange between IoT devices and the cloud.\nFigure 5.3.2-2: Functional model for stand-alone IoT Applications (without IoT-PCS services)\nFor stand-alone IoT applications, the IoT-App client communicates with the IoT-App server over the IP-UU reference point, which is an instance of the SEAL-UU generic reference point. The IoT-App client provides application-specific services to the IoT-App client(s) over IP- C reference point, which is an instance of the SEAL-C reference point. The VAL IoT-App server(s) communicate with the IoT-App SEAL server over the IP-S reference point, which is an instance of the SEAL-S generic reference point.\nThe IoT-App server communicates with the SCEF via T8 reference point and with the NEF via N33 reference point.\nWhen an IoT Application designed based on a stand-alone model, is deployed in conjunction with an IoT platform, inter-service communication is required between the two SEAL servers. Figure 5.3.2-3 illustrates the functional model for inter-service communications between an IoT-PCS SEAL Server and an IoT-App SEAL Server.\n\nThe figure depicts a network architecture with IoT-App and IoT-PCS SEAL servers, illustrating inter-service communication between these two components. The diagram shows the communication paths, including the use of SEAL servers for secure communication.\nFigure 5.3.2-3: Inter-service communication between IoT-App and IoT-PCS SEAL servers\nFor inter-service communications, an IoT-App SEAL Server communicates with the IoT-PCS server over the SEAL-X3 reference point. In this deployment, both SEAL servers provide network exposure access, resulting in a distributed network exposure access deployment. Figure 5.3.2-4 depicts the resulting deployment. Note that this deployment aligns with the distributed network exposure access model introduced by the solution in clause 5.2, while using the proposed IoT-PCS-specific instances of SEAL reference points.\n\nThe figure depicts a functional model for IoT-PCS (Internet of Things-Personal Communication System) networks, illustrating the interconnection of various devices and the exposure of network access. The model includes IoT devices, PCS (Personal Communication System), and other network components, such as base stations (BSs), access points (APs), and gateways. The diagram highlights the interconnection of devices, the exposure of network access, and the use of IoT-PCS protocols for communication.\nFigure 5.3.2-4: Functional model for IoT-PCS (distributed network exposure access)\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.4\tSolution #4: Device triggering",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.4.1\tGeneral",
                            "text_content": "An IoT-PCS Server may initiate a device trigger to a UE to cause it to establish a connection to the IoT-PCS Server, to connect to another server on the platform, to provide updated information, etc. The IoT-PCS Server may initiate the device trigger itself (implicit) or it may be initiated by a request that the IoT-PCS Server receives from IoT-App VAL Servers (explicit).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.4.2\tProcedures and information flows",
                            "text_content": "\nThe figure depicts a device triggering procedure in a 4G network, illustrating the steps taken by the device to initiate a call. The diagram shows the device's physical connection to the network, the signal path, and the signaling process. The figure is labeled with the figure name \"Figure 5.4.2.1-1: Device Triggering Procedure,\" which provides a clear and concise title for the diagram.\nFigure 5.4.2.1-1: Device Triggering Procedure\n\n1). The device triggering procedure may be initiated based on an optional interaction between the IoT-PCS Server and an IoT-App VAL Server, For example, the IoT-App VAL Server may send an explicit API request, or the IoT-App VAL Server may send another message based on which the IoT-PCS determines to start the device triggering procedure.\n2). The IoT-PCS Server determines to initiate the device triggering. The IoT-PCS Server may use UE Availability and/or pre-configured information to determine the timing of the Device Triggering request, e.g. the trigger may be sent to ensure that a target UE in PSM mode is reachable when resuming communications.\n3).\tThe IoT-PCS Server performs the device triggering procedure described in 3GPP TS 23.682 [7] clause 5.2. The procedure requires that the UE Identifier, port number(s) and protocol information are available at the IoT-PCS Server.\nNOTE:\tIt is to be addressed in the normative phase how the port number(s) and protocol information are being made available to the IoT-PCS Server\nAs part of the procedure, the IoT-PCS Server receives a Device Triggering delivery status report from SCEF/NEF indicating the success of the delivery.\n4).\tIf a request was received in step 1, the IoT-PCS Server responds to the request.\nBased on the trigger purpose derived from the payload, the targeted IoT-PCS Client or IoT-App Client performs the corresponding actions (e.g., connect to the IoT-App VAL Server).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.4.3\tEvaluation",
                            "text_content": "This solution addresses Key Issue #6, enabling the IoT-PCS to provide device triggering support on behalf of the IoT Applications.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.5\tSolution #5: Application Server status monitoring via CAPIF",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.5.1\tDescription",
                            "text_content": "This solution addresses KI#2 by providing enhanced CAPIF services for managing application server (AS) status. The CAPIF core function (CCF) takes the responsibility to monitor AS service status. The CCF may expose the monitored AS service status to CCF service consumers (e.g. API invoker) via enhanced service discovery and event exposure procedures.\nNOTE:\tOne AS can provide one or more AS services.\nWhen a 3rd party Application Server provides its service (also see KI#2 and sol#8 in 3GPP TR 23.700-98 [9]), it acts as Application Exposure Function (AEF) in CAPIF.\nThe application services provided by the AS can be published in the CCF so that the services are discoverable by the API invoker. When an AS acting as an AEF publishes its service API to the CCF, the AS updates its service API status (active, inactive) at the CCF. Table 5.5.1.1-1 shows the impact (with bold text) on the existing service API publish information flows in 3GPP TS 23.222 [8] as example, the same addition applies for the service API update request (e.g. to update service API status) and interconnection service API publish request.\nTable 5.5.1.1-1: Service API publish request\n\nFor service API discovery, the CCF consumer (e.g. API invoker) can discover the service API status via service API discovery procedure or be notified about the service API status change via CAPIF event exposure procedure. The Application publishing function (APF) can update the service API status to the CCF.\nThe service status exposed by CCF is supported by \"Availability of service APIs\" event in clause 8.8.6 of 3GPP TS 23.222 [8].\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 5.5.1.1-1: Service API publish request",
                                    "table number": 3,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "5.5.2\tEvaluation",
                            "text_content": "This solution provides monitoring of service API status monitoring for the AS using CAPIF, which addresses KI#2. The control of application traffic towards the AS is up to the consumer of the AS service API to decide after AS service API discovery.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.6\tSolution #6: BDT configuration",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.6.1\tGeneral",
                            "text_content": "For an IoT Platform, the use of Background Data Transfer (BDT) allows IoT-App VAL Servers to use transmission time windows that are/cost and/or throughput favorable. The network provider is also enabled to provide better network resource management for predictable usage of downlink data.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.6.2\tProcedures and information flows",
                            "text_content": "The Background Data Transfer feature requires an initial step in which policies are requested and negotiated. BDT Policy requests to the 3GPP network are based on an expected time window and UE set, with additional optional information e.g., expected data volume per UE. The UE set may be indicated as an expected number of UEs, a group ID or geographical area.\nThe feature allows for the server involved to negotiate the policies proposed by the network. It also allows the server to enable notifications to be sent, should network conditions affect future BDT policies.\nBased on the BDT policies obtained using the procedures detailed in this clause, an IoT-App VAL server can initiate a data transfer to the client at the negotiated time and with the negotiated charging rates. The data transfer between the IoT-App VAL Server and the IoT-App VAL Client is performed without IoT-PCS Server enablement, but the IoT-App VAL Server may utilize functionality exposed by SEALDD or 5GMSG Servers. Service layer functionality for the purpose of facilitating the data transfer with the negotiated policy is not in scope of this specification.\nFigure 5.6.2.2-1 depicts a general procedure for the request and configuration of traffic policies for BDT initiated by a request from an IoT-App VAL Server.\nThe figure depicts a general procedure for configuring background data transfer in a 6.2.2 network. It outlines the steps to set up a background data transfer system, including the selection of a background data source, the configuration of the background data transfer protocol, and the establishment of a background data transfer schedule. The figure provides a visual representation of the process, making it easier for users to understand and follow the steps.\nFigure 5.6.2.2-1: General Procedure for configuration of Background Data Transfer\nStep 1: An IoT-App VAL Server requests IoT-PCS Server to negotiate with the 3GPP network a background data transfer policy.\nThe request includes expected data volume, expected number of UEs, expected time window for the background data transfer. The request may also include group ID, geographic information for the UEs, a request expiration time, guidance for policy selection. If guidance for policy selection is not included, the IoT-App VAL Server indicates if IoT-PCS Server may choose independently from among multiple transfer policies.\nStep 2: Based on the request expiration time and Service Provider policies, IoT-PCS Server may determine to delay interactions with the 3GPP network in order to negotiate on behalf of multiple IoT-App VAL Servers.\nThe IoT-PCS Server performs the resource management of background data transfer procedure described in 3GPP TS 23.502 [2] clause 4.16.7.2. The procedure requires that expected data volume, expected number of UEs, and expected time window are provided by the IoT-PCS Server. If the IoT-PCS Server determined to negotiate on behalf of multiple IoT-App VAL Servers, the parameters included reflects a superset of the individual IoT-App VAL Server requests.\nNOTE 1:\tThe IoT-PCS Server determines to negotiate on behalf of multiple IoT-App VAL Servers based on implementation options and local policies. For example, if the request expiration time and expected time window are sufficiently large and, respectively, far away in time, the IoT-PCS Server may be allowed to delay the negotiations with the 3GPP network in case another request is received, targeting the same group of UEs. If another request is received with expected time windows sufficiently close and if the guidance for policy selection allows, a single policy/time window may be negotiated instead. This allows the UE group to wake up only once for multiple background data transfers.\nThe 3GPP network determines one or more applicable transfer policies based on the requesting Background Data Transfer parameters. A list of transfer policies is provided to the IoT-PCS Server. Each transfer policy includes mandatory Reference ID, charging rating group reference and allocated time window and optional maximum UL and DL bandwidth. The IoT-PCS Server uses ASP policies and the transfer selection guidance (if available) to select a policy. The IoT-PCS Server informs the 3GPP Network of the selected transfer policy.\nNOTE 2:\tBased on 3GPP TS 23.503[3] clause 6.1.2.4. it is assumed that the IoT-PCS server is configured to understand the charging rating group reference based on agreements with the operator.\nNOTE 3:\tPolicy selection guidance options such as \"lowest cost\", \"highest throughput\", etc. are to be determined in the normative phase.\nNOTE 4:\tThe IoT-PCS server sets the warning notification based on local policies.\nStep 3: The IoT-PCS Server responds to the IoT-App VAL Server, providing the Reference ID and allocated time window of the background data transfer policy.\n5.6.2.3\tReselect Background Data Transfer Policy\nFigure 5.6.2.3-1 depicts a general procedure for reselecting BDT policies after BDT warning.\nThe figure depicts a general procedure for reselecting BDT policies after a warning, with a step-by-step approach to ensure the correct decision is made.\nFigure 5.6.2.3-1: General Procedure for reselecting BDT policies after warning\nStep 1: The 3GPP Network, via NEF, sends the BDT warning (BDT Policy negotiate) notification to the IoT-PCS server. The notification includes the affected BDT policy Reference ID and list of candidate BDT policies.\nEach of the BDT policies in the candidate BDT list includes mandatory Reference ID, charging rating group reference and time window, as well as optional maximum UL and DL bandwidth.\nStep 2: The IoT-PCS Server checks the new BDT policies included in the candidate list of the BDT warning notification. The IoT-PCS Server determines whether the notification affects multiple IoT-App VAL Servers or not. The IoT-PCS Server uses ASP policies and the transfer selection guidance (if available) provided with the initial IoT-App VAL Server request to select a policy.\nThe IoT-PCS Server informs the 3GPP Network of the selected transfer policy or that no new policy has been selected by using steps 11-16 of the procedure for BDT warning notification in 3GPP TS 23.502[2] clause 4.16.7.3.\nStep 3: The IoT-PCS Server ends a new response to the IoT-App VAL Server, providing information about the new policy, or that no policy is available. If a new BDT policy is available, the information provided to the IoT-App VAL Server includes the ID of the applicable policy and the time window.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.6.3\tEvaluation",
                            "text_content": "This solution addresses Key Issue #1. The solution allows the IoT-PCS to aggregate requirements/ requests from multiple IoT-App Servers and to select a set of BDT policies after negotiation with the Core Network, based on all IoT-App Server inputs. The solution also enables the IoT-PCS to determine the reference to the charging rate (based on agreement with the operator) without exposure of this information to the IoT Servers. At the same time, the solution does not affect the ability of IoT-App VAL/SEAL Servers to directly interact with 5GS for BDT negotiation, if so configured.\nThe solution addresses only BDT policy negotiation, with the data transfer being performed without IoT-PCS Server enablement. IoT-App VAL Servers may utilize functionality exposed by SEALDD or 5GMSG Servers for facilitating the data transfer.\nThe interactions with the Core Network are fully specified and require no changes. The request and response for BDT configuration exchanged between the IoT-App VAL Server and IOT-PCS server (i.e., steps 1 and 3 in 5.6.2.2) require specification. Therefore, this is a viable solution.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.7\tSolution #7: UE unified traffic pattern and monitoring management",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.7.1\tGeneral",
                            "text_content": "",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.7.2\tProcedures and information flows",
                            "text_content": "UE unified traffic pattern and monitoring management procedures allow IoT-PCS to offer services leveraging several CN exposure APIs:  communication patterns configuration, network parameter values configuration and UE monitoring event management.\nAn IoT-App VAL or SEAL server can indicate to the IoT-PCS server its interest in receiving UE unified traffic patterns and monitoring management services by sending the UE unified traffic pattern and monitoring management subscription request.\nThe subscription requests from each IoT-App VAL or SEAL server also include the traffic pattern configuration of the requester, which refers to application-level patterns of data traffic. The IoT-PCS server aggregates the traffic patterns obtained from the requestors (and described in Table 5.7.2.5.1-2) to determine the UE unified traffic patterns per UE. The UE unified traffic patterns are described via Table 5.7.2.5.3-1 for the  UE unified traffic pattern update notification. These aggregated traffic patterns per UE (termed UE unified traffic pattern) are updated/adjusted by the IoT-PCS Server based on information obtain from UE monitoring.\n\nThe figure depicts a unified traffic pattern and monitoring management subscription procedure for an UE (User Equipment) in a 7.2.2-1 network. It illustrates the UE's unified traffic pattern, which is essential for efficient network management and monitoring. The figure also shows the subscription procedure for the UE's monitoring management subscription, which is crucial for ensuring the UE's compliance with network policies and regulations.\nFigure 5.7.2.2-1: UE unified traffic pattern and monitoring management subscription procedure\n1.\tIn order to subscribe to the IoT-PCS Server services, the IoT-App VAL/ SEAL server sends the UE unified traffic pattern and monitoring management request, as detailed in clause 5.7.2.5. The subscription request may include IoT-App traffic pattern configuration, which provides the traffic patterns of the specific IoT-App VAL/SEAL Server. The request may also include Management subscription indications which indicate to the IoT PCS server which management and 5GC exposure procedures the IoT-App VAL/SEAL server allows the IoT-PCS Server to perform on its behalf.\n2.\tUpon receipt of the request, the IoT-PCS server sends a UE unified traffic pattern and monitoring  management subscription response.\n3.\tThe IoT-PCS Server aggregates UE unified traffic pattern and monitoring management subscription requests from different IoT-App VAL/SEAL servers and determines the UE unified traffic pattern per UE (using the traffic patterns of all the IoT-Apps communicating with the UE). If the IoT-PCS Server determines that additional or updated IoT-App traffic pattern configurations are needed, it requests them from the IoT-App Servers using the Traffic pattern configuration request procedure in clause 5.7.4.\n4.\tDepending on the subscription requests received and local policies, the IoT-PCS Server executes one or more management and 5GC exposure procedure (per UE).  Management and 5GC exposure procedures are detailed in clause 5.7.3.\nThe IoT-PCS Server determines the management procedures required to be executed on behalf of the IoT-App VAL/SEAL Servers .based on the  received management subscription indications as follows:\n-\tIf the CP configuration indication is provided, the IoT-PCS executes the CP configuration procedure detailed in clause 5.7.3.2.\n-\tIf the UE unified traffic pattern monitoring management indication is provided, the IoT-PCS Server executes steps 1-3 of the UE unified traffic pattern monitoring procedure detailed in clause 5.7.3.3.\n-\tIf the UE unified traffic pattern monitoring update notification indication is provided, the IoT-PCS Server executes the steps 1-4 of the UE unified traffic pattern monitoring procedure detailed in clause 5.7.3.3.\n-\tIf the Network parameter coordination indication is provided, the IoT-PCS executes the network parameter coordination procedure detailed in clause 5.7.3.4.\nNOTE 1:\tThe IoT-PCS Server translates the management subscription indications received from different IoT-App VAL/SEAL Servers into per-UE management indications based on local policies and configurations. For example, an IoT-PCS Server may be configured to execute a management procedure for a UE if at least one IoT-App VAL/SEAL Server indicates it. Another IoT-PCS Server may be configured to provide all the management procedures for the UEs using the platform independent of IoT-App Server subscription indications.\nNOTE 2:\tCorresponding subscription update request and unsubscribe request procedures will complement this functionality in the normative phase. These would allow the update of the subscription request parameters and the deletion of the entire subscription, respectively.\n\n5.7.2.3\tUE unified traffic pattern update notification procedure\nAn IoT-PCS Server can provide updated UE unified traffic pattern information to IoT-App VAL or SEAL servers by sending UE unified traffic pattern update notifications as shown in figure 5.7.2.3-1. The UE unified traffic pattern management procedure detailed in clause 5.7.3.3. is an example of procedure which may result in UE unified traffic pattern updates at the IoT-PCS server, based on which UE unified traffic pattern update notifications are provided.\nPre-conditions:\n1)\tThe IoT-App Val/SEAL server has subscribed for UE unified traffic pattern and monitoring management services, requesting to receive UE unified traffic pattern update notifications\n\nThe figure depicts a simplified representation of the unified traffic pattern update notification procedure for an unlicensed user equipment (UE) in a 5G network. The figure illustrates the steps involved in updating the UE's traffic pattern, including the process of sending a notification to the network control center (NCC) and the response from the NCC. The figure also shows the flow of data between the UE and the NCC, highlighting the importance of efficient communication in 5G networks.\nFigure 5.7.2.3-1: UE unified traffic pattern update notification procedure\n1.\tThe IoT-PCS server sends the UE unified traffic pattern update notification when either of the following occurs:\n-\tMonitoring events lead to updates in the UE unified traffic pattern (e.g., to schedule elements in Table 5.7.2.5.3-1) the IoT-PCS server sends a corresponding notification to the IoT-App VAL/SEAL server. Other notifications may be provided, e.g., if the stationary indication changes.\n-\tAn NP Configuration Notification is received with a new set of applied network parameters and if the IoT-PCS Server determines that the new configuration is incompatible with the current UE unified traffic pattern (see also clause 5.7.3.3 step 3).\n\nTo obtain information about service-specific traffic patterns for a UE,  the IoT-PCS server can request traffic pattern configuration from the IoT-App VAL/SEAL server. This procedure may be used for example to request traffic patterns from IoT-App Servers which did not initiate UE unified traffic pattern and monitoring management, but which nevertheless communicate with the UE.\n\nThe figure depicts a traffic pattern configuration request, showing the various routes and destinations that a user can choose from to send their data. The request is divided into different categories, such as \"Request Type,\" \"Request Route,\" and \"Request Destination,\" allowing users to specify the type of data they want to send and the specific path they want to take. The figure also includes a \"Request Status\" column, which indicates the current status of the request, such as \"Pending,\" \"In Progress,\" or \"Completed.\" The figure is a visual representation of the complex network of data transmission paths and destinations, enabling users to understand the flow of data and make informed decisions about their data transmission.\nFigure 5.7.2.4-1: Traffic pattern configuration request\n1.\tIn order to obtain the service-specific traffic pattern configuration for a UE, the IoT-PCS Server sends traffic pattern configuration request to the IoT-App VAL/ SEAL server. The request parameters indicate the UE(s) for which the request is made.\n2.\tUpon receipt of the request, the IoT-App VAL/SEAL server sends a response. The parameters include one or more traffic pattern elements.\n\nTable 5.7.2.5.1-1 describes the information flow for the UE unified traffic pattern and monitoring management subscription request  from the IoT-App VAL/SEAL server to the IoT-PCS server.\nTable 5.7.2.5.1-1: UE unified traffic pattern and monitoring management subscription request\n\nTable 5.7.2.5.1-2: IoT-App traffic pattern configuration\n\nNOTE 3: The following is an example of a schedule element with the fields: second, minute, hour, day of month, month, day of week and year:\n*; 0-30 ; 2; *; Jan-Sept; Tues; *.\nThis schedule element, when used for IoT-App VAL traffic patterns translates to the following in the CpProvisioning API as described in 3GPP TS 29.122[10]  clause 5.10:\n-\tperiodicCommunicationIndicator: TRUE\n-\tcommunicationDurationTime: 30 min\n-\tperiodicTime: 1 week\n-\tscheduledCommunicationTime: Tues, 2:00-2:30\n-\tvalidityTime: calculated using the Jan-Sept range and the provided expiration time.\nNOTE: The format of this IE is to be provided in stage 3. The purpose of this description is to clarify how the same element can contain multiple periodicities, specify start/stop times, etc.\nTable 5.7.2.5.2-1 describes the information flow for the UE unified traffic pattern and monitoring management subscription response from the IoT-PCS server to the IoT-App VAL/SEAL server.\nTable 5.7.2.5.2-1: UE unified traffic pattern and monitoring management subscription response\n\nTable 5.7.2.5.3-1 describes the information flow for the UE unified traffic pattern update notification from the IoT-PCS server to the IoT-App VAL/SEAL server.\nTable 5.7.2.5.3-1: UE unified traffic pattern update notification\n\nTable 5.7.2.5.4-1 describes the information flow for the Traffic pattern configuration request from the IoT-PCS server to the IoT-App VAL/SEAL server.\nTable 5.7.2.5.4-1: Traffic pattern configuration request\n\nTable 5.7.2.5.5-1 describes the information flow for the Traffic pattern configuration response from the IoT-App server to the IoT-PCS server.\nTable 5.7.2.5.5-1: Traffic pattern configuration response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 5.7.2.5.1-1: UE unified traffic pattern and monitoring management subscription request",
                                    "table number": 4,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 5.7.2.5.1-2: IoT-App traffic pattern configuration",
                                    "table number": 5,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 5.7.2.5.2-1: UE unified traffic pattern and monitoring management subscription response",
                                    "table number": 6,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 5.7.2.5.3-1: UE unified traffic pattern update notification",
                                    "table number": 7,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 5.7.2.5.4-1: Traffic pattern configuration request",
                                    "table number": 8,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 5.7.2.5.5-1: Traffic pattern configuration response",
                                    "table number": 9,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "5.7.3\tManagement and 5GC exposure procedures",
                            "text_content": "The CP configuration procedure uses the information received by the IoT-PCS Server from the IoT-App regarding predictable communication behaviour of their services to provide information to 5GC for resource planning purposes, using an existing network exposure API.\nPre-conditions:\n1.\tIoT-PCS Server determines to provide the service for a specific UE after receiving CP configuration indications in UE unified traffic pattern and monitoring management subscription requests, subject to policy.\n\nThe figure depicts a CP configuration procedure, showing the steps involved in setting up a Cisco Packet Core (CP) for a network. The diagram illustrates the various components and their connections, including the switch, router, and other network devices. The figure is essential for network administrators to understand the process of configuring a CP and ensuring the proper functioning of the network.\nFigure 5.7.2.2-1: CP configuration procedure\n1.\tThe IoT-PCS Server stores all Traffic pattern configurations received for the UE in subsequent UE unified traffic pattern and monitoring management subscription procedures and determines the UE unified traffic pattern. The IoT-PCS Server can also initiate Traffic pattern configuration requests to obtain additional configurations. The IoT-PCS Server uses the UE unified traffic pattern  to determine a CpParameterSet, as defined in 3GPP TS 29.122[10], for the CpProvisioning API.\n2.\tThe IoT-PCS Server determines based on local policy when the CpProvisioning API is to be invoked and executes the CP parameter provisioning procedure described in 3GPP TS 29.122[10] clause 4.4.9.\n\nThe UE unified traffic pattern management procedure is used to determine and manage a unified traffic pattern applicable to a specified UE. The IoT-PCS Server then uses the 5GC exposure of UE monitoring events to update the UE unified traffic pattern.\nPre-conditions:\n1.\tIoT-PCS Server determines to provide the service for a specific UE if either of the following conditions is true:\na)\tIt receives UE unified traffic pattern monitoring management indications in UE unified traffic pattern and monitoring management subscription requests; or\nb)\tIt determines to provide Network parameter coordination services for the UE.\n\n\nThe figure depicts a unified traffic pattern and monitoring management subscription procedure for an UE (User Equipment) in a 5G network. It illustrates the traffic management system, including the UE's unified traffic pattern and the subscription process. The figure also shows the monitoring management subscription procedure, which is essential for ensuring network performance and user experience.\nFigure 5.7.3.3-1: UE unified traffic pattern and monitoring management subscription procedure\nThe IoT-PCS Server determines an initial UE unified traffic pattern, e.g. by using all Traffic pattern configurations received for the UE .\n2.\tThe IoT-PCS Server determines, based on local policy that UE monitoring events are to be configured and executes the corresponding Monitoring procedure as described in 3GPP TS 29.122 [10] clause 4.4.2.\n3.\tThe IoT-PCS Server updates the UE unified traffic pattern based on the received monitoring events as follows:\n-\tIf a Monitoring Notification report for UE_REACHABILITY is received, and idleStatusInfo information is provided in the report, the IoT-PCS Server changes the schedule element of the UE unified traffic pattern such that the duration of activity is set to the value of the activeTime parameter configured in the idleStatusInfo.\n-\tIf a Monitoring Notification report for AVAILABILITY_AFTER_DDN_FAILURE is received after a UE transitions to idle mode, the IoT-PCS Server updates the schedule element of the UE unified traffic pattern such that:  the start of an activity window is based on the Idle Timestamp, with a periodicity equal to the TAU/RAU Timer; the duration of the activity window indicates the Active Time value.\n-\tIf a Monitoring Notification report for COMMUNICATION_FAILURE is received The IOT-PCS updates the schedule element of the UE unified traffic pattern to indicate that no communications are currently available (e.g. by using a keyword such as \"NULL\"). Local policies may specify events/ thresholds further defining when the IoT-PCS may provide a UE unified traffic pattern update based on monitoring events. For example, the update may be provided only after repeated communication failures are received within a timespan, or only if high reliability communications are expected.  It is recommended that UE Reachability monitoring is also enabled in conjunction with the Communication Failure monitoring. This enables the IoT-PCS to provide updated timing information once the UE becomes reachable again.\n-\tIf a Monitoring Notification report for LOSS_OF_CONNECTIVITY is received, the IoT-PCS Server changes the schedule element of the UE unified traffic pattern to indicate that no communications are currently available\n4.\tConditional: The IoT-PCS Server notifies subscribers of the UE unified traffic pattern updates, as described in clause 5.7.2.3\nThe network parameter coordination  procedure uses UE unified traffic pattern information  to influence aspects of UE/network behaviour such as the UE's PSM and extended idle mode DRX. For this purpose, parameter values may be suggested for Maximum Latency and Maximum Response Time for a UE. 5GC may choose to accept, reject or modify the suggested configuration parameter value.\nPre-conditions:\n1.\tIoT-PCS Server determines to provide the service for a specific UE after receiving Network parameter coordination indications in UE unified traffic pattern and monitoring management subscription requests, subject to policy.\n2.\tIoT-PCS Server determines and manages UE unified traffic patterns as described in clause 5.7.3.3.\nThe figure depicts a network parameter coordination procedure, illustrating the steps taken to ensure the proper synchronization of network parameters. The diagram includes various components such as network parameters, network parameters coordinator, and network parameters coordinator. The figure highlights the importance of network parameter synchronization in maintaining network reliability and efficiency.\nFigure 5.7.3.4-1: Network parameter coordination procedure\n1.\tThe IoT-PCS Server determines to provide Network parameter configuration to 5GC. This determination can be based on updates to the UE unified traffic patterns resulting from interactions with IoT-App Servers (e.g. Traffic pattern configuration updates), on local policies, etc.\nThe IoT-PCS Server determines parameters the needed for NpConfiguration data structure as specified in 3GPP TS 29.122[10] from the UE unified traffic patterns as follows:\n-\tmaximumLatency – This value tells the network how long the UE is allowed to sleep.  Setting it to 0 will disable PSM, extended idle mode DRX, and extended buffering.  The IoT-PCS can extract the periodicity derived from the UE unified traffic pattern, which includes the schedule elements for the UEs communications with all IoT-Apps. The IoT-PCS Server sets Maximum Latency to be approximately the periodicity of the active periods derived from the schedule element of the UE unified traffic pattern.\n-\tmaximumResponseTime – When the UE uses PSM, Maximum Response Time tells the network how long the UE should stay reachable after a transition to idle.  When the UE uses eDRX, Maximum Response Time is used by the network to determine when to send a reachability notification before a UE's paging occasion.  The IoT-PCS Server extracts a duration of activity from the schedule element of the UE unified traffic pattern and sets Maximum Response Time to reflect the duration of activity, indicating how long the UE should stay reachable for downlink communications.\n2.\tThe IoT-PCS Server performs the Network Parameter Configuration procedure as described in 3GPP TS 29.122[10] clause 4.4.12.\nNOTE:\tThe values provided by IoT-PCS Server to 5GC in the Network parameter configuration procedure may or may not be accepted by the network. If they are not accepted, 5GC responds accordingly and the previous values apply, or new values are provided. The new values are used by IoT-PCS Server as described in clause 5.7.3.3, when they were provided via monitoring event notifications.\n5.7.3\tEvaluation\nThe solution addresses Key Issues #3 and #4.\nThe solution captured in this clause except sub-clause 5.7.3.2 allows the IoT-PCS to aggregate scheduling information and monitoring requests from multiple IoT-App Servers. Aggregated monitoring in the application layer can greatly reduce the signalling burden on the exposure interfaces, i.e. T8/ N33, especially for MIoT.\nIn addition, the solution enables IoT Platforms to integrate network-agnostic ASs (i.e. without SCEF/NEF APIs) and to provide them with UE monitoring and scheduling features. IoT-PCS Server is also used to use application-level scheduling to derive 5GC PSM configurations on behalf of multiple IoT-App servers. At the same time, this solution does not affect the ability of IoT-App VAL/SEAL Servers to directly interact with 5GS for UE monitoring. Therefore, the UE unified traffic pattern management features, provide a viable solution recommended for the normative phase.\nThe UE unified traffic pattern management procedure can be considered in the normative phase as enhancement to NRM event monitoring (as an alternative to IoT-PCS functionality).The IoT-PCS server can aggregate network parameter configurations for its serviced IoT App servers. However, additional coordination from different IoT-PCS servers and other AFs (not served by IoT-PCS server) is done in the 3GPP CN.\nThe procedure for CP configuration in clause 5.7.3.2 addresses KI #4. However, given the SCEF/NEF capabilities to deal with multiple CP configurations per UE, such a solution does not provide significant advantages, therefore it is not proposed to be considered for the normative phase.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "6\tOverall Evaluation",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "6.1\tArchitecture evaluation",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause provides an evaluation of the application architecture for enabling application capability exposure to general purpose servers or 3rd party IoT applications via IoT Platforms.\nA summary of the architecture and key issues specified in this technical report are listed in Table 6.1-1. The architecture enhancements proposed in clauses 5.1 and 5.3 describe the.\nTable 6.1-1 Architecture evaluation\n\n",
                    "tables": [
                        {
                            "description": "Table 6.1-1 Architecture evaluation",
                            "table number": 10,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "6.2\tSolution evaluations",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.2.1\tGeneral",
                            "text_content": "All the key issues and solutions specified in this technical report are listed in Table 6.2.1-1. It includes the mapping of the key issues (clause 4) to the solutions and corresponding solution evaluations. It also lists the dependencies on other working groups that will need consideration during the Release 18 normative phase.\nTable 6.2.1-1 Key issue and solutions\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 6.2.1-1 Key issue and solutions",
                                    "table number": 11,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.2.2\tKey issue #2: Application server monitoring and control of traffic",
                            "text_content": "Solution #1 (Application Service Management Service) and solution #5 (Application Server status monitoring via CAPIF) addresses the key issue#2.\nSolution #1 proposes application service management using SEAL server. The solution proposes data collection procedures using request-response model and also subscribe-notify model. If required, the ASM server decides corrective action to take for VAL client or VAL server.\nNOTE:\tFor solution#1, whether configuring VAL server procedure is required or not – will be considered in normative work.\nSolution #5 proposes to enhance CAPIF service to monitoring application server status. When an AS acting as an AEF publishes its service API to the CCF, the AS updates its service API status (active, inactive) at the CCF. The API invoker can discover the service API status via service API discovery procedure or be notified about the service API status change via CAPIF event exposure procedure.\nBoth solutions can be considered as a base for normative work.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "7\tConclusions",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "7.1\tSolution conclusions",
                    "description": "",
                    "summary": "",
                    "text_content": "This technical report completes the study on application architecture for enabling application capability exposure to general purpose servers or third party IoT applications via IoT Platforms, with the following considerations for normative work:\n1.\tDefinition of terms and abbreviations captured in clause 3 will be reused as needed.\n2.\tThe application architecture enhancements for enabling application capability exposure to general purpose servers or 3rd party IoT applications via IoT Platforms are summarized in clause 6.1.\n3.\tThe IoT platform deployment options detailed in clause 5.2 will be analysed in the normative phase, to determine whether a new IoT PCS SEAL service is necessary. Applicable IoT-PCS -related procedures are to be implemented in the normative phase using existing SEAL services (e.g. NRM) whenever there is relevance to other verticals or enablers.\n4.\tThe following individual solutions, corresponding to the key issues, will be considered as candidate solutions:\na.\tfor Key issue #1 (Background Data Transfer negotiation):\ni.\tSolution #6 (BDT configuration) as NRM functionality.\nb.\tfor Key issue #2 (Application server monitoring and control of traffic):\ni.\tSolution #1 (Application Service Management Service) as ASM SEAL functionality; and\nii.\tSolution #5 (Application Server status monitoring via CAPIF) as new CAPIF functionality.\nc.\tfor Key issue #3 (IoT Platform PSM monitoring and configuration)\ni.\tSolution #7 (UE unified traffic pattern and monitoring management) except clauses 5.7.3.2, 5.7.3.4, as NRM functionality.\nd.\tfor Key issue #4 (Configuration of Communication Patterns):\ni.\tClause 5.7.3.2 of Solution #7 (CP configuration procedure) addresses the key issue but does not provide enough enhancement over existing SCEF/NEF functionality. Therefore, no functionality is considered for normative phase.\ne.\tfor Key issue #5 (NIDD configuration):\ni.\tNo solutions introduced have been agreed, therefore no functionality is considered for normative phase.\nEditor's Note: The conclusion for Key Issue #6 is FFS\n\n",
                    "tables": [
                        {
                            "description": "",
                            "table number": 12,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        }
    ]
}
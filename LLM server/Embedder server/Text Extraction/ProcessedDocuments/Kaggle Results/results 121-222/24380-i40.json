{
    "document_name": "24380-i40.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Specification has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document specifies the media plane control protocols and interactions with the media needed to support Mission Critical Push To Talk (MCPTT).\nThe present document specifies protocol for using pre-established session to setup calls, floor control and managing MBMS subchannels over MBMS bearers on-network and off-network protocols for floor control.\nMission critical communication services are services that require preferential handling compared to normal telecommunication services, e.g. in support of police or fire brigade. Floor control provides a mechanism for managing the right to transmit at a point in time during an MCPTT call.\nThe MCPTT service and its associated media plane control protocols can be used for public safety applications and also for general commercial applications (e.g., utility companies and railways).\nThe present document is applicable to User Equipment (UE) supporting the floor participant functionality, setting up calls using pre-established SIP sessions and using MBMS bearers for group communication and to floor control servers supporting these functions in the MCPTT system.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[2]\t3GPP TS 24.379: \"Mission Critical Push To Talk (MCPTT) call control Protocol specification\".\n[3]\tIETF RFC 3550: \"RTP: A Transport Protocol for Real-Time Applications\".\n[4]\t3GPP TS 24.483: \"Mission Critical Services (MCS) Management Object (MO)\".\n[5]\t3GPP TS 23.379: \"Functional architecture and information flows to support mission critical communication services; Stage 2\".\n[6]\t3GPP TS 29.468: \"Group Communication System Enablers for LTE (GCSE_LTE); MB2 Reference Point; Stage 3\".\n[7]\tIETF RFC 5761: \"Multiplexing RTP Data and Control Packets on a Single Port\".\n[8]\tVoid.\n[9]\t3GPP TS 25.446: \"MBMS synchronization protocol (SYNC)\".\n[10]\t3GPP TS 29.281: \"General Packet Radio System (GPRS) Tunnelling Protocol User Plane (GTPv1-U)\".\n[11]\t3GPP TS 24.008: \"Mobile radio interface layer 3 specification; Core Network protocols; Stage 3\".\n[12]\t3GPP TS 24.481: \"Mission Critical Services (MCS) group management Protocol specification\".\n[13]\t3GPP TS 24.484: \"Mission Critical Services (MCS) configuration management protocol specification\".\n[14]\tVoid.\n[15]\tIETF RFC 3830: \"MIKEY: Multimedia Internet KEYing\".\n[16]\tIETF RFC 3711: \"The Secure Real-time Transport Protocol (SRTP)\".\n[17]\tIETF RFC 6509: \"MIKEY-SAKKE: Sakai-Kashar Key Encryption in Multimedia Internet KEYing (MIKEY)\".\n[18]\t3GPP TS 33.180: \"Security of the mission critical service\".\n[19]\t3GPP TS 23.032: \"Universal Geographical Area Description (GAD)\".\n[20]\tIETF RFC 5795: \"The Robust Header Compression (ROHC) Framework\".\n[21]\tIETF RFC 3095: \"RObust Header Compression (ROHC): Framework and four profiles: RTP, UDP, ESP, and uncompressed\".\n[22]\tIETF RFC 5225: \"RObust Header Compression Version 2 (ROHCv2): Profiles for RTP, UDP, IP, ESP and UDP-Lite\".\n[23]\t3GPP TS 23.280: \"Common functional architecture to support mission critical services; Stage 2\".\n[24]\t3GPP TS 24.501: \" Technical Specification Group Core Network and Terminals; Non-Access-Stratum (NAS) protocol for 5G System (5GS); Stage 3\".\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tDefinitions",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the terms and definitions given in 3GPP TR 21.905 [1] and the following apply. A term or definition defined in the present document takes precedence over the definition of the same term or definition, if any, in 3GPP TR 21.905 [1].\nActive floor request queue: The floor request queue used by the floor control server to queue received Floor Request messages.\nCandidate arbitrator: The queued floor participant in off-network to whom the floor was granted. Once the candidate arbitrator responds to the floor grant, it becomes the current arbitrator.\nControlling MCPTT function: The MCPTT server performing a controlling role.\nConversation: A number of media bursts exchanged between participants in a group call session.\nCurrent arbitrator: The floor participant in off-network currently arbitrating the floor.\nEffective priority: The priority decision determined by the floor control server based on multiple input parameters like floor priority, participant type, type of call etc. of the current floor request and of the current participant to which floor is granted if any and the local policy.\nMBMS bearer: The service provided by the EPS to deliver the same IP datagrams to multiple receivers in a designated location.\nMBMS subchannel: A logical channel which uses resources of an activated and announced MBMS bearer identified by the TMGI of the MBMS bearer and additional parameters, like UDP port, associated to a group or the MBMS subchannel used to e.g. inform when a conversation in a group call is started or ended.\nNOTE:\tIn this release of the specifications the UDP port is the only parameter used for enabling the differentiation of media and media plane control packets belonging to different groups over the same MBMS bearer by a receiving MCPTT client.\nMedia burst: A flow of media from an MCPTT client that has the permission to send media.\nMedia plane control protocols: Protocols in the media plane used for floor control, pre-established session call control and MBMS subchannel control.\nParticipating MCPTT function: The MCPTT server performing a participating role.\nPassive floor request queue: The floor request queue used by the non-controlling MCPTT function to store received Floor Request messages for monitoring purposes.\nFor the purposes of the present document, the following terms and definitions given in 3GPP TS 23.379 [5] apply:\nAmbient listening call\nFloor control\nFloor participant\nFloor control server\nGroup call\nMCPTT call\nMCPTT server performing a controlling role\nMCPTT server performing a participating role\nMCPTT user\nMission critical push to talk\nMulti-talker control\nPrivate call\nSIP core\nFor the purposes of the present document, the following terms and definitions given in 3GPP TS 24.379 [2] apply:\nNon-controlling MCPTT function of an MCPTT group\nFor the purposes of the present document, the following terms and definitions given in 3GPP TS 33.180 [18] apply:\nClient Server Key (CSK)\nClient Server Key Identifier (CSK-ID)\nGroup Master Key (GMK)\nGroup Master Key Identifier (GMK-ID)\nMulticast Key for Floor Control (MKFC)\nIdentifier of Multicast Key for Floor Control (MKFC-ID)\nMulticast Signalling Key (MuSiK)\nMulticast Signalling Key Identifier (MuSiK-ID)\nPrivate Call Key (PCK)\nPrivate Call Key Identifier (PCK-ID)\nSignalling Protection Key (SPK)\nSignalling Protection Key Identifier (SPK-ID)\nMBMS SubChannel Control Key (MSCCK)\nMBMS SubChannel Control Key Identifier (MSCCK-ID)\nFor the purposes of the present document, the following terms and definitions given in IETF RFC 3711 [16] apply:\nSRTP master key (SRTP-MK)\nSRTP master key identifier (SRTP-MKI)\nSRTP master salt (SRTP-MS)\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in 3GPP TR 21.905 [1] and the following apply. An abbreviation defined in the present document takes precedence over the definition of the same abbreviation, if any, in 3GPP TR 21.905 [1].\nAS\tApplication Server\nCID\tContext ID\nCSK\tClient Server Key\nCSK-ID\tClient Server Key Identifier\nD2D\tDevice to Device\nDL\tDownlink\nGCS AS\tGroup Communication Service Application Server\nGMK\tGroup Master Key\nGMK-ID\tGroup Master Key Identifier\nGMS\tGroup Management Server\nGUK-ID\tGroup User Key Identifier\nIP\tInternet Protocol\nMBMS\tMultimedia Broadcast and Multicast Service\nMBS\tMulticast/Broadcast Service\nMCMC\tMission Critical MBMS subchannel Control Protocol\nMCSC\tMission Critical MBS subchannel Control Protocol\nMCPTT\tMission Critical Push To Talk\nMKFC\tMulticast Key for Floor Control\nMKFC-ID\tIdentifier of Multicast Key for Floor Control (MKFC-ID)\nMSCCK\tMBMS SubChannel Control Key\nMSCCK-ID\tMBMS SubChannel Control Key Identifier\nMuSiK\tMulticast Signalling Key\nMuSiK-ID\tMulticast Signalling Key Identifier\nPCK\tPrivate Call Key\nPCK-ID\tPrivate Call Key Identifier\nPTT\tPush-To-Talk\nRFC\tRequest For Comment\nROHC\tRobust Header Compression\nRTCP\tRTP Control Protocol\nRTP\tReal-time Transport Protocol\nSPK\tSignalling Protection Key\nSPK-ID\tSignalling Protection Key Identifier\nSRTCP\tSecure RTCP\nSRTP\tSecure RTP\nSRTP-MK\tSRTP master key\nSRTP-MKI\tSRTP master key identifier\nSRTP-MS\tSRTP master salt\nSSRC\tSynchronization SouRCe\nTMGI\tTemporary Mobile Group Identity\nUE\tUser Equipment\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tGeneral",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tOverview",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.1.1\tFloor Control",
                            "text_content": "In a PTT group call after the call is setup, at a given time only a single group member is allowed to talk and all other affiliated group members listen to this talker. The control action for obtaining this mode of operation is known as floor control. The direct actors of floor control are the floor participants and the floor control server. A floor participant does the floor control related actions in the MCPTT client. The floor control server is the decision maker of the floor control. In on-network the floor control server is in the MCPTT server with the controlling role. In off-network no specific floor control server exists. The current talker plays the role of floor control server.\nFloor control actions in on-network are described in clause 4.1.1.2. The differences for off-network floor control are described in clause 4.1.1.3.\nNOTE:\tEnd-user actions as operation of the PTT button illustrates functionality but no end-user actions are mandated by the present document.\nAt any point in time a group member can request permission to talk.\nWhen all group members are silent, a group member can press the PTT button, meaning the request for permission to talk. The floor participant entity of this user reflects this request to the floor control server by sending a Floor Request message. If the floor control server decides to permit, it informs this permission for this request by sending a Floor Granted message to the requesting group member. The floor control server informs the initiation of the talk to the other group members by sending a Floor Taken message. Once the group member receives the permission, a permission indication (permission tone) is generated by the client to inform the user that they can talk. The media packets (encoded voice) are sent to the controlling MCPTT server and from there they are distributed to all listeners of this group. The release of the PTT button indicates the user's intention to end talking. Once the PTT button is released, the floor participant sends a Floor Release message to the floor control server indicating that this user has finished talking. This cycle, starting from the Floor Granted message and ending with Floor Release message, is known as 'talk burst' or 'media burst'.\nIn the beginning of a call the initial talk permission request can be implied by the SIP message which initiates the call as specified in 3GPP TS 24.379 [2] without any specific Floor Request message. For ambient listening, the implied talk permission request can be applied to the user on the originating side or to the user on the terminating side.\nA group member can also request permission to talk by sending a Floor Request message during a talk burst. The floor control server can resolve this request in several ways.\n1.\tIf this request has higher priority than the ongoing talk burst, the floor control server revokes the current talk burst by sending a Floor Revoke message to the current talker. The current talker is interrupted and the current media burst is ended by the current floor participant by sending a Floor Release message. Then the floor control server sends a Floor Granted message to the revoking user and send Floor Taken message to other group members. Then a new media burst starts.\n2.\tIf this request does not have higher priority and floor request queueing is not used the floor control server rejects this request by sending a Floor Deny message to the requester. Then a reject indication (reject tone) is generated for the user. The ongoing talk burst continues.\n3.\tIf request queueing is used the floor control server sends Floor Queue Position Info message indicating that there is no permission but the request is queued for potential permission when the current talk burst ends. Then a \"queued\" indication is generated for the user. The ongoing talk burst continues.\nIn the case of an ambient listening call, the user initially granted the floor retains the floor for the duration of the call.\nDuring a talk burst, a queued user can ask its position in the queue by sending a Floor Queue Position Request message. Then the floor control server provides the information by sending Floor Queue Position Info message. A queued user can also remove itself from the queue by sending a Floor Release message. This kind of message exchange during a talk burst does not affect the ongoing talk burst.\nIf request queueing is used, by the end of a talk burst, the floor control server gives the talk permission to the first pending request in the queue. For this, it sends the same messages as in the beginning of a talk burst; Floor Granted message to the permitted user and Floor Taken message to other group members. The permitted user is expected to press the PTT button after the permission tone within a well-defined short period of time. If PTT button is pressed the media burst continues normally until it is released. If not, the MCPTT client loses the talk permission.\nIf queueing is used the ordering in the queue is affected by the priority of the users in the queue.\nA floor request with pre-emptive priority can be granted without revoking the current speaker. In this case media from both the overridden current talker and the overriding MCPTT user is distributed to selected participants at the same time. The list of participants that receive the overriding, overridden, or both transmissions is based on configuration.\nPre-emptive priority without revoking the current talker is not applicable if the group is configured for audio cut-in floor control.\nIf a group is configured as multi-talker group, floor request can be granted to a group member which is allowed to talk in this group without revoking the current talker, provided the number of simultaneous talkers is not greater than \"maximum number of simultaneous talkers\". If the upper limit is reached one of the talkers can be revoked or the current request can be denied based on relative priorities. If configured, when the floor request of an allowed user is not granted the participant requesting the floor may also be queued.\nDuring silence (when no talk burst is ongoing), the floor control server can send Floor Idle message to all floor participants from time to time. The floor control server sends Floor Idle message in the beginning of silence.\nSome of the floor control messages can be repeated as specified in state machines specified in clause 6.\nThe call can be released after a long silence period.\nThis clause describes the special features for off-network floor control with respect to the on-network floor control.\nIn off-network no specific floor control server exists. All floor control messages are sent to all group members.\nWhen a floor control server gives talk permission it sends a Floor Granted message. The information element which expresses the group member, to which this talk permission is given, implies to the other group members that the floor is taken. No other Floor Taken message is sent.\nAfter silence, a floor participant asks for talk permission by sending a Floor Request message. After a well-defined waiting period, if no response is received, this floor participant sends a Floor Taken message indicating itself in the information element which expresses the group member to which this talk permission is given and continues the talk burst.\nIn off-network, the Floor Idle message is not used.\nSome of the floor control messages can be repeated as specified in the state machines specified in clause 7.\nAudio cut-in floor control is not applicable for off-network.\nThe floor control server can determine how to handle a received Floor Request message using a number of input parameters. Examples of input parameters that the floor control server can use are:\n1.\tthe floor priority, using the value of the Floor Priority field in the Floor Request message;\n2.\tthe <user-priority> element as specified in 3GPP TS 24.481 [12];\n3.\tthe <num-levels-priority-hierarchy> element as specified in 3GPP TS 24.484 [13];\n4.\tthe participant type, using the <participant-type> element specified in 3GPP TS 24.481 [12] or, in case a non-controlling MCPTT function is attached to a group call, the <Participant Type> value in the Track Info field in the Floor Request message;\n5.\tthe type of call indicated in the Floor Indicator field;\n6.\tthe effective priority of the floor participant with the permission to send media, and the current type of the call (e.g. normal, imminent-peril, emergency, broadcast); and\n7.\tany other information in the group document specified in 3GPP TS 24.481 [12] or information stored in the controlling MCPTT function outside the scope of the present document.\nUsing a local policy and the above input parameters the floor control server can determine that a floor request is:\n1.\tpre-emptive such that the current talker is overridden;\n2.\tpre-emptive such that the current talker is revoked;\n3.\tnot pre-emptive and put in the floor request queue, if queueing was negotiated; or\n4.\tnot-pre-emptive and rejected, if queueing was not negotiated.\nThe floor control participant can determine how to handle a received Floor Request message using the following input parameters:\n1.\tthe floor priority, using the value of the Floor Priority field in the Floor Request message;\n2.\tthe value of the \"/<x>/<x>/Common/MCPTTGroupMemberList/<x>/UserPriority\" leaf node of the sender of the Floor Request message, present in group configuration as specified in 3GPP TS 24.483 [4];\n3.\tthe value of the \"/<x>/OffNetwork/NumLevelHierarchy\" leaf node present in service configuration as specified in 3GPP TS 24.483 [4];\n4.\tthe type of call indicated in the Floor Indicator field; and\n5.\tthe effective priority of the floor participant with the permission to send media, and the current type of the call (e.g. normal, imminent-peril, emergency).\nUsing the policy as described in clause 7.2.1.2, and the above input parameters the floor control participant can determine that a floor request is:\n1.\tpre-emptive such that the current talker is revoked;\n2.\tnot pre-emptive and put in the floor request queue, if the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"true\"; or\n3.\tnot-pre-emptive and rejected, if the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"false\".\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.1.2\tPre-established session call control",
                            "text_content": "An MCPTT client can pre-establish a session with the participating MCPTT function for potential use when a call is setup. The establishment, the modification and the release of a pre-established session are specified in 3GPP TS 24.379 [2].\nNOTE:\tThe establishment of a pre-established session, for potential use when a call is setup, depends on the policy chosen by the MCPTT service provider.\nA pre-established session can be used when initiating a pre-arranged group call, a chat group call or a private call. Similarly, a pre-established session can be released for reuse after the termination of a pre-arranged group call, chat group call and private call.\nThe media plane control messages related to call setup over a pre-established session are sent over the channel used for media plane control. The media plane control messages related to the release of a call which was setup over a pre-established session, without terminating the pre-established session, are sent over the channel used for media plane control. The unicast channel for media plane control is over the MCPTT-4 reference point.\nFor a pre-arranged group call, when the originator initiates the call setup indicating the use of a pre-established session using SIP messages as specified in 3GPP TS 24.379 [2], the participating MCPTT function (which serves the originating MCPTT client) sends to the originating MCPTT client a Connect message after the controlling MCPTT function accepts the initiation of this call. After the reception of this Connect message the originating MCPTT client sends an Acknowledgment message indicating that the connection is accepted or indicating that the connection is not accepted. If the connection is accepted by the originating MCPTT client, the floor control for this call continues as specified in clause 6.\nFor a pre-arranged group call if the controlling MCPTT function as triggered by an originating group member initiates a call as specified in 3GPP TS 24.379 [2], the participating MCPTT function which serves the terminating MCPTT client sends a Connect message to all affiliated MCPTT clients of this group. After the reception of the Connect message the terminating MCPTT client sends an Acknowledgment message indicating that the connection is accepted or indicating that the connection is not accepted. If the connection is accepted by the terminating MCPTT client, the floor control for this call continues as specified in clause 6.\nNOTE:\tIf a terminating client does not have an available pre-established session, the call setup proceeds as in on-demand call setup as specified in 3GPP TS 24.379 [2].\nFor a chat group call, a group member can use a pre-established session when joining the chat group using SIP messages as specified in 3GPP TS 24.379 [2]. For a group member that has already joined the chat group call, the floor control between the MCPTT client (floor participant) and the MCPTT server (floor control server) continues as specified in clause 6.\nFor a private call the procedures for the originator are the same as for the originator initiating a call for a pre-arranged call setup over a pre-established session, with the difference that the recipient of the call is a private user and not a pre-arranged group.\nFor a private call if the controlling MCPTT function as triggered by the originator initiates a call as specified in 3GPP TS 24.379 [2], the participating MCPTT function (which serves the terminating MCPTT client) sends a Connect message to the terminating MCPTT client served by the participating MCPTT function if this MCPTT client has an available pre-established session and the commencement mode is automatic. If the commencement mode is manual the terminating MCPTT client is invited using SIP procedures as specified in 3GPP TS 24.379 [2].\nWhen a call is released by the controlling MCPTT function (as specified in 3GPP TS 24.379 [2]), the participating MCPTT function sends a Disconnect message to all MCPTT clients which used a pre-established session for this call. Then the call is released (see also 3GPP TS 24.379 [2]) and the pre-established session can be used for another call.\nWhen an MCPTT client leaves a call (as specified in 3GPP TS 24.379 [2]) which was setup over a pre-established session without releasing the pre-established session, this pre-established session can be used for another call.\nA call setup over a pre-established session can also be released by using the specifications in 3GPP TS 24.379 [2] (without the use of Disconnect message). As a result the pre-established session, which has been used for this call, is also released.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.1.3\tMBMS subchannel control",
                            "text_content": "The participating MCPTT function can use an MBMS bearer for the DL transmission of the media and the media control plane.\nThe participating MCPTT function decides to activate an MBMS bearer. After the activation of the MBMS bearer, as specified in 3GPP TS 29.468 [6], the TMGI of this MBMS bearer is announced to the MCPTT clients in the MBMS service area of this MBMS bearer. This announcement enables the MCPTT client to listen (decode/demodulate) this MBMS bearer. The activation of an MBMS bearer and the announcement of the TMGI create a pool of MBMS subchannel resources without any association to a group or other purposes.\nThe criteria for a participating MCPTT function to decide to activate and use an MBMS bearer is implementation dependent.\nAn MBMS bearer can be used for the DL transmission for more than one group. For this, additional parameters like destination UDP port are used for enabling the differentiation of messages and packets belonging to different groups over the same MBMS bearer by a receiving MCPTT client.\nWhen a TMGI is announced a general purpose MBMS subchannel is created by defining an association between the identity of the general purpose MBMS subchannel (e.g. 'general purpose') and the TMGI (of the activated and announced MBMS bearer) together with the parameters (e.g. UDP port) differentiating this general purpose MBMS subchannel in this MBMS bearer. The parameters of this general purpose MBMS subchannel can be communicated to the MCPTT clients in the MBMS service area of this MBMS bearer using unicast over-the air transmission or can be pre-defined and stored in the MCPTT user profile that is downloaded to the MCPTT UE.\nWhen a conversation is started (by an originating MCPTT client of a group) the participating MCPTT function can allocate an MBMS subchannel for this group by defining an association between this group (e.g. 'group id') and the TMGI (of the activated and announced MBMS bearer) with the parameters differentiating this MBMS subchannel in this MBMS bearer. The parameters of this MBMS subchannel are sent using the general purpose MBMS subchannel using the Map Group To Bearer message. The Map Group To Bearer message is repeated as long as the conversation is ongoing for improving the reception probability and to allow MCPTT clients arriving late to listen to the MBMS subchannel.\nThe same MBMS subchannel can be used for media and media control plane of an MCPTT group, subjected to the restrictions stated in IETF RFC 5761 [7].\nIf an MBMS subchannel exists, the participating MCPTT function forwards the media plane control messages, received from the controlling MCPTT function via MBMS subchannel for media plane control. Only floor control messages which are transmitted to more than one affiliated group member are forwarded to the MBMS bearer (e.g. the Floor Taken and Floor Idle messages). The floor control messages can be repeated a configurable number of times for improving the reception probability. The participating MCPTT function forwards the media packets, received from the controlling MCPTT function, via the MBMS subchannel for media.\nAmongst all affiliated group members under this participating MCPTT function, the participating MCPTT function is informed or is enabled to deduce the group members which do not or cannot receive the MBMS subchannels. The participating MCPTT function forwards the media packets and the media plane control messages, received from the controlling MCPTT function, to the group members which do not or cannot receive the MBMS subchannels, using unicast bearers allocated for media and media plane control respectively.\nThe participating MCPTT function can de-allocate an MBMS subchannel after a configurable period of silence in the conversation by removing the association to this group by sending the Unmap Group To Bearer message over this MBMS subchannel. The de-allocation of the MBMS subchannel frees the parameters used for differentiating this MBMS subchannel in this MBMS bearer. Therefore, the resources of a de-allocated MBMS subchannel can be reallocated for a conversation of another group.\nNOTE:\tThe participating MCPTT function will activate MBMS bearers with general QoS characteristics suitable for MCPTT service and will map MBMS subchannels for media or media plane control only to MBMS bearers that can provide the QoS required by media or media plane control.\nThe participating MCPTT function can prior to starting a call over unicast bearers send an Application Paging message, using the MBMS subchannel, to the group intended for the conversation. The procedures to initiate the conversation over the unicast bearers then proceed as described in clause 10.\nThe participating MCPTT function can move an ongoing conversation from an MBMS bearer to unicast bearers by first sending an Application Paging message using the MBMS subchannel, and then sending an Unmap Group To Bearer message. After the Unmap Group To Bearer message the conversation continues using the unicast bearers.\nThe participating MCPTT function can activate an MBMS bearer that previously has been announced over a unicast bearer by sending an MBMS bearer announcement over an MBMS bearer. The MCPTT client acknowledges that it can listen to the MBMS bearer by sending a listening status report.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.1.4\tMBS subchannel control",
                            "text_content": "All steps of clause 4.1.3 apply also for MBS, with the clarification that terminology mapping specified in Annex X applies.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.2\tInternal structure of media plane control entities",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.2.1\tControlling MCPTT function",
                            "text_content": "According to 3GPP TS 23.379 [5] the controlling MCPTT function is divided into a floor control server and a media distribution function. In the present document the internal structure of the MCPTT server is illustrated in figure 4.2-1.\nThe figure depicts a simplified representation of a Multi-Protocol Label Switching (MPLS) server, highlighting its internal structure and procedures. The server is designed to handle multiple protocols, including TCP, IP, and MPLS, and is implemented in a way that is specific to the implementation. The figure provides a visual guide to the procedures and procedures that are used to implement the server, which is crucial for understanding the internal workings of the system.\nNOTE:\tThe real internal structure of the MCPTT server is implementation specific but a possible internal structure is shown to illustrate the procedures.\nFigure 4.2.1-1: Internal structure of floor control in the controlling MCPTT function\nAll entities in the controlling MCPTT function are assumed to have a direct communication interface to the application and signalling plane. The interface to the application and signaling plane carries information about SIP session initialisation and SIP session release, SDP content, etc.\nThe reference point MCPTT-3 is described in 3GPP TS 23.379 [5].\nThe floor control interface towards the MCPTT client receives and transmits the floor control messages from and to the MCPTT client via the participating MCPTT function or non-controlling MCPTT function. The procedures are controlled by a state machine described in clause 6.3.5. One state machine is needed for each MCPTT client participating in an MCPTT call. A non-controlling MCPTT function is seen by the floor control interface towards the MCPTT client as an MCPTT client.\nThe floor control arbitration logic is performing the floor control. The floor control arbitration logic is controlled by a state machine described in clause 6.3.4. One state machine is needed per MCPTT call.\nThe floor request queue is accessible both by the floor control interface towards the MCPTT client for all MCPTT clients in the call and the floor control arbitration logic.\nThe network media interface is receiving and sending media from and to the associated MCPTT client via the participating MCPTT function or non-controlling MCPTT function. The network media interface is out of scope of the present document. One network media interface is needed for each MCPTT client participating in an MCPTT call. A non-controlling MCPTT function is seen by the network media interface as an MCPTT client.\nThe media distributor is controlled by the floor control arbitration logic. The media distributor is out of scope of the present document. One media distributor is needed per MCPTT call.\nThe internal interfaces are assumed to transport the following types of information.\n1.\tThe interface between the network media interface and the floor control interface towards the MCPTT client:\na.\tIndication that the network media interface has started to receive media packets from the associated MCPTT client or that media packets are no longer received from the associated MCPTT client.\nNOTE:\tIt is an implementation option whether an indication e.g. is sent for every received RTP media packet or only when the first packet is received and then when no more RTP packets are received.\n2.\tThe interface between the floor control interface towards the MCPTT client and the floor control arbitration logic:\na.\tFloor control messages to and from the associated MCPTT client, requests to create or delete the state machine instance for the associated MCPTT client. The floor control messages to the floor control arbitration logic are limited to floor control messages that will change the state of the floor.\n3.\tThe interface between the network media interface and the media distributor:\na.\tMedia to and from associated MCPTT clients. This interface is out of scope of the present document.\n4.\tThe interface between the floor control arbitration logic and the media distributor:\na.\tRequests to start or stop distributing media to participants in the MCPTT call. Indication that the media distributor has started to receive media packets from the network media interface associated with the MCPTT client with the permission to send media or that media packets are no longer received from the network media interface from the associated MCPTT client.\n5.\tThe interface between the floor control interface towards the MCPTT client and the floor request queue:\na.\tRequests to store received Floor Request messages in the queue or requests to remove Floor Request messages from the queue and the queue content for building the Floor Queue Position Info message.\n6.\tThe interface between the floor control arbitration logic and the floor request queue:\na.\tRequests to store received Floor Request messages in the queue or requests to remove Floor Request messages from the queue. Indications that the queue is modified.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.2\tMCPTT client",
                            "text_content": "According to 3GPP TS 23.379 [5] the MCPTT client is divided into a floor participant and a media mixer function. In the present document the internal structure of the MCPTT client is illustrated in figure 4.2.2-1.\nThe figure depicts a simplified representation of a client-side component of a communication protocol, specifically the Multiplexed Packet Transport Protocol (MPTCP). The figure shows the internal structure of the client, including the logic and procedures involved in the protocol. The client is designed to handle multiple packets simultaneously, ensuring efficient communication.\nNOTE:\tThe real internal structure of the MCPTT client is implementation specific but a possible internal structure is shown to illustrate the logic and the procedures.\nFigure 4.2.2-1: Internal structure of the MCPTT client\nAll entities in the MCPTT client have a direct communication interface to the application and signalling plane. The interface to the application and signaling plane carries information about SIP session initialisation and SIP session release, SDP content, etc.\nThe reference points MCPTT-4, MCPTT-7, MCPTT-8 and MCPTT-9 are described in 3GPP TS 23.379 [5].\nThe floor participant receives and sends floor control and pre-established session control message over the unicast bearer.\nThe media mixer receives and sends RTP media packets over the unicast bearer. The media mixer indicates to the floor participant when RTP media packets are received and when RTP media packets are no longer received. The floor participant instructs the media mixer on how to handle media received from the user or received from the network either over the unicast bearer or over the MBMS bearer.\nThe MBMS interface receives RTP media packets over the MBMS bearer. The RTP media packets are forwarded to the media mixer.\nThe MBMS interface receives floor control messages and MBMS subchannel control messages over the MBMS bearer. The MBMS interface forward received floor control messages to the floor participants.\nThe floor participant receives indication from the MCPTT client when the MCPTT user has pressed or released the PTT button. The MCPTT client can also provide notification towards the MCPTT user. Voice received from the MCPTT user is, on instruction from the floor participant, encoded by the media mixer and sent as RTP media packets over the unicast bearer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.3\tParticipating MCPTT function",
                            "text_content": "The participating MCPTT function performs the participating role of an MCPTT server as defined in 3GPP TS 23.379 [5]. The participating MCPTT function uses media plane control (non-SIP) messages when taking part in the floor control procedures as specified in clause 6, call over pre-established session as specified in clause 9 and the use of MBMS Bearer procedures as specified in clause 10. In the sequel the term 'controlling MCPTT function' is used for the entity which performs the controlling role of an MCPTT server.\nThe following clauses describe the assumed internal structure of a participating MCPTT function and the role of the participating function in the floor control procedures, the call over pre-established session procedures and the use of MBMS Bearer procedures.\nIn the present document the internal structure of the participating MCPTT function is illustrated in figure 4.2.3.2-1.\nThe figure depicts a simplified representation of the Multi-Point Transmission Function (MPTF) in a 5G network, illustrating the internal structure and logic of the function. The figure includes key components such as the base station (gNB), user equipment (UE), and scatterers. The diagram highlights the use of beamforming techniques to mitigate interference, emphasizing the importance of signal propagation in a 5G network.\nNOTE:\tThe real internal structure of the participating MCPTT function is implementation specific but a possible internal structure is shown to illustrate the logic and the procedures.\nFigure 4.2.3.2-1: Internal structure of the MCPTT client\nAll entities in the participating MCPTT function have a direct communication interface to the application and signalling plane. The interface to the application and signalling plane carries information about SIP session initialisation and SIP session release, SDP content, etc.\nThe reference points MCPTT-3, MCPTT-4, MCPTT-7, MCPTT-8 and MCPTT-9 are described in 3GPP TS 23.379 [5].\nThe media and floor control message distribution receives media control messages and RTP media packets to and from the MCPTT client and the controlling MCPTT function and the non-controlling MCPTT function. Media plane control messages and RTP packets are forwarded as received when unicast bearers are used. If MBMS bearers are used for floor control messages, MBMS subchannel control messages and RTP media packets are sent to the MBMS bearer management.\nThe MBMS bearer management receives floor control message and RTP media packets from the media and floor control message distribution when floor control messages and RTP media packets are sent over an MBMS bearer. MBMS bearer management also generates MBMS subchannel control message. Floor control message, RTP media packets and MBMS subchannel control messages are sent to the GCS AS for distribution over an MBMS bearer. The GCS AS is outside the scope of the present specification.\nWhen a floor control message or a media packet is received from an MCPTT client, in the MCPTT-4 and MCPTT-7 reference points respectively, the participating MCPTT function forwards it to the controlling MCPTT function over MCPTT-3 reference point or to the application and signalling plane. When a floor control message or a media packet is received from the controlling MCPTT function, over MCPTT-3 reference point or the application and signalling plane, for MCPTT clients which do not use an MBMS subchannel, the participating MCPTT function forwards the floor control message to the MCPTT client over the MCPTT-4 and MCPTT-7 reference points respectively. For MCPTT clients which use an MBMS subchannel, for floor control messages directed to all of these MCPTT clients and for media packets, the participating MCPTT function forwards a single floor control message or a single media packet using the MBMS subchannel over MCPTT-9 and MCPTT-8 reference points respectively.\nWhen MCPTT clients are listening to the MBMS subchannel multiple copies of the same media packet destined to each individual MCPTT client are sent by the controlling MCPTT function while the participating MCPTT function only forwards one single media packet over the MBMS bearer. Any optimizations for not sending the media packet from the controlling MCPTT function to all MCPTT clients are out of scope of the present document.\nWhen MCPTT clients are listening to the MBMS subchannel multiple copies of the same Floor Idle message and Floor Taken message destined to each individual MCPTT client are sent by the controlling MCPTT function while the participating MCPTT function only forwards one single Floor Idle or Floor Taken message over the MBMS bearer. Any optimizations for not sending the Floor Idle or Floor Taken message from the controlling MCPTT function to all MCPTT clients are out of scope of the present document.\nThe participating MCPTT function specifications related to the floor control are specified in clause 6.4 for unicast media and media plane control delivery and in clause 10.3.3 for MBMS delivery.\nFor a pre-established session between an MCPTT client and the participating MCPTT function, when a call is initiated over this pre-established session, the participating MCPTT function informs the originating MCPTT client the acceptance or rejection decision of the controlling MCPTT function by sending Connect or Disconnect messages respectively over MCPTT-4 reference point. When a call initiation is accepted by the controlling server and informed to the participating MCPTT function, the participating MCPTT function informs the terminating MCPTT client which has a pre-established session the initiation of this call, using Connect message over MCPTT-4 reference point.\nWhen the controlling MCPTT function informs the participating MCPTT function that a call which is setup over a pre-established session is released (either over the MCPTT-3 reference point or from application and signalling plane), the participating MCPTT function informs the MCPTT client the release of this call using Disconnect message over MCPTT-4 reference point. By the end of the release of the call the pre-established session is reserved for possible future use.\nWhen an Acknowledgment message is received, over the MCPTT-4 reference point, as result of a message informing the MCPTT client for the initiation, the rejection or the release related to a call conducted over a pre-established session, the participating MCPTT function communicates the positive or negative acknowledgment information towards the controlling MCPTT function according to the procedures in 3GPP TS 24.379 [2] (either over MCPTT-3 reference point or from application and signalling plane).\nThe participating MCPTT function specifications related to the call setup over pre-established session are in clause 9.3.\nIn the initiation of a conversation, if the MBMS bearer management in the participating MCPTT function decides to use an MBMS subchannel for the media plane control messages and the media packets, the participating MCPTT function sends a Map Group To Bearer message over the MCPTT-9 reference point, for indicating the association information between the group identity of this call and the TMGI of the MBMS bearer and additional parameters necessary for the identification of this MBMS subchannel using the general purpose MBMS subchannel already associated for the transmission of this information. In the termination of a conversation the participating MCPTT function sends an Unmap Group To Bearer message for terminating the association between the MBMS subchannel in use for this conversation and the group identity.\nThe participating MCPTT function specifications related to the declaration of the association between an MBMS bearer and related parameters and the MBMS subchannel for media and media plane control are specified in clause 10.3.2 and clause 10.3.4.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.4\tNon-controlling MCPTT function of an MCPTT group",
                            "text_content": "According to 3GPP TS 24.379 [2] clause 5.3 the MCPTT server can act in a non-controlling MCPTT function of an MCPTT group role. In the present document the internal structure of the non-controlling MCPTT function of an MCPTT group is illustrated in figure 4.2.4-1.\nThe figure depicts a simplified representation of a Multi-Protocol Label Switching (MPLS) server, highlighting its internal structure and the logic behind its operation. The figure includes various components such as the router, switch, and network interface controller (NILC), which are essential for routing and switching traffic within the network. The figure also illustrates the procedures and logic used to implement the server, such as the use of routing protocols and the management of network resources.\nNOTE:\tThe real internal structure of the MCPTT server is implementation specific but a possible internal structure is shown to illustrate the logic and the procedures.\nFigure 4.2.4-1: Internal structure of the non-controlling MCPTT function\nAll entities in the non-controlling MCPTT function of an MCPTT group are assumed to have a direct communication interface to the application and signalling plane. The interface to the application and signaling plane carries information about SIP session initialisation and SIP session release, SDP content, etc.\nThe floor participant interface receives and transmits the floor control messages from and to the MCPTT client via the participating MCPTT function or non-controlling MCPTT function. The procedures are controlled by a state machine described in clause 6.5.5. One state machine is needed for each MCPTT client participating in an MCPTT call. A non-controlling MCPTT function is seen by the floor participant interface as an MCPTT client.\nThe floor control server interface is distributing floor control message to and from the floor control server in the controlling MCPTT function or non-controlling MCPTT function. The floor control server interface procedures are described in clause 6.5.4. One floor control server interface is needed per MCPTT call.\nThe network media interface is receiving and sending media from and to the associated MCPTT client via the participating MCPTT function or non-controlling MCPTT function. The network media interface is out of scope of the present document. One network media interface is needed for each MCPTT client participating in an MCPTT call. A non-controlling MCPTT function is seen by the network media interface as an MCPTT client.\nThe media distributor is controlled by the floor control server interface. The media distributor is out of scope of the present document. One media distributor is needed per MCPTT call.\nThe internal interfaces are assumed to transport the following type of information.\n1.\tThe interface between the network media interface and the floor participant interface:\na.\tIndication that the network media interface has started to receive media packets from the associated MCPTT client and requests from the floor participant interface to forward received RTP packets towards the media distributor or to stop forward RTP media packets to the media distributor.\nNOTE:\tIt is an implementation option whether an indication e.g. is sent for every received RTP media packet or only when the first packet is received.\n2.\tThe interface between the floor participant interface and the floor control server interface:\na.\tFloor control messages to and from the associated floor participant. The floor control message to the floor control server interface are limited to floor control messages that can result in an action towards the floor control server.\n3.\tThe interface between the network media interface and the media distributor:\na.\tRTP media packets to and from associated MCPTT clients. This interface is out of scope of the present document.\n4.\tThe interface between the floor control server interface and the media distributor:\na.\tRequests to start or stop distributing media to participants in the MCPTT call. Indication that the media distributor has started to receive media packets from the network media interface associated with the MCPTT client with the permission to send media.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.3\tThe media plane control channel",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.3.1\tGeneral",
                            "text_content": "The media plane control channel is used for transport of messages associated with the floor control protocol, the pre-established session call control protocol and the MBMS bearer management protocol, all specified in the present document.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.2\tControl channel realization",
                            "text_content": "The media plane control channel is realized by sending RTCP APP packets on top of UDP/IP. RTCP APP packets are defined in IETF RFC 3550 [3]. The MCPTT specific coding of the RTCP APP packets is defined in clause 8 of the present document.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.3\tEstablishing a media plane control channel",
                            "text_content": "The MCPTT client and the MCPTT server use the SDP offer/answer mechanism in order to negotiate the establishment of the media plane control channel. The SDP offer/answer procedures for negotiating media plane control channel capabilities are specified in clause 14. The ABNF is defined in clause 12.\nThe media description (\"m=\" line) associated with the media plane control channel shall have the values as described in table 4.3.3.1-1.\nTable 4.3.3.1-1: Media plane control channel media description\n\nThe port used for RTCP messages associated with the media plane control channel shall be different than ports used for RTCP messages associated with other \"m=\" lines (e.g. RTP) in the SDP.\nThe SSRC of the RTCP header is used to enable multiplexing of media plane control channels for different communications over the same IP address and port. The SSRCs to be used in the RTCP messages over the media plane control channel for one communication are allocated at session establishment by each receiving entity.\nThe allocated RTCP SSRC is exchanged at session establishment, within an mc_floor_ssrc 'fmtp' attribute included in the \"m=\" line defining the media plane control channel in the SDP offer or answer, in addition to the IP address and port that will be used by the receiving entity. This RTCP SSRC in the mc_floor_ssrc 'fmtp' attribute is the SSRC value that the receiving entity expects in the RTCP header of the floor control messages it will receive for this session, and therefore that the distant entity shall use in the RTCP header of the floor control messages it sends in this session.\nThe SSRC allocated by a receiving entity shall be unique for that receiving entity. This ensures that there cannot be collision and the SSRC will allow to identify the session it is related to in the receiving entity without any ambiguity.\nNOTE 1:\tAs RTCP is used to transport messages on the media plane control channel, the \"m=\" line port value indicates an RTCP port. This is different from cases where an \"m=\" line is associated with an RTP-based stream, and the \"m=\" line port value indicates an RTP port.\nNOTE 2:\tIn case the media plane control channel uses a different IP address than other media described in the SDP, a media plane control channel specific \"c=\" line also needs to be associated with the \"m=\" line associated with the media plane control channel.\nThe format of the optional SDP fmtp attribute, when associated with the media plane control channel, is described in clause 14.\nThe example below shows an SDP media description for a media plane control channel.\nm=application 20032 udp MCPTT\na=fmtp:MCPTT mc_queueing;mc_priority=5;mc_granted;mc_floor_ssrc=12345678\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 4.3.3.1-1: Media plane control channel media description",
                                    "table number": 3,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "5\tEntities",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "5.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause associates the functional entities with the MCPTT roles described in the stage 2 architecture document (see 3GPP TS 23.379 [5]).\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.2\tMCPTT client",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.2.1\tIntroduction",
                            "text_content": "To be compliant with the procedures in the present document, an MCPTT client shall:\n1.\tsupport the role of an MCPTT client as specified 3GPP TS 23.379 [5];\n2.\tsupport the on-network MCPTT client role as specified in 3GPP TS 24.379 [2];\n3.\tsupport the off-network MCPTT client role as specified in 3GPP TS 24.379 [2]; and\n4.\tsupport media plane security as specified in clause 13.\nTo be compliant with the on-network procedures in the present document, an MCPTT client shall:\n1.\tprovide the role of a floor participant in on-network mode as specified in clause 5.2.2;\n2.\tprovide the media mixer function as described in clause 4.2.2 and support the related procedures in clause 6.2;\n3.\twhen operating in systems that support MBMS functionality, provide the MBMS interface as described in clause 4.2.2 and support the related MBMS subchannel control procedure as specified in clause 10.3;\n4.\tprovide PTT button events towards the on-network floor participant as specified in clause 6.2;\n5.\tprovide means (sound, display, etc.) for indications towards the MCPTT user as specified in clause 6.2;\n6.\tsupport negotiating media plane control channel media level attributes as specified in clause 4.3; and\n7.\tsupport call setup control over pre-established session as specified in clause 9.2.\nTo be compliant with the off-network procedures in the present document, an MCPTT client shall:\n1.\tprovide the role of a floor participant in off-network mode as specified in clause 5.2.3;\n2.\tsupport the role of an off-network floor participant as specified in 3GPP TS 23.379 [5] and in the present specification;\n3.\tprovide the media mixer function as described in clause 4.2.2 and support the related procedures as specified in clause 7;\n4.\tprovide PTT button events towards the off-network floor participant as specified in clause 7; and\n5.\tprovide means (sound, display, etc.) for indications towards the MCPTT user as specified in clause 7.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.2\tFloor participant in on-network mode",
                            "text_content": "To be compliant with the on-network procedures in the present document, a floor participant in on-network mode shall:\n1.\tsupport the on-network floor control procedures as defined in 3GPP TS 23.379 [5];\n2.\tsupport acting as an on-network floor participant as specified in clause 6.2; and\n3.\tsupport the on-network mode floor control protocol elements as specified in the clause 8.\nA floor participant in on-network mode may:\n1.\tsupport queueing of floor requests as specified in clause 6.2 and clause 4.1.1.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.3\tFloor participant in off-network mode",
                            "text_content": "To be compliant with the off-network procedures in the present document, a floor participant in off-network mode shall:\n1.\tsupport off-network floor control procedures as specified in 3GPP TS 23.379 [5];\n2.\tsupport acting as an off-network floor participant as specified in clause 7;\n3.\tsupport acting as an off-network floor control server as specified in clause 7; and\n4.\tsupport the off-network mode floor control protocol elements in clause 8.\nA floor participant in off-network mode may:\n1.\tsupport queueing of floor requests as specified in clause 7 and clause 4.1.1.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.3\tControlling MCPTT function",
                    "description": "",
                    "summary": "",
                    "text_content": "An MCPTT server providing the controlling MCPTT function shall:\n1.\tsupport the role of a controlling MCPTT function as specified in 3GPP TS 23.379 [5];\n2.\tsupport negotiating media plane control channel media level attributes as specified in clause 4.3;\n3.\tprovide floor control arbitration logic with an interface to MCPTT clients as described in clause 4.2.1 and support the related procedures as specified in clause 6.3;\n4.\tprovided a network media interface as described in clause 4.2.1 and support associated procedures as specified in clause 6.3;\n5.\tprovide a media distributor with a floor control interface towards the MCPTT clients as described in clause 4.2.1 and support associated procedures in clause 6.3;\n6.\tsupport the on-network mode floor control protocol elements as specified in clause 8: and\n7.\tsupport media plane security as specified in clause 13.\nAn MCPTT server providing the controlling MCPTT function may:\n1.\tprovide a floor request queue as described in clause 4.2.1 and support the related procedures as specified in clause 6.3 and clause 4.3.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.4\tParticipating MCPTT function",
                    "description": "",
                    "summary": "",
                    "text_content": "An MCPTT server providing the participating MCPTT function shall:\n1.\tsupport the role of a participating MCPTT function as specified in 3GPP TS 23.379 [5];\n2.\tdistribute floor control messages as described in clause 6.3 and support associated procedures as specified in clause 6.4;\n3.\tsupport call setup control over a pre-established session as specified in clause 9.3;\n4.\twhen operating in systems that support and employ MBMS functionality, act as a GCS AS as specified in 3GPP TS 29.468 [6] and execute the related MBMS subchannel control procedures as specified in clause 10.2; and\n5.\tsupport media plane security as specified in clause 13.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.5\tNon-controlling MCPTT function",
                    "description": "",
                    "summary": "",
                    "text_content": "An MCPTT server providing the non-controlling MCPTT function of an MCPTT group shall:\n1.\tsupport floor control involving groups from multiple MCPTT systems as specified in 3GPP TS 24.379 [2];\n2.\tprovide a floor control interface towards the controlling MCPTT function as described in clause 4.2.4 and support the related procedures as specified in clause 6.5;\n3.\tprovide a media interface towards the controlling MCPTT function as described in clause 4.2.4 and support the related procedure as specified in clause 6.5;\n4.\tprovide a media distributor as described in clause 4.2.4 and the related procedures as specified in clause 6.5; and\n5.\tsupport media plane security as specified in clause 13.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "6\tOn-network floor control",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "6.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause provides:\n1.\tthe floor participant procedures in clause 6.2;\n2.\tthe floor control server procedures in clause 6.3;\n3.\tthe participating MCPTT function floor control procedures in clause 6.4; and\n4.\tthe non-controlling MCPTT function of an MCPTT group in clause 6.5.\nIf media plane security is required, the MCPTT client, the controlling MCPTT function, the participating MCPTT function and the non-controlling MCPTT function shall perform the additional procedures in clause 13.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "6.2\tFloor participant procedures",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.2.1\tFloor participant procedures at MCPTT session initialization",
                            "text_content": "Based on the negotiations during the call establishment specified in 3GPP TS 24.379 [2], a new instance of the 'Floor participant state transition diagram for basic operation', as specified in clause 6.2.4, shall be created for this call.\nThe SIP INVITE request sent by the application and signalling plane:\n1.\tshall be regarded an implicit floor request when an implicit floor request is negotiated; and\n2.\tshall not be regarded as an implicit floor request in case of a rejoin to an already on-going group call.\nNOTE:\tThe floor participant can negotiate the use of prioritization of the Floor Request message. In that case, the floor participant can request permission to send media at a priority level that is either the same as or lower than the highest priority that was permitted to the participant in the MCPTT call initialization. If a floor participant is authorized for pre-emptive priority in the MCPTT call it is good practise to always request permission to send RTP media packets at a priority level that is lower than pre-emptive priority unless the user explicitly requests to pre-empt the current RTP media packets' sender. In any case pre-emptive priority will have no effect for audio cut-in floor control.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.2\tFloor participant procedures at MCPTT call release",
                            "text_content": "The MCPTT call release (whether it is initiated by the floor participant or floor control server) is a two-step procedure.\nStep 1\tThe floor participant stops sending floor control messages and the MCPTT client stops sending RTP media packets.\nStep 2\tWhen the application and signalling plane has determined that the MCPTT call is released, the corresponding instance of the 'Floor participant state transition diagram for basic operation' as specified in clause 6.2.4 is terminated and the floor participant releases all the used resources.\nThe user plane can initiate the release step 1, but the application and signalling plane always initiates the release step 2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.3\tFloor participant procedures at MCPTT call modification",
                            "text_content": "Adding or removing media streams during an MCPTT call does not influence the floor control procedures.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.4\tFloor participant state transition diagram for basic operation",
                            "text_content": "The floor participant shall behave according to the state diagram and the state transitions specified in this clause.\nFigure 6.2.4.1-1 shows the state diagram for 'Floor participant state transition diagram for basic operation'.\nThe figure depicts a floor participant state transition diagram for basic operation, illustrating the various states and transitions that occur within a floor system. The diagram includes key components such as the floor participant, floor switch, and floor switch control unit (SWU). It also shows the floor participant's state transitions, including the initial state (off), the on state (on), and the off state (off). The diagram is crucial for understanding the basic operation of a floor system and for implementing proper control and monitoring.\nFigure 6.2.4.1-1: Floor participant state transition diagram for basic operation.\nState details are explained in the following clauses.\nIf an RTP media packet or a floor control message arrives in a state where there is no specific procedure specified for the RTP media packets or the received floor control message, the floor participant shall discard the floor control message or the RTP media packet and shall remain in the current state.\nNOTE 1:\tA badly formatted RTP packet or floor control message received in any state is ignored by the floor participant and does not cause any change of the current state.\nNOTE 2:\tThe state transition diagram is the same for groups configured for audio cut-in floor control but the U: queued state should never be visited.\nWhen a new instance of the 'Floor participant state transition diagram for basic operation' is initiated, before any floor control related input is applied, the state machine is in 'Start-stop' state. Similarly, when the call is released the state machine shall return to the Start-Stop state.\nWhen a call is initiated as described in 3GPP TS 24.379 [2], the floor participant:\n1.\tshall create an instance of the 'Floor participant state transition diagram for basic operation';\n2.\tif the originating floor participant receives a floor control message before it receives the SIP 200 (OK) response, shall store the floor control message;\nNOTE:\tThe originating floor participant might receive a floor control message before the SIP 200 (OK) response when initiating, joining or rejoining a call because of processing delays of the SIP 200 (OK) response in the SIP core.\n3.\tif the established MCPTT call is a chat group call and the SIP INVITE request is not an implicit floor request, shall enter the 'U: has no permission' state; and\n4.\tif for the established MCPTT call the SIP INVITE request is an implicit floor request:\na.\tshall start timer T101 (Floor Request) and initialise counter C101 (Floor Request) to 1;\nb.\tshall enter the 'U: pending Request' state; and\nc.\tif the floor participant has received and stored a floor control message before the reception of the SIP 200 (OK) response, shall act as if the floor control message was received in the 'U: pending Request' state after entering the 'U: pending Request' state.\nWhen the floor participant is rejoining an ongoing MCPTT call as described in 3GPP TS 24.379 [2] the floor participant shall enter the 'U: has no permission' state.\nWhen an MCPTT call is established, the terminating floor participant:\n1.\tshall create an instance of a 'Floor participant state transition diagram for basic operation'; and\n2.\tshall enter the 'U: has no permission' state.\nNOTE:\tFrom a floor participant perspective the MCPTT call is established when the application and signalling plane sends the SIP 200 (OK) response.\nThe floor participant is in this state when the floor participant is not sending RTP media packets or is not waiting for a floor control message response.\nIn this state RTP media packets may be received and floor control messages can be received.\nUpon receiving a Floor Idle message, the participant:\n1.\tif the first bit in the subtype of the Floor Idle message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '5' (Floor Idle); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tmay provide floor idle notification to the user, if it has not already done so;\n3.\tshall stop the optional timer T103 (End of RTP media), if it is running; and\n4.\tshall remain in the 'U: has no permission' state.\nUpon receiving the Floor Taken message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Taken message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '2' (Floor Taken); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tmay provide a floor taken notification to the user;\n3.\tif the Floor Indicator field is included and the type of call bit is set, may provide a notification to the user indicating the type of call;\n4.\tif the Floor Indicator field is included and the I-bit is set to '1' (multi-talker), shall provide a notification to the user indicating the type of call and may provide a list of current talkers;\n5.\tmay store the Granted Party's Identity and may display the identity of the talking party to the user;\n6.\tshall store the Audio SSRC of the Granted Participant, to be able to associate received RTP media packets with this communication in case of multiplexing;\n7.\tshould start the optional timer T103 (End of RTP media) for the participant for which Floor Taken message was received; and\n8.\tshall remain in the 'U: has no permission' state.\nUpon receiving RTP media packets, the floor participant:\n1.\tshall request the MCPTT client to start rendering the received RTP media packets;\n2.\tshould restart/start the optional timer T103 (End of RTP media); and\n3.\tshall remain in the 'U: has no permission' state.\nNOTE:\tRTP media packets can be received from multiple sources when dual floor control is applied by the floor control server (see clause 6.3.6) or when multi-talker control is applied by the floor control server. The MCPTT client can differentiate between the different sources using the SSRC in the received RTP media packets. How the media mixer in the MCPTT client mixes the different RTP media stream sources is out of scope of the present document.\nUpon receiving an indication from the user to request permission to send media, the floor participant:\n1.\tshall send the Floor Request message toward the floor control server; The Floor Request message:\na.\tif a different priority than the normal priority is required, shall include the Floor Priority field with the priority not higher than negotiated with the floor control server as specified in clause 14.3.3;\nb.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types; and\nc.\tshall include the location of the user:\ni.\tif the current location of the talker is not available or is not to be reported according to the MCPTT user profile, then include a Location field with the location type is set to '0' (Not provided); or\nii.\tif the current location of the talker is available and may be reported according to the MCPTT user profile, then:\nA)\tif geographical coordinates are to be used and the altitude is not available, include a Location field including Geographic coordinates Location Type as specified in table 8.2.3.21-3;\nB)\tif geographical coordinates are to be used and the altitude is available, include a List of Locations field including a Geographic coordinates Location Type and an Altitude Location Type; and\nC)\tif geographical coordinates are not to be used, inlcude a Location field with any other Location location type and location value are set as specified in table 8.2.3.21-3;\n2.\tshall start timer T101 (Floor Request) and initialise counter C101 (Floor Request) to 1; and\n3.\tshall enter the 'U: pending Request' state.\nOn expiry of timer T103 (End of RTP media), the floor participant:\n1.\tmay provide a floor idle notification to the user; and\n2.\tshall remain in the 'U: has no permission' state.\nUpon receiving the Floor Release Multi Talker message, the floor participant:\n1.\tshall provide a notification to the user indicating that a participant has released the floor in a multi-talker group; and\n2.\tshall remain in the 'U: has no permission' stated.\nUpon receiving an indication from the user to request to stop unicast media, the floor participant:\n1.\tshall send the Unicast Media Flow Control message toward the floor control server; In the Unicast Media Flow Control message:\na.\tshall set Media Flow Control Indicator field value to '0' as specified in clause 8.2.3.26; and\n2.\tshall remain in the 'U: has no permission' state.\nUpon receiving an indication from the user to request to resume unicast media, the floor participant:\n1.\tshall send the Unicast Media Flow Control message toward the floor control server; In the Unicast Media Flow Control message:\na.\tshall set Media Flow Control Indicator field value to '1' as specified in clause 8.2.3.26; and\n2.\tshall remain in the 'U: has no permission' state.\nThe floor participant is in this state when the floor participant is waiting for response to a Floor Request message.\nIn this state the floor participant can receive RTP media packets and floor control messages.\nTimer T101 (Floor Request) is running in this state.\nTimer T103 (End of RTP media) can be running in this state but there is no action in this state if the timer expires. The timer is started as a preparation for the state change that occurs once a response to the Floor Request message is received.\nUpon receiving a Floor Granted message from the floor control server or a floor granted indication in a SIP 200 (OK) response in the application and signalling layer, the floor participant:\n1.\tif the first bit in the subtype of the Floor Granted message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '1' (Floor Granted);\nb.\tshall include the Source field set to '0' (the floor participant is the source); and\nc.\tif the call is a remotely initiated ambient listening call and if the user's MCPTT profile allows sending the user's location, shall include the location as specified in clause 6.2.4.3.5. If sending the user's location is not allowed, the location field may be included with the location type field set to '0' (Not provided);\n2.\tif the call is not an ambient listening call, shall provide floor granted notification to the user, if not already done;\nNOTE:\tProviding the floor granted notification to the user prior to receiving the Floor Granted message is an implementation option.\n3.\tif the Floor Indicator field is included and the type of call bit is set, may provide a notification to the user indicating the type of call;\n4.\tif the G-bit in the Floor Indicator is set to '1' (Dual floor) shall store an indication that the participant is overriding without revoke;\n5.\tshall stop the optional timer T103 (End of RTP media), if running;\n6.\tshall stop timer T101 (Floor Request);\n7.\tshall store the Audio SSRC of the Granted Participant and use it in the RTP media packets until the floor is released; and\n8.\tshall enter the 'U: has permission' state.\nUpon receiving a Floor Deny message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Deny message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '3' (Floor Deny); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tshall provide floor deny notification to the user;\n3.\tmay display the floor deny reason to the user using information in the Reject Cause field;\n4.\tshall stop timer T101 (Floor Request); and\n5.\tshall enter the 'U: has no permission' state.\nOn expiry of timer T101 (Floor Request) less than the upper limit of counter C101 (Floor Request) times the timer is allowed to expire, the floor participant:\n1.\tshall send a Floor Request message towards the floor control server. The Floor Request message:\na.\tif a different priority than the normal priority is required, shall include the Floor Priority field with the priority not higher than negotiated with the floor control server as specified in clause 14.3.3;\nb.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types; and\nc.\tshall include the location of the user as specified in clause 6.2.4.3.5;\n2.\tshall restart timer T101 (Floor request) and increment counter C101 (Floor Request) by 1; and\n3.\tshall remain in the 'U: pending Request' state.\nWhen timer T101 (Floor Request) expires by the upper limit of counter C101 (Floor Request), the floor participant:\n1.\tshall provide a floor request timeout notification to the user; and\n2.\tshall enter the 'U: has no permission' state.\nUpon receiving RTP media packets, the floor participant:\n1.\tshall request the MCPTT client to start rendering the received RTP media packets;\n2.\tshould start the optional timer T103 (End of RTP media) for the floor participant form which RTP packets were received; and\n3.\tshall remain in the 'U: pending Request' state.\nNOTE:\tRTP media packets can be received from multiple sources when dual floor control is applied by the floor control server (see clause 6.3.6) or when multi-talker control is applied by the floor control server. The MCPTT client can differentiate between the different sources using the SSRC in the received RTP media packets. How the media mixer in the MCPTT client mixes the different RTP media stream sources is out of scope of the present document.\nUpon receiving an indication from the user to release permission to send media, the floor participant:\n1.\tshall send a Floor Release message towards the floor control server;\na.\tvoid;\n2.\tmay include the first bit in the subtype of the Floor Release message set to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall start timer T100 (Floor Release) and initialise counter C100 (Floor Release) to 1;\n4.\tshall stop timer T101 (Floor Request); and\n5.\tshall enter the 'U: pending Release' state.\nUpon receiving a Floor Queue Position Info message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Queue Position Info message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '9' (Floor Queue Position Info); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tshall provide floor request queued response notification to the MCPTT user;\n3.\tmay provide the queue position and priority to the MCPTT user;\n3A.\tshall stop timer T101 (Floor Request); and\n4.\tshall enter the 'U: queued' state.\nNOTE:\tFor groups configured for audio cut-in floor control the floor participant will never receive Floor Queue Position Info.\nUpon receiving the Floor Release Multi Talker message, the floor participant:\n1.\tshall provide a notification to the user indicating that a participant has released the floor in a multi-talker group; and\n2.\tshall remain in the 'U: pending Request' state.\nUpon receiving a Floor Taken message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Taken message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '2' (Floor Taken); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tmay provide floor taken notification to the user;\n3.\tif the Floor Indicator field is included and the type of call bit is set, may provide a notification to the user indicating the type of call;\n4.\tif the Floor Indicator field is included and the I-bit is set to '1' (multi-talker), shall provide a notification to the user indicating the type of call and may provide a list of current talkers;\n5.\tshould start the optional timer T103 (End of RTP media) for each new talker as received in Floor Taken message;\n6.\tif the identity of the floor participant is not included in the List of Granted Users, shall stop timer T100 (Floor Release); and\n7.\tif:\na.\tthe floor participant has requested the floor with pre-emptive floor priority; and\nb.\tthe Floor Taken message is received as a result of the floor being taken by another floor participant;\nthen  remain in the 'U: pending request state';\notherwise,\na.\tshall stop timer T101 (Floor Request); and\nb.\tshall enter the 'U: has no permission' state.\nNOTE:\tWhen the floor participant has requested the floor with/wthout pre-emptive floor priority, there is a possibility that this floor participant can also receive a Floor Granted creating a dual floor or Multi-talker scenario (multi-talker configuration limit reached or within the limit).\nThe floor participant is in this state when the MCPTT client is permitted to send RTP media. In this state the floor participant can receive floor control messages.\nIn this state, the floor participant can release permission to send RTP media at any time, even before sending any media.\nThe MCPTT client could have already buffered media when it enters this state.\nNOTE:\tIf the floor participant was queued, the floor participant requests a confirmation from the MCPTT user before start sending media. If confirmed, the media sending starts otherwise the permission to send media is released.\nUpon receiving indication from the MCPTT client that encoded voice is received from the user or if encoded voice is already buffered the floor participant:\n1.\tshall request the MCPTT client to start forward encoded voice to the MCPTT server; and\n2.\tshall remain in the 'U: has permission' state.\nUpon receiving an indication from the user to release the permission to send RTP media, the floor participant:\n1.\tshall send a Floor Release message towards the floor control server. The Floor Release message:\na.\tmay include the first bit in the subtype of the Floor Release message set to '1' (acknowledgement is required) as specified in clause 8.2.2;\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nb.\tvoid; and\nc.\tif the Floor Granted message included the G-bit set to '1' (Dual floor), shall include the Floor Indicator with the G-bit set to '1' (Dual floor);\n2.\tshall remove the indication that the participant is overriding without revoke if this indication is stored;\n3.\tshall remove the indication that the participant is overridden without revoke if this indication is stored;\n4.\tshall start timer T100 (Floor Release) and initialize counter C100 (Floor Release) to 1; and\n5.\tshall enter the 'U: pending Release' state.\nUpon receiving a Floor Revoke message, the floor participant:\n1.\tshall inform the user that the permission to send RTP media is being revoked;\n2.\tmay give information to the user about the reason for revoking the permission to send media;\n3.\tshall request the media mixer in the MCPTT client discard any remaining buffered RTP media packets and to stop forwarding encoded voice to the MCPTT server;\n4\tif the G-bit in the Floor Indicator is set to '1' (Dual floor):\na.\tshall send a Floor Release message. In the Floor Release message:\ni.\tshall include the Floor Indicator with the G-bit set to '1' (Dual floor); and\nii.\tmay set the first bit in the subtype to '1' (Acknowledgment is required) as described in clause 8.2.2;\n5\tif the G-bit in the Floor Indicator is set to '0' (not Dual floor):\na.\tshall send a Floor Release message. In the Floor Release message:\ni.\tshall include the Floor Indicator with the G-bit set to '0' (not Dual floor); and\nii.\tmay set the first bit in the subtype to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n6.\tshall start timer T100 (Floor Release) and initialize counter C100 (Floor Release) to 1; and\n7.\tshall enter the 'U: pending Release' state.\nUpon receiving a Floor Granted message from the floor control server, the floor participant:\n1.\tif the first bit in the subtype of the Floor Granted message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '1' (Floor Granted); and\nb.\tshall include the Source field set to '0' (the floor participant is the source); and\n2.\tshall remain in the 'U: has permission' state.\nUpon receiving RTP media packets the floor participant:\n1.\tshall request the MCPTT client, based on configuration, either to continue rendering or stop the rendering and start storing the received RTP media packets if an indication is stored that the participant is overriding without revoke;\nNOTE:\tThe configuration whether to continue rendering or to start storing the incoming RTP media is out of the scope of the present document.\n2.\tshall request the MCPTT client to render the received RTP media packets if an indication is stored that the participant is overridden without revoke; and\n3.\tshall remain in the 'U: has permission' state.\nNOTE:\tRTP media packets can be received from multiple sources when dual floor control is applied by the floor control server (see clause 6.3.6) or when multi-talker control is applied by the floor control server. The MCPTT client can differentiate between the different sources using the SSRC in the received RTP media packets. How the media mixer in the MCPTT client mixes the different RTP media stream sources is out of scope of the present document.\nUpon receiving a Floor Idle message from the floor control server, the floor participant:\n1.\tif an indication that the participant is overriding without revoke is stored:\na.\tif the first bit in the subtype of the Floor Idle message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\ni.\tshall include the Message Type field set to '5' (Floor Idle); and\nii.\tshall include the Source field set to '0' (the floor participant is the source);\nb.\tshall remove the indication that the participant is overriding without revoke; and\nc.\tshall remain in the 'U: has permission' state; and\n2.\tif the G-bit in the Floor Indicator is set to '1' (Dual Floor) and an indication that the participant is overridden without revoke is stored:\na.\tif the first bit in the subtype of the Floor Idle message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\ni.\tshall include the Message Type field set to '5'  (Floor Idle); and\nii.\tshall include the Source field set to '0' (the floor participant is the source);\nb.\tshall remove the indication that the participant is overridden without revoke; and\nc.\tshall remain in the 'U: has permission' state.\nUpon receiving a Floor Taken message:\n1.\tif the G-bit in the Floor Indicator set to '1' (Dual Floor) the floor participant:\na.\tshall inform the user that the call is overridden without revoke;\nb.\tshall store an indication that the participant is overridden without revoke; and\nc.\tshall remain in the 'U: has permission' state; and\n2.\tif the I-bit in the Floor Indicator set to '1' (Multi-talker) the floor participant:\na.\tmay provide a floor taken notification to the user;\nb.\tshould start the optional timer T103 (End of RTP media) for the participant for which Floor Taken message was received;\nc.\tshall provide a notification to the user indicating the type of call and may provide a list of current talkers; and\nd.\tshall remain in the 'U: has permission' state.\nUpon receiving the Floor Release Multi Talker message, the floor participant:\n1.\tshall provide a notification to the user indicating that the participant has released the floor in a multi-talker group; and\n2.\tshall remain in the 'U: has permission' state.\nThe floor participant is in this state when the floor participant is waiting for response to a Floor Release message.\nIn this state the floor participant can receive floor control messages and RTP media packets.\nTimer T100 (Floor Release) is running in this state.\nOn expiry of timer T100 (Floor Release) less than the configurable number of the upper limit of counter C100 (Floor Release) times, the floor participant:\n1.\tshall send a Floor Release message towards the floor control server;\n2.\tmay set the first bit in the subtype of the Floor Release message to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall restart timer T100 (Floor Release) and increment counter C100 (Floor Release) by 1; and\n4.\tshall remain in state 'U: pending Release'.\nWhen timer T100 (Floor Release) expires by the upper limit of counter C100 (Floor Release) times, the floor participant:\n1.\tshall enter the 'U: has no permission' state.\nUpon receiving a Floor Idle message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Idle message to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '5' (Floor Idle); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tmay provide a floor idle notification to the MCPTT user;\n3.\tif the Floor Indicator field is included and the type of call bit is set, may provide a notification to the user indicating the type of call;\n4.\tshall stop timer T100 (Floor Release);\n5.\tif the session is not a broadcast group call or if the A-bit in the Floor Indicator field is set to '1' (Normal call), shall enter the 'U: has no permission' state; and\n6.\tif the session was initiated as a broadcast group call:\na.\tshall indicate to the MCPTT client the media transmission is completed; and\nb\tshall enter the 'Releasing' state.\nUpon receiving a Floor Taken message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Taken message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '2' (Floor Taken); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tmay provide floor taken notification to the user;\n3.\tif the Floor Indicator field is included and the type of call bit is set, may provide a notification to the user indicating the type of call;\n4.\tif the Floor Indicator field is included and the I-bit is set to '1' (multi-talker), shall provide a notification to the user indicating the type of call and may provide a list of current talkers;\n5.\tmay store the Granted Party's Identity and may display the identity of the talking party to the user;\n6.\tshall store the Audio SSRC of the Granted Participant, to be able to associate received RTP media packets with this communication in case of multiplexing;\n7.\tshould start the optional timer T103 (End of RTP media) for each new talker as received in Floor Taken message;\n8.\tif the identity of the floor participant is not included in the List of Granted Users, shall stop timer T100 (Floor Release); and\n9.\tshall enter the 'U: has no permission' state.\nUpon receiving an indication from the MCPTT client that RTP media packets are received, the floor participant:\n1.\tshall request the MCPTT client to start rendering the RTP media packets;\n2.\tshould start the optional timer T103 (End of RTP media) for the participant from which the RTP packets were received;\n3.\tvoid; and\n4.\tshall remain in the 'U: pending Release' state.\nNOTE:\tRTP media packets can be received from multiple sources when dual floor control is applied by the floor control server (see clause 6.3.6) or when multi-talker control is applied by the floor control server. The MCPTT client can differentiate between the different sources using the SSRC in the received RTP media packets. How the media mixer in the MCPTT client mixes the different RTP media stream sources is out of scope of the present document.\nUpon receiving a Floor Revoke message, the floor participant:\n1.\tmay give information to the user that permission to send RTP media is being revoked;\n2.\tmay inform the user of the reason contained in the Floor Revoke message; and\n3.\tshall remain in the 'U: pending Release' state.\nUpon receiving a Floor Granted message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Granted message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '1' (Floor Granted); and\nb.\tshall include the Source field set to '0' (the floor participant is the source); and\n2.\tshall remain in the 'U: pending Release' state.\nUpon receiving the Floor Release Multi Talker message, the floor participant:\n1.\tshall provide a notification to the user indicating that the participant has released the floor in a multi-talker group; and\n2.\tif the message is due to the participant having released the floor shall enter 'U: has no permission', otherwise shall remain in the 'U: pending Release' state.\nThis clause describes the actions to be taken in all states defined for the basic state diagram with the exception of the 'Start-stop' state and the 'Releasing' state.\nUpon receiving an MCPTT call release step 1 request from the application and signalling plane when the MCPTT call is going to be released or when the floor participant is leaving the MCPTT call, the floor participant:\n1.\tshall stop sending floor control messages and stop all running timers;\n2.\tshall request the MCPTT client to stop sending RTP media packets; and\n3.\tshall enter the 'Releasing' state.\nUpon receipt of a request from an MCPTT user to cancel the floor requests of other MCPTT users whose floor requests queued or a request from an MCPTT user to clear all the users floor requests queued by the floor control server for supporting queuing, if the group is not configured for audio cut-in floor control, the floor participant:\n1.\tshall send the Queued Floor Requests message as described in clause 8.2.15 including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '0' (Cancel Request) if:\na.\tthe user provided a list of MCPTT users, then include the list of MCPTT users in the List of Queued Users field; or\nb.\tthe user did not provide a list of MCPTT users, then the List of Queued Users field is not included;  (This is coding indicates that the user is requesting that all floor requests queued by the floor control server for supporting queuing);\n2.\tshall start timer T134 (Queued Floor Requests); and\n3.\tshall remain in the current state.NOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nIf the group is configured for audio cut-in floor control, the floor participant shall indicate to the MCPTT user that request to cancel the queued floor requests not allowed on the group configured for audio cut-in floor control.\nOn expiry of timer T134 (Queued Floor Requests), the floor participant:\n1.\tshall provide a Queued Floor Requests timeout to the MCPTT client, and\n2.\tshall remain in the current state.\nNOTE:\tIt is an implementation option to handle the timer expiry event and what action to take.\nUpon receiving a Queued Floor Requests message, including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '1' (Cancel Result), the floor participant:\n1.\tif the first bit in the subtype of the Queued Floor Requests message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '14' (Queued Floor Requests); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tmay provide the result of a message for cancellation of a queued floor request to the MCPTT user;\n3.\tshall stop the timer T134 (Queued Floor Requests), if running; and\n4.\tshall remain in the current state.\nThe floor participant is in this state while waiting for the application and signalling plane to finalize the disconnection of an MCPTT call.\nUpon receiving an MCPTT call release step 2 request from the application and signalling, the floor participant:\n1.\tshall release all resources including any running timers associated with the MCPTT call; and\n2.\tshall enter the 'Start-stop' state and terminate the current instance of the 'Floor control state machine – basic'.\nThe floor participant uses this state when a Floor Request message has been queued by the floor control server, and is awaiting the Floor Granted message.\nIn this state, the MCPTT client can receive RTP Media packets and the floor participant can send and receive floor control messages.\nThe timer T104 (Floor Queue Position Request) can be running in this state.\nUpon receiving an indication from the media mixer in the MCPTT client that the media mixer is receiving RTP media packets, the floor participant:\n1.\tshall request to the media mixer to start rendering received RTP media packets;\n2.\tshould restart timer T103 (End of RTP media) from which RTP packets were received; and\n3.\tshall remain in the 'U: queued' state.\nNOTE:\tRTP media packets can be received from multiple sources when dual floor control is applied by the floor control server (see clause 6.3.6) or when multi-talker control is applied by the floor control server. The MCPTT client can differentiate between the different sources using the SSRC in the received RTP media packets. How the media mixer in the MCPTT client mixes the different RTP media stream sources is out of scope of the present document.\nUpon receiving a Floor Taken message, the floor participant:\n1.\tmay provide a floor taken notification to the MCPTT user;\n2.\tif the first bit in the subtype of the Floor Taken message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '2' (Floor Taken); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n3.\tif the Floor Indicator field is included and the I-bit is set to '1' (multi-talker), shall provide a notification to the user indicating the type of call and may provide a list of current talkers;\n4.\tmay store the Granted Party's Identity and may display the identity of the talking party to the user;\n5.\tshall store the Audio SSRC of the Granted Participant, to be able to associate received RTP media packets with this communication in case of multiplexing;\n6.\tshould start the optional timer T103 (End of RTP media); and\n7.\tshall remain in the 'U: queued' state.\nUpon receiving a Floor Granted message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Granted message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '1' (Floor Granted); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tshall provide a floor granted notification to the MCPTT user;\n3.\tif the Floor Indicator field is included and the type of call bit is set, may provide a notification to the user indicating the type of call;\n4.\tshall stop timer T104 (Floor Queue Position Request), if running;\n5.\tshall start timer T132 (Queued granted user action);\n6.\tshall stop the optional timer T103 (End of RTP media), if running, and if associated to a participant for whichthe previously received Floor Taken did not include a Floor Indicator field with the G-bit set to '1' (Dual floor);\n7.\tshall indicate the user that the floor is granted;\n8.\tshall store the Audio SSRC of the Granted Participant and use it in the RTP media packets until the floor is released; and\n9.\tshall remain in the 'U: queued' state.\nUpon receiving a Floor Deny message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Deny message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '3' (Floor Deny); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tshall provide floor deny notification to the MCPTT user;\n3.\tmay display the deny reason to the user using information in the Reject Cause field;\n4.\tshall stop timer T104 (Floor Queue Position Request), if running; and\n5.\tshall enter the 'U: has no permission' state.\nUpon receiving an indication from the MCPTT user to release the queued floor request, the floor participant:\n1.\tshall send a Floor Release message: The Floor Release message:\na.\tvoid;\n2.\tmay set the first bit in the subtype of the Floor Release message to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall start timer T100 (Floor Release) and initialise counter C100 (Floor Release) to 1;\n4.\tshall stop timer T104 (Floor Queue Position Request), if running;\n5.\tshall stop timer T132 (queued request granted user action); and\n6.\tshall enter the 'U: pending Release' state.\nUpon receiving a Floor Queue Position Info message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Queue Position Info message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '9' (Floor Queue Position Info); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tif the message indicates that the request has been queued or if a request for the queue position was sent, the floor participant:\na.\tmay provide the queue position and priority (if available) to the MCPTT user;\n3.\tshall stop the timer T104 (Floor Queue Position Request), if running; and\n4.\tshall remain in the 'U: queued' state.\nUpon receiving a Floor Idle message, the floor participant:\n1.\tif the first bit in the subtype of the Floor Idle message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '5' (Floor Idle); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tmay provide a floor idle notification to the MCPTT user;\n3.\tshall stop timer T104 (Floor Queue Position Request), if running; and\n4.\tshall enter the 'U: has no permission' state.\nUpon receipt of an indication from the MCPTT client to request the queue position and timer T132 is not running (i.e. a Floor Granted message has not been received), the floor participant:\n1.\tshall send the Floor Queue Position Request message;\n2.\tshall start timer T104 (Floor Queue Position Request) and initialize counter C104 (Floor Queue Position Request) to 1; and\n3.\tshall remain in the 'U: queued' state.\nOn expiry of timer T104 (Floor Queue Position Request) less than the upper limit of C104 (Floor Queue Position Request) times, the floor participant:\n1.\tshall send a Floor Queue Position Request message towards the floor control server;\n2.\tshall restart timer T104 (Floor Queue Position Request) and increment counter C104 (Floor Queue Position Request) by 1; and\n3.\tshall remain in the 'U: queued' state.\nWhen timer T104 (Floor Queue Position Request) expires by the upper limit of counter C104 (Floor Queue Position Request) times, the floor participant:\n1.\tshall provide a floor queued timeout to the MCPTT client;\n2.\tmay set the first bit in the subtype of the Floor Release message to '1' (Acknowledgment is required) as described in clause 8.2.2;\n3.\tshall send the Floor Release message;\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3a.\tshall start timer T100 (Floor Release) and initialise counter C100 (Floor Release) to 1; and\n4.\tshall enter the 'U: pending Release' state.\nUpon receiving an indication from the user that the user wants to send media and the timer T132 (Queued granted user action) is running, the floor participant:\n1.\tshall stop timer T132 (queued request granted user action); and\n2.\tshall enter 'U: has permission' state.\nUpon expiry of timer T132 (Queued granted user action) the floor participant:\n1.\tshall send Floor Release message;\n2.\tmay indicate the user that the floor is no more available;\n3.\tmay set the first bit in the subtype of the Floor Release message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n4.\tshall enter 'U: has no permission' state.\nUpon receiving the Floor Release Multi Talker message, the floor participant:\n1.\tshall provide a notification to the user indicating that a participant has released the floor in a multi-talker group; and\n2.\tshall remain in the 'U: queued' state.\nUpon receiving a Queued Floor Requests message including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '2' (Cancel Notification), the floor participant:\n1.\tif the first bit in the subtype of the Queued Floor Requests message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '14' (Queued Floor Requests); and\nb.\tshall include the Source field set to '0' (the floor participant is the source);\n2.\tshall provide a queued floor requests cancellation notification to the MCPTT user;\n3.\tmay display the requesting user for a cancellation of a queued floor request to the user using information in the Requested Party's Identity field;\n4.\tshall stop timer T104 (Floor Queue Position Request), if running; and\n5.\tshall enter the 'U: has no permission' state.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.3\tFloor control server procedures",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.3.1\tGeneral",
                            "text_content": "The floor control server arbitration logic in the floor control server shall support the procedures in clauses 6.3.2 and 6.3.3 and shall behave according to the floor control server state transition diagram for 'general floor control operation' in clause 6.3.4.\nThe floor control interface towards the MCPTT client in the floor control server shall behave according to the floor control server state transition diagram for 'basic floor control operation towards the floor participant' as specified in clause 6.3.5.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.2\tControlling MCPTT function procedures at MCPTT call initialization",
                            "text_content": "The clause 6.3.2.2 describes the initial procedures when a new SIP session is establishing a group session or a private session with floor control.\nThe clause 6.3.2.3 describes the procedures when a non-controlling MCPTT function switches from the non-controlling mode to the controlling mode.\nWhen an MCPTT call is established a new instance of the floor control server state machine for 'general floor control operation' is created.\nFor each MCPTT client added to the MCPTT call, a new instance of the floor control server state machine for 'basic floor control operation towards the floor participant' is added.\nIf the optional \"mc_queueing\" feature is supported and has been negotiated as specified in clause 14, the floor control server could queue the implicit floor control request for the media-floor control entity.\nThe initial SIP INVITE request or SIP REFER request to establish an MCPTT chat group call or to rejoin an ongoing MCPTT call is not handled as an implicit floor control request message by the floor control server unless explicitly stated in the SIP INVITE request or in the SIP REFER request.\nThe permission to send media to the inviting MCPTT client due to implicit floor control request is applicable to both confirmed indication and unconfirmed indication.\nWhen the first unconfirmed indication is received from the invited participating MCPTT function (see 3GPP TS 24.379 [2]) the floor control server optionally can give an early indication to send RTP media packets, to the inviting MCPTT client.\nIf an early indication to send RTP media packets is given to the inviting MCPTT client, the floor participant is granted the permission to send media and the MCPTT server buffers RTP media packets received from the MCPTT client at least until the first invited MCPTT client accepts the invitation or until the RTP media packet buffer maximum limit is exceeded.\nIf the MCPTT server does not support or does not allow media buffering then an early indication to send RTP media packets is not given to the inviting MCPTT client, the floor participant is granted the permission to send media when the first invited MCPTT client accepts the media.\nBefore the floor control server sends the first floor control message in the MCPTT call, the floor control server has to assign itself a SSRC identifier to be included in media floor control messages and quality feedback messages if the MCPTT server is supporting that option. A suitable algorithm to generate the SSRC identifier is described in IETF RFC 3550 [3].\nThe floor participant and the floor control server can negotiate the maximum priority level that the floor participant is permitted to request. The floor control server can pre-empt the current sender based on the negotiated maximum priority level that the floor participant is permitted to request and the priority level included in the Floor Request message.\nNOTE:\tThe maximum priority level that a floor participant can use is negotiated as specified in clause 14.3.3 and is based on group configuration data retrieved by the controlling MCPTT function from the group management server as described in 3GPP TS 24.481 [12] and service configuration data retrieved by the controlling MCPTT function from the configuration management server as described in 3GPP TS 24.484 [13].\nFor groups configured for audio cut-in floor control, pre-empting of the current sender is not according to priority. Each new floor request results in the floor being revoked from the current talker and being granted to the new requesting talker.\nThe floor participant and the floor control server can negotiate queueing of floor requests using the \"mc_queueing\" fmtp attribute as described in clause 14. If queueing is supported and negotiated, the floor control server queues the floor control request if a Floor Request message is received when another floor participant has the floor and the priority of the current speaker is the same or higher. Queueing is not permitted for groups configured for audio cut-in floor control.\nWhen the MCPTT server switches from the non-controlling MCPTT function mode to controlling MCPTT function mode a new instance of the floor control server state machine for 'general floor control operation' is created.\nFor each MCPTT client in the MCPTT call a new instance of the floor control server state machine for 'basic floor control operation towards the floor participant' is added.\nAny floor request in the passive floor request queue is moved to the active floor request queue.\nNOTE:\tThe passive floor request queue is a floor request queue used by the non-controlling MCPTT function as specified in clause 6.5.4 to monitor floor request sent by floor participants controlled by the non-controlling MCPTT function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.3\tMCPTT floor control procedures at MCPTT call release",
                            "text_content": "When an MCPTT client leaves an MCPTT call and the MCPTT call remains ongoing with the other MCPTT clients, the floor control server follows a two-step procedure.\nStep 1\tThe MCPTT server stops sending floor control messages and RTP media packets to the MCPTT client leaving the MCPTT call and, the MCPTT server discards floor control messages and RTP media packets received from the MCPTT client leaving the MCPTT call.\nStep 2\tWhen the application and signalling plane has determined that the MCPTT call with this floor participant has been released, the corresponding instance of the floor control server state machine for 'basic floor control operation towards the floor participant' is released.\nWhen an MCPTT call is released, the floor control server follows a two-step procedure.\nStep 1\tThe MCPTT server stops sending floor control messages and RTP media packets to all floor participants in the MCPTT call.\nStep 2\tWhen the application and signalling plane has determined that the MCPTT call has been released, the corresponding instance of the floor control server state machine for 'general floor control operation' are also terminated, along with any 'basic floor control operation towards the floor participant' state machines for the floor participants of this call.\nThe floor control server state machine for general floor control operation initiates the MCPTT call release depending on the release policy specified in 3GPP TS 24.379 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.4\tFloor control server state transition diagram for general floor control operation",
                            "text_content": "The floor control server arbitration logic in the floor control server shall behave according to the state diagram and state transitions specified in this clause.\nFigure 6.3.4.1-1 shows the general floor control operation states (G states) and the state transition diagram.\nThe figure depicts a floor control server state transition diagram for \"general floor control operation\" in a building. It illustrates the sequence of events that occur when a floor control server is in the \"on\" state, transitioning to the \"off\" state, and back to the \"on\" state. The diagram includes various components such as the floor control server, the floor control system, and the building's infrastructure. The diagram is a visual representation of the complex system's operation, providing a clear understanding of how the floor control server interacts with the building's infrastructure to control the general floor operations.\nFigure 6.3.4.1-1: Floor control server state transition diagram for 'general floor control operation'\nThe floor control arbitration logic in the floor control server shall keep one instance of the 'general floor control operation' state machine per MCPTT call.\nIf floor control messages or RTP media packets arrives in a state where there is no procedure specified in the following clauses the floor control arbitration logic in the floor control server:\n1.\tshall discard the floor control message;\n2.\tshall request the media distributor in the MCPTT server to discard any received RTP media packet; and\n3.\tshall remain in the current state.\nState details are explained in the following clauses.\nWhen a new instance of the 'general floor control operation' state machine is initiated, before any floor control related input is applied, the state machine is in 'Start-stop' state. Similarly when the call is released the state machine shall return to the 'Start-stop' state or the related MCPTT call is released.\nWhen an MCPTT call is initiated as specified in 3GPP TS 24.379 [2] and\n1.\tif a confirmed indication is required and at least one invited MCPTT client has accepted the invitation;\n2.\tif a confirmed indication is not required; or\n3.\tif the initialised MCPTT call is a temporary group session;\nNOTE:\tA MCPTT group call is a temporary group session when the <on-network-temporary> element is present in the <list-service> element as specified in 3GPP TS 24.481 [12].\nthen the floor control arbitration logic in the floor control server:\n1.\tshall create an instance of the 'general floor control operation' state machine;\n2.\tshall wait for the 'basic floor control operation towards the floor participant' to be initialized before continuing the following steps;\n3.\twhen the 'basic floor control operation towards the floor participant' state machine is initialized and the initialised session is not a temporary group session:\na.\tif the \"mc_granted\" fmtp attribute is not negotiated as specified in clause 14 or this is an ambient listening call:\ni.\tif the floor control server is granting an implicit floor request at MCPTT call establishment, shall act as if a Floor Request message was received and perform the actions specified in clause 6.3.4.3.3; or\nii.\tif the floor control server is not granting an implicit floor request at MCPTT call establishment, shall enter the'G: Floor Idle' state as specified in clause 6.3.4.3.2; or\nb.\tif the \"mc_granted\" fmtp attribute is negotiated as specified in clause 14 and this is not an ambient listening call, shall enter the 'G: Floor Taken' state as specified in clause 6.3.4.4.2; and\n4.\tif the 'basic floor control operation towards the floor participant' state machine is initialized and the initialised session is a temporary group session, shall enter the 'G: Initialising' state as specified in the clause 6.3.4.8.1.\nThe floor control arbitration logic in the floor control server is in this state when no MCPTT user currently has permission to send media.\nTimer T4 (Inactivity) and timer T7 (Floor Idle) can be running when the floor control arbitration logic in the floor control server is in this state.\nWhen entering this state from any state except the 'Start-stop' state and if no MCPTT client negotiated support of queueing floor requests as described in clause 14, and the state machine specified in clause 6.3.6 does not exist, the floor control arbitration logic in the floor control server:\n1.\tif there is a Track Info field associated with the floor control server state transition diagram for 'general floor control operation' stored, shall remove the Track Info field from the storage;\n2.\tif the active floor request queue is empty the floor control server:\na.\tshall send Floor Idle message to all floor participants. The Floor Idle message:\ni.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1; and\nii.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\nb.\tshall start timer T7 (Floor Idle) and initialise counter C7 (Floor Idle) to 1;\nc.\tshall start timer T4 (Inactivity); and\nd.\tshall set the general state to the 'G: Floor Idle' state; and\n3.\tif the active floor request queue is not empty the floor control server:\na.\tshall select a queued floor request from the top of the active floor request queue;\nb.\tshall remove that queued floor request from the active floor request queue;\nc.\tif the queued floor request includes a Track Info field, shall store the Track Info field and associate it with the floor control server state transition diagram for 'general floor control operation'; and\nd.\tshall enter the 'G: Floor Taken' state as specified in the clause 6.3.4.4.2 with respect to that floor participant.\nWhen entering this state from any state except the 'Start-stop' state and the state machine specified in clause 6.3.6 exists, the floor control arbitration logic in the floor control server:\n1.\tif there is a Track Info field associated with the floor control server state transition diagram for 'general floor control operation' stored, shall remove the Track Info field from the storage;\n2.\tshall send Floor Idle message to all floor participants which are configured to listen to the overridden participant. The Floor Idle message:\na.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1; and\nb.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n3.\tshall send Floor Taken message to floor participants which are configured to listen only to the overridden participant. The Floor Taken message:\na.\tif privacy is not requested, shall include the granted MCPTT user's (overriding participant) MCPTT ID in the Granted Party's Identity field;\nb.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1;\nc.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\nd.\tshall include the Audio SSRC that was generated for the overridden participant into the Audio SSRC of Granted Participant field; and\ne.\tshall include the location of the user as specified in clause 6.2.4.3.5;\n4.\tshall set the general state to the 'G: Floor Taken' state; and\n5.\tshall send the termination instruction to the 'dual floor control operation' state machine.\nUpon receiving a floor request message (from a floor participant that is permitted to make a floor request) the floor control arbitration logic in the floor control server:\n1.\tshall reject the request if one of the following conditions is fulfilled:\na.\tif there is only one MCPTT client in the MCPTT call; and\nb.\t<on-network-recvonly> element is present in the <entry> element as specified 3GPP TS 24.481 [12] for the associated floor participant;\n2.\tif the floor request is rejected the floor control server:\na.\tshall send the Floor Deny message. The Floor Deny message:\ni.\tshall include in the Reject Cause field the <Reject Cause> value:\nA.\tcause #3 (Only one participant), if there is only one MCPTT client in the MCPTT call; or\nB.\tcause #5 (Receive only), if the <on-network-recvonly> element is present in the <entry> element as specified in 3GPP TS 24.481 [12] for the associated floor participant;\nii.\tmay include an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value of the Reject Cause field; and\niii.\tif the Floor Request included a Track Info field, shall include the received Track Info field;\nb.\tshall remain in the 'G: Floor Idle' state; and\n3.\tif the floor request is granted the floor control server:\na.\tshall stop timer T4 (Inactivity);\nb.\tshall stop timer T7 (Floor Idle);\nc.\tshall store the SSRC of floor participant granted the permission to send media until the floor is released associated to that floor request;\nd.\tif a Track Info field is included in the Floor Request message, shall store the received Track Info field, and\ne.\tshall enter the 'G: Floor Taken' state as specified in the clause 6.3.4.4.2.\nOn expiry of timer T7 (Floor Idle) the floor control arbitration logic in the floor control server:\n1.\tshall restart timer T7 (Floor Idle) and increment counter C7 (Floor Idle) by 1 if counter C7 (Floor Idle) has not reached its upper limit;\n2.\tshall send a Floor Idle message to all floor participants in the MCPTT call if counter C7 (Floor Idle) has not reached its upper limit. The Floor Idle message:\na.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1; and\n3.\tshall remain in the 'G: Floor Idle' state.\nOn expiry of timer T4 (Inactivity) the floor control arbitration logic in the floor control server based on a configurable service provider policy either:\n1.\tshall indicate to the application and signalling plane that timer T4 (Inactivity) has expired;\n2.\tif the application and signalling planes initiates MCPTT call release, shall enter the 'Releasing' state; and\n3.\tif the application and signalling planes do not initiate MCPTT call release:\na.\tshould restart the T4 (Inactivity) timer; and\nb.\tshall remain in the 'G: Floor Idle' state.\nUpon receiving an implicit floor request due to an upgrade to an emergency group call or due to an upgrade to imminent peril call, the floor control arbitration logic in the floor control server:\n1.\tshall reject the request if there is only one MCPTT client in the MCPTT call;\n2.\tif the floor request is rejected the floor control server:\na.\tshall send the Floor Deny message. The Floor Deny message:\ni.\tshall include in the Reject Cause field the <Reject Cause> value cause #3 (Only one participant); and\nii.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value; and\nb.\tshall remain in the 'G: Floor Idle' state; and\n3.\tif the floor request is granted the floor control server:\na.\tshall stop the timer T4 (Inactivity);\nb.\tshall stop the timer T7 (Floor Idle);\nc.\tshall store the SSRC of floor participant granted the permission to send media until the floor is released associated to that floor request; and\nd.\tshall enter the 'G: Floor Taken' state as specified in the clause 6.3.4.4.2.\nUpon receiving a Unicast Media Flow Control message from a floor participant with Media Flow Control Indicator is set to '0', the floor control arbitration logic in the floor control server:\n1.\tmay de-allocate associated bearer resources by the MCPTT server;\n2.\tshall notify the media distributor to stop sending media to the MCPTT client; and\n3.\tshall remain in the 'G: Floor Idle' state.\nUpon receiving a Unicast Media Flow Control message from a floor participant with Media Flow Control Indicator is set to '1', the floor control arbitration logic in the floor control server:\n1.\tmay allocate new bearer resources;\n2.\tshall notify the media distributor to start sending media to the MCPTT client; and\n3.\tshall remain in the 'G: Floor Idle' state.\nThe floor control arbitration logic in the floor control server uses this state when it has permitted one or more of the MCPTT clients in the MCPTT call to send media.\nTimer T1 (End of RTP media) is running when the floor control server is in this state. If configured to support multi-talker floor control, one instance of timer T1 (End of RTP media) is running per talker that is granted the floor.\nTimer T2 (End talking) can be running when the floor control server is in this state. If configured to support multi-talker floor control, one instance of timer T20 (Floor Granted) is running per talker that is granted the floor.\nTimer T20 (Floor Granted) is running to guarantee reliable delivery of the Floor Granted message, if the granted floor request was queued. If configured to support multi-talker floor control, one instance of timer T20 (Floor Granted) is running per talker that is granted the floor.\nIf configured to support multi-talker, then the floor control arbitration logic maintains a list of MCPTT IDs of the currently granted talkers.\nWhen entering this state the floor control arbitration logic in the floor control server:\n1.\tshall send a Floor Granted message to the floor participant to which the floor is granted. The Floor Granted message:\na.\tshall include the value of timer T2 (Stop talking)in the Duration field;\nb.\tshall include the granted priority in the Floor priority field;\nc.\tif a Track Info field associated with the floor control server state transition diagram for 'general floor control operation' is stored, shall include the stored Track Info field;\nd.\tif a group call is a broadcast group call, system call, emergency call, an imminent peril call or a temporary group session, shall include the Floor Indicator field with appropriate indications;\ne.\tif the call is a remotely initiated ambient listening call, shall set the first bit in the subtype of the Floor Granted message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nf.\tshall include in the Audio SSRC of Granted Participant field a globally unique audio SSRC, generated and stored by the floor control server, to be used by the granted MCPTT participant in the RTP media packets it will send;\nNOTE:\tIf the call is an ambient listening call and the ambient listening call type is remote-initiated, then the floor participant to which the floor is granted is the terminating floor participant of the call. Otherwise the floor is granted to the participant which requested the floor.\n2.\tshall start timer T20 (Floor Granted) if the floor request was queued for the participant to which the floor is granted and initialise the counter C20 (Floor Granted) to 1;\n3.\tshall send Floor Taken message to all other floor participants. The Floor Taken message:\na.\tif the floor is currently granted only to one particpant:\ni\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field, if privacy is not requested;\nii.\tmay include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested; and\niii.\tshall include the location of the user as specified in clause 6.2.4.3.5;\nb.\tif multi-talker is supported and the floor is currently granted to multiple participants:\ni.\tshall include the Floor Indicator field with the I-bit set to '1' (Multi-talker);\nii.\tshall include the list of granted users in the multi-talker group in List of Granted Users field, including a new granted talker;\niii.\tshall include the list of Audio SSRCs of Granted Participants;\niv.\tmay include the list of functional aliases of the granted floor participants in the List of Functional Aliases field; and\nv.\tshall include the List of Locations of granted floor participants;\nc.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1;\nd.\tif the session is a broadcast group call or an ambient listening call, shall include the Permission to Request the Floor field set to '0';\ne.\tif the session is not a broadcast group call, may include the Permission to Request the Floor field set to '1';\nf.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\ng.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field;\n4.\tshall start timer T1 (End of RTP media) for the participant to which the floor is granted;\n5.\tshall set the general state to 'G: Floor Taken' state; and\n6.\tif configured to support multi-talker floor control the group is configured to shall add the MCPTT identity of the participant to which the floor is granted to the list of currently granted talkers.\nOn expiry of timer T1 (End of RTP media), the floor control arbitration logic in the floor control server:\n1.\tshall stop the timer T2 (Stop talking) for the participant to which the floor is granted; if running;\n2.\tshall stop timer T20 (Granted re-send) for the participant to which the floor is granted, if running;\n3.\tshall request the media distributor in the MCPTT server to stop distributing RTP media packets received from the participant for which T1 (End of RTP media) has expired (with the exception of RTP media packets already in the buffer (if RTP media buffering is ongoing)) to other MCPTT clients;\n4.\tif mutli-talker floor control is not supported; shall enter the 'G: Floor Idle' state as specified in the clause 6.3.4.3.2; and\n5.\tif multi-talker floor control is supported,\na.\tshall send a Floor Release Multi Talker message to all participants other than the one releasing floor. The Floor Release Multi Talker message:\ni.\tshall include SSRC field set to the SSRC of the floor participant for which T1 expired; and\nii.\tshall include the User ID set to the MCPTT ID of the floor participant for which T1 expired; and\nb.\tshall remove the participant for which timer T1 expired from the list of currently granted talkers, and:\ni.\tif the list of currently granted talkers is empty, shall enter the 'G: Floor Idle' state as specified in the clause 6.3.4.3.2; and\nii.\tif the list of currently granted talkers is not empty shall stay in state the 'G: Floor Taken'.\nOn expiry of timer T2 (Stop talking), the floor control arbitration logic in the floor control server:\n1.\tshall stop timer T1 (End of RTP media) for the participant for which timer T2 has expired;\n2.\tshall include the Reject Cause field with the <Reject Cause> value set to #2 (Media burst too long) in the Floor Revoke message sent in clause 6.3.4.5.2; and\n3.\tshall enter the 'G: pending Floor Revoke' state as specified in the clause 6.3.4.5.2.\nUpon receiving an indication from the media distributor in the MCPTT server that RTP media packets are received from the permitted MCPTT client, the floor control arbitration logic in the floor control server:\n1.\tif the session is not an ambient listening call, shall start timer T2 (Stop talking) for the participant from which the RTP packet has been received, if not running;\n2.\tshall restart timer T1 (End of RTP media) for the participant from which the RTP packet has been received;\n3.\tshall stop timer T20 (Floor Granted) for the participant from which the RTP packet has been received, if running;\n4.\tshall instruct the media distributor to forward the RTP media packets to MCPTT clients according to local policy; and\nNOTE:\tIf dual floor control is ongoing as described in clause 6.3.6, the list of floor participants that receive the overriding, overridden, or both transmissions is based on configuration.\n5.\tshall remain in the 'G: Floor Taken' state.\nUpon receiving a Floor Release message the floor control arbitration logic in the floor control server:\n1.\tshall request the media distributor in the MCPTT server to stop forwarding RTP media packets received from the participant that sent the Floor Release message;\n2.\tshall stop timer T2 (Stop talking) for the participant that sent the Floor Release message, if running;\n3.\tshall stop timer T20 (Granted re-send) for the participant that sent the Floor Release message, if running;\n4.\tif mutli-talker floor control is not supported shall enter the 'G: Floor Idle' state as specified in the clause 6.3.4.3.2; and\n5.\tif multi-talker floor control is supported, then:\na.\tshall send a Floor Release Multi Talker message. The Floor Release Multi Talker message:\ni.\tshall include SSRC field set to the SSRC of the floor participant that has released the floor; and\nii.\tshall include the User ID set to the MCPTT ID of the floor participant releasing the floor;\nb.\tshall remove the participant that sent the Floor Release message from the list of currently granted talkers; and\nc.\tif the list of currently granted talkers is empty, shall enter the 'G: Floor Idle' state as specified in the clause 6.3.4.3.2; or if the list of currently granted talkers is not empty shall stay in state the 'G: Floor Taken'.\nNOTE 1:\tThis procedure is also invoked from the clause 6.3.5.4.4.\nIf the group is not configured to support multi-talker feature control, on receipt of a floor request message with effective priority indicating pre-emptive priority, and if the effective priority of the floor participant with permission to send media is not the pre-emptive priority, or if the group is configured for audio cut-in, the floor control arbitration logic in the floor control server:\n1.\tbased on local policy, select one of the following options:\na.\trevoke the current speaker; or\nb.\tallow media from both the current speaker and from the participant now requesting floor with a pre-emptive floor priority;\nNOTE 2:\tIf the group is configured for audio cut-in, media is allowed only for the participant now requesting the floor.\n2.\tif revoking current speaker is selected:\na.\tshall stop timer T1 (End of RTP media), if running;\nb.\tshall stop timer T20 (Floor Granted), if running;\nc.\tshall include a Reject Cause field with the <Reject Cause> value set to #4 (Media Burst pre-empted) in the Floor Revoke message sent in clause 6.3.4.5.2;\nd.\tshall enter the 'G: pending Floor Revoke' state as specified in the clause 6.3.4.5.2;\ne.\tshall insert the floor participant into the active floor request queue to the position in front of all queued requests, if not inserted yet or update the position of the floor participant in the active floor request queue to the position in front of all other queued requests, if already inserted; and\nf.\tshall send a Floor Queue Position Info message to the requesting floor participant, if negotiated support of queueing of floor requests as specified in clause 14. The Floor Queue Position Info message:\ni.\tinclude the queue position and floor priority in the Queue Info field; and\nii.\tif the Floor Request message included a Track Info field, shall include the received Track Info field; and\n3.\tif allow media from both the current speaker and from the participant now requesting floor with a pre-emptive priority is selected:\na.\tshall perform the actions specified in the clause 6.3.6.2.2\nOn receipt of a floor request message and if the group is configured as multi-talker group the floor control arbitration logic in the floor control server:\n1.\tshall select one of the following options:\na.\tif the maximum number of simultaneous talkers applicable for multi-talker control is reached and if the floor request message has effective priority indicating pre-emptive priority, determine from all participants having permission to send media, the one with the lowest priority and revoke the floor from the participant with the lowest priority; or\nb.\tif the maximum number of simultaneous talkers applicable for multi-talker control is not reached, allow media from both the current speaker(s) and from the participant now requesting floor;\n2.\tif revoking is selected:\na.\tshall stop timer T1 (End of RTP media) for the participant from which the floor is revoked, if running;\nb.\tshall stop timer T20 (Floor Granted) for the participant from which the floor is revoked, if running;\nc.\tshall include a Reject Cause field with the <Reject Cause> value set to #4 (Media Burst pre-empted) in the Floor Revoke message sent in clause 6.3.4.5.2;\nd.\tshall enter the 'G: pending Floor Revoke' state as specified in the clause 6.3.4.5.2;\ne.\tshall insert the floor participant into the active floor request queue to the position in front of all queued requests, if not inserted yet or update the position of the floor participant in the active floor request queue to the position in front of all other queued requests, if already inserted;\nf.\tshall send a Floor Queue Position Info message to the requesting floor participant, if negotiated support of queueing of floor requests as specified in clause 14. The Floor Queue Position Info message:\ni.\tshall include the queue position and floor priority in the Queue Info field; and\nii.\tif the Floor Request message included a Track Info field, shall include the received Track Info field; and\n3.\tif allow media from both the current speaker(s) and from the participant now requesting floor is selected:\na.\tshall send a Floor Granted message to the requesting floor participant. The Floor Granted message:\ni.\tshall include the value of the T2 (Stop talking) timer in the Duration field;\nii.\tshall include the granted priority in the Floor priority field;\niii.\tif a Track Info field associated with the floor control server state transition diagram for 'multi-talker floor control operation' is stored, shall include the stored Track Info field;\niv.\tshall include the Floor Indicator field with the I-bit set to '1' (Multi-talker); and\nv.\tshall include in the Audio SSRC of Granted Participant field a globally unique audio SSRC, generated and stored by the floor control server, to be used by the granted MCPTT participant in the RTP media packets it will send;\nb.\tshall add the MCPTT ID of the user to which the floor is granted to the list of currently granted talkers;\nc.\tshall send a Floor Taken message to any non-controlling MCPTT functions involved and to floor participants controlled by the controlling MCPTT function that will listen to the RTP media from the multi-talker MCPTT client according to local policy. The Floor Taken message:\ni.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field and may include the associated functional alias in the Functional Alias field, if privacy is not requested;\nii.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1;\niii.\tshall include the Floor Indicator field with the I-bit set to '1' (Multi-talker);\niv.\tshall include the list of granted users in the multi-talker group in List of Granted Users field;\nv.\tshall include the list of Audio SSRCs of Granted Particpants; and\nvi.\tmay include the list of functional aliases of the granted floor participants in the List of Functional Aliases field.\nd.\tshall start the T1 (End of RTP media) timer for the participant to which the floor is granted;\ne.\tshall start timer T20 (Floor Granted) for the participant to which the floor is granted, if the floor request was queued and initialise the counter C20 (Floor Granted) to 1; and\nf.\tshall stay in the state to 'G: Floor Taken' state.\nUpon receiving a floor request message from the floor participant that has been granted permission to send media, the floor control arbitration logic in the floor control server:\n1.\tshall send a Floor Granted message to the previously granted floor participant. The Floor Granted message:\na.\tshall include the value of timer T2 (Stop talking) running for this floor participant in the Duration field;\nb.\tshall include the granted priority in the Floor priority field; and\nc.\tif the Floor Request message included a Track Info field, shall include the received Track Info field; and\n2.\tshall remain in the 'G: Floor Taken' state.\nOn expiry of timer T20 (Floor Granted), the floor control arbitration logic in the floor control server:\n1.\tshall send a Floor Granted message to the granted floor participant if counter C20 (Floor Granted) has not reached its upper limit: The Floor Granted message:\na.\tshall include the value of timer T2 (Stop talking) in the Duration field;\nb.\tshall include the granted priority in the Floor priority field; and\nc.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n2.\tshall start timer T20 (Floor Granted) and increment counter C20 (Floor Granted) by 1 if counter C20 (Floor Granted) has not reached its upper limit; and\n3.\tshall remain in the 'G: Floor Taken' state.\nWhen timer T20 (Floor Granted) expires and counter C20 (Floor Granted) reaches its upper limit, the floor control arbitration logic in the floor control server:\n1.\tshall remain in the 'G: Floor Taken' state.\nIf the floor control server receives an indication from the floor control interface towards the MCPTT client that the MCPTT client has started to disconnect from the MCPTT call, the floor control arbitration logic in the floor control server:\n1.\tif multi-talker floor control is not supported shall enter the 'G: Floor Idle' state as specified in the clause 6.3.4.3.2; and\n2.\tif multi-talker floor control is supported,\na.\tshall send a Floor Release Multi Talker message. The Floor Release Multi Talker message:\ni.\tshall include SSRC field set to the SSRC of the floor participant that has released the floor; and\nii.\tshall include the User ID set to the MCPTT ID of the floor participant releasing the floor; and\nb.\tshall remove the participant which is disconnecting from the floor from the list of currently granted talkers, and:\ni.\tif the list of currently granted talkers is empty, shall enter the 'G: Floor Idle' state as specified in the clause 6.3.4.3.2; and\nii.\tif the list of currently granted talkers is not empty shall stay in state the 'G: Floor Taken'.\nUpon receiving an implicit floor request due to an upgrade to an emergency group call or due to an upgrade to imminent peril call, the floor control arbitration logic in the floor control server:\n1.\tshall stop timer T1 (End of RTP media), if running;\n2.\tshall stop timer T20 (Floor Granted), if running;\n3.\tshall set the Reject Cause field in the Floor Revoke message to #4 (Media Burst pre-empted);\n4.\tshall enter the 'G: pending Floor Revoke' state as specified in the clause 6.3.4.5.2;\n5.\tshall insert the floor participant into the active floor request queue to the position in front of all queued requests, if not inserted yet or update the position of the floor participant in the active floor request queue to the position in front of all other queued requests, if already inserted; and\n6.\tshall send a Floor Queue Position Info message to the requesting floor participant, if negotiated support of queueing floor requests as specified in clause 14. The Floor Queue Position Request message:\na.\tshall include the queue position and floor priority in the Queue Info field; and\nb.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications.\nUpon receiving a Queued Floor Requests message, including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '0' (Cancel Request), from the associated floor participant, the floor control arbitration logic in the floor control server:\n1.\tif the active floor request queue is empty:\na.\tshall send a Queued Floor Requests message to the associated floor participant as described in clause 8.2.15. The Queued Floor Requests message:\ni.\tshall include a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '1' (Cancel Result);\nii.\tshall include a Queued Floor Requests Result field with Queued Floor Requests Result Value set to '2' (The floor request queue is already empty); and\niii.\tif the Floor Request included a Track Info field, shall include the received Track Info field; and\nb.\tmay set the first bit in the subtype of the Queued Floor Requests message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nc.\tshall remain in the 'G: Floor Taken' state; and\n2.\tif the active floor request queue is not empty:\na.\tshall remove the queued floor requests of the users indicated in the List of Queued Userss field from the active floor request queue if the List of Queued Users field is present. Otherwise, shall remove all the queued floor requests from the active floor request queue;\nb.\tshall send a Queued Floor Requests message, including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '2' (Cancel Notification), to the associated floor participants whose floor requests have been removed from the queue and message is generated as described in the clause 8.2.15;\nc.\tshall send a Queued Floor Requests message to the associated floor participant as described in clause 8.2.15. The Queued Floor Requests:\ni.\tshall include a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '1' (Cancel Result);\nii.\tshall include a Queued Floor Requests Result field with the Queued Floor Requests Result Value set to:\nA.\t'0' (Successfully removed the queued floor requests of all users specified in the List of Queued Users field in a message or all the queued floor requests from the floor request queue);\nB.\t'3' (The queued floor requests of all users specified in the List of Queued Users field in a message do not exist in the floor request queue);\nC.\t'4' (Unable to remove some of the queued floor requests of the users specified in the List of Queued Users field in a message);\nD.\t'5' (The queued floor requests of some of the users specified in the List of Queued Users field in a message do not exist in the floor request queue); or\nE.\t'255' (Unknown reason);\niii.\tif the Floor Request included a Track Info field, shall include the received Track Info field; and\niv.\tif the List of Queued Users field was present in the received message, shall include into the List of Queued Users field the list of users whose queued floor requests were not possible to remove and their queued requests still exist in the active floor request queue; and\nd.\tmay send a Floor Queue Position Info message to the remaining users whose queued floor request position has changed in the active floor request queue, and if negotiated support of queueing of floor requests as specified in clause 14. The Floor Queue Position Info message:\ni.\tshall include the queue position and floor priority in the Queue Info field; and\nii.\tif the Floor Request message included a Track Info field, shall include the received Track Info field; and\ne.\tshall remain in the 'G: Floor Taken' state.\nUpon receiving a Unicast Media Flow Control message from a floor participant with Media Flow Control Indicator is set to '0', the floor control arbitration logic in the floor control server:\n1.\tmay de-allocate associated bearer resources by the MCPTT server;\n2.\tshall notify the media distributor to stop sending media to the MCPTT client; and\n3.\tshall remain in the 'G: Floor Taken' state.\nUpon receiving a Unicast Media Flow Control message from a floor participant with Media Flow Control Indicator is set to '1', the floor control arbitration logic in the floor control server:\n1.\tmay allocate new bearer resources;\n2.\tshall notify the media distributor to start sending media to the MCPTT client; and\n3.\tshall remain in the 'G: Floor Taken' state.\nThe floor control arbitration logic in the floor control server uses this state after having sent a Floor Revoke message to the permitted floor participant.\nTimer T3 (Stop talking grace) is running when the floor control arbitration logic in the floor control server is in this state. If the group is configured for audio cut-in floor control the value of timer T3 shall be considered to be  zero.\nIn this state the MCPTT server forwards RTP media packets to the other floor participants in the MCPTT call.\nWhen entering this state the floor control arbitration logic in the floor control server:\n1.\tshall send the Floor Revoke message to the permitted floor participant. The Floor Revoke message:\na.\tshall include the reason for sending the Floor Revoke message in the <Reject Cause> value in the Reject Cause field;\nb.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, group is configured as multi-talker group, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nc.\tif a Track Info field was included in the Floor Request message, shall include the stored Track Info field;\n2.\tshall start timer T3 (Stop talking grace) for which a Floor Revoke message has been sent; and\n3.\tshall set the general state to 'G: pending Floor Revoke'.\nUpon receiving an indication from the media distributor in the MCPTT server that RTP media packets are received from the permitted floor participant the floor control server:\n1.\tshall restart timer T1 (End of RTP media);\nNOTE 1:\tIf the upper limit for timer T3 (Stop talking grace) is less than the upper limit of timer T1 (End of RTP media) then timer T1 (End of RTP media) will not expire.\n2.\tshall instruct the media distributor to forward the RTP media packets to MCPTT clients according to local policy; and\nNOTE 2:\tIf dual floor control is ongoing as described in clause 6.3.6, the list of floor participants that receive the overriding, overridden, or both transmissions is based on configuration.\n3.\tshall remain in the 'G: pending Floor Revoke' state.\nUpon receiving a Floor Release message for which a Floor Revoke message has been sent, the floor control arbitration logic in the floor control server:\n1.\tshall request the media distributor in the MCPTT server to stop forwarding RTP media packets;\n2.\tshall stop timer T1 (End of RTP media) , if running;\n3.\tshall stop timer T3 (Stop talking grace);\n4.\tif multi-talker floor control is supported, shall remove the participant from the list of currently granted talkers;\n5.\tif multi-talker floor control is supported, then:\na.\tshall send a Floor Release Multi Talker message. The Floor Release Multi Talker message:\ni\tshall include SSRC field set to the SSRC of the floor participant that has released the floor; and\nii\tshall include the User ID set to the MCPTT ID of the floor participant releasing the floor; and\n6.\tif the active floor request queue is not empty the floor control server shall enter the 'G: Idle' state as specified in the clause 6.3.4.3.2;\n7.\tif the active floor request queue is empty and the list of currently granted talkers is empty the floor control server shall enter the 'G: Idle' state as specified in the clause 6.3.4.3.2; and\n8.\tif the active floor request queue is empty and the list of currently granted talkers is not empty the floor control server shall enter the 'G: Floor Taken' state as specified in clause 6.3.4.4.2.\nIf configured to support multi-talker floor control and upon receiving a Floor Release message for which a Floor Revoke message has not been sent, the floor control arbitration logic in the floor control server:\n1.\tshall request the media distributor in the MCPTT server to stop forwarding related RTP media packets;\n2.\tshall stop timer T2 (Stop talking) for the participant that sent the Floor Release message, if running;\n3.\tshall stop timer T20 (Granted re-send) for the participant that sent the Floor Release message, if running;\n4.\tshall send a Floor Release Multi Talker message. The Floor Release Multi Talker message:\na\tshall include SSRC field set to the SSRC of the floor participant that has released the floor; and\nb\tshall include the User ID set to the MCPTT ID of the floor participant releasing the floor;\n5.\tshall remove the participant that has sent the Floor Release message from the list of currently granted talkers and:\na.\tif the list of currently granted talkers is empty, shall enter the 'G: Floor Idle' state as specified in the clause 6.3.4.3.2; and\nb.\tif the list of currently granted talkers is not empty shall stay in state the 'G: Floor Taken''.\nOn expiry of timer T3 (Stop talking grace) for which a Floor Revoke message has been sent, the floor control arbitration logic in the floor control server:\n1.\tshall indicate to the interface towards the MCPTT client that the general state machine is now 'G: Floor Idle';\n2.\tif multi-talker control is supported, shall remove the participant from the list of currently granted talkers;\n3.\tshall send a Floor Release Multi Talker message. The Floor Release Multi Talker message:\na\tshall include SSRC field set to the SSRC of the floor participant for which T3 expired; and\nb\tshall include the User ID set to the MCPTT ID for which T3 expired;\n4.\tif the active floor request queue is not empty the floor control server shall enter the 'G: Idle' state as specified in the clause 6.3.4.3.2;\n5.\tif the active floor request queue is empty and the list of currently granted talkers is empty the floor control server shall enter the 'G: Idle' state as specified in the clause 6.3.4.3.2; and\n6.\tif the active floor request queue is empty and the list of currently granted talkers is not empty the floor control server shall enter the 'G: Floor Taken' state as specified in clause 6.3.4.4.2.\nOn expiry of timer T1 (End of RTP media) assigned to the participant for which a Floor Revoke message has been sent, the floor control arbitration logic in the floor control server:\n1.\tshall stop timer T3 (Stop talking grace);\n2.\tif multi-talker feature is supported,\na\tshall remove the participant from the list of currently granted talkers;\nb.\tshall send a Floor Release Multi Talker message. The Floor Release Multi Talker message:\ni\tshall include SSRC field set to the SSRC of the floor participant for which timer T1 (End of RTP media) expired; and\nii\tshall include the User ID set to the MCPTT ID of the floor participant for which timer T1 (End of RTP media) expired; and\n3.\tif the floor is now empty; shall enter the 'G: Floor Idle' state as specified in the clause 6.3.4.3.2.\nOn expiry of timer T1 (End of RTP media) assigned to a participant different than the participant for which a Floor Revoke message has been sent, the floor control arbitration logic in the floor control server:\n1.\tshall request the media distributor in the MCPTT server to stop forwarding related RTP media packets;\n2.\tshall stop timer T2 (Stop talking) for the participant for which timer T1 (End of RTP media) expired, if running;\n3.\tshall stop timer T20 (Granted re-send) for the participant, if running;\n4.\tshall send a Floor Release Multi Talker message. The Floor Release Multi Talker message:\na\tshall include SSRC field set to the SSRC of the floor participant for which T1 expired; and\nb\tshall include the User ID set to the MCPTT ID for which T1 expired;\n5.\tif multi-talker floor control is supported, shall remove the participant for which timer T1 (End of RTP media) expired from the list of currently granted talkers and shall stay in the 'G: pending Floor Revoke' state.\n(void)\nUpon receiving a Unicast Media Flow Control message from a floor participant with Media Flow Control Indicator is set to '0', the floor control arbitration logic in the floor control server:\n1.\tmay de-allocate associated bearer resources by the MCPTT server;\n2.\tshall notify the media distributor to stop sending media to the MCPTT client; and\n3.\tshall remain in the 'G: pending Floor Revoke' state.\nUpon receiving a Unicast Media Flow Control message from a floor participant with Media Flow Control Indicator is set to '1', the floor control arbitration logic in the floor control server:\n1.\tmay allocate new bearer resources;\n2.\tshall notify the media distributor to start sending media to the MCPTT client; and\n3.\tshall remain in the 'G: pending Floor Revoke' state.\nThis clause describes the actions to be taken in all states defined for the general state diagram with the exception of the 'Start-stop' state.\nThis clause is used by the floor control arbitration logic in the floor control server when an MCPTT call is released.\nUpon receiving an MCPTT call release step 1 request from the application and signalling plane the floor control arbitration logic in the floor control server:\n1.\tshall request the media distributor in the MCPTT server to stop sending RTP media packets MCPTT clients; and\n2.\tshall enter the 'Releasing' state.\nUpon receiving an instruction from the application and signalling plane to merge the ongoing group call with other group calls, the floor control server:\n1.\tshall perform the actions in clause 6.5.2.3;\n2.\tshall enter the 'Start-stop' state.\nThe floor control arbitration logic in the floor control server uses this state while waiting for the application and signalling plane to finalize the disconnection of an MCPTT call.\nUpon receiving an MCPTT call release step 2 request from the application and signalling plane, the floor control arbitration logic in the floor control server:\n1.\tshall release all resources reserved in the media plane including the instances used for the 'Floor control server state transition diagram for general floor control operation', and 'Floor control server state transition diagram for basic floor control operation towards the floor participant' state machines and any running timers associated with the state machines; and\n2.\tshall enter the 'Start-stop' state.\nThe floor control arbitration logic in the floor control server uses this state while waiting for all invited constituent MCPTT groups to reply with a final SIP response.\nThere are no timers running in this state. The floor control arbitration logic is relying on SIP timers in the signalling and application plane.\nWhen entering this state the floor control arbitration logic:\n1.\tshall set the general state to the 'G: Initialising' state.\nUpon receiving an indication from the application and signalling plane that a floor request is received from one of the invited constituent MCPTT groups in an application/vnd.3gpp.mcptt-floor-request+xml MIME body, the floor control arbitration logic:\n1.\tshall cache the application/vnd.3gpp.mcptt-floor-request+xml MIME body; and\n2.\tremain in the 'G: Initialising' state.\nUpon receiving an indication from the application and signalling plane that all invited constituent MCPTT groups have sent a final SIP response, the floor control arbitration logic:\n1.\tif at least one application/vnd.3gpp.mcptt-floor-request+xml MIME body exists with the <floor-type> element set to \"general\":\na.\tshall select the floor participant with the highest priority as described in clause 4.1.1.4:\ni.\tamong the cached application/vnd.3gpp.mcptt-floor-request+xml MIME bodies with the <floor-type> element set to \"general\"; and\nii.\tthe floor participant initialising the temporary group session as described in clause 4.1.1.4, if the floor participant initialising the temporary group session negotiated implicit floor request as specified in clause 14;\nb.\tshall send a Floor Revoke message to all floor participants in the cached application/vnd.3gpp.mcptt-floor-request+xml MIME body with the <floor-type> element set to \"general\" that are not granted the permission to send media. The Floor Revoke message:\ni.\tshall include the <Reject Cause> value set to '4' (Media Burst pre-empted) in the Reject Cause field;\nii.\tshall include information taken from the <track-info> element in the cached application/vnd.3gpp.mcptt-floor-request+xml MIME body with the <floor-type> element set to \"general\" in the Track Info field; and\niii.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nc.\tif the floor participant selected to be granted the floor is one of invited constituent MCPTT groups:\ni.\tshall convert the <track-info> element to a format of a Track Info field and cache the Track Info field associated with the floor control server state transition diagram for 'general floor control operation'; and\nii.\tshall enter the 'G: Taken' state as specified in the clause 6.3.4.4.2 using the selected floor participant as the requesting floor participant;\n2.\tif at least one application/vnd.3gpp.mcptt-floor-request+xml MIME body exists with the <floor-type> element set to \"dual\":\na.\tshall select the floor participant with the highest priority as described in clause 4.1.1.4 among the cached application/vnd.3gpp.mcptt-floor-request+xml MIME bodies with the <floor-type> element set to \"dual\"; and\nb.\tshall send a Floor Revoke message to all floor participants in the cached application/vnd.3gpp.mcptt-floor-request+xml MIME body with the <floor-type> element set to \"dual\" that are not granted the permission to send media. The Floor Revoke message:\ni.\tshall include the <Reject Cause> value set to '4' (Media Burst pre-empted) in the Reject Cause field;\nii.\tshall include information taken from the <track-info> element in the cached application/vnd.3gpp.mcptt-floor-request+xml MIME body with the <floor-type> element set to \"dual\" in the Track Info field;\niii.\tshall include the Floor Indicator with the G-bit set to '1' (Dual floor);\niv.\tshall convert the <track-info> element to a format of a Track Info field and cache the Track Info field associated with floor control server state transition diagram for 'dual floor control operation'; and\nv.\tshall enter the 'D: Floor Taken' state as specified in the clause 6.3.6.3.2 using the selected floor participant as the requesting floor participant; and\n3.\tif no cached application/vnd.3gpp.mcptt-floor-request+xml MIME body with the <floor-type> element set to either \"general\" or \"dual\" exists:\na.\tif an implicit floor request is negotiated as described in clause 14 when the temporary group session was established, shall enter the 'G: Taken' state as specified in the clause 6.3.4.4.2; and\nb.\tif an implicit floor request is not negotiated as described in clause 14 when the temporary group session was established, shall enter the 'G: Idle' state as specified in the clause 6.3.4.3.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.5\tFloor control server state transition diagram for basic floor control operation towards the floor participant",
                            "text_content": "The floor control interface towards the MCPTT client in the floor control server shall behave according to the state diagram and state transitions specified in this clause.\nFigure 6.3.5.1-1 shows the states and state transitions for an associated floor participant in the floor control server.\n\n\nFigure 6.3.5.1-1: Floor control server state transition diagram for basic floor control operation towards the floor participant\nThe floor control interface towards the MCPTT client in the floor control server shall create one instance of the 'basic floor control operations' state machine towards the MCPTT client for every floor participant served by the floor control server as follows:\n1.\tFor pre-arranged group call in case of an originating MCPTT call, the 'basic floor control operation towards the floor participant' state machine shall be created when the MCPTT server sends the SIP 200 (OK) response towards the originating MCPTT client.\n2.\tFor pre-arranged group call in case of a terminating MCPTT call, the 'basic floor control operation towards the floor participant' state machine shall be created when the floor control server receives the SIP 200 (OK) response.\n3.\tFor chat group call the 'basic floor control operation state machine towards the floor participant' shall be created when the MCPTT server sends the SIP 200 (OK) response to the received initial SIP INVITE request.\nThe floor participant associated to the 'basic floor control operation towards the floor participant' state machine is here referred to as the \"associated floor participant\".\nThe external inputs to the state machine are:\n1.\tdirectives coming from the floor control arbitration logic;\n2.\tfloor control messages sent by the floor participants;\n3.\tmedia; and\n4.\tin certain cases, SIP messages used for call handling.\nIf floor control messages or RTP media packets arrives in a state where there is no procedure specified in the following clauses, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall discard the floor control message;\n2.\tshall request the network media interface in the MCPTT server to discard any received RTP media packet; and\n3.\tshall remain in the current state.\nState details are explained in the following clauses.\nWhen a new instance of the 'basic floor control operations towards the floor participant' state machine is created, before any floor control related input is applied, the state machine is in the 'Start-stop' state. Similarly, when the call is released the state machine shall return to the Start-Stop state.\nAn association between the floor control server and a floor participant in the MCPTT client is created, when the state machine is created; and\n1.\tin case of an originating MCPTT call, when the MCPTT server sends the SIP 200 (OK) response to the originating MCPTT client; and\n2.\tin case of a terminating MCPTT call, when the floor control server receives the SIP 200 (OK) response sent from the terminating MCPTT client.\nWhen a SIP Session is established and if:\n1.\tthe session is not a temporary group call session;\n2.\tthe session is a temporary group call session and the associated floor participant is an invited MCPTT client (i.e. not a constituent MCPTT group); or\n3.\tthe session is not an ambient listening call;\nthen:\nNOTE 1:\tA MCPTT group call is a temporary group session when the <on-network-temporary> element is present in the <list-service> element as specified in 3GPP TS 24.481 [12].\n1.\tif an MCPTT client initiates an MCPTT call with an implicit floor request, and the MCPTT call does not exist yet, the floor control interface towards the MCPTT client in the floor control server:\na.\tshall initialize a general state machine as specified in clause 6.3.4.2.2; and\nNOTE 2:\tIn the clause 6.3.4.2.2 the 'general floor control operation' state machine will continue with the initialization of the 'general floor control operation' state machine.\nb.\tshall enter the state 'U: permitted' as specified in the clause 6.3.5.5.2;\n2.\tif the associated MCPTT client rejoins an ongoing MCPTT call without an implicit floor request or initiates or joins a chat group call without an implicit floor request or attempts to initiate an already existing MCPTT call without an implicit floor request, and\na.\tif an MCPTT call already exists but no MCPTT client has the permission to send a media, the floor control interface towards the MCPTT client in the floor control server:\ni.\tshould send a Floor Idle message to the MCPTT client. The Floor Idle message:\nA.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1; and\nB.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nii.\tshall enter the state 'U: not permitted and Floor Idle' as specified in the clause 6.3.5.5.2;\nb.\tif an MCPTT call is initiated, the floor control interface towards the MCPTT client in the floor control server:\ni.\tshall enter the state 'U: not permitted and Floor Idle' as specified in the clause 6.3.5.5.2; and\nii.\tshall initialize a general state machine as specified in clause 6.3.4.2.2; and\nNOTE 3:\tIn the clause 6.3.4.2.2 the general state machine will continue with the initialization of the general state machine.\nc.\tif another MCPTT client has the permission to send a media, the floor control interface towards the MCPTT client in the floor control server:\ni.\tshould send a Floor Taken message to the MCPTT client. The Floor Taken message:\nA.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nB.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1;\nC.\tif the session is a broadcast group call, shall include the Permission to Request the floor field set to '0';\nD.\tif the session is not a broadcast group call, may include the Permission to Request the floor field set to '1';\nE.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nF.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field; and\nii.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2;\n3.\tif the associated floor participant attempts to initiate an already existing MCPTT call with an implicit floor request, and\na.\tif no MCPTT client has the permission to send media, the floor control interface towards the MCPTT client in the floor control server:\ni.\tshall process the implicit floor request as if a Floor Request message was receive as specified in clause 6.3.4.3.3; and\nii.\tshall enter the state 'U: permitted' as specified in the clause 6.3.5.5.2;\nb.\tif the MCPTT client negotiated support of queueing floor requests as specified in clause 14 and if another MCPTT client has the permission to send media, the floor control interface towards the MCPTT client in the floor control server:\ni.\tshall set the priority level to the negotiated maximum priority level that the MCPTT client is permitted to request, except for pre-emptive priority, when high priority is used;\nNOTE 4:\tThe maximum floor priority the floor participant is permitted to request is negotiated in the \"mc_priority\" fmtp attribute as specified in clause 14.\nNOTE 5:\tThe initial implicit floor request will not result in pre-emption when an MCPTT client is joining an ongoing MCPTT call. If the MCPTT client wants to pre-empt the current MCPTT client that is sending media, an explicit floor request with pre-emptive floor priority is required.\nii.\tshall insert the MCPTT client into the active floor request queue to the position immediately following all queued floor requests with the same floor priority;\niii.\tshall send a Floor Queue Position Info message to the MCPTT client. The Floor Queue Position Info message:\nA\tshall include the queue position and floor priority in the Queue Info field; and\nB.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\niv.\tshould send a Floor Queue Position Info message with the updated status to the MCPTT clients in the active floor request queue which negotiated queueing of floor requests as specified in clause 14, which have requested the queue status, whose queue position has been changed since the previous Floor Queue Position Info message and which is not the joining MCPTT client. The Floor Queue Position Info message:\nA\tshall include the queue position and floor priority in the Queue Info field; and\nB.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nv.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2; and\nc.\tif the MCPTT client did not negotiate queueing of floor requests and if another MCPTT client has the permission to send a media, the floor control interface towards the MCPTT client in the floor control server:\ni.\tshall send a Floor Taken message to the MCPTT client. The Floor Taken message:\nA.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nB.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1;\nC.\tif the session is a broadcast group call, shall include the Permission to Request the floor field set to '0';\nD.\tif the session is not a broadcast group call, may include the Permission to Request the floor field set to '1';\nE.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nF.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field; and\nii.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2; and\n4.\tif the MCPTT client is invited to the MCPTT call and\na.\tif another MCPTT client has permission to send a media, the floor control interface towards the MCPTT client in the floor control server:\ni.\tshould send a Floor Taken message to the MCPTT client. The Floor Taken message:\nA.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nB.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1;\nC.\tif the session is a broadcast group call, shall include the Permission to Request the floor field set to '0';\nD.\tif the session is not a broadcast group call, may include the Permission to Request the floor field set to '1';\nE.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nF.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field; and\nii.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2; and\nb.\tif no other MCPTT client has the permission to send a media; the floor control interface towards the MCPTT client in the floor control server:\ni.\tshould send a Floor Idle message to the MCPTT client. The Floor Idle message:\nA.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1; and\nB.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nii.\tshall enter the 'U: not permitted and Floor Idle' state as specified in the clause 6.3.5.3.2.\nWhen a SIP Session is established and if the session is a temporary group call session and,\n1.\tif the associated floor participant is a constituent MCPTT group; or\n2.\tif the associated floor participant is the initiator of the temporary group session;\nthen the floor control interface towards the MCPTT client:\n1.\tshall initialize a general state machine as specified in clause 6.3.4.2.2, if not already initiated; and\n2.\tshall enter the 'U: not permitted and initiating' state as specified in clause 6.3.5.10.2.\nWhen a SIP Session is established and if the session is an ambient listening call session then the floor control interface towards the MCPTT client:\n1.\tif the floor is granted to the associated floor participant\na.\tshall forward the \"Floor Granted\" message to the associated floor participant; and\nb.\tshall enter the state 'U: permitted' as specified in the clause 6.3.5.5.2; and\n2.\tif the floor is not granted to the associated floor participant\na.\tshall forward the \"Floor Taken\" message to the associated floor participant; and\nb.\tshall enter the state 'U: not permitted Floor Taken' as specified in the clause 6.3.5.4.2.\nThe floor control interface towards the MCPTT client in the floor control server uses this state when the associated floor participant is not permitted to send media.\nWhen entering this state the floor control interface towards the MCPTT client in the floor control server:\n1.\tif a Track Info field is stored, shall remove the Track Info field from the storage; and\n2.\tshall set the state for the associated floor participant to 'U: not permitted and Floor Idle'.\nWhen a Floor Taken message is received from the floor control server arbitration logic, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Taken message to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Taken message to '1' (Acknowledgment is required) as described in clause 8.2.2, and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2.\nUpon receiving a Floor Request message from the associated floor participant, the floor control interface towards the MCPTT client in the floor control server:\n1.\tif the session is not a broadcast group call or if the session is a broadcast group call and the associated floor participant is the initiator of the broadcast group call, shall forward the Floor Request message to the floor control server arbitration logic;\nNOTE 1\tInitiating a broadcast group call is done in the application and signalling plane using SIP. Initiating or upgrading a call to an emergency call or an imminent peril call is done in the application and signalling plane using SIP.\n2.\tif the session is a broadcast group call and the associated floor participant is not the initiator of the broadcast group call, shall send a Floor Deny message to the associated floor participant. The Floor Deny message:\na.\tshall include in the Reject Cause field the <Reject Cause> value cause #5 (Receive only);\nb.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value;\nc.\tmay set the first bit in the subtype of the Floor Deny message to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE 2:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nd.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\ne.\tif the Floor Request message included a Track Info field, shall include the received Track Info field; and\n3.\tshall remain in the 'U: not permitted and Floor Idle' state.\nWhen a Floor Granted message is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Granted messages to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Granted message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall enter the state 'U: permitted' as specified in clause 6.3.5.5.2.\nWhen a Floor Deny message is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Deny messages to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Deny message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall remain in the 'U: not permitted and Floor Idle' state.\nUpon receiving a Floor Release message from the associated floor participant, the floor control interface towards the MCPTT client in the floor control server:\n1.\tif the first bit in the subtype of the Floor Release message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '4' (Floor Release);\nb.\tshall include the Source field set to '2' (the controlling MCPTT function is the source); and\nc.\tif the Floor Release message included a Track Info field, shall include the received Track Info field;\n2.\tshall send a Floor Idle message to the associated floor participant. The Floor Idle message:\na.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1;\nb.\tmay set the first bit in the subtype of the Floor Idle message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nc.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n3.\tif a Track Info field is included in the Floor Release message, shall use the topmost <Participant Reference> value and the SSRC in the received Floor Release message to check if the floor participant has a queued floor request;\n4.\tif a no Track Info field is included in the Floor Release message, shall use the SSRC in the received Floor Release message to check if the floor participant has a queued floor request;\n5\tif the floor participant has a floor request in the queue, shall remove the queued floor request from the queue; and\n6.\tshall remain in the state 'U: not permitted and Floor Idle' state.\nUpon receiving an indication from the network media interface that RTP media packets are received with payload from the associated floor participant and if Floor Release message was received in the previous 'U: permitted' state, the floor control interface towards the MCPTT client in the floor control server:\nNOTE:\tReception of unauthorized RTP media packets can only happen if the associated floor participant is in an MCPTT client. If the associated floor participant is a floor control server interface in a non-controlling MCPTT function of an MCPTT group, the unauthorized RTP media packets are handled in the non-controlling MCPTT function.\n1.\tshall request the network media interface in the MCPTT server to not forward the received RTP media packets to the media distributor in the MCPTT server;\n2.\tshall send a Floor Revoke message to the associated floor participant. The Floor Revoke message:\na.\tshall include the Reject Cause field with the <Reject Cause> value set to #3 (No permission to send a Media Burst); and\nb.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\n3.\tshall enter the 'U: not permitted but sends media' state as specified in the clause 6.3.5.7.2.\nWhen an ongoing session is upgraded to an emergency group call and when the application and signalling plane indicates that a subsequent SDP offer included the \"mc_implicit_request\" fmtp attribute as described in clause 14, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall indicate to the floor control server arbitration logic that an implicit floor request is received due to an upgrade to an emergency group call; and\n2.\tshall remain in the 'U: not permitted and Floor Idle' state.\nWhen receiving a Floor Idle message from the floor control server arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Idle message to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Idle message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall remain in the 'U: not permitted and Floor Idle' state.\nThe floor control interface towards the MCPTT client in the floor control server uses this state when another MCPTT client (i.e. not the associated floor participant) has been given permission to send media.\nIn this state RTP media packets received from the media distributor in the MCPTT server are forwarded to the associated floor participant by the network media interface in the MCPTT server.\nWhen entering this state the floor control server:\n1.\tif a Track Info field is stored, shall remove the Track Info field from the storage; and\n2.\tshall set the state to 'U: not permitted and Floor Taken'.\nWhen receiving a Floor Idle message from the floor control server arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Idle message to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Idle message to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tif an indication is stored that the participant is listening to media from two sources, i.e. dual floor control is applied,\na.\tshall remain in the 'U: not permitted and Floor Taken' state; and\nb.\tshall remove the indication that a participant is listening to media from two sources; and\n4.\tif an indication for dual floor control is not stored, shall enter the 'U: not permitted and Floor Idle' state as specified in the clause 6.3.5.3.2.\nUpon receiving a Floor Request message from the associated floor participant, if the group is configured for audio cut-in floor control, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Request message to the floor control server arbitration logic; and\n2.\tshall remain in the 'U: not permitted and Floor Taken' state.\nUpon receiving a Floor Request message from the associated floor participant, if the group is configured for multi-talker floor control, if the number of granted floor participants is below the configured maximum; and the MCPTT ID of the associated floor participants is in the list of allowed configured multi-talkers, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Request message to the floor control server arbitration logic; and\n2.\tshall remain in the 'U: not permitted and Floor Taken' state.\nIf the group is not configured for multi-talker floor control, upon receiving a Floor Request message, without a Floor Indicator field or with the Floor Indicator field included where the D-bit (Emergency call) and the E-bit (Imminent peril call) are set to '0', from the associated floor participant, and if the MCPTT client did not negotiate queueing of floor requests or did not include a priority in the \"mc_priority\" fmtp attribute as specified in clause 14, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall send a Floor Deny message to the associated floor participant. The Floor Deny message:\na.\tshall include in the Reject Cause field the <Reject Cause> value cause #1 (Another MCPTT client has permission);\nb.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value;\nc.\tif the Floor Request included a Track Info field, shall include the received Track Info field; and\nd.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n2.\tmay set the first bit in the subtype of the Floor Deny message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE 1:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall remain in the 'U: not permitted and Floor Taken' state.\nUpon receiving a Floor Request message from the associated floor participant and the session is a broadcast group call or an ambient listening call, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall send a Floor Deny message to the associated floor participant. The Floor Deny message:\na.\tshall include in the Reject Cause field the <Reject Cause> value cause #5 (Receive only);\nb.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value;\nc.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nd.\tif the Floor Request message included a Track Info field, shall include the received Track Info field;\n2.\tmay set the first bit in the subtype of the Floor Deny message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE 2:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall remain in the 'U: not permitted and Floor Taken' state.\nUpon receiving a Floor Request message from the associated floor participant and if the MCPTT client negotiated support of queueing of floor requests or included a floor priority in the \"mc_priority\" or both as described in specified in clause 14 and according to local policy, the floor control interface towards the MCPTT client in the floor control server:\nNOTE 3:\tIn case the group is configured for multi-talker floor control, then the following steps are only carried out in case the maximum number of allowed talkers is reached.\n1.\tshall determine the effective priority level as described in clause 4.1.1.4 by using the following parameters:\na.\tthe floor priority shall be:\ni.\tthe lower of the floor priority included in Floor Request message and the negotiated maximum floor priority that the MCPTT client is permitted to request, if the MCPTT client negotiated floor priority \"mc_priority\" and floor priority is included in the Floor Request message;\nii.\tthe receive only floor priority, if the MCPTT client negotiated floor priority in the \"mc_priority\" fmtp attribute and if the negotiated maximum floor priority that the MCPTT client is permitted to request is \"receive only\";\niii.\tthe default priority, if the MCPTT client negotiated floor priority in the \"mc_priority\" fmtp attribute, if the negotiated maximum floor priority that the MCPTT client is permitted to request is not receive only and if the floor priority is not included in the Floor Request message; and\niv.\tthe default priority, if the MCPTT client did not negotiate floor priority in the \"mc_priority\" fmtp attribute; and\nb.\tthe type of the call shall be\ni.\tif the Floor Indicator field is included in the message and the D-bit (Emergency call bit) is set to '1', determined to be an emergency call;\nii.\tif the Floor Indicator field is included in the message and the E-bit (Imminent peril call) is set to '1', determined to be an imminent peril call; and\niii.\tif the Floor Indicator field is not included in the message or the Floor Indicator field is included and neither the D-bit (Emergency call bit) nor the E-bit (Imminent peril call) is set to '1', determined to be a normal call;\n2.\tif the effective priority is \"receive only\", the floor control interface towards the MCPTT client in the floor control server:\na.\tshall send a Floor Deny message to the floor participant. The Floor Deny message:\ni.\tshall include in the Reject Cause field the <Reject Cause> value cause #5 (Receive only);\nii.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value;\niii.\tif the Floor Request included a Track Info field, shall include the received Track Info field; and\niv.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nb.\tshall remain in the 'U: not permitted and Floor Taken' state;\n3.\tif\na.\ta Track Info field is included in the Floor Request message, shall use the topmost <Participant Reference> value and the SSRC in the received Floor Request message to check if the floor participant has a queued floor request; or\nb.\ta Track Info field is not included in the Floor Request message, shall use the SSRC in the received Floor Request message to check if the floor participant has a queued floor request;\n4.\tif the floor participant already has a queued floor request with the same effective priority level, the floor control interface towards the MCPTT client in the floor control server:\na.\tshall send a Floor Queue Position Info message to the requesting MCPTT client, if the MCPTT client negotiated support of queueing of floor requests as specified in clause 14. The Floor Queue Position Info message:\ni.\tshall include the queue position and floor priority in the Queue Info field;\nii.\tif the Floor Request included a Track Info field, shall include the received Track Info field; and\niii.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nb.\tshall remain in the 'U: not permitted and Floor Taken' state\n5.\tif the effective priority level is pre-emptive and there are no other pre-emptive requests in the active floor request queue and the effective priority level of the current MCPTT client with permission to send a media is not the pre-emptive priority, the floor control interface towards the MCPTT client in the floor control server:\na.\tshall forward the Floor Request message to the floor control server arbitration logic indicating that a Floor Request message with pre-emptive priority is received; and\nb.\tshall remain in the 'U: not permitted and Floor Taken' state\nNOTE 4:\tThe Floor control server arbitration logic initiates revoking the permission to send media towards the current MCPTT client with the permission to send media as specified in the clause 6.3.4.4.7;\n6.\tif the MCPTT client did not negotiate support of queueing of floor requests as specified in clause 14, the effective priority level is pre-emptive and either other pre-emptive request is queued or the effective priority level of the current MCPTT client with permission to send a media is the pre-emptive priority, the floor control interface towards the MCPTT client in the floor control server:\na.\tshall send a Floor Deny message to the associated floor participant. The Floor Deny message:\ni.\tshall include in the Reject Cause field the <Reject Cause> value cause #1 (Another MCPTT client has permission);\nii.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value;\niii.\tif the Floor Request included a Track Info field, shall include the received Track Info field; and\niv.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nb.\tshall remain in the 'U: not permitted and Floor Taken' state;\n7.\tif the MCPTT client did not negotiate \"queueing\" and the effective priority level is not pre-emptive, the floor control interface towards the MCPTT client in the floor control server:\na.\tshall send a Floor Deny message to the associated floor participant. The Floor Deny message:\ni.\tshall include in the Reject Cause field the <Reject Cause> value cause #1 (Another MCPTT client has permission);\nii.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value;\niii.\tif the Floor Request included a Track Info field, shall include the received Track Info field; and\niv.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nb.\tshall remain in the 'U: not permitted and Floor Taken' state;\n8.\tif the MCPTT client negotiated support of queueing of floor requests as specified in clause 14 and the effective priority level is not pre-emptive and the maximum queue length has not been reached, the floor control interface towards the MCPTT client in the floor control server:\na.\tshall insert the MCPTT client into the active floor request queue, if not inserted yet, or update the position of the MCPTT client in the active floor request queue, if already inserted, to the position immediately following all queued requests at the same effective priority level;\nb.\tthe floor control server shall send a Floor Queue Position Info message to the floor participant. The Floor Queue Position Info message:\ni.\tshall include the queue position and floor priority in the Queue Info field;\nii.\tif the Floor Request included a Track Info field, shall include the received Track Info field; and\niii.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\nc.\tshall remain in the 'U: not permitted and Floor Taken' state; and\nd.\tmay set the first bit in the subtype of the Floor Queue Position message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE 5:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n9.\tif the MCPTT client negotiated support of queueing of floor requests as specified in clause 14 and the effective priority level is not pre-emptive and the maximum queue length has been reached, the floor control interface towards the MCPTT client in the floor control server:\na.\tshall send a Floor Deny message to the associated floor participant. The Floor Deny message:\ni.\tshall include in the Reject Cause field the <Reject Cause> value cause #7 (Queue Full);\nii.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value;\niii.\tif the Floor Request included a Track Info field, shall include the received Track Info field; and\niv.\tif the group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nb.\tshall remain in the 'U: not permitted and Floor Taken' state.\nUpon receiving a Floor Release message from the associated floor participant and if the MCPTT client did not negotiate support of queueing of floor requests or included a floor priority in the \"mc_priority\" fmtp attribute as specified in clause 14, the floor control interface towards the MCPTT client in the floor control server:\n1.\tif the first bit in the subtype of the Floor Release message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '4' (Floor Release);\nb.\tshall include the Source field set to '2' (the controlling MCPTT function is the source); and\nc.\tif the Floor Release message included a Track Info field, shall include the received Track Info field;\n2.\tshall send a Floor Taken message to the associated floor participant. The Floor Taken message:\na.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nb.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1;\nc.\tshall include the Permission to Request the floor field set to '0', if the floor participants are not allowed to request the floor;\nd.\tif the Floor Release message included a Track Info field, shall include the received Track Info field;\ne.\tmay set the first bit in the subtype of the Floor Taken message to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE 1:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nf.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\ng.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field; and\n3.\tshall remain in the 'U: not permitted and Floor Taken' state.\nUpon receiving a Floor Release message from the associated floor participant and if the MCPTT client negotiated support of queueing of floor requests as specified in clause 14, the floor control interface towards the MCPTT client in the floor control server:\n1.\tif the first bit in the subtype of the Floor Release message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '4' (Floor Release);\nb.\tshall include the Source field set to '2' (the controlling MCPTT function is the source); and\nc.\tif the Floor Release message included a Track Info field, shall include the received Track Info field;\n2.\tif\na.\ta Track Info field is included in the Floor Release message, shall use the topmost <Participant Reference> value and the SSRC in the received Floor Release message to check if the floor participant has a queued floor request; or\nb.\tif a Track Info field is not included in the Floor Release message, shall use the SSRC in the received Floor Release message to check if the floor participant has a queued floor request;\n3.\tshall remove the MCPTT client from the active floor request queue, if the MCPTT client was in the active floor request queue;\n4.\tshall send a Floor Taken message to the associated floor participant. The Floor Taken message:\na.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nb.\tif the session is a broadcast group call, shall include the Permission to Request the floor field set to '0';\nc.\tif the session is not a broadcast group call, may include the Permission to Request the floor field set to '1';\nd.\tif a Track Info field is included in the Floor Release message, shall include the received Track Info field;\ne.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1;\nf.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\ng.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field;\n5.\tmay set the first bit in the subtype of the Floor Taken message is set to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE 2:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n6.\tshall remain in the 'U: not permitted and Floor Taken' state.\nUpon receiving an indication from the network media interface in the MCPTT server that RTP media packets with payload are received from the associated floor participant, the floor control interface towards the MCPTT client in the floor control server:\nNOTE:\tReception of unauthorized RTP media packets can only happen if the associated floor participant is in an MCPTT client. If the associated floor participant is a floor control server interface in a non-controlling MCPTT function of an MCPTT group, the unauthorized RTP media packets are handled in the non-controlling MCPTT function.\n1.\tshall request the network media interface to not forward the RTP media packets to the media distributor in the MCPTT server;\n2.\tshall send a Floor Revoke message to the associated floor participant. The Floor Revoke message:\na.\tshall include the Reject Cause field with the Reject Cause value set to #3 (No permission to send a Media Burst); and\nb.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\n3.\tshall enter the 'U: not permitted but sends media' state as specified in the clause 6.3.5.7.2.\nUpon receiving a Floor Queue Position Request message from the associated floor participant, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall send the Floor Queue Position Info message. The Floor Queue Position Info message:\na.\tshall include the queue position and floor priority in the Queue Info field;\nb.\tif a Track Info field is included in the Floor Queue Position Info message, shall include the received Track Info field;\nc.\tmay include the first bit in the subtype of the Floor Queue Position Info message set to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nd.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\n3.\tshall remain in the 'U: not permitted and Floor Taken' state.\nWhen an ongoing session is upgraded to an emergency group call and when the application and signalling plane indicates that a subsequent SDP offer included the \"mc_implicit_request\" fmtp attribute as specified in clause 14, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall indicate to the floor control server arbitration logic that an implicit floor request is received due to an upgrade to an emergency group call; and\n2.\tshall remain in the 'U: not permitted and Floor Taken' state.\nWhen a Floor Granted message is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Granted messages to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Granted message to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE 1:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tif the G-bit in the Floor Indicator is set to '1' (Dual floor) shall store an indication that the participant is overriding without revoke; and\nNOTE 2:\tThe G-bit in the Floor Indicator is set to '1' as specified in clause 6.3.6.3.2.\n4.\tshall enter the state 'U: permitted' as specified in clause 6.3.5.5.2.\nWhen a Floor Taken message is received from the floor control arbitration logic in the MCPTT server, if the G-bit in the Floor Indicator is set to '1' (Dual floor) the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Taken message to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Taken message to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall store an indication that the participant is listening to media from two sources; and\n4.\tshall remain in the 'U: not permitted and Floor Taken' state.\nWhen a Floor Taken message is received from the floor control arbitration logic in the MCPTT server, if the I-bit in the Floor Indicator is set to '1' (multi-talker) the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Taken message to the associated floor participant;\n2.\tshall store an indication that the participant is listening to media from more than one source; and\n3.\tshall remain in the 'U: not permitted and Floor Taken' state.\nWhen a Floor Release Multi Talker message is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Release Multi Talker message to the associated floor participant; and\n2.\tshall remain in the 'U: not permitted and Floor Taken' state.\nUpon receiving a Queued Floor Requests message, including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '0' (Cancel Request), from the associated floor participant:\n1.\tif the MCPTT ID of the associated floor participant is an authorized user (e.g dispatcher) to cancel the queued floor requests of other MCPTT users (the list of users specified in a request or all the users), the floor control interface towards the MCPTT client in the floor control server:\na.\tshall forward the Queued Floor Requests message to the floor control server arbitration logic; and\nb.\tshall remain in the 'U: not permitted and Floor Taken' state; and\n2.\tif the MCPTT ID of the associated floor participant is not an authorized user (participant type is not dispatcher, dispatch supervisor or MC service administrator) to cancel the queued floor requests of other MCPTT users (the list of specified users in a request or all the users), the floor control interface towards the MCPTT client in the floor control server:\na.\tshall send a Queued Floor Requests message to the associated floor participant as described in clause 8.2.15. The  Queued Floor Requests message:\ni.\tshall include a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '1' (Cancel Result);\nii.\tshall include a Queued Floor Requests Result field with the Value set to '1' (Not authorized to remove the queued floor requests of all users specified in the List of Queued Users field in a message or all the queued floor requests from the floor request queue); and\niii.\tif the Floor Request included a Track Info field, shall include the received Track Info field;\nb.\tmay set the first bit in the subtype of the Queued Floor Requests message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nc.\tshall remain in the 'U: not permitted and Floor Taken' state.\nUpon receiving a Queued Floor Requests message, including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '1' (Cancel Result), from the floor control server arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Queued Floor Requests message to the floor participant; and\n2.\tshall remain in the 'U: not permitted and Floor Taken' state.\nWhen a Queued Floor Requests message, including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '2' (Cancel Notification), is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Queued Floor Requests message to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Queued Floor Requests message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall remain in the 'U: not permitted and Floor Taken' state.\nThe floor control interface towards the MCPTT client in the floor control server uses this state when the associated floor participant has been given permission to send media.\nWhen entering this state the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall set the state for the associated floor participant to 'U: permitted'.\nUpon receiving a Floor Release message from the associated floor participant, the floor control interface towards the MCPTT client in the floor control server:\n1.\tif the first bit in the subtype of the Floor Release message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '4' (Floor Release);\nb.\tshall include the Source field set to '2' (the controlling MCPTT function is the source); and\nc.\tif the Floor Release message included a Track Info field, shall include the received Track Info field;\n2.\tif an indication that the participant is overriding without revoke is stored,\na.\tshall forward the Floor Release message to the 'dual floor control operation' state machine of the floor control arbitration logic in the MCPTT server with the first bit in the subtype of the Floor Release message set to '0' (Acknowledgment is not required), if not already set;\nb.\tshall remove the indication that the participant is overriding without revoke; and\nc.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2;\n3.\tif an indication that the participant is overridden without revoke is stored,\na.\tshall forward the Floor Release message to the general floor control operation state machine of the floor control arbitration logic in the MCPTT server with the first bit in the subtype of the Floor Release message set to '0' (Acknowledgment is not required), if not already set;\nb.\tshall remove the indication that the participant is overridden without revoke; and\nc.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2; and\n4.\tif no indication is stored:\na.\tshall forward the Floor Release message to the general floor control operation state machine of the floor control arbitration logic in the MCPTT server with the first bit in the subtype of the Floor Release message set to '0' (Acknowledgment is not required), if not already set; and\nb.\tshall remain in the 'U: permitted' state.\nUpon receiving the Floor Idle message from the floor control server arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tif the G-bit in the Floor Indicator is set to '1' (Dual Floor) and an indication that the participant is overridden without revoke is stored\na.\tshall send Floor Idle message to the associated floor participant;\nb.\tshall remove the indication that a participant is overridden without revoke; and\nc.\tshall remain in 'U: permitted state';\n2.\tif no indication is stored shall enter the 'U: not permitted and Floor Idle' state as specified in the clause 6.3.5.3.2; and\n3.\tif an indication that the participant is overriding without revoke is stored\na.\tshall send Floor Idle message to the associated floor participant;\nb.\tshall remove the indication that a participant is overriding without revoke; and\nc.\tshall remain in 'U: permitted state'.\nWhen receiving the Floor Revoke message from the floor control server arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Revoke message to the floor participant;\n2.\tif the Floor Revoke message includes the Track Info field, shall store the Track Info field; and\n3.\tshall enter the state 'U pending Floor Revoke' as specified in the clause 6.3.5.6.2.\nUpon receiving an indication from the network media interface in the MCPTT server that RTP media packets with payload are received from the associated floor participant, the floor control interface towards the MCPTT client in the floor control server:\n1.\tif an indication that the participant is overriding without revoke is not stored,\na.\tshall request the network media interface in the MCPTT server to forward RTP media packets to the media distributor in the MCPTT server; and\n2.\tshall remain in the 'U: permitted' state.\nUpon receiving a Floor Request message from the associated floor participant, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Request message to the floor control server arbitration logic in the MCPTT server; and\nb.\tshall instruct the media distributor to act as in clause 6.3.4.4.5.\n2.\tif an indication that the participant is overriding without revoke is stored,\na.\tshall request the network media interface in the MCPTT server to forward RTP media packets to the media distributor in the MCPTT server; and\nb.\tshall instruct the media distributor to act as in clause 6.3.6.3.5; and\n3.\tshall remain in the 'U: permitted' state.\nWhen RTP packets are received from the media distributor, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the RTP packet to the associated floor participant if the indication that the participant is overridden without revoke is stored;\n2.\tshall forward the RTP packet to the associated floor participant if the indication that the participant is overriding without revoke is stored; and\n3.\tshall remain in the 'U: permitted' state.\nWhen receiving the Floor Taken message from the floor control server arbitration logic in the MCPTT server with the G-bit in the Floor Indicator set to '1' (Dual Floor), the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall send the Floor Taken message to the associated floor participant;\n2.\tshall store an indication that the participant is overridden without revoke; and\n3.\tshall remain in the 'U: permitted' state.\nWhen receiving the Floor Taken message from the floor control server arbitration logic in the MCPTT server with the G-bit in the Floor Indicator set to '0' (Not dual floor), the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall send the Floor Taken message to the associated floor participant; and\n2.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2.\nWhen receiving the Floor Taken message from the floor control server arbitration logic in the MCPTT server with the I-bit in the Floor Indicator set to '1' (multi-talker), the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall send the Floor Taken message to the associated floor participant;\n2.\tshall store an indication that the participant is listening to media from more than one source; and\n3.\tshall remain in the 'U: permitted' state.\nWhen a Floor Release Multi Talker message is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Release Multi Talker message to the associated floor participant; and\n2.\tshall remain in the 'U: permitted' state.\nUpon receiving a Queued Floor Requests message, including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '0' (Cancel Request), from the associated floor participant:\n1.\tif the MCPTT ID of the associated floor participant is an authorized user (e.g dispatcher) to cancel the queued floor request of other MCPTT users (the list of specified users in a request or all the users), the floor control interface towards the MCPTT client in the floor control server:\na.\tshall forward the Queued Floor Requests message to the floor control server arbitration logic; and\nb.\tshall remain in the 'U: permitted' state; and\n2.\tif the MCPTT ID of the associated floor participant is not an authorized user (If participant type is not dispatcher, dispatch supervisor or MC service administrator) to cancel the queued floor request of other MCPTT users (the list of specified users in a request or all the users), the floor control interface towards the MCPTT client in the floor control server:\na.\tshall send a Queued Floor Requests message to the associated floor participant as described in clause 8.2.15. The Queued FloorRequests message:\ni.\tshall include a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '1' (Cancel Result);\nii.\tshall include in the Queued Floor Requests Result Value set to '1' (Not authorized to remove the queued floor requests of all users specified in the List of Queued Users field in a message or all the queued floor requests from the floor request queue); and\niii.\tif the Floor Request included a Track Info field, shall include the received Track Info field;\nb.\tmay set the first bit in the subtype of the Queued Floor Requests message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nc.\tshall remain in the 'U: permitted' state.\nUpon receiving a Queued Floor Requests message, including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '1' (Cancel Result), from the floor control server arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Queued Floor Requests message to the floor participant; and\n2.\tshall remain in the 'U: permitted' state.\nWhen a Queued Floor Requests message including a Queued Floor Requests Purpose field with the Queued Floor Requests Purpose value set to '2' (Cancel Notification), is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Queued Floor Requests message to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Queued Floor Requests message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall remain in the 'U: permitted' state.\nThe floor control interface towards the MCPTT client in the floor control server uses this state during the grace period after sending the Floor Revoke message.\nIn this state timer T8 (Floor Revoke) is running.\nWhen entering this state the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall start timer T8 (Floor Revoke); and\n2.\tshall enter the state 'U: pending Floor Revoke'.\nOn expiry of timer T8 (Floor Revoke) the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall retransmit the Floor Revoke message to the associated floor participant. The Floor Revoke message:\na.\tshall include the same Rejection Cause field and the same Floor Indicator field as in the previous sent Floor Revoke message;\n2.\tshall start timer T8 (Floor Revoke); and\n3.\tshall remain in the 'U: pending Floor Revoke' state.\nNOTE:\tThe number of times the floor control server retransmits the Floor Revoke message and the action to take when the floor control server gives up is an implementation option. However, it is recommended that the MCPTT client is disconnected from the MCPTT call when the floor control server gives up.\nUpon receiving an RTP media packet with payload from the associated floor participant, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward RTP media packets to the media distributor; and\n2.\tshall remain in the 'U: pending Floor Revoke' state.\nUpon receiving a Floor Release message from the associated floor participant, the floor control interface towards the MCPTT client in the floor control server:\n1.\tif the first bit in the subtype of the Floor Release message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '4' (Floor Release);\nb.\tshall include the Source field set to '2' (the controlling MCPTT function is the source); and\nc.\tif the Floor Release message included a Track Info field, shall include the received Track Info field;\n2.\tif the G-bit in the Floor Indicator is set to '1' (Dual floor):\na.\tif the state in the 'general floor control operation' state machine is 'G: Taken':\ni.\tshall send a Floor Taken message to the associated floor participant. The Floor Taken message:\nA.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field of the permitted MCPTT client and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nB.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nC.\tif the Floor Release message included a Track Info field, shall include the received Track Info field; and\nD.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field; and\nii.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2; and\nb.\tif the state in the 'general floor control operation' state machine is 'G: Idle':\ni.\tshall send a Floor Idle message to the associated floor participant;\nii.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\niii.\tif the Floor Release message included a Track Info field, shall include the received Track Info field; and\niv.\tshall enter the 'U: not permitted and Floor Idle' state as specified in the clause 6.3.5.3.2; and\n3.\tif the G-bit in the Floor Indicator is set to '0':\na.\tshall forward the Floor Release message to the floor control server arbitration logic; and\nb.\tshall remain in the state 'U: pending Floor Revoke'.\nUpon receiving a Floor Idle message from the floor control server arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\nNOTE 1:\tThe Floor Idle message is sent when timer T3 (Stop talking grace) expires and when timer T1 (End of RTP media) expires and when there are no queued floor requests.\n1.\tshall send the Floor Idle message to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Idle message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE 2:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall enter the 'U: not permitted and Floor Idle' state as specified in the clause 6.3.5.3.2.\nUpon receiving a Floor Taken message from the floor control server arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\nNOTE 1:\tThe Floor Taken message is sent when timer T3 (Stop talking grace) expires or when timer T1 (End of RTP media) expires and if there are queued floor requests.\n1.\tshall send the Floor Taken message to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Taken message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE 2:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2.\nWhen a Floor Release Multi Talker message is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Release Multi Talker message to the associated floor participant; and\n2.\tshall remain in the 'U: pending Floor Revoke' state.\nThe floor control interface towards the MCPTT client in the floor control server uses this state when it receives RTP media packets from the MCPTT client and the MCPTT client is not permitted to send media.\nTimer T8 (Floor Revoke) is running in this state.\nWhen entering this state the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall start timer T8 (Floor Revoke); and\n2.\tshall enter the state 'U: not permitted but sends media'.\nIn this state the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall not request the network media interface in the MCPTT server to forward RTP media packets from the MCPTT client to the media distributor in the MCPTT server.\nOn expiry of timer T8 (Floor Revoke), the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall send a Floor Revoke message to the associated floor participant. The Floor Revoke message:\na.\tshall include in the Rejection Cause field the <Rejection Cause> value set to #3 (No permission to send a Media Burst);\nb.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nc.\tif a Track Info field was included in the Floor Request message, shall include the stored Track Info field; and\n2.\tshall restart timer T8 (Floor Revoke); and\n3.\tshall remain in the 'U: not permitted but sends media' state.\nNOTE:\tThe number of times the floor control server retransmits the Floor Revoke message and the action to take when the floor control server gives up is an implementation option. However, the recommended action is that the MCPTT client is disconnected from the MCPTT call.\nUpon receiving a Floor Release message, the floor control interface towards the MCPTT client in the floor control server:\n1.\tif the first bit in the subtype of the Floor Release message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '4' (Floor Release);\nb.\tshall include the Source field set to '2' (the controlling MCPTT function is the source); and\nc.\tif the Floor Release message included a Track Info field, shall include the received Track Info field;\n2.\tif the general state is 'G: Floor Idle', the floor control interface towards the MCPTT client in the floor control server:\na.\tshall send the Floor Idle message. The Floor Idle message:\ni.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1;\nii.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\niii.\tif the Floor Release message included a Track Info field, shall include the received Track Info field; and\nb.\tshall enter the 'U: not permitted and Floor Idle' state as specified in the clause 6.3.5.3.2; and\n3.\tif the general state is 'G: Floor Taken', the floor control interface towards the MCPTT client in the floor control server:\na.\tshall send a Floor Taken message. The Floor Taken message:\ni.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nii.\tif the session is a broadcast group call, shall include the Permission to Request the floor field set to '0';\niii.\tif the session is not a broadcast group call, may include the Permission to Request the floor field set to '1';\niv.\tmay include the first bit in the subtype of the Floor Taken message set to '1' (Acknowledgment is required) as described in clause 8.2.2;\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\nv.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\nvi.\tif the Floor Release message included a Track Info field, shall include the received Track Info field; and\nvii.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field; and\nb.\tshall enter the 'U: not permitted and Floor Taken' state as specified in the clause 6.3.5.4.2.\nWhen receiving the Floor Taken message from the floor control server arbitration logic in the MCPTT server with the I-bit in the Floor Indicator set to '1' (multi-talker), the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall send the Floor Taken message to the associated floor participant;\n2.\tshall store an indication that the participant is listening to media from more than one source; and\n3.\tshall remain in the 'U: not permitted but sends media' state.\nWhen a Floor Release Multi Talker message is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Release Multi Talker message to the associated floor participant; and\n2.\tshall remain in the 'U: not permitted but sends media' state.\nThis clause describes the actions to be taken in all states defined for the basic state diagram with the exception of the 'Start-stop' and 'Releasing' states.\nUpon receiving an MCPTT call release step 1 request from the application and signalling plane e.g. when the MCPTT call is going to be released or when the MCPTT client leaves the MCPTT call, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall stop sending floor control messages to the associated floor participant;\n2.\tshall request the network media interface to stop sending RTP media packets towards to the associated MCPTT client;\n3.\tshall ignore any floor control messages received from the associated floor participant;\n4.\tshall request the network media interface to stop forwarding RTP media packets from the associated MCPTT client to the media distributor in the MCPTT server;\n5.\tshall indicate to the floor control server arbitration logic in the MCPTT server that the MCPTT client has started to disconnect from the MCPTT call; and\n6.\tshall enter the 'Releasing' state.\nUpon receipt of an instruction to merge with another group due to the group regrouping function, the floor control interface towards the MCPTT client:\n1.\tshall create an instance of the 'floor participant interface state transition' as specified in clause 6.5.5;\n2.\tshall move information associated with the instance used for 'basic floor control operation towards the floor participant' to the 'floor participant interface state transition' state machine;\nNOTE:\tWhich information that needs to be moved is an implementation option.\n3.\tshall enter the 'Start-stop' state and terminate the 'basic floor control operation towards the floor participant'' state machine associated with this floor participant and this MCPTT call;\n4.\tif the state was 'U: not permitted and Floor Idle', 'U: not permitted Floor Taken', 'U: pending Floor Revoke', 'U: not permitted and initiating' or 'U: not permitted but sends media':\na.\tshall enter the 'P: has no permission' state as specified in clause 6.5.5; and\nb.\tshall perform actions specified in clause 6.5.5.3; and\n5.\tif the state was 'U: permitted':\na.\tshall enter the 'P: has permission' state; and\nb.\tshall perform actions specified in clause 6.5.5.4.\nThe floor control interface towards the MCPTT client in the floor control server uses this state while waiting for the application and signalling plane to finalize the release of the MCPTT call or finalizing the removal of the MCPTT client from the MCPTT call.\nUpon receiving an MCPTT call release step 2 request from the application and signalling plane, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall request the network media interface to release all resources associated with this MCPTT client for this MCPTT call; and\n2.\tshall enter the 'Start-stop' state and terminate the 'basic floor control operation towards the floor participant'' state machine associated with this floor participant and this MCPTT call.\nThe floor control interface towards the MCPTT client uses this state when waiting for the floor control arbitration logic to finalize the initialisation of the state machine to be used for a temporary group session.\nDuring this state Floor Request messages can be received from the non-controlling MCPTT function. Any Floor Request message received will be added to the queue according to the priority of the floor request determine as described in clause 4.1.1.4.\nThe floor control interface towards the MCPTT client:\n1.\tshall set the state for the associated floor participant to 'U: not permitted and Initiating'.\nWhen a Floor Taken message is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client:\n1.\tshall forward the Floor Taken messages to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Taken message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall enter the state 'U: not permitted and Floor Taken' as specified in clause 6.3.5.4.2.\nWhen receiving a Floor Idle message from the floor control server arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client:\n1.\tshall forward the Floor Idle message to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Idle message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall enter the 'U: not permitted and Floor Idle' state as specified in the clause 6.3.5.3.2.\nUpon receipt of a Floor Request message, the floor control interface towards the MCPTT client:\n1.\tshall determine the effective priority level as described in clause 4.1.1.4;\n2.\tshall put the Floor Request message in the active floor request queue according to the determined effective priority level;\n3.\tif the <Queueing Capability> value in the Track Info field is set to '1' (the floor participant in the MCPTT client supports queueing), shall send a Floor Queue Position Info message to the requesting non-Controlling MCPTT function, The Floor Queue Position Info message:\na.\tshall include the queue position and floor priority in the Queue Info field;\nb.\tshall include the received Track Info field; and\nc.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n4\tif the <Queueing Capability> value in the Track Info field is set to '0' (the floor participant in the MCPTT client does not support queueing), shall send the Floor Deny message. The floor Deny message:\nNOTE:\tA Floor Request from a MCPTT client in a constituent group can be received without the queueuing capability if a floor participant in an ongoing constituent MCPTT group request floor while the floor was idle during the merging process.\na.\tshall include in the Reject Cause field the <Reject Cause> value cause '1' (Another MCPTT client has permission);\nb.\tshall include the received Track Info field; and\nc.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\n5.\tshall remain in the 'U: not permitted and initiating' state.\nWhen a Floor Granted message is received from the floor control arbitration logic, the floor control interface towards the MCPTT client:\n1.\tshall forward the Floor Granted messages to the associated floor participant;\n2.\tmay set the first bit in the subtype of the Floor Granted message to '1' (Acknowledgment is required) as described in clause 8.2.2; and\nNOTE:\tIt is an implementation option to handle the receipt of the Floor Ack message and what action to take if the Floor Ack message is not received.\n3.\tshall enter the state 'U: permitted' as specified in clause 6.3.5.5.2.\nUpon receiving a Floor Release message from the associated floor participant, the floor control interface towards the MCPTT client:\n1.\tif the first bit in the subtype of the Floor Release message is set to '1' (Acknowledgment is required) as described in clause 8.2.2, shall send a Floor Ack message. The Floor Ack message:\na.\tshall include the Message Type field set to '4' (Floor Release);\nb.\tshall include the Source field set to '2' (the controlling MCPTT function is the source); and\nc.\tif the Floor Release message included a Track Info field, shall include the received Track Info field;\n2.\tshall use the topmost <Participant Reference> value and the SSRC in the Track Info field of the received Floor Release message to check if the floor participant has a queued floor request and if not, check if there is a floor request in one of the cached application/vnd.3gpp.mcptt-floor-request+xml MIME bodies;\n3.\tshall remove the MCPTT client from the active floor request queue or the cached application/vnd.3gpp.mcptt-floor-request+xml MIME body, if the MCPTT client was in the active floor request queue or in the application/vnd.3gpp.mcptt-floor-request+xml MIME body; and\n4.\tshall remain in the 'U: not permitted and initiating' state.\nWhen a Floor Release Multi Talker message is received from the floor control arbitration logic in the MCPTT server, the floor control interface towards the MCPTT client in the floor control server:\n1.\tshall forward the Floor Release Multi Talker message to the associated floor participant; and\n2.\tshall remain in the ''U: not permitted and initiating' state.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.6\tDual floor control",
                            "text_content": "Dual floor control is used when a floor participant requests floor with a pre-emptive floor priority allowing the floor control in clause 6.3.4 to continue without revoking the floor from the MCPTT client permitted to send media as specified in 3GPP TS 23.379 [5] clause 10.9.1.3.2.2.\nThe floor control server arbitration logic in the floor control server shall behave according to the state diagram and state transitions specified in this clause.\nFigure 6.3.6.1-1 shows the 'dual floor control operation' states (D states) and the state transition diagram.\nThe figure depicts a floor control server state transition diagram for 'dual floor control operation'. It illustrates the process of controlling the floors of a building using a dual-floor control system. The diagram shows the steps taken by the server to determine the floor status and initiate the appropriate actions. It highlights the importance of communication between the server and the floor control system to ensure efficient and accurate control.\nFigure 6.3.6.1-1: Floor control server state transition diagram for 'dual floor control operation'\nThe floor control arbitration logic in the floor control server shall keep one instance of the 'dual floor control operation' state machine for a floor participant with pre-emptive floor priority where this MCPTT user is allowed to talk without revoking a current speaker with lower flow priority.\nNOTE:\tOnly one MCPTT user with this type of pre-emptive floor priority can exist within an MCPTT call.\nThe floor participant associated to the 'dual floor control operation' state machine is in the following clauses referred to as the overriding MCPTT client.\nIf floor control messages or RTP media packets arrives in a state where there is no procedure specified in the following clauses the floor control arbitration logic in the floor control server:\n1.\tshall discard the floor control message;\n2.\tshall request the media distributor in the MCPTT server to discard any received RTP media packet; and\n3.\tshall remain in the current state.\nState details are explained in the following clauses.\nWhen a new instance of the 'dual floor control operation' state machine is initiated, before any floor control related input is applied, the state machine is in 'Start-stop' state. Similarly when the media burst is released the state machine shall return to the 'Start-Stop' state or the related MCPTT call is released.\nWhen a floor participant request floor with an overriding pre-emptive priority is granted the floor the floor control arbitration logic:\n1.\tshall create one instance of the 'dual floor control operation' state machine;\n2.\tshall store the SSRC of floor participant;\n3.\tif a Track Info field is included in the Floor Request message, shall store the received Track Info field associated with the floor control server state transition diagram for 'dual floor control operation', and\n4\tshall enter the state 'D: Floor Taken' as specified in the clause 6.3.6.3.2.\nThe floor control arbitration logic in the floor control server uses this state when it has permitted one floor participant to override a current speaker in an MCPTT call to send media.\nTimer T11 (End of RTP dual) can be running when the floor control server is in this state.\nTimer T12 (Stop talking dual) can be running when the floor control server is in this state.\nWhen entering this state the floor control arbitration logic in the floor control server:\n1.\tshall send a Floor Granted message to the requesting floor participant. The Floor Granted message:\na.\tshall include the value of the T12 (Stop talking dual) timer in the Duration field;\nb.\tshall include the granted priority in the Floor priority field;\nc.\tif a Track Info field associated with the floor control server state transition diagram for 'dual floor control operation' is stored, shall include the stored Track Info field;\nd.\tshall include the Floor Indicator field with the G-bit set to '1' (Dual floor);\ne.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\nf.\tshall include in the Audio SSRC of Granted Participant field a globally unique audio SSRC, generated and stored by the floor control server, to be used by the granted MCPTT participant in the RTP media packets it will send;\n2.\tshall send a Floor Idle message to any non-controlling MCPTT functions involved in the session and to those floor participants controlled by the controlling MCPTT function that will only listen to RTP media from the overriding MCPTT client according to local policy. The Floor Idle message:\nNOTE 1:\tThe non-controlling MCPTT function will send the Floor Idle message to those floor participants controlled by the non-controlling MCPTT function that will only listen to RTP media from the overriding MCPTT client according to local policy when the non-controlling MCPTT function receives the Floor Taken with the G-bit set to '1' (Dual floor) in the Floor Indicator field.\ni.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1; and\nii.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n3.\tshall send a Floor Taken message to any non-controlling MCPTT functions involved and to floor participants controlled by the controlling MCPTT function that will listen to the RTP media from the overriding MCPTT client according to local policy. The Floor Taken message:\nNOTE 2:\tThe MCPTT client overridden by the overriding MCPTT client is still sending voice (overridden). The list of floor participants that receive the overriding, overridden, or both transmissions is based on configuration.\na.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nb.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1;\nc.\tshall include the Floor Indicator field with the G-bit set to '1' (Dual floor);\nd.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\ne.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field;\n4.\tshall start the T11 (End of RTP dual) timer; and\n5.\tshall enter the state to 'D: Floor Taken' state.\nOn expiry of timer T11 (End of RTP dual), the floor control arbitration logic in the floor control server:\n1.\tshall stop the T12 (Stop talking dual) timer; if running;\n2.\tshall request the media distributor in the MCPTT server to stop distributing RTP media packets received from the overriding MCPTT client to other MCPTT clients;\nNOTE:\tIf dual floor control is ongoing as described in clause 6.3.6, the list of floor participants that receive the overriding, overridden, or both transmissions is based on configuration.\n3.\tshall release all resources reserved in the media plane including the instances used for the 'dual floor control operation' state machine and any running timers associated with the state machine;\n4.\tshall send a Floor Idle message to any non-controlling MCPTT functions and to those floor participants controlled by the controlling MCPTT functions receiving RTP media from the overriding MCPTT client. The Floor Idle message:\na.\tshall include a Floor Indicator field with the G-bit set to '1' (Dual floor);\nb.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1; and\nc.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n5.\tif the state in the 'general floor control operation' state machine is 'G: Taken';\na\tshall send a Floor Taken message to any non-controlling MCPTT functions and to those floor participants controlled by the controlling MCPTT function that only received RTP media from the overriding MCPTT client. The Floor Taken message:\ni.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field of the permitted MCPTT client and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nii.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1;\niii.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\niv.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field;\n6.\tif the state in the 'general floor control operation' state machine is 'G: Idle', shall send a Floor Idle message to all floor participants. The Floor Idle message:\na.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1; and\nb.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\n7.\tshall enter the 'Start-stop' state.\nOn expiry of the T12 (Stop talking dual) timer the floor control arbitration logic in the floor control server:\n1.\tshall stop the T11 (End of RTP dual) timer;\n2.\tshall request the media distributor in the MCPTT server to stop distributing RTP media packets to other MCPTT client;\n3.\tshall send the Floor Revoke message to the permitted participant. The Floor Revoke message:\na.\tshall include the Reject Cause field with the <Reject Cause> value set to #2 (Media burst too long) in the Floor Revoke message sent in clause 6.3.4.5.2;\nb.\tshall include the Floor Indicator with the G-bit set to '1' (Dual floor);\nc.\tif a Track Info field associated with the dual floor is stored, shall include the stored Track Info field; and\nd.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n4.\tshall remove the stored Track info field associated with the dual floor;\n5.\tif the state in the 'general floor control operation' state machine is 'G: Taken';\na.\tshall send a Floor Taken message to all non-controlling functions (if the session is a temporary group session involving non-controlling MCPTT functions) and to those floor participants that only received RTP media from the overriding MCPTT client. The Floor Taken message:\ni.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field of the permitted MCPTT client and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nii\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1; and\niii.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field;\n6.\tif the state in the 'general floor control operation' state machine is 'G: Idle', shall send a Floor Idle message to all floor participants. The Floor Idle message:\na.\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1; and\nb.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n7.\tshall release all resources reserved in the media plane including the instances used for the Floor control server state transition diagram for 'dual floor control operation'; and\n8.\tshall enter the 'Start-stop' state.\nUpon receiving an indication from the media distributor in the MCPTT server that RTP media packets are received from the permitted MCPTT client, the floor control arbitration logic in the floor control server:\n1.\tshall start the T12 (Stop talking dual) timer, if not already running;\n2.\tshall restart the T11 (End of RTP dual) timer;\n3.\tshall instruct the media distributor to forward the received RTP media packets to any non-controlling MCPTT functions, to the overridden MCPTT client and to those MCPTT clients receiving RTP media from the overriding MCPTT client controlled by the controlling MCPTT functions according to local policy; and\nNOTE 1:\tThe RTP media is sent to the MCPTT clients subjected to the maximum number of simultaneous transmissions received in one group call for override (N7) as indicated in 3GPP TS 23.379 [5].\nNOTE 2:\tThe non-controlling MCPTT function will forward the RTP media packets to MCPTT clients receiving RTP media from the overriding MCPTT client according to local policy in the non-controlling MCPTT function.\n4.\tshall remain in the 'D: Floor Taken' state.\nUpon receiving a Floor Release message the floor control arbitration logic in the floor control server:\n1.\tshall request the media distributor in the MCPTT server to stop distributing RTP media packets received from the overriding MCPTT client to other MCPTT client;\n2.\tshall stop the T12 (Stop talking dual) timer, if running;\n3.\tshall stop the T11 (End of RTP dual) timer;\n4.\tshall release all resources reserved in the media plane including the instances used for the Floor control server state transition diagram for 'dual floor control operation' and any running timers associated with the state machine;\n5.\tif the first bit in the subtype of the Floor Release message is set to '1' (acknowledgement is required) as specified in clause 8.2.2:\na.\tshall send a Floor Ack message. The Floor Ack message:\ni.\tshall set the Source field to the value '2' (the controlling MCPTT function is the source); and\nii.\tshall set the Message Type field to the value '4'( Floor Release);\n6.\tshall send a Floor Idle message to any non-controlling MCPTT functions, to the overridden floor participant and to those floor participants controlled by the controlling MCPTT functions receiving RTP media from the overriding MCPTT client. The Floor Idle message:\na.\tshall include an Floor Indicator field with the G-bit set to '1' (Dual floor);\nb\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1; and\nc.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n7.\tif the state in the 'general floor control operation' state machine is 'G: Taken',\na.\tshall send a Floor Taken message to any non-controlling MCPTT functions and to those floor participants that only received RTP media from the overriding MCPTT client. The Floor Taken message:\ni.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field of the permitted MCPTT client and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested;\nii.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1;\niii.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\niv.\tshall include the generated audio SSRC to be used by the granted MCPTT participant into the Audio SSRC of Granted Participant field;\n8.\tif the state in the 'general floor control operation' state machine is 'G: Idle', shall send a Floor Idle message to all floor participants;. The Floor Idle message:\na.\tshall include a Message Sequence Number field with a Message Sequence Number value increased with 1; and\nb.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\n9.\tshall enter the 'Start-stop' state.\nUpon receiving a Floor Request message from the floor participant that has been granted permission to send overriding media, the floor control arbitration logic in the floor control server:\n1.\tshall send a Floor Granted message to the previously granted floor participant. The Floor Granted message:\na.\tshall include the value of the T12 (Stop talking dual) timer in the Duration field;\nb.\tshall include the granted priority in the Floor priority field;\nc.\tif the Floor Request message included a Track Info field, shall include the received Track Info field; and\nd.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications; and\n2.\tshall remain in the 'D: Floor Taken' state.\nIf the floor control server receives an indication from the floor control interface towards the MCPTT client that the MCPTT client has started to disconnect from the MCPTT call, the floor control arbitration logic in the floor control server:\n1.\tshall request the media distributor in the MCPTT server to stop distributing RTP media packets received from the overriding MCPTT client to other MCPTT clients;\n2.\tshall send a Floor Idle message to any non-controlling MCPTT functions and to those floor participants controlled by the controlling MCPTT functions receiving RTP media from the overriding MCPTT client. The Floor Idle message:\na.\tshall include an Floor Indicator field with the G-bit set to '1' (Dual floor);\nb\tshall include a Message Sequence Number field with a <Message Sequence Number> value increased with 1; and\nc.\tif a group call is a broadcast group call, a system call, an emergency call, an imminent peril call, or a temporary group session, shall include the Floor Indicator field with appropriate indications;\n3.\tshall release all resources reserved in the media plane including the instances used for the Floor control server state transition diagram for 'dual floor control operation' and any running timers associated with the state machine; and\n4.\tshall enter the 'Start-stop' state.\nUpon receiving the termination instruction, the floor control arbitration logic in the floor control server:\n1.\tshall set the value of timer T1 (End of RTP media) to the value of timer T11 (End of RTP dual) and start timer T1, if timer T11 (End of RTP dual) is running;\n2.\tshall set the value of timer T2 (Stop talking) to the value of timer T12 (Stop talking dual) and start timer T2, if timer T12 (Stop talking dual) is running;\n3.\tshall release all resources reserved in the media plane including the instances used for the dual floor control operation' state machine and stop any running timers associated with the state machine; and\n4.\tshall enter the 'Start-stop' state.\nNOTE:\tThe overriding participant continues to have the floor until its current talk burst is terminated.\nThis clause describes the actions to be taken in all states defined for the general state diagram with the exception of the 'Start-stop' state.\nThis clause is used by the floor control arbitration logic in the floor control server when an MCPTT call is released.\nUpon receiving an MCPTT call release step 1 request from the application and signalling plane the floor control arbitration logic in the floor control server:\n1.\tshall request the media distributor in the MCPTT server to stop sending RTP media packets MCPTT clients; and\n2.\tshall enter the 'Releasing' state.\nThe floor control arbitration logic in the floor control server uses this state while waiting for the application and signalling plane to finalize the disconnection of an MCPTT call.\nUpon receiving an MCPTT call release step 2 request from the application and signalling plane, the floor control arbitration logic in the floor control server:\n1.\tshall release all resources reserved in the media plane including the instances used for the dual floor control operation' state machine and any running timers associated with the state machine; and\n2.\tshall enter the 'Start-stop' state.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.4\tParticipating MCPTT function floor control procedures",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.4.1\tGeneral",
                            "text_content": "Once an on-demand MCPTT session is established or a pre-established session is in use when the participating MCPTT function receives floor control messages from the floor participant in the MCPTT client or from the floor control server in the controlling MCPTT function, the behaviour of the participating MCPTT function is described in the following clauses.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.2\tReceive floor control messages",
                            "text_content": "Upon receiving a floor control message the participating MCPTT function:\n1.\tshall immediately forward the floor control message to the floor control server if the message is received from the floor participant;\na.\twhen forwarding the floor control message, the participating MCPTT function shall update the RTCP header of the floor control message with the RTCP SSRC it has received from the floor control server at session establishment.\n2.\tif an MBMS subchannel is not used for a conversation in the session the floor control message is associated with, shall immediately forward the floor control message to the floor participant if the message is received from the floor control server; and\na.\twhen forwarding the floor control message, the participating MCPTT function shall update the RTCP header of the floor control message with the RTCP SSRC it has received from the floor participant at session establishment.\n3.\tif an MBMS subchannel is used for a conversation in the session the floor control message is associated with:\na.\tif\ni.\tthe floor control message is not a Floor Idle message or a Floor Taken message or a Floor Release Multi Talker message;\nii.\tthe MCPTT client has not reported \"listening\" status as specified in 3GPP TS 24.379 [2] clause 14.2.3;\niii.\tthe MCPTT client has reported \"not-listening\" status as specified in 3GPP TS 24.379 [2] clause 14.2.3 in the latest received MBMS bearer listening status report; or\niv.\tthe floor control message is a Floor Idle message or a Floor Taken message or a Floor Release Multi Talker message, protection of floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients is required, and the participating MCPTT function determined that the MCPTT client does not support MuSiK as specified in 3GPP TS 24.379 [2];\nshall immediately forward the floor control message to the floor participant; and\nb.\tif\ni.\tthe MCPTT client has reported \"listening\" status as specified in 3GPP TS 24.379 [2] clause 14.2.3 in the latest received MBMS bearer listening status report; and\nii\tif the floor control message is the Floor Idle message or the Floor Taken message or the Floor Release Multi Talker message, and:\n-\tprotection of floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients is not required; or\n-\tthe participating MCPTT function determined that the MCPTT client supports MuSiK as specified in 3GPP TS 24.379 [2];\nshall perform actions as specified in clause 10.2.\nNOTE:\tWhen the Floor Idle, Floor Taken, or Floor Release Multi Talker messages are discarded the messages are sent to the MCPTT clients over the MBMS subchannel allocated for the conversation as specified in clause 10.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.3\tReceive RTP media packets (R: RTP Media)",
                            "text_content": "Upon receiving RTP media packets the participating MCPTT function:\n1.\tshall immediately forward the RTP media packet to the controlling MCPTT function if the RTP packet is from an MCPTT client; and\n2.\tif an MBMS subchannel is not used for a conversation in the session the RTP media packets are associated with, shall immediately forward the RTP media packets to the MCPTT client if the RTP packet is from the controlling MCPTT function or the non-controlling MCPTT function.\n3.\tif an MBMS subchannel is used for a conversation in the session the RTP media packets are associated with and if RTP media packets are received from the controlling MCPTT function or the non-controlling MCPTT function:\na.\tif\ni.\tthe MCPTT client has not reported \"listening\" status as specified in 3GPP TS 24.379 [2] clause 14.2.3; or\nii.\tthe MCPTT client has reported \"not-listening\" status as specified in 3GPP TS 24.379 [2] clause 14.2.3 in the latest received MBMS bearer listening status report,\nshall immediately forward the RTP media packets to the MCPTT client; and\nb.\tif the MCPTT client has reported \"listening\" status as specified in 3GPP TS 24.379 [2] clause 14.2.3 in the latest received MBMS bearer listening status report, shall perform actions as specified in clause 10.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.4\tRelease of session",
                            "text_content": "When the participating function receives an indication from the application and signalling plane that session release is initiated, the participating MCPTT function:\n1.\tshall stop sending floor control messages towards the floor participant and the floor control server; and\n2.\tshall stop sending RTP media packets towards the MCPTT client and towards the controlling MCPTT function.\nWhen the participating MCPTT function receives an indication from the application and signalling plane that the session is released, the participating MCPTT function:\n1.\tin case of a pre-established session, shall perform the actions in clause 9.3.2; and\n2.\tin case of an on-demand session, shall release the media resources associated with the session.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.5\tNon-controlling MCPTT function of an MCPTT group",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.5.1\tGeneral",
                            "text_content": "The floor control server interface in the non-controlling MCPTT function of an MCPTT group shall support the procedures in clauses 6.5.2, 6.5.3 and 6.5.4.\nThe floor participant interface in the non-controlling MCPTT function of an MCPTT group shall support the procedures in clause 6.5.5.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.5.2\tThe MCPTT call initialization procedure in the non-controlling MCPTT function of an MCPTT group",
                            "text_content": "The clause 6.5.2.2 describes the initial procedures when a new SIP session is establishing a group session.\nThe clause 6.5.2.3 describes the procedure for switching from a controlling MCPTT function mode to a non-controlling MCPTT function mode.\nWhen receiving an indication from the application and signalling plane that a group session is initiated, the floor control server interface:\n1.\tshall initiate and store a message sequence number value with the value to be used in the Message Sequence Number field in the Floor Idle and Floor Taken messages;\n2.\tshall for each MCPTT client in the MCPTT group controlled by the non-controlling MCPTT function that are participating in the session:\na.\tgenerate a random temporary identifier between '0' and '4294967295';\nb.\tstore an association between the generated temporary identifier and the floor participant interface;\nc.\tstore information about capabilities negotiated in the \"mc_queueing\" and \"mc_priority\" fmtp attributes as described in clause 14;\nd.\tstore information whether the MCPTT client requested privacy or not; and\ne.\tinitiate an instance of the 'floor participant interface state transition' state machine as specified in clause 6.5.5; and\n3.\tshall perform the actions in the clause 6.5.4.\nWhen receiving an indication from the application and signalling plane that an MCPTT client has accepted an invitation to the session, the floor participant interface shall perform the actions in clause 6.5.5.\nThe switching from working in a controlling MCPTT functional mode to a non-controlling MCPTT functional mode is a 2-step procedure.\nStep 1\tThe controlling MCPTT function prepares for acting as a non-controlling MCPTT function. The step 1 procedure is specified in clause 6.5.2.3.2.\n\nBefore continuing with step 2 the application and signalling plane needs to receive a confirmation that the SIP session between the floor control server and the interface to the floor control server is established.\nStep 2\tThe controlling MCPTT functions starts acting as a non-controlling MCPTT function. The step 2 procedure is specified in clause 6.5.2.3.3.\nWhen receiving a request from the application and signalling plane to prepare for merging with another group session, the floor control server:\n1.\tif in the 'G: taken' state, shall provide information about current speaker to the signalling and application plane;\nNOTE:\tThe signalling and application plane will use the information about the current speaker to send a floor request in an SIP MESSAGE request as specified in 3GPP TS 24.379[2].\n2.\tshall release the instant used for 'general floor control operation'; and\n3.\tshall for each MCPTT client in the MCPTT group controlled by the controlling MCPTT function and participating in the session:\na.\tgenerate a random temporary identifier between '0' and '4294967295';\nb.\tstore an association between the generated temporary identifier and the floor participant interface;\nc.\tstore information about capabilities negotiated in the \"mc_queueing\" and \"mc_priority\" fmtp attributes as specified in clause 14;\nd.\tstore information whether the MCPTT client requested privacy or not; and\ne.\tinitiate an instance of the 'floor participant interface state transition' state machine as specified in clause 6.3.5.8.3.\nWhen receiving a request from the application and signalling plane to finalize the switch to non-controlling MCPTT function behaviour, the floor control server:\n1.\tshall start acting as a floor control server interface;\n2.\tif an active floor request queue exists, for each queued floor request in the active floor request queue:\nNOTE:\tThe active floor request queue was built up when the non-controlling MCPTT function was acting as a floor control server.\na.\tshall send a Floor Request message to the floor control server. The Floor Request:\ni.\tshall include all fields included by the floor participant;\nii.\tif a Track Info field is included, shall include the temporary identifier at the end of the <Floor Participant Reference> value item; and\niii.\tif a Track Info field is not included, shall include a Track Info field populated as follows:\nA.\tshall include the \"mc_queueing\" fmtp attribute value negotiated as specified in clause 14 in the <Queueing Capability> value;\nB.\tshall include a <Participant Type> value based on the <participant-type> element specified in 3GPP TS 24.481 [12], if value in the <participant-type> element is available, otherwise set the <Participant Type> value to \"unknown\"; and\nC. shall include the temporary identifier as the first <Floor Participant Reference> value;\n3.\tif an active floor request queue exists, shall move the active floor request queue to a passive floor request queue; and\n4.\tshall perform the actions in the clause 6.5.4.\nWhen receiving an indication from the application and signalling plane that an MCPTT client has joined the session, the floor participant interface shall perform the actions in clause 6.5.5.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.5.3\tThe MCPTT call release procedure in the non-controlling MCPTT function of an MCPTT group",
                            "text_content": "When an MCPTT client leaves an MCPTT call and the MCPTT call remains ongoing with the other MCPTT clients, the non-controlling MCPTT function of an MCPTT group follows a two-step procedure:\nStep 1\tThe floor participant interface stops sending floor control messages and RTP media packets to the MCPTT client leaving the MCPTT call and the floor participant interface discards floor control messages and RTP media packets received from the MCPTT client leaving the MCPTT call; and\nStep 2\tWhen the application and signalling plane has determined that the session with this floor participant has been released, the corresponding instance of the 'floor participant interface state transition' state machine is released.\nWhen an MCPTT call is released, the floor control server interface follows a two-step procedure:\nStep 1\tThe floor control server interface stops sending floor control messages and RTP media packets to MCPTT clients in the MCPTT call; and\nStep 2\tWhen the application and signalling plane has determined that the MCPTT call has been released, resources in the floor control server interface are released, along with all 'floor participant interface state transition' state machines.\nThe non-controlling MCPTT function of an MCPTT group can initiate an MCPTT call release depending on the release policy specified in 3GPP TS 24.379 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.5.4\tFloor control server interface procedures",
                            "text_content": "The floor control server interface is stateless with regards to the floor control message received and sent.\nThe following clauses specifies what the floor control server interface shall do when receiving a floor control message sent by the controlling MCPTT function or received at the floor participant interface and how the floor control server controls the media distribution function in the non-controlling MCPTT function.\nUpon receiving a Floor Request message from one floor participant interface, the floor control server interface:\n1.\tshall forward the Floor Request message to the controlling MCPTT function. The Floor Request message:\na.\tshall include all fields included by the floor participant;\nb.\tif a Track Info field is included, shall include the temporary identifier at the end of the <Floor Participant Reference> value item;\nc.\tif a Track Info field is not included, shall include a Track Info field populated as follows:\ni.\tshall include the \"mc_queueing\" fmtp attribute value negotiated as specified in clause 14 in the <Queueing Capability> value;\nii.\tshall include a <Participant Type> value based on the <participant-type> element specified in 3GPP TS 24.481 [12], if value in the <participant-type> element is available, otherwise set the <Participant Type> value to \"unknown\"; and\niii. shall include the temporary identifier as the first <Floor Participant Reference> value; and\nd.\tshall include the MCPTT ID of the requesting floor participant in a User ID field, if privacy is not requested; and\n2.\tif the value of the <Queueing Capability> in the Track Info is '1' (the floor participant in the MCPTT client supports queueing), shall store the outgoing Floor Request message in the passive floor request queue.\nUpon receiving a Floor Release message from one floor participant interface, the floor control server interface:\nNOTE:\tA Floor Release message can be received from the permitted floor participant and from any participant that is queued in the floor control server.\n1.\tshall forward a Floor Release message to the controlling MCPTT function. The Floor Release message:\na.\tshall include all fields included by the floor participant in the Floor Release message;\nb.\tif a Track Info field is included, shall include the temporary identifier at the end of the <Floor Participant Reference> value item; and\nc.\tif a Track Info field is not included, shall include a Track Info field as follows:\ni.\tshall include the \"mc_queueing\" fmtp attribute value negotiated as specified in clause 14 in the <Queueing Capability> value; and\nii. shall include the temporary identifier as the first <Floor Participant Reference> value; and\n2.\tif a Floor Request message received from this floor participant is in the passive floor request queue, shall remove the floor request from the passive floor request queue.\nUpon receiving a Floor Queue Position Request message from one floor participant interface, the floor control server interface:\n1.\tshall forward the Floor Queue Position Request message to the controlling MCPTT function. The Floor Queue Position Request message:\na.\tshall include all fields included by the floor participant;\nb.\tif a Track Info field is included, shall include the temporary identifier at the end of the <Floor Participant Reference> value item; and\nc.\tif a Track Info field is not included, shall include a Track Info field as follows:\ni.\tshall include the \"mc_queueing\" fmtp attribute value negotiated as specified in clause 14 in the <Queueing Capability> value; and\nii. shall include the temporary identifier as the first <Floor Participant Reference> value.\nUpon receiving a Floor Ack message from one floor participant interface the floor control server interface:\n1.\tshall send the Floor Ack message towards the controlling MCPTT function. The Floor Ack message:\na.\tshall include all fields included by the floor participant in the Floor Ack message;\nb.\tif Track Info field is included, shall include the temporary identifier at the end of the <Floor Participant Reference> value item; and\nc.\tif a Track Info field is not included, shall include a Track Info field with temporary identifier as the first <Floor Participant Reference>.\nUpon receiving a Floor Granted message sent from the controlling MCPTT function, the floor control server interface:\n1.\tshall send the Floor Granted to the floor participant interface identified by the <Participant Reference> value at the end of the Track Info field. The Floor Granted message:\na.\tshall include the fields as received with the following exceptions:\ni.\tif the Track Info field only contains one <Participant Reference> value, shall remove the Track Info field from the outgoing Floor Granted message; and\nii.\tif the Track Info field contains more than one <Participant Reference> value, shall remove the last <Participant Reference> value from the Track Info field from the outgoing Floor Granted message; and\nb\tif the Floor Indicator field is included in the Floor Granted message and the G-bit is set to '1' (Dual floor), shall store the SSRC of granted floor participant and associate the stored value with dual floor;\n2.\tif:\na.\ta SSRC of granted floor participant and associate the stored value with dual floor is not stored, shall send a Floor Taken message populated as specified in step d. below to all participant interfaces with the exception of the floor participant interface to which the Floor Granted message is sent;\nb.\ta SSRC of granted floor participant associate with dual floor is stored and if the Floor Indicator field is not included in the Floor Granted message or if the Floor Indicator field is included in the Floor Granted message and the G-bit is set to '0' (Not dual floor), shall send a Floor Taken message populated as specified in step d. below to all participant interfaces with the exception of:\ni.\tthe floor participant interface to which the Floor Granted message is sent; and\nii.\tthe floor participants only listening to the overriding floor participant;\nc.\tthe Floor Indicator field is included in the Floor Granted message and the G-bit is set to '1' (Dual floor):\ni.\tshall send a Floor Taken message populated as specified in step d. below to floor participants that will listen to the RTP media from the overriding MCPTT client according to local policy;\nNOTE 1:\tThe MCPTT client overridden by the overriding MCPTT client is still sending voice (overridden). The list of floor participants that receive the overriding, overridden, or both transmissions is based on configuration.\nd.\tThe Floor Taken message:\ni.\tshall include the granted MCPTT user's MCPTT ID in the Granted Party's Identity field and may include the functional alias of the granted MCPTT user in the Functional Alias field, if privacy is not requested by the granted floor participant when the MCPTT client was invited to the session;\nNOTE 2:\tThe privacy request was stored for each invited MCPTT client when the MCPTT client accepted the invitation as specified in clause 6.5.2.\nii.\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1;\niii.\tshall include the Permission to Request Floor field to '0', if the group call is a broadcast group call;\niv.\tmay include the Permission to Request the Floor field set to '1', if the group call is not a broadcast group call; and\nv.\tshall set the first bit in the subtype of the Floor Taken message to '0' (acknowledgement is not required); and\nNOTE 3:\tA Floor Taken message sent to all participants does not require acknowledgement.\ne.\tif the Floor Indicator field was included in the Floor Granted message, shall include the received Floor Indicator field; and\n3.\tif the Floor Request message received from the floor participant is in the passive floor request queue, shall remove the floor request from the passive floor request queue; and\n4\tif the Floor Indicator field is included in the Floor Granted message and the G-bit is set to '1' (Dual floor), shall send a Floor Idle message to those floor participants that will only listen to RTP media from the overriding MCPTT client. The Floor Idle message:\na.\tshall include the Floor Indicator field as received in the Floor Granted message with the G-bit set to '0' (Not dual floor); and\nb.\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1.\nUpon receiving a Floor Deny message sent from the controlling MCPTT function, the floor control server interface:\n1.\tshall use the <Participant Reference> value at the end of the Track Info field to identify the floor participant interface;\n2.\tif:\na.\tthe Track Info field only contains one <Participant Reference> value, shall remove the Track Info field from the outgoing Floor Granted message; and\nb.\tif the Track Info field contains more than one <Participant Reference> value, shall remove the last <Participant Reference> value from the Track Info field;\n3.\tshall forward the Floor Deny message to the floor participant interface; and\n4.\tif the Floor Request message received from the floor participant is in the passive floor request queue, shall remove the floor request from the passive floor request queue.\nUpon receiving a Floor Idle message sent from the controlling MCPTT function, the floor control server interface:\nNOTE 1:\tThe Floor Idle message can be either destined to floor participants in all MCPTT clients or is sent to the floor participant in a specific MCPTT client. In the latter case the Floor Idle message contains the Track Info field.\n1.\tif the Floor Idle message contains a Track Info field;\na.\tshall use the <Participant Reference> value at the end of the Track Info field to identify the floor participant interface;\nb.\tif:\ni.\tthe Track Info field only contains one <Participant Reference> value:\nA.\tshall remove the Track Info field from the outgoing Floor Idle message;\nB.\tshall increase the stored message sequence number value with 1; and\nC.\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1; and\nii.\tif the Track Info field contains more than one <Participant Reference> value, shall remove the last <Participant Reference> value from the Track Info field; and\nc.\tshall send the Floor Idle message to the floor participant interface;\n2.\tif the Floor Idle message does not contain a Track Info field;\na.\tshall set the first bit in the subtype of the Floor Idle message to '0' (acknowledgement is not required);\nNOTE 2:\tA Floor Idle message sent to all participants does not require acknowledgement.\nb\tif:\ni.\tthe Floor Indicator field is not included in the Floor Idle message or if the Floor Indicator field is included and the G-bit is set to '0' (Not dual floor), shall send the Floor Idle message to all floor participant interfaces. The Floor Idle message:\nA.\tshall include received fields; and\nB.\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1; and\nii.\tthe Floor Indicator field is included in the Floor Idle message and the G-bit is set to '1' (Dual floor),\nA.\tshall send the Floor Idle message to floor participants listening to the overriding MCPTT client according to local policy. The Floor Idle message:\n-\tshall include received fields; and\n-\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1; and\nB.\tshall discard the stored SSRC of granted floor participant associated with a dual floor;\nc.\tshall send a Floor Ack message towards the controlling MCPTT function if the first bit in the subtype of the received Floor Idle message is set to '1' (acknowledgement is required) as specified in clause 8.2.2. The Floor Ack message:\ni.\tshall include the Source field set to '3' (the non-controlling MCPTT function is the source); and\nii.\tshall include the Message Type field set to '5' (Floor Idle); and\n3.\tshall empty the passive floor request queue.\nUpon receiving a Floor Taken message sent from the controlling MCPTT function, the floor control server interface:\nNOTE 1:\tThe Floor Taken message can be either destined to floor participants in all MCPTT clients or is sent to the floor participant in a specific MCPTT client. In the latter case the Floor Taken message contains the Track Info field.\n1.\tif the Floor Taken message contains a Track Info field;\na.\tshall use the <Participant Reference> value at the end of the Track Info field to identify the floor participant interface;\nb.\tif the Track Info field only contains one <Participant Reference> value:\nA.\tshall remove the Track Info field from the outgoing Floor Taken message; and\nB.\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1;\nc.\tif the Track Info field contains more than one <Participant Reference> value, shall remove the last <Participant Reference> value from the Track Info field; and\nd.\tshall send the Floor Taken message to the floor participant interface;\n2.\tif the Floor Taken message does not contain a Track Info field:\na.\tshall set the first bit in the subtype of the Floor Taken message to '0' (acknowledgement is not required);\nNOTE 2:\tA Floor Taken message sent to all participants does not require acknowledgement.\nb.\tif the Floor Indicator field is included in the Floor Taken message and the G-bit is set to '1' (Dual floor), shall store the SSRC of granted floor participant and associate the stored SSRC with dual floor;\nc.\tif there is no stored SSRC of granted floor participant associated with a dual floor, shall send the Floor Taken message to all floor participant interfaces. The Floor Taken message:\ni.\tshall include all received fields with the exception of the Message Sequence Number field;\nii.\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1;\nd.\tif there is a stored SSRC of granted floor participant associated with a dual floor:\ni.\tif the Floor Indicator field is not included in the Floor Taken message or if the Floor Indicator field is included in the Floor Taken message and the G-bit is set to '0' (Not dual floor), shall send the Floor Taken message to all floor participant interfaces with the exception of the floor participants only listening to RTP media from the overriding floor participant. The Floor Idle message:\nA.\tshall include all received fields; and\nB.\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1; and\nii.\tif the Floor Indicator field is included in the Floor Taken message and the G-bit is set to '1' (Dual floor):\nA.\tshall send the Floor Taken message to all floor participants listening to the RTP media from the overriding MCPTT client according to local policy. The Floor Taken message:\n-\tshall include all received fields; and\n-\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1; and\nB.\tshall send a Floor Idle message to those floor participants that will only listen to RTP media from the overriding MCPTT client according to local policy. The Floor Idle message:\n-\tshall include all received fields;\n-\tshall include in the Message Sequence Number field the local <Message Sequence Number> value increased with 1; and\n-\tshall update the received Floor Indicator field and set the G-bit to '0' and;\ne.\tshall send a Floor Ack message towards the controlling MCPTT function if the first bit in the subtype of the received Floor Taken message is set to '1' (acknowledgement is required) as specified in clause 8.2.2. The Floor Ack message:\ni.\tshall include the Source field set to '3' (the non-controlling MCPTT function is the source); and\nii.\tshall include the Message Type field set to '2' (Floor Taken);\nUpon receiving a Floor Revoke message from the controlling MCPTT function, the floor control server interface:\n1.\tshall use the <Participant Reference> value at the end of the Track Info field to identify the floor participant interface;\n2.\tif:\na.\tthe Track Info field only contains one <Participant Reference> value, shall remove the Track Info field from the outgoing Floor Revoke message; and\nb.\tif the Track Info field contains more than one <Participant Reference> value, shall remove the last <Participant Reference> value from the Track Info field; and\n3.\tshall forward the Floor Revoke message to the floor participant interface.\nUpon receiving a Floor Queue Position Info message from the controlling MCPTT function, the floor control server interface:\n1.\tshall use the <Participant Reference> value at the end of the Track Info field to identify the floor participant interface;\n2.\tif:\na.\tthe Track Info field only contains one <Participant Reference> value, shall remove the Track Info field from the outgoing Floor Granted message; and\nb.\tif the Track Info field contains more than one <Participant Reference> value, shall remove the last <Participant Reference> value from the Track Info field; and\n3.\tshall forward the Floor Queue Position Info message to the floor participant interface.\nUpon receiving an indication from the media distributor that RTP media packets are received from the controlling MCPTT function, the floor control server interface:\n1.\tif a SSRC of granted floor participant associated with a dual floor is not stored shall request the network media distributor to forward received RTP media packets to all MCPTT clients in the session controlled by the non-controlling MCPTT function where the SSRC of the received RTP media packets are different to SSRC used by an MCPTT client;\nNOTE:\tIf one of the MCPTT client controlled by the non-controlling MCPTT function is granted the floor, media originated from that MCPTT client is not distributed back to the MCPTT client granted the floor.\n2.\tif a SSRC of granted floor participant associated with a dual floor is stored and if the SSRC in the media packet is not the same as the stored SSRC, shall request the network media distributor to forward received RTP media packets to MCPTT clients controlled by the non-controlling MCPTT function:\ni.\twhere the SSRC of the received RTP media packets are different to SSRC used by the MCPTT client; and\nii.\tthat are not only listening to the dual floor according to local policy; and\n3.\tif a SSRC of granted floor participant associated with a dual floor is stored and if the SSRC in the media packet is the same as the stored SSRC, shall request the network media distributor to forward received RTP media packets to all MCPTT client:\ni.\twhere the SSRC of the received RTP media packets are different to SSRC used by the MCPTT client; and\nii.\tlistening to the dual floor according to local policy.\nUpon receiving an indication from the media distribution function that RTP media packets are received from one of the network media interfaces, the floor control server interface:\n1.\tshall request the network media distributor to forward received RTP media packets towards the controlling MCPTT function.\nNOTE:\tIf RTP media packets are received from an MCPTT client not permitted to send media, the floor participant interface will send a Floor Revoke message to the floor participant of the misbehaving MCPTT client without involving the floor control server interface.\nUpon receiving an MCPTT call release step 1 request from the application and signalling plane e.g. when the session is going to be released, the floor control interface:\n1.\tshall ignore floor control message from the floor control server;\n2.\tshall request the media distributor to stop distributing RTP media packets to the network media interface of the MCPTT clients; and\n3.\tshall ignore any floor control messages received from the floor participant interfaces.\nUpon receiving an MCPTT call release step 2 request from the application and signalling plane, the floor control server interface:\n1.\tshall release all resources associated with this session.\nUpon receiving an instruction from the application and signalling plane to split the ongoing group session, as specified in 3GPP TS 24.379 [2] in clause 10.1.1.5.2.4 for prearranged group call and in clause 10.1.2.5.1.4 for chat group call, the floor control server interface:\n1.\tshall perform the actions in clause 6.3.2.3.\nUpon receiving a Floor Release Multi Talker message sent from the controlling MCPTT function, the floor control server interface:\n1.\tshall use the <Participant Reference> value at the end of the Track Info field to identify the floor participant interface;\n2.\tif:\na.\tthe Track Info field only contains one <Participant Reference> value, shall remove the Track Info field from the outgoing Floor Release Multi Talker message; and\nb.\tthe Track Info field contains more than one <Participant Reference> value, shall remove the last <Participant Reference> value from the Track Info field; and\n3.\tshall forward the Floor Release Multi Talker message to the floor participant interface.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.5.5\tFloor participant interface procedures",
                            "text_content": "The floor participant interface shall behave according to the state diagram and state transitions specified in this clause.\nFigure 6.5.5.1-1 shows the general floor control operation states (P states) and the state transition diagram.\nThe figure depicts a state diagram for the 'floor participant interface state transition' in a 5G network. It illustrates the various states and transitions that occur within the network, including the 'floor participant interface state transition' state, which is a critical component of the network's control plane. The diagram shows the flow of data between the network and the floor participant, and how the state transitions are managed to ensure smooth operation.\nFigure 6.5.5.1-1: The 'floor participant interface state transition' state diagram\nThe floor participant interface shall keep one instance of the 'floor participant interface state transition' state machine per MCPTT client in a session.\nThe floor participant associated to the 'floor participant interface state transition' state machine is in the following clauses referred to as the associated floor participant.\nIf floor control messages or RTP media packets arrives in a state where there is no procedure specified in the following clauses the floor participant interface:\n1.\tshall discard the floor control message;\n2.\tshall request the network media interface to discard any received RTP media packet; and\n3.\tshall remain in the current state.\nState details are explained in the following clauses.\nWhen a new instance of the 'Floor participant interface state transition' state machine is initiated, before any floor control related input is applied, the state machine is in 'Start-stop' state. Similarly when the session is released the state machine shall return to the 'Start-stop' state.\nWhen the floor participant interface receives an indication from the floor control server interface that an MCPTT client has accepted the invitation to a session (i.e. when the SIP 200 (OK) response to the initial SIP INVITE request is received as specified in 3GPP TS 24.379 [2]) , the floor participant interface:\n1.\tshall enter the 'P: has no permission' state.\nThe floor participant interface uses this state when the associated floor participant is not permitted to send media.\nWhen the floor participant interface receives a Floor Idle message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Idle message to the floor participant;\n2.\tif the first bit in the subtype of the Floor Idle message is set to '1' (acknowledgement is required) as specified in clause 8.2.2, shall store an indication that a Floor Ack message to a Floor Idle messages is expected; and\n3.\tshall remain in the 'P: has no permission' state.\nWhen the floor participant interface receives a Floor Taken message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Taken message to the floor participant;\n2.\tif the first bit in the subtype of the Floor Taken message is set to '1' (acknowledgement is required) as specified in clause 8.2.2, shall store an indication that a Floor Ack message to a Floor Taken messages is expected; and\n3.\tshall remain in the 'P: has no permission' state.\nWhen the floor participant interface receives a Floor Request message from the floor participant, the floor participant interface:\n1.\tshall send the Floor Request message to the floor control server interface; and\n2.\tshall remain in the 'P: has no permission' state.\nWhen the floor participant interface receives a Floor Granted message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Granted message to the floor participant;\n2.\tif the first bit in the subtype of the Floor Granted message is set to '1' (acknowledgement is required) as specified in clause 8.2.2, shall store an indication that a Floor Ack message to a Floor Granted messages is expected; and\n3.\tshall enter the 'P: has permission' state.\nWhen the floor participant interface receives a Floor Deny message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Deny message to the floor participant;\n2.\tif the first bit in the subtype of the Floor Deny message is set to '1' (acknowledgement is required) as specified in clause 8.2.2, shall store an indication that a Floor Ack message to a Floor Deny messages is expected; and\n3.\tshall remain in the 'P: has no permission' state.\nWhen the floor participant interface receives a Floor Queue Position Info message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Queue Position Info message to the floor participant;\n2.\tif the first bit in the subtype of the Floor Queue Position Info message is set to '1' (acknowledgement is required) as specified in clause 8.2.2, shall store an indication that a Floor Ack message to a Floor Queue Position Info messages is expected; and\n3.\tshall remain in the 'P: has no permission' state.\nWhen the floor participant interface receives a Floor Queue Position Request message from the floor participant, the floor participant interface:\n1.\tshall send the Floor Queue Position Request message to the floor control server interface; and\n2.\tshall remain in the 'P: has no permission' state.\nWhen the floor participant interface receives an indication from the network media interface that RTP media packets are received from the media distributor, the floor participant interface\n1.\tshall instruct the network media interface to send the received RTP media packets towards the MCPTT client; and\n2.\tshall remain in the 'P: has no permission' state.\nWhen the floor participant interface receives an indication from the network media interface that RTP media packets are received from the MCPTT client, the floor participant interface\n1.\tshall send a Floor Revoke message to the floor participant. The Floor Revoke message:\na.\tshall include the Reject Cause field with the <Reject Cause> value set to #3 (No permission to send a Media Burst);\n2.\tshall store that a Floor Release message is expected from the floor participant; and\n3.\tshall remain in the 'P: has no permission' state.\nWhen the floor participant interface receives a Floor Release message from the floor participant, the floor participant interface:\n1.\tif a Floor Release message is not expected from the floor participant:\na.\tif the first bit in the subtype of the Floor Release message is set to '1' (acknowledgement is required) as specified in clause 8.2.2, based on local policy:\ni\tshall send a Floor Ack message to the floor participant and set the first bit in the subtype of the Floor Release message to '0' (acknowledgement is not required) in the outgoing Floor Release message; or\nii.\twait for the Floor Ack from the floor control server; and\nb.\tshall forward the Floor Release message to the floor control server interface;\n2.\tif a Floor Release message is expected from the floor participant:\na.\tif the first bit in the subtype of the Floor Release message is set to '1' (acknowledgement is required) as specified in clause 8.2.2:\ni.\tshall send a Floor Ack message to the floor participant; and\nb.\tshall remove that a Floor Release message is expected from the floor participant; and\n3.\tshall remain in the 'P: has no permission' state.\nUpon receiving an instruction to split the ongoing MCPTT call, to the floor participant interface:\n1.\tshall create a new instance of the 'basic floor control operation towards the floor participant' state machine;\n2.\tshall move information associated with the instance used for 'floor participant interface state transition' to the 'basic floor control operation towards the floor participant' state machine;\nNOTE:\tWhich information that needs to be moved is an implementation option.\n3.\tshall enter the 'Start-stop' state and terminate the 'floor participant interface state transition' state machine associated with this floor participant and this session;\n4.\tif the state in 'general floor control operation' state machine is 'G: Floor Idle' state; shall enter the 'U: not permitted and Floor Idle' state as specified in clause 6.3.5.3.2; and\n5.\tif the state in 'general floor control operation' state machine is 'G: Floor Taken' state; shall enter the 'U: not permitted and Floor Taken' state as specified in clause 6.3.5.4.2.\nWhen the floor participant interface receives a Floor Release Multi Talker message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Release Multi Talker message to the floor participant; and\n2.\tshall remain in the 'P: has no permission' state.\nThe floor participant interface uses this state when the floor participant has permission to send media\nWhen the floor participant interface receives an indication from the network media interface that RTP media packets are received from the MCPTT client, the floor participant interface:\n1.\tshall instruct the media interface to forward received RTP media packets towards the media distributor; and\n2.\tshall remain in the 'P: has permission' state.\nWhen the floor participant interface receives a Floor Release message from the floor participant, the floor participant interface:\n1.\tshall send the Floor Release message to the floor control server interface; and\n3.\tshall remain in the 'P: has permission' state.\nWhen the floor participant interface receives a Floor Ack message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Ack message to the floor participant; and\n2.\tshall remain in the 'P: has permission' state.\nWhen the floor participant interface receives a Floor Idle message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Idle message to the floor participant;\n2.\tif the first bit in the subtype of the Floor Idle message is set to '1' (acknowledgement is required), shall store an indication that a Floor Ack message to a Floor Idle messages is expected; and\n3.\tshall enter the 'P: has no permission' state.\nWhen the floor participant interface receives a Floor Taken message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Taken message to the floor participant;\n2.\tif the first bit in the subtype of the Floor Taken message is set to '1' (acknowledgement is required), shall store an indication that a Floor Ack message to a Floor Taken messages is expected; and\n3.\tif the Floor Indicator field is included and the I-bit is set to '1' (multi-talker) shall remain in the 'P: has permission' state, otherwise shall enter the 'P: has no permission' state.\nWhen the floor participant interface receives a Floor Revoke message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Revoke message to the floor participant;\n2.\tif the first bit in the subtype of the Floor Revoke message is set to '1' (acknowledgement is required), shall store an indication that a Floor Ack message to a Floor Revoke messages is expected; and\n3.\tshall remain in the 'P: has permission' state.\nUpon receiving an instruction to split the ongoing MCPTT call, the floor participant interface:\n1.\tshall create a new instance of the 'basic floor control operation towards the floor participant' state machine as specified in clause 6.3.5;\n2.\tshall move information associated with the instance used for 'floor participant interface state transition' to the 'basic floor control operation towards the floor participant' state machine;\nNOTE:\tWhich information that needs to be moved is an implementation option.\n3.\tshall enter the 'Start-stop' state and terminate the 'floor participant interface state transition' state machine associated with this floor participant and this session; and\n4.\tshall enter the 'U: permitted' state as specified in clause 6.3.5.5.2.\nWhen the floor participant interface receives a Floor Release Multi Talker message from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Release Multi Talker message to the floor participant; and\n2.\tshall remain in the 'P: has permission' state.\nThis clause describes the actions to be taken in all states defined for the 'floor participant interface state transition' diagram with the exception of the 'Start-stop' and 'Releasing' states.\nIf a Floor Ack message is received from the floor participant, the floor participant interface:\n1.\tif an indication exists that a Floor Ack message is expected for the message in the Message Type field;\na.\tshall forward the Floor Ack message to the floor control server interface; and\nb.\tshall remove the indication that a Floor Ack message is expected for the message in the Message Type field; and\nNOTE:\tIt is an implementation option what action to take if an indication exists that a Floor Ack message is expected for the message in the Message Type field, but the Floor Ack message is not received\n2.\tshall remain in the current state.\nIf a Floor Ack message is received from the floor control server interface, the floor participant interface:\n1.\tshall send the Floor Ack message to the floor participant; and\n2.\tshall remain in the current state.\nUpon receiving an MCPTT call release step 1 request from the application and signalling plane e.g. when the session is going to be released or when the MCPTT client leaves the session, the floor participant interface:\n1.\tshall stop sending floor control messages to the floor participant;\n2.\tshall request the network media interface to stop sending RTP media packets towards to the MCPTT client;\n3.\tshall ignore any floor control messages received from the floor participant;\n4.\tshall request the network media interface to stop forwarding RTP media packets from the MCPTT client to the media distributor;\n5.\tshall indicate to the floor control server interface that the MCPTT client has started to disconnect from the session; and\n6.\tshall enter the 'P: Releasing' state.\nThe floor participant interface uses this state while waiting for the application and signalling plane to finalize the release of the session or finalizing the removal of the MCPTT client from the session.\nUpon receiving an MCPTT call release step 2 request from the application and signalling plane, the floor participant interface:\n1.\tshall request the network media interface to release all resources associated with this MCPTT client for this MCPTT call; and\n2.\tshall enter the 'Start-stop' state and terminate the 'floor participant interface state transition' state machine associated with this floor participant and this session.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "7\tOff-network floor control",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "7.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "A floor control session may be initiated only if there is a successfully established off-network call.\nIn off-network, floor control is performed using floor control messages among the MCPTT clients without a centralized floor arbitrator. When off-network, if a floor control session is active, the floor arbitrator and the floor participant are co-located in the MCPTT client (see 3GPP TS 23.379 [5]). During a floor control session the MCPTT client currently speaking serves as the temporary floor arbitrator. All other MCPTT clients in the call play the role of floor participant. When the floor arbitrator grants the floor to another MCPTT client, that new MCPTT client, when starts to send media, becomes the new floor arbitrator and the former (the MCPTT client which granted the floor) becomes a floor participant.\nThe procedures in clause 7.2 are from the perspective of a single MCPTT client. No special message other than floor control messages and media is used for coordinating the floor arbitrator and floor participant status of the separate MCPTT clients participating in the off-network call.\nThe floor control messages are always sent to all the participants of the call. Therefore they can be monitored by any MCPTT client listening to the call.\nIn a floor control session queueing of floor requests may be supported.\nIt is assumed that the MCPTT user presses the PTT button for requesting talk permission and keeps it pressed until the request is resolved. If queueing of floor requests is not supported, this request is either granted or rejected or no answer is received. If the request is granted the user is notified with talk permission tone (or equivalent) and the user continues to press the PTT until the user finishes the talk burst. If the request is rejected or no answer is received the user is notified and releases the PTT button.\nIf queueing of floor requests is supported, the MCPTT user shall be notified when a floor request is queued and the MCPTT user shall release the PTT button. When, after queueing, the floor is granted to this user the MCPTT user shall be informed that the queued request is now granted. Then the MCPTT user should press the PTT button within a short duration. Otherwise, the grant is taken from this MCPTT user. An MCPTT user can appear in a queue only once. The floor request queue is transferred from the former to the new floor arbitrator.\nAfter the initiation of a floor control session the MCPTT client behaves according to the state machine presented in clause 7.2.3. The state machine is designed such that in normal cases only one of the MCPTT clients, which participates in the call, acts as floor arbitrator and all others act as floor participants. However, there may be situations such that more than one MCPTT client are at an internal state causing them to act as floor arbitrator. A short sequence of floor control messages and RTP media packets are initiated to resolve these situations.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.2\tFloor participant procedures",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "7.2.1\tFloor participant procedures at MCPTT session initialization",
                            "text_content": "This clause applies when no active floor control session exists.\nBefore a floor control entity is initiated a state machine with a single state, named as 'Start-stop' state, shall exist. At 'Start-stop' state, when the MCPTT client receives a request of the MCPTT call control entity to initiate the floor control as originating client, then the MCPTT client shall initiate a floor control entity and the floor control entity shall enter into the 'O: has permission' state. Otherwise, if MCPTT client receives a request of the MCPTT call control entity to initiate the floor control as terminating client, then the MCPTT client shall initiate a floor control entity and the floor control entity for an MCPTT group call shall enter into the 'O: silence' state or for both MCPTT private call and MCPTT broadcast group call shall enter the 'O: has no permission' state.\nOnce the session is initiated, the initial floor control messages are sent according to the state machine presented in clause 7.2.3. Normally, once the session is started the originating MCPTT client has the floor implicitly. For an on-going off-network group call, if an MCPTT client joins later, then it starts the floor control session and takes the role of floor participant and enters 'O: silence' state.\nUpon receiving a Floor Request message, to determine the floor priority of the Floor Request message, the floor arbitrator:\n1.\tshall check the presence of Floor Priority field in the received Floor Request message. If present, the floor arbitrator:\na.\tshall determine the floor priority of the Floor Request message by choosing the lowest value from the following inputs:\ni.\tthe value of the Floor Priority field in the received Floor Request message;\nii.\tthe value of the \"/<x>/<x>/Common/MCPTTGroupMemberList/<x>/UserPriority\" leaf node of the sender of the Floor Request message, present in group configuration as specified in 3GPP TS 24.483 [4]; and\niii.\tthe value of the \"/<x>/OffNetwork/NumLevelHierarchy\" leaf node present in service configuration as specified in 3GPP TS 24.483 [4]; and\n2.\tif the Floor Priority field is not present in the Floor Request message, the floor arbitrator:\na.\tshall use the minimum value allowed for the Floor Priority as floor priority of the Floor Request message.\nOnce the floor priority of the Floor Request message is determined, to determine the effective priority of the Floor Request message, the floor arbitrator:\n1.\tshall check the type of call indicated by the Floor Indicator field of the received Floor Request message and:\na.\tif the type of call indicated by the Floor Indicator field is Normal call:\ni.\tif the current type of the call is normal, shall continue to check the next input parameter from step 2; and\nii\tif the current type of the call is emergency or imminent-peril and:\nA.\tif the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"true\", shall queue the floor request;\nB.\tif the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"false\", shall deny the floor request; and\nC.\tshall skip step 2;\nb.\tif the type of call indicated by the Floor Indicator field is Imminent peril call and:\ni.\tif the current type of the call is normal, shall pre-empt the current talker, grant the floor request and skip step 2;\nii.\tif the current type of the call is imminent-peril, shall continue to check the next input parameter from step 2; and\niii.\tif the current type of the call is emergency and:\nA.\tif the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"true\", shall queue the floor request;\nB.\tif the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"false\", shall deny the floor request; and\nC.\tshall skip step 2; and\nc.\tif the type of the call indicated by the Floor Indicator field is Emergency call and:\ni.\tif the current type of the call is normal or imminent-peril, shall pre-empt the current talker and grant the floor request; and\nii.\tif the current type of the call is emergency and:\nA.\tif the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"true\", shall queue the floor request;\nB.\tif the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"false\", shall deny the floor request; and\niii\tshall skip step 2; and\n2.\tshall compare the determined floor priority of the received Floor Request message to the effective priority of the current talker (determined at the time of floor grant to the current talker) and:\na.\tif the effective priority of the current talker is equal to or higher than the determined floor priority of the Floor Request message and:\ni.\tif the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"true\", shall queue the floor request; and\nii.\tif the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"false\", shall deny the floor request; and\nb.\tif the determined floor priority of the Floor Request message is higher than that of the current talker, shall pre-empt the current talker and shall grant the floor request.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "7.2.2\tFloor participant procedures at MCPTT call release",
                            "text_content": "This clause applies when an active floor control session exists.\nWhen the off-network call is released the floor control session is terminated. The off-network floor control session can also be terminated when no media transmission or reception takes place during floor control session hold time, T230 (Inactivity). The termination of the floor control session as a result of the expiry of timer T230 (Inactivity) may terminate the call session.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "7.2.3\tFloor participant state diagram – basic operation",
                            "text_content": "The floor participant shall behave according to the state diagram and the transitions specified in this clause.\nThe received floor messages and the RTP media packets are inputs to the state machine according to their arrival order. They are not ignored unless otherwise stated.\nThe MCPTT client also provides input to the state machine as request to talk (press PTT button) or as end of talk (release PTT button).\nFigure 7.2.3.1-1 show the 'Floor participant state diagram – basic operation'.\nThe figure depicts a floor participant state diagram, illustrating the basic operation of a floor participant in a multi-floor building. The diagram shows the various rooms and their connections, with each room represented by a different color and labeled with the corresponding floor number. The diagram also includes a legend to help understand the different states of the floor participant, such as active, inactive, and disconnected. The diagram is a visual representation of the floor participant's functionality and is used to understand the flow of information within a multi-floor building.\nFigure 7.2.3.1-1: 'Floor participant state diagram – basic operation'\nState details are explained in the following clauses.\nIf an RTP media packet or a floor control message arrives in a state where there is no specific procedure specified for the RTP media packet or the received floor control message, the floor participant shall discard the floor control message or the RTP media packet and shall remain in the current state.\nNOTE:\tA badly formatted RTP packet or floor control message received in any state is ignored by the floor participant and does not cause any change of the current state.\nWhen a new instance of the state machine is created, before any floor control related input is applied, the state machine is in the 'Start-stop' state. Similarly when the call is released or the floor control session is terminated, the state machine shall return to the 'Start-stop' state.\nWhen an MCPTT call is established with session announcement including an explicit floor request, the originating floor participant:\n1.\tshall create an instance of a floor participant state transition diagram for basic operation state machine;\n2.\tshall send Floor Granted message towards other floor participants. The Floor Granted message:\na.\tshall include the granted priority in the Floor priority field;\nb.\tshall include the MCPTT user's own MCPTT ID in the User ID field; and\nc.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n3.\tshall set the stored SSRC of the current florr arbitrator to its own SSRC; and\n4.\tshall enter 'O: has permission' state.\nWhen an MCPTT call is established the terminating floor participant:\n1.\tshall create an instance of a floor participant state transition diagram for basic operation state machine;\n2.\tshall start timer T230 (Inactivity); and\n3.\tshall enter 'O: silence' state.\nWhen an MCPTT private call is established the terminating floor participant:\n1.\tshall create an instance of a floor participant state transition diagram for basic operation state machine;\n2.\tshall start timer T203(End of RTP media); and\n3.\tshall enter 'O: has no permission' state.\nIf the floor participant receives an indication from the MCPTT user to send media, the floor participant:\n1.\tshall create an instance of a floor participant state transition diagram for basic operation state machine;\n2.\tshall send the Floor Request message to other floor participants. The Floor Request message:\na.\tif a different priority than the normal priority is required, shall include the Floor Priority field with the requested priority in the <Floor Priority> value;\nb.\tshall include the MCPTT ID of the MCPTT user in the <User ID> value of the User ID field; and\nc.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n3.\tshall initialize the counter C201 (Floor request) with value set to 1;\n4.\tshall start the timer T201 (Floor request); and\n5.\tshall enter 'O: pending request' state.\nWhen a Floor Taken message is received, the floor participant:\n1.\tshall create an instance of a floor participant state transition diagram for basic operation state machine;\n2.\tmay provide a floor taken notification to the MCPTT user;\n3.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of granted floor participant field in the Floor Taken message;\n4.\tshall start timer T203 (End of RTP media); and\n5.\tshall enter 'O: has no permission' state.\nWhen a Floor Granted message is received and if the User ID in the Floor Granted message does not match its own User ID, the floor participant:\n1.\tshall create an instance of a floor participant state transition diagram for basic operation state machine;\n2.\tmay provide a floor taken notification to the MCPTT user;\n3.\tshall set the stored SSRC of the candidate floor arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message;\n4.\tshall start timer T203 (End of RTP media); and\n5.\tshall enter 'O: has no permission' state.\nUpon receiving RTP media packets, the floor participant:\n1.\tshall create an instance of a floor participant state transition diagram for basic operation state machine;\n2.\tmay provide a floor taken notification to the MCPTT user;\n3.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of RTP media packet;\n4.\tshall restart timer T203 (End of RTP media);\n5.\tshall request the MCPTT client to start rendering received RTP media packets; and\n6.\tshall enter 'O: has no permission' state.\nWhen an MCPTT broadcast group call is established the terminating floor participant:\n1.\tshall create an instance of a floor participant state transition diagram for basic operation state machine;\n2.\tshall start timer T203 (End of RTP media); and\n3.\tshall enter 'O: has no permission' state.\nNOTE:\tIn MCPTT broadcast group call, only originating MCPTT user is allowed to request floor and transmit media. A Floor Request message is locally denied to terminating MCPTT user, if requested.\nWhen in this state the MCPTT client for the session is unaware of any MCPTT client acting as a floor arbitrator, has not itself initiated a floor control request and is not currently receiving RTP media packets.\nTimer T230 (Inactivity) is running in this state.\nIf the floor participant receives an indication from the MCPTT user to send media, the floor participant:\n1.\tshall send the Floor Request message to other floor participants. The Floor Request message:\na.\tif a priority different than the default floor priority is required, shall include the Floor Priority field with the requested priority in the <Floor Priority> element;\nb.\tshall include the MCPTT ID of the MCPTT user in the <User ID> value of the User ID field; and\nc.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n2.\tshall initialize the counter C201 (Floor request) with value set to 1;\n3.\tshall stop timer T230 (Inactivity);\n4.\tshall start timer T201 (Floor Request); and\n5.\tshall enter 'O: pending request' state.\nUpon receiving RTP media packets and if there is no stored SSRC of the current floor arbitrator, the floor participant:\n1.\tmay provide a floor taken notification to the MCPTT user;\n2.\tshall stop timer T230 (Inactivity);\n3.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of RTP media packet;\n4.\tshall restart (or start, if not running already) timer T203 (End of RTP media);\n5.\tshall request the MCPTT client to start rendering received RTP media packets; and\n6.\tshall enter 'O: has no permission' state.\nOtherwise, if SSRC of floor participant sending the media matches the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall restart (or start, if not running already) timer T203 (End of RTP media);\n2.\tshall stop timer T230 (Inactivity);\n3.\tshall request the MCPTT client to start rendering received RTP media packets; and\n4.\tshall enter 'O: has no permission' state.\nWhen a Floor Granted message is received and if the User ID in the Floor Granted message does not match its own User ID, the floor participant:\n1.\tmay provide a floor taken notification to the MCPTT user;\n2.\tif the Floor Indicator field is included and the B-bit is set to '1' (Broadcast group call), shall provide a notification to the user indicating that this is a broadcast group call;\n3.\tshall set the stored SSRC of the candidate floor arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message;\n4.\tshall stop timer T230 (Inactivity);\n5.\tshall start timer T203 (End of RTP media); and\n6.\tshall enter 'O: has no permission' state.\nThe transition is used in private call only. When a Floor Request message is received, the floor participant:\n1.\tshall send a Floor Granted message toward the other floor participant. The Floor Granted message:\na.\tshall include the MCPTT ID of the Floor Request message received in User ID value of the User ID field;\nb.\tshall include the SSRC of the Floor Request message received in the SSRC of floor control server field;\nc.\tshall include the max duration as configured in the MCPTT client in the OffNetwork/MaxDuration parameter in the <Duration> value of the Duration field; and\nd.\tshall include the priority of the Floor Request message received in the <Floor Priority> value of the Floor Priority field;\n2.\tshall stop timer T230 (Inactivity);\n3.\tshall start timer T205 (Floor Granted ); and\n4.\tshall enter 'O: pending granted' state.\nWhen a Floor Taken message is received, the floor participant:\n1.\tmay provide a floor taken notification to the MCPTT user;\n2.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of granted floor participant field in the Floor Taken message;\n3.\tshall stop timer T230 (Inactivity);\n4.\tshall start timer T203 (End of RTP media); and\n5.\tshall enter 'O: has no permission' state.\nUpon expiry of timer T230 (Inactivity), the floor participant:\n1.\tshall indicate to the call control that timer T230 (inactivity) has expired;\n2.\tshall terminate the instance of floor participant state transition diagram; and\n3.\tshall enter 'Start-stop' state.\nIn this state the MCPTT client does not have permission to send media.\nIf the floor participant receives an indication from the MCPTT user that the MCPTT user wants to send media, the floor participant:\n1.\tshall send the Floor Request message to other clients. The Floor Request message:\na.\tif a priority different than the default floor priority is required, shall include the Floor Priority field with the requested priority in the <Floor Priority> element;\nb.\tshall include the MCPTT ID of the MCPTT user in the User ID field; and\nc.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n2.\tshall initialize the counter C201 (Floor request) with value set to 1;\n3.\tshall start timer T201 (Floor Request); and\n4.\tshall enter 'O: pending request' state.\nWhen a Floor Release message is received and if the SSRC in the Floor Release message matches with the stored SSRC of the current arbitrator or with the stored SSRC of the candidate arbitrator, the floor participant:\n1.\tmay provide floor idle notification to the MCPTT user.\n2.\tshall request the MCPTT client to stop rendering received RTP media packets;\n3.\tshall stop timer T203 (End of RTP media);\n4.\tshall start timer T230 (Inactivity);\n5.\tshall clear the stored SSRC of the candidate arbitrator;\n6.\tshall clear the stored SSRC of the current floor arbitrator; and\n7.\tshall enter 'O: silence' state;\nOn expiry of T203 (End of RTP media) timer, the floor participant:\n1.\tmay provide floor idle notification to the MCPTT user.\n2.\tshall request the MCPTT client to stop rendering received RTP media packets;\n3.\tshall start timer T230 (Inactivity);\n4.\tshall clear the stored SSRC of the current floor arbitrator; and\n5.\tshall enter 'O: silence' state;\nWhen a Floor Granted message is received and if the <User ID> value in the User ID field does not match its own MCPTT ID and SSRC of floor participant sending the Floor Granted message matches the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall request the MCPTT client to stop rendering received RTP media packets;\n2.\tshall restart timer T203 (End of RTP media);\n3.\tshall set the stored SSRC of the candidate floor arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message;\n4.\tmay provide a floor taken notification to the MCPTT user;\n5.\tif the Floor Indicator field is included with the B-bit set to '1' (Broadcast group call), shall provide a notification to the user indicating that this is a broadcast group call; and\n6.\tshall remain in the 'O: has no permission' state.\nUpon receiving RTP media packets and if there is no stored SSRC of the current floor arbitrator, the floor participant:\n1.\tshall request the MCPTT client to render the received RTP media packets;\n2.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of RTP media packet;\n3.\tshall clear the stored SSRC of the candidate arbitrator, if any;\n4.\tshall restart timer T203 (End of RTP media); and\n5.\tshall remain in 'O: has no permission' state.\nOtherwise, if SSRC of floor participant sending the media matches the stored SSRC of current arbitrator, the floor participant:\n1.\tshall request the MCPTT client to render the received RTP media packets;\n2.\tshall clear the stored SSRC of the candidate arbitrator, if any;\n3.\tshall restart timer T203 (End of RTP media); and\n4.\tshall remain in 'O: has no permission' state.\nOtherwise, if SSRC of floor participant sending the media packet matches with the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall request the MCPTT client to render the received RTP media packets;\n2.\tshall set the stored SSRC of the current arbitrator to the SSRC of RTP media packet;\n3.\tshall clear the stored SSRC of the candidate arbitrator;\n4.\tshall restart timer T203 (End of RTP media); and\n5.\tshall remain in 'O: has no permission' state.\nIn this state the MCPTT client is acting as a floor control server (floor arbitrator) and has the permission to send media.\nTimer T206 (Stop talking warning) and timer T207 (Stop Talking) are running in this state.\nUpon receiving encoded media from the user or if encoded media is already buffered the floor participant:\n1.\tshall start timer T206 (Stop talking warning), if not running;\n2.\tshall request the MCPTT client to start sending RTP media packets towards other MCPTT clients; and\n3.\tshall remain in 'O: has permission' state.\nUpon receiving a Floor Release message and if the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"true\", the floor participant:\n1.\tshall remove the sender of the Floor Release message from the queue, if the <User ID> value in the floor release message matches the <User ID> value of the queued request; and\n2.\tshall remain in 'O: has permission' state.\nUpon receiving a Floor Request message which is not pre-emptive as determined by clause 4.1.1.5, in a session where:\n1.\tthe value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"false\"; or\n2.\tthe value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"true\" but the F-bit in the Floor Indicator field is set to '0' (i.e. indicating that queueing of floor requests is not supported) or the Floor Indicator field is not included in the Floor Request message;\nthen the floor participant:\n1.\tshall send the Floor Deny message. The Floor Deny message:\na.\tshall include in the Reject Cause field the <Reject Cause> value cause #1 (Another MCPTT client has permission);\nb.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value; and\nc.\tshall include the User ID field received in the Floor Request message; and\n2.\tshall remain in 'O: has permission' state.\nUpon receiving a Floor Request message which is not pre-emptive as determined by clause 4.1.1.5, and the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"true\" and the F-bit in the Floor Indicator field is set to '1' (i.e. indicating that queueing of the floor requests is supported) in the Floor Request message, the floor participant:\n1.\tif the Floor Request message is not already stored, then shall store the received Floor Request message;\n2.\tif the pending request queue is not full, shall send the Floor Queue Position Info message. The Floor Queue Position Info message:\na.\tshall include in the User ID field the MCPTT ID of the floor participant sending the Floor Request message;\nb.\tshall include the SSRC of the floor participant in the SSRC of queued floor participant field;\nc.\tshall include the position in the floor request queue in the Queue Info field; and\nd.\tshall include the floor priority in the Queue Info field;\n3.\tif the pending request queue is full, shall send the Floor Deny message. The Floor Deny message:\na.\tshall include in the Reject Cause field the <Reject Cause> value cause #7 (Queue full);\nb.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value; and\nc.\tshall include the User ID field received in the Floor Request message; and\n4.\tshall remain in 'O: has permission' state.\nUpon receiving an indication from the MCPTT user to release permission to send RTP media, the floor participant:\n1.\tshall stop timer T206 (Stop talking warning), if running;\n2.\tshall stop timer T207 (Stop talking), if running;\n3.\tshall send a Floor Release message towards other floor participants, if no queued requests exist: The Floor Release message:\na.\tshall include the MCPTT ID of the MCPTT user in the User ID field; and\nb.\tif the session is not initiated as a broadcast group call with the B-bit set to '1' (Broadcast group call), shall include a Floor Indicator field set to '0' (normal call);\n4.\tshall start timer T230 (Inactivity);\n5.\tshall clear the stored SSRC of the current floor arbitrator; and\n6.\tshall enter 'O: silence' state.\nWhen no more encoded media is received from the user and if at least one Floor Request message is stored (i.e. queueing mode is used in the session), the floor participant:\n1.\tshall stop timer T206 (Stop talking warning), if running;\n2.\tshall stop timer T207 (Stop talking), if running;\n3.\tshall request the MCPTT client to stop sending RTP media packets towards other MCPTT clients;\n4.\tshall send the Floor Granted message toward the other floor participants. The Floor Granted message:\na.\tshall include the MCPTT ID of the first floor participant in the queue in the User ID field;\nb.\tshall include the SSRC of the first floor participant in the queue in the SSRC of the granted floor participant field;\nc.\tshall remove the first floor participant from the queue;\nd\tfor the remaining floor participants in the queue:\ni.\tshall include the MCPTT ID of the floor participant in the Queued User ID field;\nii.\tshall include the SSRC of the floor participant in the SSRC of queued floor participant field;\niii.\tshall include the queue position of the floor participant in the Queue Info field; and\niv.\tshall include the priority of the floor participant in the Queue Info field; and\ne.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n5.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message;\n6.\tshall start timer T205 (Floor Granted ) and shall initiate counter C205 (Floor Granted ) to 1; and\n7\tshall enter the 'O: pending granted' state.\nUpon receiving a Floor Request message which is pre-emptive as determined by clause 4.1.1.5, the floor participant:\n1.\tshall stop timer T206 (Stop talking warning), if running;\n2.\tshall stop timer T207 (Stop talking), if running;\n3.\tshall request the MCPTT client to stop sending RTP media packets towards other MCPTT clients;\n4.\tshall send a Floor Granted message towards the other floor participants. The Floor Granted message:\na.\tshall include the MCPTT ID of the Floor Request message received in the User ID field;\nb.\tshall include the SSRC of floor participant sending the Floor Request message in the SSRC of floor control server field; and\nc.\tif the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"true\", for each floor participant in the queue:\ni.\tshall include the MCPTT ID of the floor participant in the Queued User ID field;\nii.\tshall include the SSRC of the floor participant in the SSRC of queued floor participant field;\niii.\tshall include the queue position of the floor participant in the Queue Info field; and\niv.\tshall include the priority of the floor participant in the Queue Info field;\n5.\tshall start timer T205 (Floor Granted) and shall initiate counter C205 (Floor Granted) to 1;\n6.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of the user to whom the floor was granted in the Floor Granted message; and\n7.\tshall enter the 'O: pending granted' state.\nUpon receiving a Floor Queue Position Request message, the floor participant:\n1.\tshall send the Floor Queue Position Info message. The Floor Queue Position Info message:\na.\tshall include the floor participant's own MCPTT ID in the User ID field;\nb.\tshall include the queue position and floor priority in the Queue Info field;\nc.\tshall include the value of the SSRC of floor participant requesting floor queue status info field from the received Floor Queue Position Request message in the SSRC of queued floor participant field; and\nd.\tshall include the value of the User ID field from the received Floor Queue Position Request message in the Queued User ID field; and\n2.\tremain in the 'O: has permission' state.\nWhen timer T206 (Stop talking warning) expires, the floor participant:\n1.\tmay notify the MCPTT user that the transmission time limit is about to reach;\n2.\tshall start timer T207 (Stop talking); and\n3.\tshall remain in the current state.\nWhen the timer T207 (Stop talking) expires and if at least one Floor Request message is stored (i.e. queueing mode is used in the session), the floor participant:\n1.\tshall request the MCPTT client to stop sending RTP media packets towards other MCPTT clients;\n2.\tshall send the Floor Granted message toward the other floor participants. The Floor Granted message:\na. shall include the MCPTT ID of the first floor participant in the queue in the User ID field;\nb. shall include the SSRC of the first floor participant in the queue in the SSRC of the granted floor participant field;\nc. shall remove the first floor participant from the queue;\nd. for the remaining floor participants in the queue:\ni.\tshall include the MCPTT ID of the floor participant in the Queued User ID field;\nii.\tshall include the SSRC of the floor participant in the SSRC of queued floor participant field;\niii.\tshall include the queue position of the floor participant in the Queue Info field; and\niv.\tshall include the priority of the floor participant in the Queue Info field; and\ne.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n3.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message;\n4.\tshall start timer T205 (Floor Granted ) and shall initiate counter C205 (Floor Granted ) to 1; and\n5\tshall enter the 'O: pending granted' state.\nWhen timer T207 (Stop talking) expires with no pending requests in the queue or if the value of \"/<x>/<x>/OffNetwork/QueueUsage\" leaf node present in the group configuration as specified in 3GPP TS 24.483 [4] is set to \"false\", the floor participant:\n1.\tshall send a Floor Release message towards other floor participants. The Floor Release message:\na.\tshall include the MCPTT ID of the MCPTT user in the User ID field; and\nb.\tif the session is not initiated as a broadcast group call with the B-bit set to '1' (Broadcast group call), shall include a Floor Indicator field set to '0' (normal call);\n2.\tshall start timer T230 (Inactivity);\n3.\tshall clear the stored SSRC of the current floor arbitrator; and\n4.\tshall enter 'O: silence' state.\nIn this state the MCPTT client is waiting for a response to a Floor request message.\nIn this state timer T201 (Floor Request) is running.\nTo resolve race condition between multiple simultaneous floor requests, the MCPTT client resets the counter associated with timer T201, if another floor request with higher priority or higher SSRC, in case the priority is same, is received.\nUpon receiving RTP media packets and if there is no stored SSRC of the current floor arbitrator, the floor participant:\n1.\tshall request the MCPTT client to render the RTP media packets;\n2.\tshall reset the value of the counter C201 (Floor Request) to 1;\n3.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of RTP media packet;\n4.\tshall restart (or start, if not running already) timer T203 (End of RTP media); and\n5.\tshall remain in 'O: pending request' state.\nOtherwise, if SSRC of floor participant sending the media matches with the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall request the MCPTT client to render the RTP media packets;\n2.\tshall reset the value of the counter C201 (Floor Request) to 1;\n3.\tshall restart (or start, if not running already) timer T203 (End of RTP media); and\n4.\tshall remain in 'O: pending request' state.\nOtherwise, if SSRC of floor participant sending the media packet matches with the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall request the MCPTT client to render the RTP media packets;\n2.\tshall reset the value of the counter C201 (Floor Request) to 1;\n3.\tshall set the stored SSRC of the current arbitrator to the SSRC of RTP media packet;\n4.\tshall clear the stored SSRC of the candidate arbitrator;\n5.\tshall restart (or start, if not running already) timer T203 (End of RTP media); and\n6.\tshall remain in 'O: pending request' state.\nUpon receiving Floor Queue Position Info message, if the <User ID> value in the Queued User ID field matches its own MCPTT ID and the value in the SSRC of floor control server field as received in the Floor Queue Position Info message matches the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall update the queue status;\n2.\tmay notify the MCPTT user about the queue position received in the <Queue position info> value in the Queue Info field;\n3.\tshall stop timer T201 (Floor Request); and\n4.\tshall enter 'O: queued' state.\nOtherwise, if the <User ID> value in the Queued User ID field matches its own MCPTT ID and there is no stored SSRC of the current floor arbitrator, the floor participant:\n1.\tshall update the queue status;\n2.\tshall set the stored SSRC of the current floor arbitrator to the value in the SSRC of floor control server field as received in the Floor Queue Position Info message;\n3.\tmay notify the MCPTT user about the queue position received in the <Queue position info> value in the Queue Info field;\n4.\tshall stop timer T201 (Floor Request); and\n5.\tshall enter 'O: queued' state.\nOtherwise, if the <User ID> value in the Queued User ID field matches its own MCPTT ID and the value in the SSRC of floor control server field as received in the Floor Queue Position Info message matches the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall update the queue status;\n2.\tshall set the stored SSRC of the current arbitrator to the value in the SSRC of the floor control server field as received in the Floor Queue Position Info message;\n3.\tshall clear the stored SSRC of the candidate arbitrator;\n4.\tmay notify the MCPTT user about the queue position received in the <Queue position info> value in the Queue Info field;\n5.\tshall stop timer T201 (Floor Request); and\n6.\tshall enter 'O: queued' state.\nUpon receiving Floor Deny message, if the <User ID> value in the User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Deny message matches the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall stop the timer T201 (Floor Request);\n2.\tshall provide floor deny notification to the user;\n3.\tshall restart the timer T203 (End of RTP media);\n4.\tmay display the floor deny reason to the user using information in the Reject Cause field; and\n5.\tshall enter 'O: has no permission' state.\nOtherwise, if the <User ID> value in the User ID field matches its own MCPTT ID and there is no stored SSRC of the current floor arbitrator, the floor participant:\n1.\tshall stop the timer T201 (Floor Request);\n2.\tshall set the stored SSRC of the current floor arbitrator to the value in the SSRC of floor control server field as received in the Floor Deny message;\n3.\tshall restart the timer T203 (End of RTP media);\n4.\tshall provide floor deny notification to the user;\n5.\tmay display the floor deny reason to the user using information in the Reject Cause field; and\n6.\tshall enter 'O: has no permission' state.\nOtherwise, if the <User ID> value in the User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Deny message matches the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall stop the timer T201 (Floor Request);\n2.\tshall set the stored SSRC of the current arbitrator to the SSRC of the floor control server as received in the Floor Deny message;\n3.\tshall clear the stored SSRC of the candidate arbitrator;\n4.\tshall restart the timer T203 (End of RTP media);\n5.\tshall provide floor deny notification to the user;\n6.\tmay display the floor deny reason to the user using information in the Reject Cause field; and\n7.\tshall enter 'O: has no permission' state.\nWhen an indication from the MCPTT user to release the pending request for the floor is received, the floor participant:\n1.\tshall send a Floor Release message towards other floor participants. The Floor Release message:\na.\tshall include the MCPTT ID of the MCPTT user in the <User ID> value of the User ID field; and\nb.\tif the session is not initiated as a broadcast group call with the B-bit set to '1' (Broadcast group call), shall include a Floor Indicator field set to '0' (normal call);\n2.\tshall stop the timer T201 (Floor Request);\n3.\tshall stop timer T203 (End of RTP media), if running;\n4.\tshall start the timer T230 (Inactivity);\n5.\tshall clear the stored SSRC of the current floor arbitrator; and\n6.\tshall enter 'O: silence' state.\nWhen timer T201 (Floor Request) expires and counter C201 (Floor Request) reaches its upper limit, the floor participant:\n1.\tshall send the Floor Taken message toward the other floor participants. The Floor Taken message:\na.\tshall include the floor participant's own SSRC in the SSRC of the granted floor participant field;\nb.\tshall include the floor participant's own MCPTT ID in the User ID field; and\nc.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n2.\tshall set the stored SSRC of the current floor arbitrator to its own SSRC;\n3.\tshall stop timer T203 (End of RTP media), if running; and\n4.\tshall enter 'O: has permission' state.\nUpon receiving Floor Granted message and if the <User ID> value in the User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Granted message matches the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall request the MCPTT client to stop rendering received RTP media packets;\n2.\tshall set the stored SSRC of the current floor arbitrator to its own SSRC;\n3.\tshall stop timer T203 (End of RTP media), if running;\n4.\tshall stop timer T201 (Floor Request);\n5.\tmay provide a floor granted notification to the MCPTT user;\n6.\tif the Floor Indicator field is included and the B bit is set to '1' (Broadcast group call), shall provide a notification to the user indicating the type of call; and\n7.\tshall enter 'O: has permission' state.\nOtherwise, if the <User ID> value in the User ID field matches its own MCPTT ID and there is no stored SSRC of the current floor arbitrator, the floor participant:\n1.\tshall set the stored SSRC of the current floor arbitrator to its own SSRC;\n2.\tshall stop timer T203 (End of RTP media);\n3.\tshall stop timer T201 (Floor Request);\n4.\tmay provide a floor granted notification to the MCPTT user;\n5.\tif the Floor Indicator field is included and the B bit is set to '1' (Broadcast group call), shall provide a notification to the user indicating the type of call; and\n6.\tshall enter 'O: has permission' state.\nOtherwise, if the <User ID> value in the User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Granted message matches the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall set the stored SSRC of the current arbitrator to its own SSRC;\n2.\tshall stop timer T203 (End of RTP media);\n3.\tshall stop timer T201 (Floor Request);\n4.\tmay provide a floor granted notification to the MCPTT user;\n5.\tshall clear the stored SSRC of the candidate arbitrator;\n6.\tif the Floor Indicator field is included and the B bit is set to '1' (Broadcast group call), shall provide a notification to the user indicating the type of call; and\n7.\tshall enter 'O: has permission' state.\nUpon receiving a Floor Granted message and if the <User ID> value in the User ID field does not match its own MCPTT ID and SSRC of floor participant sending the Floor Granted message matches the stored SSRC of current arbitrator, the floor participant:\n1.\tshall request the MCPTT client to stop rendering received RTP media packets;\n2.\tshall set the stored SSRC of the candidate arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message;\n3.\tshall reset the counter C201 (Floor Request) associated with timer T201 (Floor Request) with the value set to 1;\n4.\tshall restart timer T203 (End of RTP media);\n5.\tshall restart timer T201 (Floor Request);\n6.\tmay provide a floor taken notification to the MCPTT user;\n7.\tif the Floor Indicator field is included and the B bit is set to '1' (Broadcast group call), shall provide a notification to the user indicating the type of call; and\n8.\tshall remain in 'O: pending request' state.\nOtherwise, if the <User ID> value in the User ID field does not match its own MCPTT ID and there is no stored SSRC of the current floor arbitrator, the floor participant:\n1.\tshall set the stored SSRC of the candidate floor arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message;\n2.\tshall reset the counter C201 (Floor Request) associated with timer T201 (Floor Request) with the value set to 1;\n3.\tshall restart timer T203 (End of RTP media);\n4.\tshall restart timer T201 (Floor Request);\n5.\tmay provide a floor taken notification to the MCPTT user;\n6.\tif the Floor Indicator field is included and the B bit is set to '1' (Broadcast group call), shall provide a notification to the user indicating the type of call; and\n7.\tshall remain in 'O: pending request' state.\nOtherwise, if the <User ID> value in the User ID field does not match its own MCPTT ID and SSRC of floor participant sending the Floor Granted message matches the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall request the MCPTT client to stop rendering received RTP media packets;\n2.\tshall set the stored SSRC of the candidate arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message;\n3.\tshall reset the counter C201 (Floor Request) associated with timer T201 (Floor Request) with the value set to 1;\n4.\tshall restart timer T203 (End of RTP media);\n5.\tshall restart timer T201 (Floor Request);\n6.\tmay provide a floor taken notification to the MCPTT user;\n7.\tif the Floor Indicator field is included and the B bit is set to '1' (Broadcast group call), shall provide a notification to the user indicating the type of call; and\n8.\tshall remain in 'O: pending request' state.\nOn expiry of timer T201 (Floor Request) if the counter C201 (Floor Request) has not reached its upper limit, the floor participant:\n1.\tshall send the Floor Request message to other floor participants. The Floor Request message:\na.\tif a priority different than the default floor priority is required, shall include the Floor Priority field with the requested priority in the <Floor Priority> element;\nb.\tshall include the MCPTT ID of the own MCPTT user in the User ID field; and\nc.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n2.\tshall restart the timer T201 (Floor Request) and increment counter C201 (Floor Request) by 1; and\n3.\tshall remain in the 'O: pending request' state.\nUpon receiving Floor Request message, if the priority of received request is higher than priority of the floor participant or if the SSRC of received request is higher, if the priority is same, the floor participant:\n1.\tshall reset the value of the counter C201 (Floor Request) to 1;\n2.\tshall re-start timer T201 (Floor Request); and\n3.\tshall remain in 'O: pending request' state.\nUpon receiving a Floor Taken message, the floor participant:\n1.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of granted floor participant field the Floor Taken message;\n2.\tshall reset the value of the counter C201 (Floor request) to 1;\n3.\tshall restart timer T201 (Floor request); and\n4.\tshall remain in 'O: pending request' state.\nIn this state the MCPTT client is waiting for another client to take over the role of floor arbitrator.\nThe timer T205 (Floor Granted) is running in this state.\nUpon receiving the RTP media and the SSRC of RTP media packet matches with the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall request the MCPTT client to render the received RTP media packets;\n2.\tshall stop timer T205 (Floor Granted), if running;\n3.\tshall stop timer T233 (Pending user action), if running;\n4.\tshall start timer T203 (End of RTP media); and\n5.\tshall enter 'O: has no permission' state.\nOn expiry of timer T205 (Floor Granted) and counter C205 (Floor Granted) is less than the upper limit, the floor participant:\n1.\tshall send again the Floor Granted message toward the other floor participants. For each participant in the queue the Floor Granted message:\na.\tshall include the MCPTT ID of the floor participant in the Queued User ID field;\nb.\tshall include the SSRC of the floor participant in the SSRC of queued floor participant field;\nc.\tshall include the queue position of the floor participant in the Queue Info field; and\nd.\tshall include the priority of the floor participant in the Queue Info field;\n2.\tshall restart timer T205 (Floor Granted) and shall increment counter C205 (Floor Granted) by 1; and\n3.\tshall remain in 'O: pending granted' state.\nOn the expiry of timer T205 (Floor Granted) for the configured upper limit of counter C205 (Floor Granted) with request pending in the queue, the floor participant:\n1.\tshall reset the value of counter C205 (Floor Granted) to 1;\n2.\tshall start the timer T233 (Pending user action); and\n3.\tshall remain in 'O: pending granted' state.\nOn the expiry of timer T205 (Floor Granted) for the configured upper limit of counter C205 (Floor Granted) with no request pending in the queue, the floor participant:\n1.\tshall reset the value of counter C205 (Floor Granted) to 1;\n2.\tshall start timer T230 (Inactivity);\n3.\tshall clear the stored SSRC of the current floor arbitrator; and\n4.\tshall enter 'O: silence' state.\nOn expiry of timer T233 (Pending user action) with no request pending in the queue, the floor participant:\n1.\tshall send a Floor Release message towards other floor participants. The Floor Release message:\na.\tshall include the MCPTT ID of the MCPTT user in the User ID field;\n2.\tshall start timer T230 (Inactivity);\n3.\tshall clear the stored SSRC of the current floor arbitrator; and\n4.\tshall enter 'O: silence' state.\nOn the expiry of timer T233 (Pending user action) with more request(s) pending in the queue, the floor participant:\n1.\tshall send the Floor Granted message for the next pending request in the queue towards other floor participants. The Floor Granted message:\na.\tshall include the MCPTT ID of the first floor particant in the queue in the User ID field;\nb.\tshall include the SSRC of the first floor participant in the queue in the SSRC of the granted floor participant field;\nc.\tshall remove the first floor participant from the queue;\nd.\tfor the remaining floor participants in the queue:\ni.\tshall include the MCPTT ID of the floor participant in the Queued User ID field;\nii.\tshall include the SSRC of the floor participant in the SSRC of queued floor participant field;\niii.\tshall include the queue position of floor participant in the Queue Info field;\niv.\tshall include the priority of the floor participant in the Queue Info field; and\ne.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n2.\tshall set the stored SSRC of the current floor arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message;\n3.\tshall start timer T205 (Floor Granted);\n4.\tshall initialize the counter C205 (Floor Granted) with the value set to 1; and\n5.\tshall remain in 'O: pending granted' state.\nIf the floor participant receives an indication from the MCPTT user to send media, the floor participant:\n1.\tmay notify the MCPTT user about rejection; and,\n2.\tshall remain in 'O: pending granted' state.\nUpon receiving a Floor Release message, the floor participant:\n1.\tshall remove the sender of the Floor Release message from the queue, if the User ID in the floor release message matches the queued request of User ID; and\n2.\tshall remain in 'O: pending granted' state.\nWhen a Floor Request message is received, the floor participant:\n1.\tif the SSRC in the received Floor Request message equals the stored SSRC of the current floor arbitrator,\na.\tshall send again the Floor Granted message toward the other floor participants. For each participant in the queue the Floor Granted message:\ni.\tshall include the MCPTT ID of the floor participant in the Queued User ID field;\nii.\tshall include the SSRC of the floor participant in the SSRC of queued floor participant field;\niii.\tshall include the queue position of the floor participant in the Queue Info field; and\niv.\tshall include the priority of the floor participant in the Queue Info field; and\nb.\tshall restart timer T205 (Floor Granted) and shall increment counter C205 (Floor Granted) by 1;\n2.\tif the SSRC in the received Floor Request message does not equal the stored SSRC of the current floor arbitrator, shall send the Floor Deny message toward the other floor participant. The Floor Deny message:\na.\tshall include in the Reject Cause field the <Reject Cause> value cause #1 (Another MCPTT client has permission);\nb.\tmay include in the Reject Cause field an additional text string explaining the reason for rejecting the floor request in the <Reject Phrase> value; and\nc.\tshall include the User ID field received in the Floor Request message; and\n3.\tshall remain in 'O: pending granted' state.\nIn this state the MCPTT client is waiting for a response to a queued request.\nUpon receiving RTP media packets and the SSRC of RTP media packet matches with the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall request the MCPTT client to render the RTP media packets;\n2.\tshall restart timer T203 (End of RTP media); and\n3.\tshall remain in 'O: queued' state.\nOtherwise, if SSRC of floor participant sending the media packet matches with the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall request the MCPTT client to render the RTP media packets;\n2.\tshall restart timer T203 (End of RTP media);\n3.\tshall set the stored SSRC of the current arbitrator to the SSRC of RTP media packet;\n4.\tshall clear the stored SSRC of the candidate arbitrator; and\n5.\tshall remain in 'O: queued' state.\nUpon receiving Floor Queue Position Info message, if the <User ID> value in the Queued User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Queue Position Info message matches the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall update the queue position;\n2.\tshall notify the MCPTT user about the queue position received in the <Queue position info> value in the Queue Info field;\n3.\tshall stop timer T204 (Floor Queue Position request); and\n4.\tshall remain in 'O: queued' state.\nOtherwise, if the <User ID> value in the User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Queue Position Info message matches the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall update the queue position;\n2.\tshall set the stored SSRC of the current arbitrator to the SSRC of the floor control server as received in the Floor Queue Position Info message;\n3.\tshall clear the stored SSRC of the candidate arbitrator;\n4.\tshall notify the MCPTT user about the queue position received in the <Queue position info> value in the Queue Info field;\n5.\tshall stop timer T204 (Floor Queue Position request); and\n6.\tshall remain in 'O: queued' state.\nUpon receiving Floor Deny message, if the <User ID> value in the User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Deny message matches the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall stop timer T204 (Floor Queue Position request), if running;\n2.\tshall stop the timer T233 (Pending user action), if running;\n3.\tshall provide floor deny notification to the user;\n4.\tmay display the floor deny reason to the user using information in the Reject Cause field; and\n5.\tshall enter 'O: has no permission' state.\nOtherwise, if the <User ID> value in the User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Deny message matches the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall stop timer T204 (Floor Queue Position request), if running;\n2.\tshall stop the timer T233 (Pending user action), if running;\n3.\tshall set the stored SSRC of the current arbitrator to the SSRC of the floor control server as received in the Floor Deny message;\n4.\tshall clear the stored SSRC of the candidate arbitrator;\n5.\tshall provide floor deny notification to the user;\n6.\tmay display the floor deny reason to the user using information in the Reject Cause field; and\n7.\tshall enter 'O: has no permission' state.\nWhen an indication from the MCPTT user to release the queued request for the floor is received, the floor participant:\n1.\tshall send a Floor Release message towards other floor participants. The Floor Release message:\na.\tshall include the MCPTT ID of the MCPTT user in the User ID field;\n2.\tshall stop timer T204 (Floor Queue Position request), if running;\n3.\tshall stop timer T233 (Pending user action), if running; and\n4.\tshall enter 'O: has no permission' state.\nUpon receiving Floor Granted message and if the <User ID> value in the User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Granted message matches the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall request the MCPTT client to stop rendering received RTP media packets;\n2.\tshall start timer T233(Pending user action), if not running already;\n3.\tshall notify the MCPTT user about of the floor grant;\n4.\tif the Floor Indicator field is included, and the B bit is set to '1' (Broadcast group call), shall provide a notification to the user indicating the type of call; and\n5.\tshall remain in 'O: queued' state.\nOtherwise, if the <User ID> value in the User ID field matches its own MCPTT ID and SSRC of floor participant sending the Floor Granted message matches the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall request the MCPTT client to stop rendering received RTP media packets;\n2.\tshall start timer T233(Pending user action), if not running already;\n3.\tshall notify the MCPTT user about of the floor grant;\n4.\tshall set the stored SSRC of the current arbitrator to its own SSRC;\n5.\tshall clear the stored SSRC of the candidate arbitrator;\n6.\tif the Floor Indicator field is included, and the B bit is set to '1' (Broadcast group call), shall provide a notification to the user indicating the type of call; and\n7.\tshall remain in 'O: queued' state.\nOn expiry of timer T233 (Pending user action), the floor participant:\n1.\tshall stop timer T204 (Floor Queue Position request), if running;\n2.\tshall start timer T230 (Inactivity); and\n3.\tshall enter 'O: silence' state.\nIf the floor participant receives an indication from the user that the user wants to send media and the timer T233 (pending user action) is running, the floor participant:\n1.\tshall stop timer T204 (Floor Queue Position request), if running;\n2.\tshall stop the timer T233 (Pending user action);\n3.\tshall set the stored SSRC of the current floor arbitrator to its own SSRC; and\n4.\tshall enter 'O: has permission' state.\nUpon receiving Floor Granted message and if the <User ID> value in the User ID field does not match its own MCPTT ID and SSRC of floor participant sending the Floor Granted message matches the stored SSRC of current floor arbitrator, the floor participant:\n1.\tshall request the MCPTT client to stop rendering received RTP media packets;\n2.\tshall restart timer T203 (End of RTP media);\n3.\tshall set the stored SSRC of the candidate floor arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message; and\n4.\tshall remain in 'O: queued' state.\nOtherwise, if the <User ID> value in the User ID field does not match its own MCPTT ID and SSRC of floor participant sending the Floor Granted message matches the stored SSRC of candidate arbitrator, the floor participant:\n1.\tshall request the MCPTT client to stop rendering received RTP media packets;\n2.\tshall restart timer T203 (End of RTP media);\n3.\tshall set the stored SSRC of the candidate floor arbitrator to the SSRC of user to whom the floor was granted in the Floor Granted message; and\n4.\tshall remain in 'O: queued' state.\nOn expiry of timer T203 (End of RTP media), the floor participant:\n1.\tshall request the MCPTT client to stop rendering received RTP media packets;\n2.\tshall send the Floor Request message to other floor participants. The Floor Request message:\na.\tif a priority different than the default floor priority is required, shall include the Floor Priority field with the requested priority in the <Floor Priority> element;\nb.\tshall include the MCPTT ID in the <User ID> value; and\nc.\tif the floor request is a broadcast group call, system call, emergency call or an imminent peril call, shall include a Floor Indicator field indicating the relevant call types;\n3.\tshall stop timer T204 (Floor Queue Position request), if running;\n4.\tshall initialize the counter C201 (Floor request) with value set to 1;\n5.\tshall start timer T201 (Floor Request);\n6.\tshall clear the stored SSRC of the current floor arbitrator; and\n7.\tshall enter 'O: pending request' state.\nUpon receipt of an indication from the MCPTT client to request the queue position information, the floor participant:\n1.\tshall send the Floor Queue Position Request message; The Floor Queue Position Request message:\na.\tshall include the SSRC of sent Floor Request message in SSRC of floor participant field; and\nb.\tshall include the own MCPTT User ID in User ID field;\n2.\tshall initialize the counter C204 (Floor Queue Position request) with value set to 1;\n3.\tshall start timer T204 (Floor Queue Position request); and\n4.\tremain in the 'O: queued' state.\nUpon expiry of timer T204 (Floor Queue Position request), the floor participant:\n1.\tshall send the Floor Queue Position Request message; The Floor Queue Position Request message:\na.\tshall include the SSRC of sent Floor Request message in SSRC of floor participant field; and\nb.\tshall include the own MCPTT User ID in User ID field;\n2.\tshall increment the value of counter C204 (Floor Queue Position request) by 1;\n3.\tshall start timer T204 (Floor Queue Position request); and\n4.\tremain in the 'O: queued' state.\nUpon expiry of timer T204 (Floor Queue Position request) when the value of the counter C204 (Floor Queue Position request) is equal to the value upper limit, the floor participant:\n1.\tshall reset the counter C204 (Floor Queue Position request) with value set to 1;\n2.\tshall start timer T230 (Inactivity);\n3.\tshall clear the stored SSRC of the current floor arbitrator; and\n4.\tshall enter 'O: silence' state.\nThis clause describes the actions to be taken in all states defined for the basic state diagram with the exception of the 'Start-stop' state.\nUpon receiving an MCPTT call release request from the application and signalling plane when the MCPTT call is going to be released, the floor participant:\n1.\tshall stop sending floor control messages towards other floor participants;\n2.\tshall request the MCPTT client to stop sending and receiving RTP media packets;\n3.\tshall release all resources including any running timers associated with the MCPTT call;\n4.\tshall terminate the instance of floor participant state transition diagram; and\n5.\tshall enter 'Start-stop' state.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "8\tCoding",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "8.1\tIntroduction",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.1.1\tGeneral",
                            "text_content": "The media plane control protocols specified in the present document are based on the RTCP Application Packets (RTCP: APP), as defined in IETF RFC 3550 [3], but the media plane control messages do not conform to the rules for compound RTCP packets or RTCP packet transmission.\nEach media plane control message is one RTCP: APP packet. These RTCP: APP packets are not to be sent in compound RTCP packets, but more than one media plane control message can be sent in a single IP packet.\nThe three first 32-bit words in any of the media plane control protocols defined in the present document are structured commonly as described in clause 8.1.2.\nOutside tables, binary values are expressed with a decimal value with single quotation marks e.g. 00000000 is '0', 00000001 is '1', 00000010 is '2' and so on.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.1.2\tRTCP: APP message format",
                            "text_content": "The definition of the fields in the RTCP APP packet is found in IETF RFC 3550 [3].\nTable 8.1.2-1 shows the RTCP APP packet format.\nTable 8.1.2-1: RTCP: APP message format\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |            length             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           SSRC                                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name (ASCII)                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                 application-dependent data                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Secure RTCP message part                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nP\nThe padding bit P is set to '0'.\nSubtype:\nDependent upon the relevant set of media plane control messages, as identified by the Name field, the possible Subtype values are defined in the following tables:\n-\tName field = \"MCPT\" (i.e. Floor control): Table 8.2.2.1-1\n-\tName field = \"MCPC\" (i.e. Pre-established session call control): Table 8.3.2-1\n-\tName field= \"MCMC\" (i.e. MBMS subchannel control):\tTable 8.4.2-1\n-\tName field= \"MCNC\" (i.e. Notification control):\tTable 8.5.2-1\n-\tName field= \"MCSC\" (i.e. MBS subchannel control):\tTable 8.6.2-1\nLength\nThe length field in the RTCP header is the length of the packet in 32-bit words, not counting the first 32-bit word in which the length field resides.\nNOTE:\tThe length field can indicate message size longer than specified in this version of the protocol. This can be the case e.g. if message is of later version of this protocol.\nSSRC\nThe SSRC field shall carries the RTCP SSRC of the sending floor control entity.\nIn on-network, the RTCP SSRCs are exchanged at session establishment within the SDP offer and answer as specified in clause 4.3.\nNOTE:\tIn the case the RTCP APP message is forwarded (e.g. by participating or non-controlling MCPTT function), the forwarding floor control entity updates the RTCP header with the RTCP SSRC it has received from the destination floor control entity at session establishment.\nName\nThe 4-byte ASCII string in the RTCP header is used to define the set of media plane control messages to be unique with respect to other APP packets that the media plane might receive.\nThe present document specified the use of the following names:\n1.\tFor the floor control protocol specified in the present document the ASCII name string is: MCPT (Mission Critical Push-to-Talk).\n2.\tFor the pre-established session call control protocol specified in the present document the ASCII name string is: MCPC (Mission Critical Pre-established Session Control).\n3.\tFor the MBMS subchannel control protocol specified in the present document the ASCII name string is: MCMC (Mission Critical MBMS subchannel Control).\n4.\tFor the MBMS subchannel control protocol specified in the present document the ASCII name string is: MCNC (Notification control).\n5.\tFor the MBS subchannel control protocol specified in the present document the ASCII name string is: MCSC (Mission Critical MBS subchannel Control).\nApplication-dependent data\nThe application-dependent data contains zero or more application specific data fields is specified in clause 8.1.3.\nThis part is encrypted if SRTCP is used.\nSecure RTCP message part\nThe content of the secure RTCP message part is in specified in clause 13 and in IETF RFC 3711 [16].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.1.3\tApplication specific data field",
                            "text_content": "Each application specific data field is composed of:\n1.\ta field ID which is one octet long;\n2.\ta length value which is:\n-\tone octet long, if the field ID is less than 192; and\n-\ttwo octets long, if the field ID is equal to or greater than 192;\n3.\ta field value. The length in octets of the field value is indicated in the length value; and\n4.\ta padding. The padding is zero, one, two, or three octets long. The value of the padding octet(s) is set to zero by sender and ignored by receiver.\nAn application specific data field has always a multiple of 4 octets.\nTable 8.1.3-1 shows the application dependent data field structure when the field ID is less than 192. Table 8.1.3-2 shows the application dependent data field structure when the field ID is equal to or greater than 192.\nTable 8.1.3.-1: Application specific data field structure when the field ID is less than 192\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   Field ID    | Length value  |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n:                      <    F i e l d  v a l u e   >            :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nTable 8.1.3.-2: Application specific data field structure when the field ID is equal to or greater than 192\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   Field ID    |       Length value            |               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               +\n:                      <    F i e l d  v a l u e   >            :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.1.4\tHandling of unknown messages and fields",
                            "text_content": "When an RTCP APP message is received, the receiver shall:\n1.\tignore the whole message, if the subtype is unknown;\n2.\tignore the unspecified fields in the message (e.g. specified in future version of the protocol); and\n3.\tignore the syntactically incorrect optional fields.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.2\tFloor control",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.2.1\tIntroduction",
                            "text_content": "The floor control messages are coded as described in clause 8.1.2 where the floor control message is part of the application-dependent data.\nFor the floor control protocol the ASCII name string is: MCPT (Mission Critical Push-to-Talk).\nA list of floor control messages can be found in clause 8.2.2.1.\nThe same floor control messages are used for on-network, off-network floor control and over the MBMS subchannel control channel.\nIn case of off-network, the floor participant that has the floor acts as the floor control server (referred to as floor arbitrator in clause 7) in the following clauses.\nThe floor control specific fields are specified in clause 8.2.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.2\tFloor control messages",
                            "text_content": "The table 8.2.2.1-1 provides a list of floor control messages.\nTable 8.2.2.1-1: Floor control specific messages\n\nFor some messages the first bit (marked as x in the subtype) can be used to indicate if the sender wants to have an acknowledgment. The x is coded as follows:\n'0'\tAcknowledgment is not required\n'1'\tAcknowledgment is required\nNOTE:\tWhether a message needs to be acknowledged or not is described in clauses 6.\nIf an acknowledgment is required the Floor Ack message is used to acknowledge the message.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.2.2.1-1: Floor control specific messages",
                                    "table number": 4,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.2.3\tFloor control specific fields",
                            "text_content": "This clause describes the floor control specific data fields.\nThe floor control messages can include floor control specific data fields contained in the application-dependent data of the floor control message. The floor control specific data fields follow the syntax specified in clause 8.1.3.\nTable 8.2.3.1-1: Void\nTable 8.2.3.1-2 lists the available floor control specific data fields including the assigned field ID.\nTable 8.2.3.1-2: Floor control specific data fields\n\nThe following clauses describe the coding of each field.\nThe Floor Priority field describes the level of priority requested in a Floor Request message or granted in a Floor Granted message. The max floor priority that can be requested in a Floor Request message is negotiated between the MCPTT client and the controlling MCPTT function using the \"mc_priority\" fmtp parameter as specified in clause 14.\nTable 8.2.3.2-1 describes the coding of the Floor Priority field.\nTable 8.2.3.2-1: Floor Priority field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Floor Priority |Floor Priority |Floor Priority |spare          |\n|field ID value |Length value   |value          |               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Floor Priority field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Floor Priority length> value is a binary value and has the value '2' indicating the total length in octets of the <Floor priority> value item and the spare bits.\nThe <Floor Priority> value consists of 8 bit parameter giving the floor priority ('0' to '255') where '0' is the lowest priority and '255' is the highest priority. If the Floor Priority field is not included in the message the default priority is used as the Floor Priority value. The value of the default priority is '0'. The default priority is sometimes referred to as normal priority. Whether a floor priority is pre-emptive or not is determined:\n1.\tfor on-network by the floor control server as described in clause 4.1.1.4; and\n2.\tfor off-network by the floor arbitrator as described in clause 4.1.1.5.\nThe spare bits are set to zero.\nThe Duration field describes the time in seconds for which the granted party is allowed to transmit.\nTable 8.2.3.3-1 describes the coding of the Duration field.\nTable 8.2.3.3-1: Duration field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Duration       |Duration       |Duration value                 |\n|field ID value |length value   |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Duration field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Duration length> value is a binary value and has the value '2' indicating the total length in octets of the <Duration> value item.\nThe <Duration> value is a binary value in seconds.\nThe Reject Cause field contains a <Reject Cause> value and can contain a <Reject Phrase> value. The content of the <Reject Cause> value is floor control message dependent and is described per individual floor control message carrying the Reject Cause field.\nTable 8.2.3.4-1 describes the coding of the Reject Cause field.\nTable 8.2.3.4-1: Reject Cause field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Reject Cause   |Reject Cause   |       Reject Cause            |\n|field ID       |length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                         Reject Phrase                         :\n:                                                               |\n|                                       (Padding)               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Reject Cause field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Reject Cause length> value is a binary value and indicates the total length in octets of the <Reject Cause> value and the <Reject Phrase> value items excluding any padding octets. If the length field is set to '2', there is no <Reject Phrase> value in the Reject Cause field.\nThe <Reject Cause> value is a 16 bit binary value as defined in clause 8.2.6.2 for Floor Deny message and as defined in clause 8.2.10.2 for Floor Revoke message.\nThe <Reject Phrase> value is a text string encoded the text string in the SDES item CNAME as specified in IETF RFC 3550 [3].\nIf the length of the <Reject Phrase> value is not a multiple of 4 bytes, the <Reject Phrase> value is padded to a multiple of 4 bytes. The value of the padding bytes is set to zero. The padding bytes are ignored by the receiver.\nThe Queue Info field includes information about the position for one MCPTT client in the floor request queue and the priority of the floor request.\nTable 8.2.3.5-1 describes the coding of the Queue Info field.\nTable 8.2.3.5-1: Queue Info field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Queue Info     |Queue Info     |Queue Position |Queue Priority |\n|field ID value |length value   |Info value     | Level value   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Queue Info field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Queue Info length> value is a binary value and has the value '2' indicating the total length in octets of the <Queue position info> value and the <Queue Priority Level> value items.\nThe <Queue Position Info> value is a binary value. The <Queue Position Info> value has the value '254' if the MCPTT client is not queued. The <Queue Position Info> value has the max value ('255') if the MCPTT client is queued but the MCPTT server is unable to determine the queue position or if MCPTT server policy is not to release information of the queue position to the MCPTT client.\nThe <Queue Priority Level> value is coded as the <Floor Priority> value in clause 8.2.3.2.\nThe Granted Party's Identity field identifies the MCPTT user that is granted to send media.\nTable 8.2.3.6-1 describes the coding of the Granted Party's Identity field.\nTable 8.2.3.6-1: Granted Party's Identity field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Granted Party's|Granted Party's| Granted Party's Identity      |\n|Identity field |Identity length|                               :\n|ID             |               |                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Granted Party's Identity field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Granted Party's Identity length> value is coded as the <User ID length> value in clause 8.2.3.8.\nThe <Granted Party's Identity> value is coded as the <User ID> value in clause 8.2.3.8.\nIf the length of the <Granted Party's Identity> value is not (2 + multiple of 4) bytes, the <Granted Party's Identity> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes is set to zero. The padding bytes are ignored by the receiver.\nThe Permission to Request the Floor field indicates whether receiving parties are allowed to request the floor or not.\nTable 8.2.3.7-1 describes the coding of the Permission to Request the Floor field.\nTable 8.2.3.7-1: Permission to Request the Floor field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Permission to  |Permission to  | Permission to Request         |\n|Request the    |Request the    | the Floor value               |\n|Floor field ID |Floor length   |                               |\n|               |value          |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Permission to Request the Floor field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Permission to Request the Floor length> value is a binary value and has the value '2' indicating the total length in octets of the <Permission to Request the floor> value.\nThe <Permission to Request the Floor> value is 16 bit binary value and coded as follows:\n'0'\tThe receiver is not permitted to request floor.\n'1'\tThe receiver is permitted to request floor.\nAll other values are reserved for future use.\nThe User ID field contains the MCPTT ID of an MCPTT user.\nTable 8.2.3.8-1 describes the coding of the User ID field.\nTable 8.2.3.8-1: User ID field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|User ID         |User ID       |            User ID            |\n|field ID        |length        |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                                               :\n:                                                               |\n|                                        Padding                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <User ID field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <User ID length> value is a binary value and includes the value indicating the length in octets of the <User ID> value item except padding.\nThe <User ID> value is coded as described in table 8.2.3.8-2.\nTable 8.2.3.8-2: ABNF syntax of string values of the <User ID> value\nuser-id = URI\n\nIf the length of the <User ID> value is not (2 + multiple of 4) bytes <User ID> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes is to zero. The padding bytes are ignored by the receiver.\nThe Queue Size field contains the numbers of queued MCPTT clients in an MCPTT call.\nTable 8.2.3.9-1 describes the coding of the Queue size field.\nTable 8.2.3.9-1: Queue Size field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Queue Size     |Queue Size     |Queue Size value               |\n|field ID value |length value   |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Queue Size field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Queue Size length> value is a binary value and has the value '2' indicating the total length in octets of the <Queue Size> value item.\nThe <Queue Size> value is a 16 bit binary value.\nThe Message Sequence Number field is used to bind a number of Floor Taken or bind a number of Floor Idle messages together.\nTable 8.2.3.10-1 describes the coding of the Message Sequence Number field.\nTable 8.2.3.10-1: Message Sequence Number field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Message        |Message        |Message Sequence Number value  |\n|Sequence Number|Sequence Number|                               |\n|field ID value |length value   |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Message Sequence Number field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Message Sequence Number length> value is a binary value and has the value '2' indicating the total length in octets of the <Message Sequence Number> value item.\nThe <Message Sequence Number> value is a binary value. The <Message Sequence Number> value can be between '0' and '65535'. When the '65535' value is reached, the <Message Sequence Number> value starts from '0' again.\nThe Queued User ID field includes information about the identity of a queued MCPTT user.\nTable 8.2.3.11-1 describes the coding of the Queued User ID field.\nTable 8.2.3.11-1: Queued User ID field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Queued User ID  |Queued User ID|  Queued User ID               |\n|field ID        |length        |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Queued User ID field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Queued User ID length> value is coded as the <User ID length> value in clause 8.2.3.8.\nThe <Queued User ID> value is coded as the <User ID> value in clause 8.2.3.8.\nIf the length of the <Queued User ID> value is not (2 + multiple of 4) bytes, the <Queued User ID> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes is set to zero. The padding bytes are ignored by the receiver.\nThe Source field contains the source of the message.\nTable 8.2.3.12-1 describes the coding of the Source field.\nTable 8.2.3.12-1: Source field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Source         |Source         |          Source value         |\n|field ID value |length value   |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Source field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Source length> value is a binary value and has the value '2' indicating the total length in octets of the <Source> value item.\nThe <Source> value is a 16 bit binary value where:\n'0'\tthe floor participant is the source\n'1'\tthe participating MCPTT function is the source\n'2'\tthe controlling MCPTT function is the source\n'3'\tthe non-controlling MCPTT function is the source\nAll other values are reserved for future use.\nThe Track Info field contains the path a floor control message has been routed along with the priority and the queueing capability of the MCPTT client.\nTable 8.2.3.13-1 describes the coding of the Track Info field.\nTable 8.2.3.13-1: Track Info field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Track Info     |Track Info     |Queueing       |Participant    |\n|field ID value |length value   |Capability     |Type Length    |\n|               |               |value          |value          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         Participant Type value                |\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                  Floor Participant Reference 1                |\n:                               |                               :\n|                  Floor Participant Reference n                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Track Info field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Track Info length> value is a binary value and has a value indicating the total length in octets of the <Queueing Capability> value, the <Participant Type Length> value, the <Participant Type> value, and one or more <Floor Participant Reference> value items.\nThe <Queueing Capability> value is an 8 bit binary value where:\n'0'\tthe floor participant in the MCPTT client does not support queueing\n'1'\tthe floor participant in the MCPTT client supports queueing\nAll other values are reserved for future use.\nThe <Participant Type Length> value is 8 bit binary value set to the length of the <Participant Type> value item except padding.\nThe <Participant Type> value is string coded as specified in table 8.2.3.13-2:\nTable 8.2.3.13-2: ABNF syntax of values of the <Participant Type> value\nparticipant-type = 1*( %x20-7E / UTF8-NONASCII )\n\nIf the length of the <Participant Type> value is not a multiple of 4 bytes, the <Participant Type> value is padded to a multiple of 4 bytes. The value of the padding bytes is set to zero. The padding bytes are ignored by the receiver.\nNOTE 1:\tThe content of the <Participant Type> value is MCPTT service provider specific and out of scope of the present document.\nThe <Floor Participant Reference> value is a 32 bit binary value containing a reference to the floor participant in the non-controlling MCPTT function of an MCPTT group.\nNOTE 2:\tThe reference to the floor participant is a value only understandable by the floor control server interface in the non-controlling MCPTT function of an MCPTT group.\nThe Message Type field identifies the floor control message that is acknowledged.\nTable 8.2.3.14-1 describes the coding of the Message Type field.\nTable 8.2.3.14-1: Message Type field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Message Type   |Message Type   |Message Type   |Spare          |\n|field ID       |Length         |               |               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Message Type field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Message Type Length> value is a binary value and has the value '2' indicating the total length in octets of the <Message Type> value item and the spare bits.\nThe <Message Type> value is an 8 bit binary value containing the binary value consisting of the 5 bit message subtype as coded in table 8.2.2.1-1 preceeded by \"000\".The first bit of the 5 bit subtype is set to zero.\nThe spare bits are set to zero.\nThe Floor Indicator contains additional information about a received floor control message.\nTable 8.2.3.15-1 describes the coding of the Floor Indicator field.\nTable 8.2.3.15-1: Floor Indicator field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Floor Indicator|Floor Indicator|Floor Indicator value          |\n|field ID value |Length value   |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Floor Indicator field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Floor Indicator Length> value is a binary value and has the value '2'.\nThe <Floor Indicator> value is a 16 bit bit-map named as shown in table 8.2.3.15-2:\nTable 8.2.3.15-2: Floor Indicator bit marking\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWhen set to 1, the bit has the following meaning:\nA\t=\tNormal call\nB\t=\tBroadcast group call\nC\t=\tSystem call\nD\t=\tEmergency call\nE\t=\tImminent peril call\nF\t=\tQueueing supported\nG\t=\tDual floor\nH\t=\tTemporary group call (NOTE 2)\nI\t=\tMulti-talker\n\nNOTE 1:\tThe indicators A, B, C, D and E are only informative. There are no procedures specified for the A, B, C, D and E indicators in this release of the present document but they can be used to provide information to the user about type of call.\nNOTE 2:\tAn MCPTT group call is a temporary group session when the <on-network-temporary> element is present in the <list-service> element as specified in 3GPP TS 24.481 [12].\nBits J to P are reserved for future use and are set to 0.\nThere can be more than one bit set to 1 at the same time. The local policy in the floor control server decides which combinations are possible and the priority of the indications.\nThe content of the Audio SSRC of Granted Participant field is coded as specified in IETF RFC 3550 [3]. An Audio SSRC of Granted Participant field can also have a Field ID and a length value. This clause specifies an Audio SSRC of Granted Participant field including a Field ID and a length value.\nTable 8.2.3.16-1: SSRC field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Audio SSRC     |Audio SSRC     |Audio SSRC of Granted          |\n|of Granted     |of Granted     |Participant value              |\n|Participant    |Participant    |                               |\n|field ID value |length value   |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|    Audio SSRC of Granted      |Spare                          |\n|    Participant value          |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe < Audio SSRC of Granted Participant field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe < Audio SSRC of Granted Participant length> value is a binary value and has the value '6' indicating the total length in octets of the < Audio SSRC of Granted Participant length> value item and the spare bits.\nThe < Audio SSRC of Granted Participant > value is coded as the SSRC specified in IETF RFC 3550 [3].\nThe spare bits are set to zero.\nThe List of Granted Users field contains a list of MCPTT IDs of MCPTT users that are allowed to send media in a multi-talker scenario.\nTable 8.2.3.17-1 describes the coding of the List of Granted Users field.\n\nTable 8.2.3.17-1: List of Granted Users field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|List of Granted|List of Granted| No of Granted| Granted User ID|\n|Users field ID |Users length   | Users value  | length value   |\n|value          |value          |              |                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+\n: Granted User ID                                               :\n:                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Granted User ID| Granted User ID                              :\n| length value   |                                              :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+\n: Granted User ID (continued)                                   :\n:                                                               |\n|                                        Padding                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <List of Granted Users field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <List of Granted Users length> value is a binary value and has a value indicating the total length in octets of the <No of Granted Users> value, and one or more pair of <Granted User ID length> and <Granted User ID> value items except padding.\nThe <No of Granted Users> value is a binary value and includes the number of Granted User ID entries in the list.\nThe <Granted User ID length> value is a binary value and includes the value indicating the length in octets of the <Granted User ID> value item.\nThe <Granted User ID> value is coded as described in table 8.2.3.17-2.\nTable 8.2.3.17-2: ABNF syntax of string values of the <Granted User ID> value\ngranted-user-id = URI\n\nIf the length of the sum of all <Granted User ID length> values and all <Granted User ID> values is not (1 + multiple of 4) bytes, then the sum shall be padded to (1 + multiple of 4) bytes. The value of the padding bytes is set to zero. The padding bytes are ignored by the receiver.\nThe List of SSRCs field contains the list of SSRCs of the users that are allowed to send media in a multi-talker scenario.\nTable 8.2.3.18-1: List of SSRCs field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|List of SSRCs  |List of SSRCs  |Number of      |Spare          |\n|field ID value |length value   |SSRCs value    |               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|          SSRC value                                           |\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|          SSRC value                                           |\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <List of SSRCs field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <List of SSRCs length> value is a binary value and has a value indicating the total length in octets of the <Number of SSRCs> value, spare bits and one or more <SSRC> value items.\nThe <Number of SSRCs> value is a binary value and contains the number of SSRCs in the information field.\nThe <SSRC> value is coded as the SSRC specified in IETF RFC 3550 [3]. <SSRC> value items have a length '4'.\nThe spare bits are set to zero.\nThe Functional Alias field identifies the Functional Alias that the MCPTT user has chosen to use.\nTable 8.2.3.19-1 describes the coding of the Functional Alias field.\nTable 8.2.3.19-1: Functional Alias field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Functional    |Functional     |    Functional Alias           |\n|Alias field    |Alias length   |                               :\n|ID             |               |                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Functional Alias field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Functional Alias length> value is a binary value and includes the value indicating the length in octets of the <Functional Alias field ID> value item except padding.\nThe <Functional Alias> value is coded as described in table 8.2.3.19-2.\nTable 8.2.3.19-2: ABNF syntax of string values of the <Functional Alias> value\nFunctional Alias = URI\n\nIf the length of the <Functional Alias> value is not (2 + multiple of 4) bytes <Functional Alias field> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes is to zero. The padding bytes are ignored by the receiver.\nThe List of Functional Aliases field contains a list of Functional Aliases of MCPTT users that are allowed to send media in a multiple talker scenario.\nTable 8.2.3.20-1 describes the coding of the List of Functional Aliases field.\n\nTable 8.2.3.20-1: List of Functional Aliases field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|List of FAs     |List of FAs   |  No of FAs   | FA length      |\n|  field ID      | length       |              | value          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+\n:     Functional Alias                                          :\n:                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| FA length      |   Functional Alias                           :\n| value          |                                              :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+\n:     Functional Alias (continued)                              :\n:                                                               |\n|                                        Padding                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <List of FAs ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <List of FAs length> value is a binary value and has avalue indicating the total length in octets of the the <No of FAs> value, and one or more pair of <FA length value> and <Functional Alias> value items except padding.\nThe <No of FAs> value is a binary value and includes the number of Functional Alias  entries in the list.\nThe <FA length> value is a binary value and includes the value indicating the length in octets of the <Functional Alias> value item.\nThe <Functional Alias> value is coded as described in table 8.2.3.17-2.\nTable 8.2.3.20-2: ABNF syntax of string values of the <Functional Alias> value\nFunctional Alias = URI\n\nIf the length of the sum of all <FA length> values and all <Functional Alias> values is not (1 + multiple of 4) bytes, then the sum shall be padded to (1 + multiple of 4) bytes. The value of the padding bytes is set to zero. The padding bytes are ignored by the receiver.\nThe location field contains the location of a user.\nTable 8.2.3.21-1: Location field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Location field |Location length|          Location             |\n|ID             |               |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n:                                                               :\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Location field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Location length> value is a binary value and includes the value indicating the length in octets of the <Location> value except padding.\nThe <Location> value is coded as follows:\nTable 8.2.3.21-2: Location value coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Location  Type |                    Location Value             |\n+-+-+-+-+-+-+-+-+ - - - - - - - - - - - - - - - - - - - - - - - +\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Location type> value is selected from table 8.2.3.21-3:\nTable 8.2.3.21-3: Location type\n\nNOTE:\tIt is preferred that geographic coordinates are sent.\nThe <Location Value> format is specified in table 8.2.3.21-3. If location information of the requesting user is not available or is not allowed to be reported by the requesting user's MCPTT profile, the location type field is set to '0' (Not provided).\nIf the length of the <Location> value is not (2 + multiple of 4) bytes, the <Location> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes is set to zero. The padding bytes are ignored by the receiver.\nThe List of Locations field contains the locations of users in a multi-talker scenario or when more than one Location Type needs to be included.\nTable 8.2.3.22-1: List of Locations field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|List of        |List of        |  Number of    | Location      |\n|Locations field|Locations      |  Locations    |               |\n|ID             |length         |               |               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                          Location                             :\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                          Location (continued)                 :\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <List of Locations field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <List of Locations length> value is a binary value and has a value indicating the total length in octets of the <Number of Locations> value and one or more <Location> value items (i.e. set of (<Location type> value plus <Location value> values) except padding.\nThe <Number of Locations> value is a binary value and shall be equal to the <No of users> field in the List of Granted Users field (see 8.2.3.17). The location information shall be maintained in the same order as the users in the List of Granted Users to allow location information to be matched to the correct user. When the location information for a granted floor participant is not available or not allowed, the location type field for that granted floor participant shall be set to '0' (Not provided).\nThe <Location> field is coded per clause 8.2.3.21. The <Location type> value for a granted user for whom location information is either not available or not allowed shall be set to 0 (Not provided).\nIf the length of the sum of the set of <Location> values is not (1 + multiple of 4) bytes, then the sum shall be padded to (1 + multiple of 4) bytes. The value of the padding bytes is set to zero. The padding bytes are ignored by the receiver.\nThe Queued Floor Requests Purpose field contains the type of the message requested i.e Cancel Request, Cancel Notification and  Cancel Result.\nTable 8.2.3.23-1 describes the coding of the Queued Floor Requests Purpose field.\nTable 8.2.3.23-1: Queued Floor Requests Purpose field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Queued Floor  | Queued Floor   | Queued Floor Requests         |\n| Requests      | Requests       | Purpose                       |\n| Purpose       | Purpose        |                               |\n| field ID      | Length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe < Queued Floor RequestsPurpose field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe < Queued Floor RequestsPurpose Length> value is a binary value and has the value '2' indicating the total length in octets of the <Queued Floor Requests Purpose> value item.\nThe < Queued Floor RequestsPurpose> value is a 16-bit binary value with the following values:\n'0'\tCancel Request\n'1'\tCancel Result\n'2'\tCancel Notification\nAll other values are reserved for future use.\nThe List of Queued Users field contains a list of MCPTT IDs of MCPTT users.\nTable 8.2.3.24-1 describes the coding of the List of Queued Users field.\n\nTable 8.2.3.24-1: List of Queued Users field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|List of Queued|     List of Queued Users        |  No of Queued|\n|Users field ID|      length                     |  Users       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+\n: Queued User ID length         | Queued User ID                :\n: value                         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                                                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Queued User ID length         |  Queued User ID               :\n| value                         |                               :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+\n: Queued User ID(continued)                                     :\n:                                                               |\n|                                        Padding                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <List of Queued Users field ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <List of Queued Users length> value is a binary value and has a value indicating the total length in octets of the <No of Queued Users> value, and one or more pair of <Queued User ID length> and <Queued User ID> value items except padding.\nNOTE: The receiver understands that the padding octets are not included in this length field and can calculate the number of padding bytes per the formula below.\nThe <No of Queued Users> value is a binary value that indicates the number of Queued User ID entries in the list.\nThe <Queued User ID length> value is a binary value that indicates the length in octets of the <Queued User ID> value item.\nThe <Queued User ID> value is coded as described in table 8.2.3.24-2.\nTable 8.2.3.24-2: ABNF syntax of string values of the <Queued User ID> value\nqueued-user-id = URI\n\nIf the length of the sum of all <Queued User ID length> values and all <Queued User ID> values is not (1 + multiple of 4) bytes, then the sum shall be padded to (1 + multiple of 4) bytes. The value of the padding bytes is set to zero. The padding bytes are ignored by the receiver.\nThe Queued Floor Requests Result field indicates the result of the Queued Floor Requestsmessage (Cancel Request).\nTable 8.2.3.25-1 describes the coding of the Queued Floor Requests Result field.\nTable 8.2.3.25-1: Queued Floor Requests Result field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Queued Floor    | Queued Floor     | Queued Floor             |\n| Requests        | Requests         | Requests                 |\n| Result field ID | Result length    | Result Value             |\n| value           |                  |                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Queued Floor Requests Result field ID> value is a binary value and shall be set according to table 8.2.3.1-2.\nThe <Queued Floor Requests Result length> value is a binary value and shall have the value '2' indicating the total length in octets of the <Queued Floor Requests Result> value item.\nThe <Queued Floor Requests Result Value> value is a 16-bit binary value with the following values:\n'0'\tSuccessfully removed the queued floor requests of all users specified in the List of Queued Users field in a message or all the queued floor requests from the floor request queue\n'1'\tNot authorized to remove the queued floor requests of all users specified in the List of Queued Users field in a message or all the queued floor requests from the floor request queue\n'2'\tThe floor request queue is already empty\n'3'\tThe queued floor requests of all users specified in the List of Queued Users field in a message do not exist in the floor request queue\n'4'\tUnable to remove some of the queued floor requests of the users specified in the List of Queued Users field in a message\n'5'\tThe queued floor requests of some of the users specified in the List of Queued Users field in a message do not exist in the floor request queue\n'255'\tUnknown reason\nAll other values are reserved for future use.\nThe Media Flow Control field is used to indicate to the floor control server whether the user wants to control reception of unicast media.\nTable 8.2.3.26-1 describes the coding of the Media Flow Control field.\nTable 8.2.3.26-1: Media Flow Control Indicator field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   Media Flow  |   Media Flow  |   Media Flow  |spare          |\n|   Control ID  |Control Length |   value       |               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Media Flow Control ID> value is a binary value and is set according to table 8.2.3.1-2.\nThe <Media Flow Control length> value is a binary value and has the value '2' indicating the total length in octets of the <Media Flow> value item and the spare bits.\nThe <Media Flow> value is an 8 bit bit-map named as shown in table 8.2.3.26-2:\nTable 8.2.3.26-2: Media Flow bit marking\n+-+-+-+-+-+-+-+-+\n|A|B|C|D|E|F|G|H|\n+-+-+-+-+-+-+-+-+\n\nThe bits have the following meaning:\nA\t=\tWhen set to '0', it indicates unicast media stop request. And when set to '1', it indicates unicast media resume request.\nBits B to H are set to zero.\nThe spare bits are set to zero.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.2.3.1-2: Floor control specific data fields",
                                    "table number": 5,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.2.3.21-3: Location type",
                                    "table number": 6,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.2.4\tFloor Request message",
                            "text_content": "The Floor Request message is a request from a floor participant to get permission to send media. The Floor Request message is used in the off-network mode and in the on-network mode. In the on-network mode the Floor Request message is only used over the unicast bearer.\nTable 8.2.4-1 shows the content of the Floor Request message.\nTable 8.2.4-1: Floor Request message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  SSRC of floor participant sending the Floor Request message  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   Floor Priority field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                       User ID field                           :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                     Track Info field                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Floor Indicator field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                       Functional Alias field                  :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                       Location field                          :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor participant sending the Floor Request message.\nThe content of the SSRC field is coded as specified in IETF RFC 3550 [3].\nFloor priority:\nThe Floor Priority field is coded as described in clause 8.2.3.2.\nUser ID:\nThe User ID field is used in off-network and in messages sent by a non-controlling function to a controlling function, and is coded as described in clause 8.2.3.8.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nFloor Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.15.\nFunctional Alias:\nThe Functional Alias field is coded as described in clause 8.2.3.19.\nLocation:\nThe Location field is coded as described in clause 8.2.3.21 and contains the location information of the requesting user.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.5\tFloor Granted message",
                            "text_content": "The Floor Granted message is sent by the floor control server to inform the requesting floor participant that it has been granted the permission to send media.\nThe Floor Granted message is used in the off-network mode and in the on-network mode. In the on-network mode the Floor Granted message is only used over the unicast bearer.\nTable 8.2.5-1 shows the content of the Floor Granted message.\nTable 8.2.5-1: Floor Granted message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           RTCP SSRC of sending floor control entity           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         Duration field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|            Audio SSRC of Granted Participant field            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      Floor Priority field                     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        User ID field                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Queue Size field                       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|             SSRC of queued floor participant field            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                     Queued User ID field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Queue Info field                       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Floor Indicator field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant. However, any set of Queue size field, SSRC of queued floor participant field, Queued User ID field and the Queue Info field shall be kept together.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carries the RTCP SSRC of the sending floor control entity for on-network and floor arbitrator for off-network.\nIn on-network, those RTCP SSRCs are defined by the receiving entity at session establishment within the SDPs as specified in clause 4.3.\nThe content of the SSRC field is coded as specified in IETF RFC 3550 [3].\nDuration:\nThe Duration field is coded as specified in clause 8.2.3.3.\nAudio SSRC of Granted Participant:\nThe Audio SSRC of Granted Participant field carries the SSRC value for Audio RTP stream of the user transmitting the media.\nThe Audio SSRC of Granted Participant is coded as specified in clause 8.2.3.X.\nFloor Priority:\nThe Floor Priority field contains the granted floor priority and is coded as specified in clause 8.2.3.2.\nUser ID:\nThe User ID field is used in off-network only. The User ID field carries the MCPTT ID of the floor participant granted the floor. The User ID field is coded as described in clause 8.2.3.8.\nQueue Size:\nThe Queue Size field is only applicable in off-network and contains the numbers of queued MCPTT clients in the MCPTT call.\nThe Queue Size field is coded as specified in clause 8.2.3.9.\nFor each waiting floor participant the following set of fields are included:\n1.\tthe SSRC of queued floor participant;\n2.\tthe Queued User ID field; and\n3.\tthe Queue info field.\nThe set occurs as many times as the <Queue size> value in the Queue size field.\nSSRC of queued floor participant:\nThe SSRC of queued floor participant is only applicable in off-network and carries the SSRC of the floor participant in the queue.\nThe content of the SSRC of queued floor participant is coded as the SSRC specified in IETF RFC 3550 [3].\nQueued User ID:\nThe Queued User ID field is only applicable in off-network and contains the MCPTT ID of the floor participant in the queue.\nThe Queued User ID field is coded as specified in clause 8.2.3.11.\nQueue Info:\nThe Queue Info field is only applicable in off-network and defines the queue position and granted floor priority in the queue.\nThe Queue Info field is coded as specified in clause 8.2.3.5.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling function. The coding of the Track Info field is described in clause 8.2.3.13.\nFloor Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.15.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.6\tFloor Deny message",
                            "text_content": "The Floor Deny message is sent as an action from the floor control server to the requesting floor participant to inform that the floor request was rejected.\nThe Floor Deny message is used in the off-network mode and in the on-network mode. In the on-network mode the Floor Deny message is only used over the unicast bearer.\nTable 8.2.6.1-1 shows the content of the Floor Deny message.\nTable 8.2.6.1-1: Floor Deny message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |            length             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|        SSRC of floor control server/floor arbitrator          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      Reject Cause field                       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       User ID field                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Floor Indicator field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor control server for on-network and floor arbitrator for off-network.\nThe content of the SSRC field is coded as specified in IETF RFC 3550 [3].\nReject Cause:\nThe Reject Cause field includes the reason for the rejecting the floor request and can be followed by a text-string explaining why the floor request was rejected. Therefore the length of the packet will vary depending on the size of the application dependent field.\nThe Reject Cause field contains:\n1.\ta <Reject Cause> value; and\n2.\ta <Reject Phrase> value.\nAvailable <Reject Cause> values are listed in clause 8.2.6.2. The Reject Cause field is coded as described in clause 8.2.3.4.\nUser ID:\nThe User ID field is used in off-network only. The User ID carries the MCPTT ID of the requesting floor participant to which the Floor Deny message is sent.\nThe User ID field is coded as specified in clause 8.2.3.8.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nFloor Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.15.\nCause #1 - Another MCPTT client has permission\nThe <Reject cause> value set to '1' indicates that another MCPTT user has permission to send a media.\nCause #2 - Internal floor control server error\nThe <Reject cause> value set to '2' indicates that the floor control server cannot grant the floor request due to an internal error.\nCause #3 - Only one participant\nThe <Reject cause> value set to '3' indicates that the floor control server cannot grant the floor request, because the requesting party is the only participant in the MCPTT session.\nCause #4 - Retry-after timer has not expired\nThe <Reject cause> value set to '4' indicates that the floor control server cannot grant the floor request, because timer T9 (Retry-after) has not expired after permission to send media has been revoked.\nCause #5 - Receive only\nThe <Reject cause> value set to '5' indicates that the floor control server cannot grant the floor request, because the requesting party only has receive privilege.\nCause #6 - No resources available\nThe <Reject cause> value set to '6' indicates that the floor control server cannot grant the floor request due to congestion.\nCause #7 – Queue full\nThe <Reject cause> value set to '7' indicates that the floor control server cannot queue the floor request, because the queue is full.\nCause #255 - Other reason\nThe <Reject cause> value set to '255' indicates that the floor control server does not grant the floor request due to the floor control server local policy.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.7\tFloor Release message",
                            "text_content": "The Floor Release message is sent as an action from the floor participant to the floor control server to inform that the floor can be released.\nThe Floor Release message can also be sent if the floor participant has a request in the floor request queue. In this case, the Floor Release message is sent to cancel the floor request in the queue.\nThe Floor Release message is used in the off-network mode and in the on-network mode. In the on-network mode the Floor Release message is only used on the unicast bearer.\nTable 8.2.7-1 shows the content of the Floor Release message.\nTable 8.2.7-1: Floor Release message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   SSRC of floor participant with permission to send media     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       User ID field                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Floor Indicator field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor participant with permission to send media.\nThe content of the SSRC field is coded as specified in IETF RFC 3550 [3].\nUser ID:\nThe User ID field is used in off-network only. The User ID field carries the MCPTT ID of the floor participant sending the floor release message.\nThe User ID field is coded as specified in clause 8.2.3.8.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nFloor Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.15.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.8\tFloor Idle message",
                            "text_content": "The Floor Idle message is sent as an action from the floor control server to the floor participant indicating that no floor participant has permission to send media.\nThe Floor Idle message is only used in the on-network mode. The Floor Idle message is used  over both the unicast and MBMS bearer.\nTable 8.2.8-1 shows the content of the Floor Idle message.\nTable 8.2.8-1: Floor Idle message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length=2             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      SSRC of floor control server             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                 Message Sequence Number field                 |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Floor Indicator field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor control server.\nThe content of the SSRC field is coded as specified in IETF RFC 3550 [3].\nMessage Sequence Number:\nThe Message Sequence Number field is coded as specified in to clause 8.2.3.10.\nTrack Info:\nThe Track Info field shall be included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nFloor Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.15.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.9\tFloor Taken message",
                            "text_content": "The Floor Taken message is sent as an action from the floor control server to inform non-requesting floor participant(s) that someone has been granted permission to send media.\nThe Floor Taken message is used in the off-network mode and in the on-network mode. In the on-network mode the Floor Taken message is used over both the unicast and MBMS bearer.\nTable 8.2.9-1 shows the content of the Floor Taken message.\nTable 8.2.9-1: Floor Taken message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |           length              |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           RTCP SSRC of sending floor control entity           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                  Granted Party's Identity field               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               Permission to Request the Floor field           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       User ID field                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                 Message Sequence Number field                 |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Floor Indicator field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|            Audio SSRC of Granted Participant field            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Functional Alias field                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|            List of Granted Users field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|       List of Audio SSRCs of Granted Participants field       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|            List of Functional Aliases field                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Location field                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|        List of Locations of granted floor participants field  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the RTCP SSRC of the sending floor control entity for on-network and floor arbitrator for off-network.\nIn on-network, those RTCP SSRCs are defined by the receiving entity at session establishment within the SDPs as specified in clause 4.3.\nThe content of the SSRC field is coded as specified in IETF RFC 3550 [3].\nGranted Party's Identity:\nThe Granted Party's Identity field is coded as specified in clause 8.2.3.6.\nPermission to request the floor:\nThe Permission to Request the Floor field is coded as specified in clause 8.2.3.7.\nUser ID:\nThe User ID field is used in off-network only. The User ID field carries the MCPTT user ID of the floor participant sending the Floor Taken message.\nThe User ID field is coded as specified in clause 8.2.3.8.\nMessage Sequence Number:\nThe Message Sequence Number field is coded as specified in to clause 8.2.3.10.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nFloor Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.15.\nAudio SSRC of Granted Participant:\nThe Audio SSRC of Granted Participant field carries the SSRC value for Audio RTP stream of the user transmitting the media.\nThe Audio SSRC of Granted Participant is coded as specified in clause 8.2.3.X. The field is not used in multi-talker control scenario.\nFunctional Alias:\nThe Functional Alias field contains the functional alias of the granted party and is coded as specified in clause 8.2.3.19.\nList of Granted Users:\nThe List of Granted Users field is used in a multi-talker scenario. The List of Granted Users field is coded as specified in clause 8.2.3.17 and indicates the list of users that have permission to send media.\nList of Audio SSRCs of Granted Participants:\nThe List of Audio SSRCs of Granted Participants field is used in a multi-talker scenario.\nThe List of Audio SSRCs of Granted Participants field carries the SSRC values for Audio RTP streams of the users transmitting the media.\nThe List of Audio SSRCs of Granted Participants is coded as specified in clause 8.2.3.18. The list contains the Audio SSRCs of the granted participants in the same order as the corresponding user IDs in the List of Granted Users field.\nList of Functional Aliases:\nThe List of Functional Aliases field is used in multi-talker scenario. The List of Functional Aliases field is coded as specified in clause 8.2.3.20 and indicates the list of Functional Aliases that have permission to send media. The list contains the Functional Aliases in the same order as the corresponding user IDs in the List of Granted Users field.\nLocation:\nThe Location field is coded as specified in clause 8.2.3.21 and contains the location of the granted party.\nList of Locations of granted floor participants:\nThe List of Locations field is used in a multi-talker scenario. The List of Locations of granted floor participants is coded as specified in clause 8.2.3.22. The list contains the Locations of granted floor participants in the same order as the corresponding user IDs in the List of Granted Users field.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.10\tFloor Revoke message",
                            "text_content": "The Floor Revoke message is sent from the floor control server to the floor participant with the permission to send media to inform that the permission to send media is revoked.\nThe Floor Revoke message is used in the on-network mode. The Floor Revoke message is only used over the unicast bearer.\nTable 8.2.10.1-1 shows the content of the Floor Revoke message.\nTable 8.2.10.1-1: Floor Revoke message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of floor control server                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Reject Cause value                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Floor Indicator field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor control server.\nThe content of the SSRC field is coded as specified in IETF RFC 3550 [3].\nReject Cause:\nThe Reject Cause field for the Floor Revoke message includes <Reject Cause> cause value in the Reject Cause field explaining why the floor control server wants the floor participant to stop sending media and can be followed by additional information. Therefore the length of the packet can vary depending on the value of the rejection cause.\nThe coding of the <Reject Cause> value is specified in clause 8.2.3.4.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nFloor Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.15.\nCause #1 – Only one MCPTT client\nThe <Reject Cause> value set to '1' indicates that the MCPTT client is the only MCPTT client in the MCPTT session or the only participant connected to a floor control server. No additional information included.\nCause #2 – Media burst too long\nThe <Reject Cause> value set to '2' indicates that the MCPTT User has talked too long (e.g., the stop-talking timer has expired). No additional information included.\nCause #3 - No permission to send a Media Burst\nThe <Reject Cause> value set to '3' indicates that the MCPTT client does not have permission to send media. No additional information is included.\nCause #4 - Media Burst pre-empted\nThe <Reject Cause> value set to '4' indicates that the MCPTT client 's permission to send a media is being pre-empted. No additional information is included.\nCause #6 - No resources available\nThe <Reject Cause> value set to '6' indicates that the floor control server can no longer grant MCPTT client to send media due to congestion. No additional information is included.\nCause #255 – Other reason\nThe <Reject Cause> value set to '255' indicates that the floor control server can no longer grant MCPTT client to send media due to the floor control server local policy. No additional information is included.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.11\tFloor Queue Position Request message",
                            "text_content": "The Floor Queue Position Request message is a request from a floor participant to get information about the floor participant's position in the floor request queue.\nThe Floor Queue Position Request message is used in the off-network mode and in the on-network mode. In the on-network mode the Floor Queue Position Request message is only used over the unicast bearer.\nTable 8.2.11-1 shows the content of the Floor Queue Position Request message.\nTable 8.2.11-1: Floor Queue Position Request message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  SSRC of floor participant requesting floor queue status info |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       User ID field                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor participant that is requesting information about its position in the floor request queue.\nThe SSRC field is coded as specified in IETF RFC 3550 [3].\nUser ID:\nThe User ID field is used in off-network only. The User ID field carries the MCPTT user ID of the floor participant sending the Floor Queue Position Request message.\nThe User ID field is coded as specified in clause 8.2.3.8.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.12\tFloor Queue Position Info message",
                            "text_content": "The Floor Queue Position Info message is sent by the floor control server to notify the floor participant of its position in the floor request queue.\nThe Floor Queue Position Info message is used in off-network and in on-network mode. In the on-network mode the Floor Queue Position Info message is only used over the unicast bearer.\nTable 8.2.12-1 shows the content of the Floor Queue Position Info message.\nTable 8.2.12-1: Floor Queue Position Info message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|       SSRC of floor control server/floor arbitrator           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        User ID field                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|             SSRC of queued floor participant field            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                     Queued User ID field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Queue Info field                       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Floor Indicator field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor control server for on-network and floor arbitrator for off-network.\nThe SSRC field is coded as specified in IETF RFC 3550 [3].\nUser ID:\nThe User ID field is used in off-network only. The User ID field carries the MCPTT ID of the floor participant sending the Floor Queue Position Info message.\nThe User ID value is coded as specified in clause 8.2.3.8.\nSSRC of queued floor participant:\nThe SSRC of queued floor participant is only applicable in off-network and shall carry the SSRC of the queued floor participant.\nThe SSRC field shall be coded as specified in clause 8.2.3.16.\nQueued User ID:\nThe Queued User ID field is used in off-network only. The Queued User ID field carries the MCPTT ID of the queued floor participant.\nThe Queued User ID value is coded as specified in clause 8.2.3.8.\nQueue Info:\nThe Queue Info field defines the queue position and granted floor priority in the queue.\nThe Queue Info field is coded as specified in clause 8.2.3.5.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nFloor Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.15.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.13\tFloor Ack message",
                            "text_content": "The Floor Ack message is used to acknowledge any floor control message that included the first bit (marked as x in the subtype) set to 1 (see clause 8.2.2).\nThe Floor Ack message is only used in the on-network mode. The Floor Ack message is only used over the unicast bearer.\nTable 8.2.13-1 shows the content of the Floor Ack message.\nTable 8.2.13-1: Floor Ack message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      SSRC of the sender                       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Source field                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Message Type field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Location field                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the source identified by the Source field.\nThe SSRC field is coded as specified in IETF RFC 3550 [3].\nSource:\nThe Source field is coded as specified in clause 8.2.3.12.\nMessage Type:\nThe Message Type field contains the floor control message that is acknowledged by the Floor Ack message. The Message Type field is coded as specified in clause 8.2.3.14.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nLocation:\nThe Location field is coded as described in clause 8.2.3.21 and contains the location information of the granted floor user. This field shall be omitted when location information of the granted floor user is not allowed by the granted floor user's MCPTT profile, or alternatively may be included with the location type field set to '0' (Not provided).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.14\tFloor Release Multi Talker message",
                            "text_content": "The Floor Release Multi Talker message is sent from the floor control server to the floor control participants to indicate that the indicated user has completed media transfer and floor is released.\nThe Floor Release Multi Talker message is only used in the on-network mode. The Release Multi Talker message is used over both the unicast and MBMS bearer.\nTable 8.2.14-1 shows the content of the Floor Release Multi Talker message.\nTable 8.2.14-1: Floor Release Multi Talker message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         SSRC                                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       User ID field                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Floor Indicator field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor control server for on-network and floor arbitrator for off-network.\nThe content of the SSRC field is coded as specified in IETF RFC 3550 [3].\nUser ID:\nThe User ID carries the MCPTT ID of the floor participant releasing the floor.\nThe User ID field is coded as specified in clause 8.2.3.8.\nFloor Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.15.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.15\tQueued Floor Requests message",
                            "text_content": "The Queued Floor Requests message represents a set of purposes (e.g. Cancel request, Cancel result, Cancel notification) that supports an authorized user (e.g dispatcher) to cancel the queued floor request of other MCPTT users; to notify other MCPTT users of their queued requests is being cancelled and to the originator of the request to indicate the status of cancellation of queued floor request.\nThe Queued Floor Requests message is used in the on-network mode. In the on-network mode the Queued Floor Requests message is only used over the unicast bearer.\nTable 8.2.15-1 shows the content of the Queued Floor Requests message.\nTable 8.2.15-1: Queued Floor Requests message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  SSRC of floor participant/floor control server/arbitrator    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Functional Alias field                     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                  List of Queued Users field                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|              Requested Party's Identity field                 |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|             Queued Floor Requests Purpose field               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               Queue Floor Rquests Result field                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields is irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor participant / floor control server / floor arbitrator.\nIf the message is for cancellation of a queued floor request, then the SSRC shall be that of the floor participant who is requesting cancellation.\nIf the message is for notifying the cancellation of a queued floor request to the other floor participants or is a response to a message for cancellation of a queued floor request originated by a floor participant, then the SSRC shall be that of the floor control server / floor arbitrator.\nThe SSRC field is coded as specified in IETF RFC 3550 [3].\nFunctional Alias:\nThis field shall be included if the message is for a cancellation of a queued floor request from a floor participant or is a response to a message for cancellation of a queued floor request originated by a floor participant. The Functional Alias field is coded as described in clause 8.2.3.19.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nList of Queued Users:\nThe List of Queued Users field is used only in sending a message for cancellation of a queued floor request of other MCPTT users and for sending a response message to the cancellation of a queued floor request. The List of Queued Users field is coded as specified in clause 8.2.3.24 and indicates the list of users whose request for permission to send media is queued.\nIn the case of sending a  Queued Floor Requests message with a Cancel Result, the List of Queued Users field indicates the list of users whose queued floor requests were not possible to remove and their queued requests still exist in the active floor request queue.\nIf the request is for clearing all the users queued floor requests, this field is neither included in the request nor the response.\nRequested Party's Identity field:\nThe Requested Party's Identity field shall be added only when the Floor Queue Cancel message is originated by a floor participant user. This field shall not be added if the Floor Queue Cancel message is originated by the floor control server (due to local policies). This field is also included when the Queued Floor Requests message is a response to the cancellation of a queued floor request originated by a floor participant. The Requested Party's Identity field is coded as specified in clause 8.2.3.8.\nQueued Floor Requests Purpose field:\nThe Queued Floor Requests Purpose field is coded as specified in clause 8.2.3.23.\nQueued Floor Request Result field:\nThe Queued Floor Request Result field is included only when sending a response message to the cancellation of a queued floor request originated by a floor participant. The Queued Floor Request Result field is coded as specified in clause 8.2.3.25.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.16\tUnicast Media Flow Control message",
                            "text_content": "The Unicast Media Flow Control message is sent from the floor participant to the floor control server to control reception of unicast media flow of the designated communication. The floor participant may use this message to indicate that the unicast media flow of the designated communication does not need to be sent to the MCPTT client. The floor participant may also use this message to request that the unicast media flow of the designated communication is to be sent to the MCPTT client, if it was stopped previously.\nThe Unicast Media Flow Control message is only used in the on-network mode. The Unicast Media Flow Control message is only used over the unicast bearer.\nTable 8.2.16-1 shows the content of the Unicast Media Flow Control message.\nTable 8.2.16-1: Unicast Media Flow Control message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|      SSRC of the floor participant sending the message        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPT                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       User ID field                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Track Info field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|              Media Flow Control Indicator field               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype is coded according to table 8.2.2-1.\nLength:\nThe length is coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field carries the SSRC of the floor control server for on-network and floor arbitrator for off-network.\nThe content of the SSRC field is coded as specified in IETF RFC 3550 [3].\nUser ID:\nThe User ID carries the MCPTT ID of the floor participant releasing the floor.\nThe User ID field is coded as specified in clause 8.2.3.8.\nTrack Info:\nThe Track Info field is included when an MCPTT call involves a non-controlling MCPTT function. The coding of the Track Info field is described in clause 8.2.3.13.\nMedia Flow Control Indicator:\nThe Floor Indicator field is coded as described in clause 8.2.3.26.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.3\tPre-established session call control",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.3.1\tIntroduction",
                            "text_content": "The pre-established session call control messages shall be coded as described in clause 8.1.2 where the pre-established session call control message is part of the application-dependent data.\nFor the pre-established session call control protocol the ASCII name string shall be: MCPC (Mission Critical Pre-established session call Control).\nA list of pre-established session call control messages can be found in the clause 8.3.2.\nPre-established session call control specific fields are specified in clause 8.3.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.3.2\tPre-established session call control message",
                            "text_content": "The table 8.3.2-1 provides a list of call control messages.\nTable 8.3.2-1: Pre-established session call control specific messages\n\nFor some messages the first bit (marked as x in the subtype) can be used to indicate if the sender wants to have an acknowledgment. The x is coded as follows:\n'0'\tAcknowledgment is not required\n'1'\tAcknowledgment is required\nNOTE:\tWhether a message needs to be acknowledged or not is described in clause 9.\nIf an acknowledgment is required, the Acknowledge message is used to acknowledge the message.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.3.2-1: Pre-established session call control specific messages",
                                    "table number": 7,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.3.3\tPre-established session call control fields",
                            "text_content": "This clause describes the pre-established session call control specific data fields.\nThe pre-established session call control specific data fields are contained in the application-dependent data of the pre-established session call control message. The pre-established session call control specific data fields follow the syntax specified in clause 8.1.3.\nTable 8.3.3.1-1: Void\nTable 8.3.3.1-2 lists the available data fields including the assigned field ID.\nTable 8.3.3.1-2: Pre-established session call control data fields\n\nThe following clauses describe the coding of each data field.\nThe Media Streams field describes which media streams to use in the session. At the minimum one <Media Stream> value shall be included. The <Control Channel> value item is only needed when floor control applies during the MCPTT call.\nTable 8.3.3.2-1 describes the coding of the Media Streams field.\nTable 8.3.3.2-1: Media Streams field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Media Stream   |Media Streams  |Media Stream   |Control Channel|\n|field ID value |length value   |value          |value          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Media Streams field ID> value is a binary value and shall be set according to table 8.3.3.1-2.\nThe <Media Streams length> value shall is a binary value indicating the length in octets of the <Media Stream> value and <Control channel> value items.\nThe <Media Stream> value shall consist of 8 bit parameter giving the number of the\" m=audio\" m-line negotiated in the pre-established session.\nThe <Control Channel> value shall consist of 8 bit parameter giving the number of the \"m=application\" m-line negotiated in the pre-established session. The <Control Channel> value is set to \"0\" when no floor control is used during the session.\nThe MCPTT Session Identity field contains the MCPTT session identity and the session type.\nTable 8.3.3.3-1 describes the coding of the MCPTT Session Identity field.\nTable 8.3.3.3-1: MCPTT Session Identity field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|MCPTT session  |MCPTT session  |Session Type   |MCPTT Session  |\n|identity field |identity field |               |Identity       |\n|ID             |length         |               |               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               :\n:                                            (Padding)          :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <MCPTT Session Identity field ID> value is a binary value and shall be set according to table 8.3.3.1-2.\nThe <MCPTT Session Identity length> value shall is a binary value indicating the length in octets of the <Session Type> value and <MCPTT Session Identity> value items.\nThe <Session Type> value is coded as follows:\n-\t00000000 = no session type\n-\t00000001 = private\n-\t00000011 = prearranged\n-\t00000100 = chat\nAll other values are reserved for future use.\n<MCPTT Session Identity> value contains a SIP URI, which identifies the MCPTT session between the MCPTT client and the controlling MCPTT function; see 3GPP TS 24.379 [2] clause 4.5. The <MCPTT Session Identity> value is coded specified in table 8.3.3.3-2.\nTable 8.3.3.3-2: ABNF syntax of string values of the <MCPTT Session Identity> value\nmcptt-session-identity = SIP-URI\n\nIf the length of the <MCPTT Session Identity> value is not (1 + multiple of 4) bytes, the <MCPTT Session Identity> value shall be padded to (1 + multiple of 4) bytes. The value of the padding bytes should be set to zero. The padding bytes shall be ignored.\nThe Warning Text field contains the text string returned by the controlling MCPTT function in responses to a SIP INVITE request as described in 3GPP TS 24.379 [2] clause 4.4.\nTable 8.3.3.4-1 describes the coding of the Warning Text field.\nTable 8.3.3.4-1: Warning Text field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Warning Text   |Warning Text   |Warning Text                   |\n|field ID       |length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                               (Padding)       :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Warning Text field ID> value is a binary value and shall be set according to table 8.3.3.1-2.\nThe <Warning Text length> value is a binary value indicating the length in octets of the <Warning Text> value item excluding any padding octets.\nThe <Warning Text> value shall be coded as specified in 3GPP TS 24.379 [2] table 4.4.2-1.\nEXAMPLE:\tIf the Warning: 399 \"107  User not authorised to make private calls\" is received, \"107 User not authorised to make private calls\" is included as the <Warning Text> value.\nIf the length of the <Warning Text> value is not (2 + multiple of 4) bytes, the <Warning Text> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes should be set to zero. The padding bytes shall be ignored.\nThe MCPTT Group Identity field contains a SIP URI identifying the group that an MCPTT client is invited to.\nTable 8.3.3.5-1 describes the coding of the MCPTT Group Identity field.\nTable 8.3.3.5-1: MCPTT Group Identity field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|MCPTT Group    |MCPTT Group    |MCPTT Group Identity           |\n|identity field |identity field |                               |\n|ID             |length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                            (Padding)          :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <MCPTT Group Identity field ID> value is a binary value and shall be set according to table 8.3.3.1-2.\nThe <MCPTT Group Identity length> value is a binary value indicating the length in octets of the <MCPTT Group Identity> value item except padding.\n<MCPTT Group Identity> value contains the MCPTT group identity or the temporary MCPTT group identity as defined in 3GPP TS 24.379 [2]. The <MCPTT Group Identity> value shall be coded as specified in the table 8.3.3.5-2.\nTable 8.3.3.5-2: ABNF syntax of string values of the <MCPTT Group Identity> value\nmcptt-group-identity = URI\n\nIf the length of the <MCPTT Group Identity> value is not (2 + multiple of 4) bytes, the <MCPTT Group Identity> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes should be set to zero. The padding bytes shall be ignored.\nThe Answer State field indicates if invited MCPTT users are invited using automatic or manual commencement mode.\nTable 8.3.3.6-1 describes the coding of the Answer State field.\nTable 8.3.3.6-1: Answer State field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Answer State   |Answer State   |Answer State value             |\n|field ID value |length value   |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Answer State field ID> value is a binary value and shall be set according to table 8.3.3.1-2.\nThe <Answer State length> value is a binary value and shall have the value '2' indicating the total length in octets of the <Answer State> value item.\nThe <Answer State> value is a 16-bit binary value with the following values:\n'0'\tUnconfirmed\n'1'\tConfirmed\nAll other values are reserved for future use.\nThe Inviting MCPTT User Identity field contains the MCPTT ID identifying the inviting MCPTT user.\nTable 8.3.3.7-1 describes the coding of the Inviting MCPTT User Identity field.\nTable 8.3.3.7-1: Inviting MCPTT User Identity field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Inviting MCPTT |Inviting MCPTT |Inviting MCPTT User Identity   |\n|User Identity  |User Identity  |                               |\n|field ID       |length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                             (Padding)         :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Inviting MCPTT User Identity field ID> value is a binary value and shall be set according to table 8.3.3.1-2.\nThe <Inviting MCPTT User Identity length> value is a binary value indicating the length in octets of the <MCPTT Group Identity> value item except padding.\nThe <Inviting MCPTT User Identity> value contains the MCPTT ID of the inviting MCPTT user. The <Inviting MCPTT User Identity> value shall be coded as specified in the table 8.3.3.7-2. The MCPTT ID is specified in 3GPP TS 24.379 [2].\nTable 8.3.3.7-2: ABNF syntax of string values of the <Inviting MCPTT User Identity> value\ninviting-mcptt-user-identity = URI\n\nIf the length of the <Inviting MCPTT User Identity> value is not (2 + multiple of 4) bytes, the <Inviting MCPTT User Identity> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes should be set to zero. The padding bytes shall be ignored.\nThe Reason Code field contains the answer to a pre-established call control message.\nTable 8.3.3.8-1 describes the coding of the Reason Code field.\nTable 8.3.3.8-1: Reason Code field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Reason Code    |Reason Code    |Reason Code  value             |\n|field ID value |length value   |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Reason Code field ID> value is a binary value and shall be set according to table 8.3.3.1-2.\nThe <Reason Code length> value is a binary value and shall have the value '2' indicating the total length in octets of the <Reason Code> value item.\nThe <Reason Code> value is a 16-bit binary value with the following values:\n'0'\tAccepted\n'1'\tBusy\n'2'\tNot Accepted\n'3'\tAuthentication of the MIKEY-SAKKE I_MESSAGE failed\n'4'\tIntegrity protection check failed\n'5'\tDecrypting XML content failed\nAll other values are reserved for future use.\nWhen a pre-establish session control message is received the MCPTT client and the participating MCPTT function shall:\n1.\tignore the whole message, if the subtype is unknown;\n2.\tignore the unspecified fields in the message (e.g. specified in future version of the pre-establish session control protocol); and\n3.\tignore the syntactically incorrect optional fields.\nThe PCK I_MESSAGE field is a MIKEY payload containing a MIKEY-SAKKE I_MESSAGE as defined in IETF RFC 6509 [17] and as received in the SIP INVITE message. The PCK I_MESSAGE contains the PCK and PCK-ID (see 3GPP TS 24.379 [2] clause 4.7).\nTable 8.3.3.10-1 describes the coding of the PCK I_MESSAGE field.\nTable 8.3.3.10-1: PCK I_MESSAGE field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|PCK I_MESSAGE  |PCK I_MESSAGE                  |PCK I_MESSAGE  |\n|field ID value |field length value             |field value    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|               :\n:                                            (Padding)          :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <PCK I_MESSAGE field ID> value is a binary value and shall be set according to table 8.3.3.1-2.\nThe <PCK I_MESSAGE field length> value is a binary value indicating the length in octets of the <PCK I_MESSAGE field> value item.\nThe <PCK I_MESSAGE field> value contains the MIKEY-SAKKE I_MESSAGE for PCK as received in the SIP INVITE message.\nThe Reason Cause field contains the disconnect or reject reason for the pre-established call. The values can be subset from the Reason Code field contains the answer to a pre-established call control message other than 'Accepted' Reason code value as described in clause 8.3.3.8 or any other values.\nTable 8.3.3.11-1 describes the coding of the Reason Cause field.\nTable 8.3.3.11-1: Reason Cause field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Reason Cause   |Reason Cause   |Reason Cause value             |\n|field ID value |length value   |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Reason Cause field ID> value is a binary value and shall be set according to table 8.3.3.1-2.\nThe <Reason Cause length> value is a binary value and shall have the value '2' indicating the total length in octets of the <Reason Cause> value item.\nThe <Reason Cause> value is a 16-bit binary value with the following values:\n'0'\tBusy\n'1'\tauthentication of the MIKEY-SAKKE I_MESSAGE failed\n'2'\tintegrity protection check failed\n'3'\tunable to decrypt XML content\n'4'\tinactivity timer expired\n'5'\tthere are only one or no participants in the MCPTT call\n'6'\tthe minimum number of affiliated MCPTT group members is not present\n'7'\tgroup call timer expired\n'8'\tthe MCPTT session has lasted longer than the maximum duration of a private call\n'9'\tmedia bearer establishment failed and call ended\n'10'\tmedia bearer establishment failed and call continuesNOTE:\tReason cause '10' can be used when the specific participant’s call leg is disconnected due to bearer issue, however the call continues with the other participants (e.g. Group call). The impacted participant may try to rejoin the ongoing call.\nAll other values are reserved for future use.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.3.3.1-2: Pre-established session call control data fields",
                                    "table number": 8,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.3.4\tConnect message",
                            "text_content": "The Connect message is sent by the participating MCPTT function on the originating side to the MCPTT client to confirm the establishment of an MCPTT call or sent on the terminating side to initiate an MCPTT call. The Connect message is only used in the on-network mode and only sent over the unicast bearer.\nTable 8.3.4-1 shows the content of the Connect message.\nTable 8.3.4-1: Connect message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          Length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of participating MCPTT function            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   MCPTT Session Identity field                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    MCPTT Group Identity field                 |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      Media Streams field                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      Warning Text field                       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      Answer State field                       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                 Inviting MCPTT User Identity field            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       PCK I_MESSAGE field                     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.3.2-1.\nLength:\nThe length shall be coded as specified in to clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the participating MCPTT function.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nMCPTT Session Identity:\nThe MCPTT Session Identity field is coded as described in clause 8.3.3.3.\nMCPTT Group Identity:\nThe MCPTT Group Identity field is coded as described in clause 8.3.3.5.\nMedia Streams:\nThe Media Streams field is coded as described in clause 8.3.3.2.\nWarning Text:\nThe Warning Text field is coded as described in clause 8.3.3.4.\nAnswer State:\nThe Answer State field is coded as described in clause 8.3.3.6.\nWhen the Answer State field is not included the value \"confirmed\" shall be assumed.\nInviting MCPTT User Identity:\nThe Inviting MCPTT User Identity field is coded as described in clause 8.3.3.5.\nWhen the inviting MCPTT user requested privacy, the <sip:anonymous@invalid.invalid> identity shall be used.\nPCK I_MESSAGE:\nThe PCK I_MESSAGE is used to transport the PCK and PCK-ID for use in private call.\nThis field is used when the terminating participating MCPTT function sends the Connect message to the terminating client for a private call.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.3.5\tDisconnect message",
                            "text_content": "Table 8.3.5-1 shows the content of the Connect message.\nTable 8.3.5-1: Disconnect message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          Length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of participating MCPTT function            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   MCPTT Session Identity field                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                     Reason cause field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.3.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the participating MCPTT function.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nMCPTT Session Identity:\nThe MCPTT Session Identity field is coded as described in clause 8.3.3.3.\nReason Cause:\nThe Reason Cause field is coded as described in clause 8.3.3.11.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.3.6\tAcknowledge message",
                            "text_content": "Table 8.3.6-1 shows the content of the Acknowledge message.\nTable 8.3.6-1: Acknowledge message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          Length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    SSRC of floor participant                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCPC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Reason Code field                       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words the order of the fields are irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.3.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the floor participant.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nReason Code:\nThe Reason Code field is coded as described in clause 8.3.3.8.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.4\tMBMS subchannel control",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.4.1\tIntroduction",
                            "text_content": "The MBMS subchannel control messages shall be coded as described in clause 8.1.2 where the MBMS subchannel control message is part of the application-dependent data.\nFor the MBMS subchannel control protocol the ASCII name string shall be: MCMC.\nThe list of MBMS subchannel control messages can be found in the clause 8.4.2.\nThe MBMS subchannel control specific fields are specified in clause 8.4.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.4.2\tMBMS subchannel control messages",
                            "text_content": "Table 8.4.2-1 provides a list of MBMS subchannel control protocol messages.\nTable 8.4.2-1: MBMS subchannel control protocol messages\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.4.2-1: MBMS subchannel control protocol messages",
                                    "table number": 9,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.4.3\tMBMS subchannel control specific fields",
                            "text_content": "This clause describes the MBMS subchannel control specific data fields.\nThe MBMS subchannel control specific data fields are contained in the application-dependent data of the MBMS subchannel control message. The MBMS subchannel control specific data fields follow the syntax specified in clause 8.1.3.\nTable 8.4.3.1-1: Void\nTable 8.4.3.1-2 lists the available fields including the assigned Field ID.\nTable 8.4.3.1-2: MBMS subchannel control specific data fields\n\nThe MCPTT Group ID field contains a SIP URI identifying the MCPTT group for which media and floor control messages are going to be broadcasted over a MBMS subchannel.\nThe MCPTT Group ID field is coded as the MCPTT Group Identity field specified in clause 8.3.3.5.\nThe MBMS Subchannel field describes which MBMS subchannel to use for media and for floor control.\nTable 8.4.3.3-1 describes the coding of the MBMS Subchannel field.\nTable 8.4.3.3-1: MBMS Subchannel field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|MBMS Subchannel|MBMS Subchannel|Audio  |Floor  |IP     | spare |\n|field ID value |length value   |m-line |m-line |Version|       |\n|               |               |Number |Number |       |       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                  Floor control Port Number                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                     Media Port Number                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                        IP Address                             :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <MBMS Subchannel field ID> value is a binary value and shall be set according to table 8.4.3.1-2.\nThe <MBMS Subchannel length> value is a binary value indicating the total length in octets of the <Audio m-line Number> value, <IP Version> value, spare, <Port Number> value and <IP address> items.\nThe <Audio m-line Number> value shall consist of 4 bit parameter giving the number of the\" m=audio\" m-line in the SIP MESSAGE request announcing the MBMS bearer described in 3GPP TS 24.379 [2].\nThe <Floor m-line Number> value shall consist of 4 bit parameter giving the number of the \"m=application\" m-line in the SIP MESSAGE request announcing the MBMS bearer described in 3GPP TS 24.379 [2]. The <Floor m-line Number> value is set to \"0\" when the same subchannel is used for media and for floor control.\nThe <IP version> value indicates the IP version:\n'0'\tIP version 4\n'1'\tIP version 6\nAll other values are reserved for future use.\nThe \"spare\" 4 bits shall be set to \"0000\".\nThe <Floor control Port Number> value is a 32-bit binary value giving the port to be used if the<Floor m-line Number> value is greater than '0'. If the <Floor m-line Number> value is equal to '0', the <Floor control Port Number> value is not included in the MBMS Subchannel field.\nThe <Media Port Number> value is a 32-bit binary value giving the port to be used. The <Media Port Number> value is always present in the MBMS Subchannel field.\nThe <IP Address> value is:\n1.\ta 32 bit binary value containing the IP v4 address if the <IP version> indicates that the <IP Address> value is a IP v4 Address; or\n2.\tfour 32-bit words that together forms a 128 bit binary value representing the IP v6 address, if the <IP version> indicates that the <IP Address> value is a IP v6 Address\nTable 8.4.3.4-1 describes the coding of the TMGI field.\nTable 8.4.3.4-1: TMGI field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|TMGI           |TMGI           |TMGI                           |\n|ID             |length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                            (Padding)          :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <TMGI field ID> value is a binary value and shall be set according to table 8.4.3.1-2.\nThe <TMGI length> value is a binary value indicating the length in octets of the <TMGI> value item except padding.\nThe <TMGI> value is coded as described in 3GPP TS 24.008 [11] clause 10.5.6.13 excluding the Temporary Mobile Group Identity IEI and Length of Temporary Mobile Group Identity contents (octet 1 and octet 2 in 3GPP TS 24.008 [11] clause 10.5.6.13).\nIf the length of the <TMGI> value is not (2 + multiple of 4) bytes, the <TMGI> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes should be set to zero. The padding bytes shall be ignored.\nTable 8.4.3.6-1 describes the coding of the Monitoring State field.\nTable 8.4.3.6-1: Monitoring State field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Monitoring     |length=1       |Monitoring     |Spare          |\n|State ID       |               |State          |               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Monitoring State field ID> value is a binary value and shall be set according to table 8.4.3.1-2.\nThe <Monitoring State length> value is a binary value indicating the length in octets of the <Monitoring State> value item.\nThe <Monitoring State> value is a binary value where the following values are defined:\n'0'\tMonitoring is inactive\n'1'\tMonitoring is active\nAll other values are reserved for future use.\nThe spare bits are set to zero\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.4.3.1-2: MBMS subchannel control specific data fields",
                                    "table number": 10,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.4.4\tMap Group To Bearer message",
                            "text_content": "The Map Group To Bearer message is sent by the participating function when a conversation is started.\nTable 8.4.4-1 shows the content of the Map Group To Bearer message.\nTable 8.4.4-1: Map Group To Bearer message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype|   PT=APP=204  |          Length                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of participating MCPTT function            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCMC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       MCPTT Group ID field                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           TMGI field                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        MBMS Subchannel field                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words, the order of the fields are irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.4.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the participating MCPTT function.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nMCPTT Group ID:\nThe MCPTT Group ID field is coded as described in clause 8.4.3.2.\nTMGI:\nThe TMGI field is coded as described in clause 8.4.3.4.\nMBMS Subchannel:\nThe MBMS Subchannel field is coded as described in clause 8.4.3.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.4.5\tUnmap Group To Bearer message",
                            "text_content": "The Unmap Group To Bearer message is sent by the participating function when a conversation is ended.\nTable 8.4.5-1 shows the content of the Unmap Group To Bearer message.\nTable 8.4.5-1: Unmap Group To Bearer message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length=3             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of participating MCPTT function            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCMC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       MCPTT Group ID field                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words, the order of the fields are irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.4.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the participating MCPTT function.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nMCPTT Group ID:\nThe MCPTT Group ID field is coded as described in clause 8.4.3.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.4.6\tApplication Paging message",
                            "text_content": "The Application Paging message is sent by the participating function when an existing conversation is to be moved to unicast bearers or a new conversation is to be started on unicast bearers.\nTable 8.4.5-1 shows the content of the Application Paging message.\nTable 8.4.6-1: Application Paging message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length=3             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of participating MCPTT function            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCMC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       MCPTT Group ID                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words, the order of the fields is irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.4.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the participating MCPTT function.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nMCPTT Group ID:\nThe MCPTT Group ID field is coded as described in clause 8.4.3.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.4.7\tBearer Announcement message",
                            "text_content": "The Bearer Announcement message is sent by the participating function on an MBMS bearer for application control messages. It may be sent by the participating function in order to achieve a faster setup of the MBMS bearer\nTable 8.4.7-1 shows the content of the Bearer Announcement message.\nTable 8.4.7-1: Bearer Announcement message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCMC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                              TMGI                             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Alternative TMGI fields                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Monitoring State                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words and the internal order of the TMGI field and the Alternative TMGI fields, the order of the fields is irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.4.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nTMGI:\nThe TMGI field is coded as described in clause 8.4.3.4. This field is mandatory.\nAlternative TMGI:\nZero or more alternative TMGI fields are coded as described in clause 8.4.3.4. This field is coded immediately after the TMGI field.\nMonitoring State:\nThe monitoring state field is coded as described in clause 8.4.3.6.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.5\tMBMS notifications",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.5.1\tIntroduction",
                            "text_content": "The MBMS notifications messages shall be coded as described in clause 8.1.2 where the MBMS notifications message is part of the application-dependent data.\nFor the MBMS notifications protocol the ASCII name string shall be: MCNC.\nThe list of MBMS notifications messages can be found in the clause 8.5.2.\nThe MBMS notifications specific fields are specified in clause 8.5.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.5.2\tMBMS notifications control messages",
                            "text_content": "Table 8.5.2-1 provides a list of MBMS notifications protocol messages.\nTable 8.5.2-1: MBMS notifications protocol messages\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.5.2-1: MBMS notifications protocol messages",
                                    "table number": 11,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.5.3\tMBMS notifications control specific fields",
                            "text_content": "This clause describes the MBMS notifications control specific data fields.\nThe MBMS notifications control specific data fields are contained in the application-dependent data of the MBMS notifications control message. The MBMS notifications control specific data fields follow the syntax specified in clause 8.1.3.\nTable 8.5.3.1-1 lists the available fields including the assigned Field ID.\nTable 8.5.3.1-1: MBMS notifications control specific data fields\n\nThe Status field indicates the indication of the status of the group and also includes the MCPTT ID of the user that last changed the status of the group.\nTable 8.5.3.2-1 describes the coding of the Status field.\nTable 8.5.3.2-1: Status field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Status         |Status         |          Status               |\n|field ID       |length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:User ID                                                        :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Status field ID> value is a binary value and is set according to table 8.5.3.1-1.\nThe <Status length> value is a binary value and shall have the value '2' indicating the total length in octets of the <Status> value item.\nThe <Status> value is a 16 bit binary value where:\n'0'\temergency\n'1'\tin-peril\nAll other values are reserved for future use.\nThe Status changing MCPTT User Identity field contains the MCPTT ID identifying the Status changing MCPTT user.\nTable 8.5.3.3-1 describes the coding of the Status changing MCPTT User Identity field.\nTable 8.5.3.3-1: Status changing MCPTT User Identity field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Status changing|Status changing|Status changing MCPTT          |\n|MCPTT User     |MCPTT User     |User Identity                  |\n|Identity field |Identity length|                               |\n|ID             |               |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                             (Padding)         :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Status changing MCPTT User Identity field ID> value is a binary value and shall be set according to table 8.5.3.1-1.\nThe <Status changing MCPTT User Identity length> value is a binary value indicating the length in octets of the <MCPTT Group Identity> value item except padding.\nThe <Status changing MCPTT User Identity> value contains the MCPTT ID of the Status changing MCPTT user. The <Status changing MCPTT User Identity> value shall be coded as specified in the table 8.5.3.3-2. The MCPTT ID is specified in 3GPP TS 24.379 [2].\nTable 8.5.3.3-2: ABNF syntax of string values of the <Status changing MCPTT User Identity> value\nstatus-changing-mcptt-user-identity = URI\n\nIf the length of the <Status changing MCPTT User Identity> value is not (2 + multiple of 4) bytes, the <Status changing MCPTT User Identity> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes should be set to zero. The padding bytes shall be ignored.\nTable 8.5.3.4-1 describes the coding of the Monitoring State field.\nTable 8.5.3.4-1: Group call ongoing field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Group call     |length=1       |Group call     |Spare          |\n|ongoing ID     |               |ongoing        |               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe < Group call ongoing field ID> value is a binary value and shall be set according to table 8.5.3.1-1.\nThe <length> value is a binary value indicating the length in octets of the <Group call ongoing> value item and is set to '1'.\nThe <Group call ongoing> value is a binary value where the following values are defined:\n'0'\tNo Group call ongoing\n'1'\tGroup call ongoing\nAll other values are reserved for future use.\nThe spare bits are set to zero\nThe Group broadcast alias field contains the URI identifying the Group broadcast alias.\nTable 8.5.3.5-1 describes the coding of the Group broadcast alias field.\nTable 8.5.3.5-1: Group broadcast alias field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Group Broadcast|Group Broadcast|Group Broadcast alias          |\n|alias field ID |alias field    |                               |\n|               |length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                             (Padding)         :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Group broadcast alias field ID> value is a binary value and shall be set according to table 8.5.3.1-1.\nThe <Group broadcast alias length> value is a binary value indicating the length in octets of the <Group broadcast alias> value item except padding.\nThe <Group broadcast alias> value contains the URI of the group broadcast alias. The <Group broadcast alias> value shall be coded as specified in the table 8.5.3.5-2. The group broadcast alias is specified in 3GPP TS 23.280 [23].\nTable 8.5.3.5-2: ABNF syntax of string values of the <Group broadcast alias> value\ngroup-broadcast-alias = URI\n\nIf the length of the <Group broadcast alias> value is not (2 + multiple of 4) bytes, the <Group broadcast alias> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes should be set to zero. The padding bytes shall be ignored.\nThe Group regroup alias field contains the URI identifying the Group regroup alias.\nTable 8.5.3.6-1 describes the coding of the Group regroup alias field.\nTable 8.5.3.6-1: Group regroup alias field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Group regroup  |Group regroup  |Group regroup alias            |\n|alias field    |alias field    |                               |\n|ID             |length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                             (Padding)         :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <Group regroup alias field ID> value is a binary value and shall be set according to table 8.5.3.1-1.\nThe <Group regroup alias length> value is a binary value indicating the length in octets of the <Group regroup alias> value item except padding.\nThe <Group regroup alias> value contains the URI of the group regroup alias. The <Group regroup alias> value shall be coded as specified in the table 8.5.3.6-2. The Group regroup alias is specified in 3GPP TS 23.280 [23].\nTable 8.5.3.6-2: ABNF syntax of string values of the <Group regroup alias> value\ngroup-regroup-alias = URI\n\nIf the length of the <Group regroup alias> value is not (2 + multiple of 4) bytes, the <Group regroup alias> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes should be set to zero. The padding bytes shall be ignored.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.5.3.1-1: MBMS notifications control specific data fields",
                                    "table number": 12,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.5.4\tGroup Dynamic Data Notify message",
                            "text_content": "The Group Dynamic Data Notify message is sent by the participating function when a conversation is started.\nTable 8.5.4-1 shows the content of the Group Dynamic Data Notify message.\nTable 8.5.4-1: Group Dynamic Data Notify message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype|   PT=APP=204  |          Length                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of participating MCPTT function            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCNC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Status field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|            Status changing MCPTT User Identity field          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       MCPTT Group ID field                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Group call ongoing field                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                  Group broadcast alias field                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   Group regroup alias field                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words, the order of the fields are irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.5.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the participating MCPTT function.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nMCPTT Group ID\nThe MCPTT Group ID field contains a SIP URI identifying the group that the group dynamic is related to.\nThe MCPTT Group ID field is coded as the MCPTT Group Identity field specified in clause 8.3.3.5.\nStatus:\nThe Status field is coded as described in clause 8.5.3.2.\nStatus changing MCPTT User Identity:\nThe Status changing MCPTT User Identity is coded as described in clause 8.5.3.3.\nGroup call ongoing:\nThe Group call ongoing field is coded as described in clause 8.5.3.4.\nGroup broadcast alias field:\nThe Group broadcast alias field is coded as described in clause 8.5.3.5\nGroup regroup alias field:\nThe Group regroup alias field is coded as described in clause 8.5.3.6\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.6\tMBS subchannel control",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.6.1\tIntroduction",
                            "text_content": "The MBS subchannel control messages shall be coded as described in clause 8.6.2 where the MBS subchannel control message is part of the application-dependent data.\nFor the MBS subchannel control protocol the ASCII name string shall be: MCSC.\nThe list of MBS subchannel control messages can be found in the clause 8.6.2.\nThe MBS subchannel control specific fields are specified in clause 8.6.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.6.2\tMBS subchannel control messages",
                            "text_content": "Table 8.6.2-1 provides a list of MBS subchannel control protocol messages.\nTable 8.6.2-1: MBS subchannel control protocol messages\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.6.2-1: MBS subchannel control protocol messages",
                                    "table number": 13,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.6.3\tMBS subchannel control specific fields",
                            "text_content": "This clause describes the MBS subchannel control specific data fields.\nThe MBS subchannel control specific data fields are contained in the application-dependent data of the MBS subchannel control message. The MBS subchannel control specific data fields follow the syntax specified in clause 8.1.3.\nTable 8.6.3.1-1 lists the available fields including the assigned Field ID.\nTable 8.6.3.1-1: MBS subchannel control specific data fields\n\n\nThe MCPTT Group ID field contains a SIP URI identifying the MCPTT group for which media and floor control messages are going to be broadcasted over a MBS subchannel.\nThe MCPTT Group ID field is coded as the MCPTT Group Identity field specified in clause 8.3.3.5.\nThe MBS Subchannel field describes which MBS subchannel to use for media and for floor control.\nTable 8.6.3.3-1 describes the coding of the MBS Subchannel field.\nTable 8.6.3.3-1: MBS Subchannel field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|MBS Subchannel |MBS Subchannel |Audio  |Floor  |IP     | spare |\n|field ID       |length         |m-line |m-line |Version|       |\n|               |               |Number |Number |       |       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                  Floor control Port Number                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                     Floor control SSRC                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                     Media Port Number                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n:                        IP Address                             :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <MBS Subchannel field ID> value is a binary value and shall be set according to table 8.6.3.1-1.\nThe <MBS Subchannel length> value is a binary value indicating the total length in octets of the <Audio m-line Number> value, <IP Version> value, spare, <Port Number> value and <IP address> items.\nThe <Audio m-line Number> value shall consist of 4 bit parameter giving the number of the\" m=audio\" m-line in the SIP MESSAGE request announcing the MBS session described in 3GPP TS 24.379 [2].\nThe <Floor m-line Number> value shall consist of 4 bit parameter giving the number of the \"m=application\" m-line in the SIP MESSAGE request announcing the MBS session described in 3GPP TS 24.379 [2]. The <Floor m-line Number> value is set to \"0\" when the same subchannel is used for media and for floor control.\nThe <IP version> value indicates the IP version:\n'0'\tIP version 4\n'1'\tIP version 6\nAll other values are reserved for future use.\nThe \"spare\" 4 bits shall be set to \"0000\".\nThe <Floor control Port Number> value is a 32-bit binary value giving the port to be used if the<Floor m-line Number> value is greater than '0'. If the <Floor m-line Number> value is equal to '0', the <Floor control Port Number> value is not included in the MBS Subchannel field.\nThe <Floor control SSRC> is coded as specified in IETF RFC 3550 [3]. The <Floor control SSRC> contains the SSRC that will be used by the participating MCPTT function in the RTCP header of the floor control messages sent over this MBS subchannel for this conversation. The <Floor control SSRC> value is always present in the MBS Subchannel field.\nThe <Media Port Number> value is a 32-bit binary value giving the port to be used. The <Media Port Number> value is always present in the MBS Subchannel field.\nThe <IP Address> value is:\n1.\ta 32 bit binary value containing the IP v4 address if the <IP version> indicates that the <IP Address> value is a IP v4 Address; or\n2.\tfour 32-bit words that together forms a 128 bit binary value representing the IP v6 address, if the <IP version> indicates that the <IP Address> value is a IP v6 Address\nTable 8.6.3.4-1 describes the coding of the MBS Session ID field.\nTable 8.6.3.4-1: MBS Session ID field coding\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|MBS Session ID |MBS Session ID |MBS Session ID                 |\n|field ID       |length         |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :\n:                                            (Padding)          :\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe <MBS Session ID field ID> value is a binary value and shall be set according to table 8.6.3.1-1.\nThe <MBS Session ID length> value is a binary value indicating the length in octets of the <MBS Session ID> value item except padding.\nThe <MBS Session ID> value is coded as described in 3GPP TS 24.501 [24] clause 10.5.6.1 figure 9.11.4.30.2.\nIf the length of the <MBS Session ID> value is not (2 + multiple of 4) bytes, the <MBS Session ID> value shall be padded to (2 + multiple of 4) bytes. The value of the padding bytes should be set to zero. The padding bytes shall be ignored.\nClause 8.4.3.6 apply also for MBS.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.6.3.1-1: MBS subchannel control specific data fields",
                                    "table number": 14,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.6.4\tMapGroupToSessionStream message",
                            "text_content": "The MapGroupToSessionStream message is sent by the participating function when a conversation is started.\nTable 8.6.4-1 shows the content of the MapGroupToSessionStream message.\nTable 8.6.4-1: MapGroupToSessionStream message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype|   PT=APP=204  |          Length                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of participating MCPTT function            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCSC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       MCPTT Group ID field                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   MBS Session ID field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         MBS Subchannel field                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words, the order of the fields are irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.6.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the participating MCPTT function.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nMCPTT Group ID:\nThe MCPTT Group ID field is coded as described in clause 8.6.3.2.\nMBS Session ID:\nThe MBS Session ID field is coded as described in clause 8.6.3.4.\nMBS Subchannel:\nThe MBS Subchannel field is coded as described in clause 8.6.3.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.6.5\tUnMapGroupFromSessionStream message",
                            "text_content": "The UnMapGroupFromSessionStream message is sent by the participating function when a conversation is ended.\nTable 8.6.5-1 shows the content of the UnMapGroupFromSessionStream message.\nTable 8.6.5-1: UnMapGroupFromSessionStream message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype|   PT=APP=204  |          Length                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of participating MCPTT function            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCSC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       MCPTT Group ID field                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   MBS Session ID field                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         MBS Subchannel field                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words, the order of the fields are irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.6.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the participating MCPTT function.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nMCPTT Group ID:\nThe MCPTT Group ID field is coded as described in clause 8.6.3.2.\nMBS Session ID:\nThe MBS Session ID field is coded as described in clause 8.6.3.4.\nMBS Subchannel:\nThe MBS Subchannel field is coded as described in clause 8.6.3.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.6.6\tMBS Application Paging message",
                            "text_content": "The MBS Application Paging message is sent by the participating function when an existing conversation is to be moved to unicast sessions or a new conversation is to be started on unicast sessions.\nTable 8.6.5-1 shows the content of the MBS Application Paging message.\nTable 8.6.6-1: MBS Application Paging message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length=3             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               SSRC of participating MCPTT function            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCSC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       MCPTT Group ID                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nWith the exception of the three first 32-bit words, the order of the fields is irrelevant.\nSubtype:\nThe subtype shall be coded according to table 8.6.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nSSRC:\nThe SSRC field shall carry the SSRC of the participating MCPTT function.\nThe SSRC field shall be coded as specified in IETF RFC 3550 [3].\nMCPTT Group ID:\nThe MCPTT Group ID field is coded as described in clause 8.6.3.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.6.7\tSession Announcement message",
                            "text_content": "The Session Announcement message is sent by the participating function on an MBS session for application control messages. It may be sent by the participating function in order to achieve a faster setup of the MBS session\nTable 8.6.7-1 shows the content of the Session Announcement message.\nTable 8.6.7-1: Session Announcement message\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|V=2|P| Subtype |   PT=APP=204  |          length               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          name=MCSC                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         MBS Session ID                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                              TMGI                             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Alternative TMGI fields                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Monitoring State                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nSubtype:\nThe subtype shall be coded according to table 8.6.2-1.\nLength:\nThe length shall be coded as specified in clause 8.1.2.\nMBS Session ID:\nThe MBS Session ID field is coded as described in clause 8.6.3.4. This field is mandatory.\nTMGI:\nThe TMGI field is coded as described in clause 8.4.3.4. This field is mandatory.\nAlternative TMGI:\nZero or more alternative TMGI fields are coded as described in clause 8.4.3.4. This field is coded immediately after the TMGI field.\nMonitoring State:\nThe monitoring state field is coded as described in clause 8.6.3.5.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "9\tCall setup control over pre-established session",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "9.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The procedures described in this clause are applicable only after a pre-established session is established between the participating MCPTT function and the MCPTT client.\nOnce the use of an existing pre-established session is decided for a pre-arranged group call or for a chat group call or for a private call, as specified in 3GPP TS 24.379 [2], the participating MCPTT function shall inform the MCPTT client that this pre-established session is to be used as described in clause 9.3 and the MCPTT client shall respond as described in clause 9.2.\nWhen a pre-arranged group call or a chat group call or a private call which uses a pre-established session is released as specified in 3GPP TS 24.379 [2], the participating MCPTT function shall inform the MCPTT client that the use of this pre-established session has ended as described in clause 9.3 and the MCPTT client shall respond as described in clause 9.2.\nMedia and media plane control procedures between a participating MCPTT function and MCPTT client for a pre-arranged group call or for a chat group call or for a private call and setup over a pre-established session are not affected by the use of the pre-established session.\nMedia plane security procedures for pre-established call control messages are specified in clause 13.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "9.2\tMCPTT client",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "9.2.1\tGeneral",
                            "text_content": "If the MCPTT client supports pre-established session, the MCPTT client shall also support the behaviour implied by the state machine specified in this clause. The specifications are on the reception or sending of media plane control messages related to the call setup control over pre-established session\nAn MCPTT client may have several pre-established sessions at a time.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.2.2\tCall setup control over pre-established session state machine",
                            "text_content": "A call setup control over pre-established state machine has two states: Pre-established Session_Not_in_use and Pre-established Session_In_use. In addition the 'Start-Stop' state is specified for the initiation or the termination of the state machine. The state transitions are partly controlled by the call control procedures specified in 3GPP TS 24.379 [2].\nFigure 9.2.2.1-1 shows the call setup control over pre-established session state machine and the state transitions.\nThe figure depicts a call setup control over pre-established session state machine, illustrating the process of initiating and managing calls. The diagram includes various components such as call setup, call control, and call management, all of which are essential for ensuring a smooth and efficient call setup process.\nFigure 9.2.2.1-1: Call setup control over pre-established session state machine.\nThe MCPTT client shall create one instance of the call setup control over pre-established state machine per pre-established session.\nIf a pre-established session call control message, a SIP request or RTP media packet arrives in any state and there is no procedure specified in the clauses below, the MCPTT client shall discard the pre-established session call control message, SIP request or RTP media packet and shall remain in the current state.\nIn this state no pre-established session exists\nWhen a pre-established session is created between the MCPTT client and the participating MCPTT function, as specified in 3GPP TS 24.379 [2], the MCPTT client:\n1.\tshall initialize any needed user plane resources for the pre-established session as specified in 3GPP TS 24.379 [2]; and\n2.\tshall enter the 'U: Pre-established session not in use' state.\nThe 'U: Pre-established session not in use' state is a stable state. The MCPTT client is in this state when a pre-established session is established, but it is not used for a call.\nIn this state the MCPTT client can receive call initiation message and floor control messages.\nUpon reception of a Connect message:\n1.\tif the MCPTT client accepts the incoming call the MCPTT client:\na.\tshall send the Acknowledge message with Reason Code field set to 'Accepted';\nb.\tshall use only the media streams of the pre-established session which are indicated as used in the associated call session Media Streams field, if the Connect contains a Media Streams field;\nc.\tshall create an instance of the 'Floor participant state transition diagram for basic operation' as specified in clause 6.2.4; and\nd. shall enter the 'U: Pre-established session in use' state; or\n2.\tOtherwise the MCPTT client:\na.\tshall send the Acknowledge message with the Reason Code field set to an appropriate <Reason Code> value; and\nb.\tshall remain in 'U: Pre-established session not in use' state.\nWhen the associated pre-established session between the MCPTT client and the MCPTT server is released the MCPTT client:\n1.\tshall release any user plane resources including any running timers associated with the pre-established session; and\n2.\tshall enter the 'Start-stop' state and then the 'Call setup control over pre-established session state machine' is released.\nUpon reception of a Disconnect message the MCPTT client:\n1.\tif the first bit in the subtype of the Disconnect message is set to '1' (Acknowledgment is required), shall send the Acknowledge message with the Reason Code set to 'Accepted'; and\n2.\tshall remain in 'U: Pre-established session not in use' state.\nUpon reception of a SIP 2xx response for the SIP REFER request sent to initiate an MCPTT call session over a pre-established session as specified in 3GPP TS 24.379 [2], (to initiates a pre-arranged group call or private call or to join a chat group call) the MCPTT client:\n1.\tshall create an instance of the 'Floor participant state transition diagram for basic operation' as specified in subclause 6.2.4; and\n2.\tshall enter the 'U: Pre-established session in use' state.\nUpon sending the SIP 200 (OK) response to the SIP re-INVITE request for the use of the Pre-established session initiating an MCPTT call session as specified in 3GPP TS 24.379 [2] the MCPTT client:\n1.\tshall create an instance of the 'Floor participant state transition diagram for basic operation' as specified in subclause 6.2.4; and\n2.\tshall enter the 'U: Pre-established session in use' state.\nThe MCPTT client is in this state when a pre-established session is established and it is used for an MCPTT call session.\nIn this state the MCPTT client can receive call release indication, floor control messages and RTP media packets.\nUpon reception of a Connect message the MCPTT client:\n1.\tif the first bit in the subtype of the Connect message is set to '1' (Acknowledgment is required), shall send Acknowledge message with the Reason Code field set to 'Accepted'; and\n2.\tshall remain in the 'U: Pre-established session in use' state.\nUpon reception of a floor control message (i.e. messages other than the Connect message and the Disconnect message) the MCPTT client:\n1.\tshall act as specified in clause 6.2.4; and\n2.\tshall remain in the 'U: Pre-established session in use' state.\nUpon reception of an RTP media packet the MCPTT client:\n1.\tshall act as specified in clause 6.2.4; and\n2.\tshall remain in the 'U: Pre-established session in use' state.\nUpon reception of Disconnect message the MCPTT client:\n1.\tif the first bit in the subtype of the Disconnect message is set to '1' (Acknowledgment is required), shall send Acknowledge message with the Reason Code field set to 'Accepted';\n2.\tshall enter the 'U: Pre-established session not in use' state; and\n3.\tshall act as specified in clause 6.2.4.\nUpon receiving a 2xx response to the sent SIP REFER request as described in 3GPP TS 24.379 [2] when the call is released, but the Pre-established Session is kept alive the MCPTT client:\n1.\tshall enter the 'U: Pre-established session not in use' state; and\n2.\tshall terminate the instance of 'Floor participant state transition diagram for basic operation' state machine as specified in clause 6.2.4.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "9.3\tParticipating MCPTT function",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "9.3.1\tGeneral",
                            "text_content": "The participating MCPTT function shall support the behaviour implied by the state machine specified in this clause. The specifications are on the sending and reception of media plane control messages related to the call setup control over a pre-established session\nA participating MCPTT function may have several pre-established session at a time for multiple MCPTT clients and multiple pre-established sessions per MCPTT client.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.3.2\tCall setup control over pre-established session state machine for the participating MCPTT function",
                            "text_content": "If the participating MCPTT function supports pre-established session, the participating MCPTT function shall behave according to the 'pre-established session state machine' and state transitions specified in this clause.\nThe 'pre-established session state machine' has three states: 'G: Pre-established session not in use' state, 'G: Pre-established session in use' state and 'G: Call releasing' state, the state transitions are partially controlled by the specifications in 3GPP TS 24.379 [2]. The 'Start-stop' state is the initial and final state.\nFigure 9.3.2.1-1 shows the state diagram and the state transitions of the 'pre-established session state machine'.\nThe figure depicts the state transitions of a Pre-established Session state machine, illustrating the steps taken to establish a session between two devices. The machine is composed of a Session Manager, a Session Controller, and a Session Broker, each responsible for managing the session state and routing it to the appropriate device. The figure shows the machine in a state of \"Initiated\" and \"Waiting for Connection\" before transitioning to \"Connected\" and \"Waiting for Data\". The state transitions are depicted in a flowchart format, with arrows indicating the sequence of events.\nFigure 9.3.2.1-1: State transitions of Pre-established Session state machine\nThe participating MCPTT function shall create one instance of the 'pre-established session state machine' per pre-established session per MCPTT client.\nState and state transition details are explained in the following clauses.\nIf a pre-established session call control message, SIP request, SIP response or RTP media packet arrives in any state and there is no procedure specified for it in this clauses below, the participating MCPTT function shall discard the pre-established session call control message, SIP request, SIP response or RTP media packet and remain in the current state.\nIn this state no pre-established session exists.\nWhen a pre-established session is created between the participating MCPTT function and an MCPTT client, the participating MCPTT function:\n1.\tshall initiate any needed user plane resources for the pre-established session; and\n2.\tshall enter the 'G: Pre-established session not in use' state.\nThe 'G: Pre-established session not in use' state is a stable state. The participating MCPTT function is in this state when the pre-established session is established but it is not used for an MCPTT call.\nIn this state the participating MCPTT function can receive call initiation indication. If the participating MCPTT function receives a call initiation indication, the participating MCPTT function may send an Application Paging message over an MBMS bearer before continuing with the call initiation.\nUpon receiving a SIP REFER request from the MCPTT client the participating MCPTT function:\n1.\tshall reserve user plane resources for the call session, if not yet reserved; and,\n2.\tshall enter the 'G: Pre-established session in use' state.\nUpon receiving a SIP INVITE request from the controlling MCPTT function, if in automatic answer mode, the participating MCPTT function:\n1.\tshall send the Connect message to the invited MCPTT client using the media plane control transport channel defined for this call. The Connect message:\na.\tshall include the SIP URI received in the Contact header field of the SIP INVITE request in the <MCPTT Session Identity> value in the MCPTT Session Identity field;\nb.\tif the SIP INVITE request included an \"application/vnd.3gpp.mcptt-info+xml\" MIME body with the <session-type> element set to a value of \"prearranged\" or \"chat\":\ni.\tshall include the content of the <mcptt-calling-group-id> element in the MCPTT Group Identity field;\nii.\tshall include the value 'prearranged' or 'chat' in the <Session Type> value in the MCPTT Session Identity field;\niii.\tshall include the content of the <mcptt-calling-user-id> element in the Inviting MCPTT User Identity field if available from the SIP INVITE message and privacy of the inviting MCPTT ID is not required; and\niv.\tshall include 'anonymous@anonymous.invalid' in the Inviting MCPTT User Identity field if the MCPTT ID of the inviting MCPTT user is not available from the SIP INVITE message or privacy of the inviting MCPTT ID is required;\nc.\tif the SIP INVITE request includes an \"application/vnd.3gpp.mcptt-info+xml\" MIME body with the <session-type> element set to a value of \"private\":\ni.\tshall include the content of the <mcptt-calling-user-id> element in the Inviting MCPTT User Identity field if available from the SIP INVITE message and privacy of the inviting MCPTT ID is not required;\nii.\tshall include 'anonymous@anonymous.invalid' in the Inviting MCPTT User Identity field if the MCPTT ID of the inviting MCPTT user is not available from the SIP INVITE message or privacy of the inviting MCPTT ID is required;\niii.\tshall include the value 'private' in the <Session Type> value in the MCPTT Session Identity field; and\niv.\tif the MIKEY-SAKKE I_MESSAGE is included in the received SIP INVITE request, shall include the MIKEY-SAKKE I_MESSAGE as received, in the PCK I_MESSAGE field;\nd.\tshall include a Media Streams field, if the negotiated SDP in the pre-arranged session contains more media streams than required by the SDP in the SIP INVITE request; and\nNOTE 1:\tFor example if the call is a private call without floor control the Media Streams field needs to be included with the <Control Channel> value set to '0'.\ne.\tshall set the first bit in the subtype of the Connect message to '1' (Acknowledgment is required) as described in clause 8.3.2;\n2.\tshall start timer T55 (Connect);\n3.\tshall initialize counter C55 (Connect) to 1;\n4.\tshall reserve the media channel resources if not yet reserved; and\n5.\tshall enter the 'G: Pre-established session in use' state.\nNOTE 2: The case of manual answer is described in 3GPP TS 24.379 [2].\nWhen the pre-established session between the MCPTT client and the participating MCPTT function is released, the participating MCPTT function:\n1.\tshall release any media plane resources and timers associated with this pre-established session; and,\n2.\tshall enter the 'Start-stop' state\nUpon receiving the SIP 200 (OK) response to the SIP re-INVITE request of the pre-established session a call as specified in 3GPP TS 24.379 [2] (call setup with manual answer with pre-established session) the participating MCPTT function:\n1.\tshall send the Connect message to the invited MCPTT client(s) using the media plane control transport channel defined for this call. The Connect message:\na.\tshall include the SIP URI received in the Contact header field of the SIP re-INVITE request in the <MCPTT Session Identity> value in the MCPTT Session Identity field;\nb.\tif the SIP re-INVITE request included an \"application/vnd.3gpp.mcptt-info+xml\" MIME body with the <session-type> element set to a value of \"prearranged\" or \"chat\":\ni.\tshall include the content of the <mcptt-calling-group-id> element in the MCPTT Group Identity field;\nii.\tshall include the value 'prearranged' or 'chat' in the <Session Type> value in the MCPTT Session Identity field;\niii.\tshall include the content of the <mcptt-calling-user-id> element in the Inviting MCPTT User Identity field if available from the SIP re-INVITE message and privacy of the inviting MCPTT ID is not required; and\niv.\tshall include 'anonymous@anonymous.invalid' in the Inviting MCPTT User Identity field if the MCPTT ID of the inviting MCPTT user is not available from the SIP re-INVITE message or privacy of the inviting MCPTT ID is required;\nc.\tif the SIP re-INVITE request included an \"application/vnd.3gpp.mcptt-info+xml\" MIME body with the <session-type> element set to a value of \"private\":\ni.\tshall include the content of the <mcptt-calling-user-id> element in the Inviting MCPTT User Identity field, if available from the SIP re-INVITE message and privacy of the inviting MCPTT ID is not required;\nii.\tshall include 'anonymous@anonymous.invalid' in the Inviting MCPTT User Identity field if the MCPTT ID of the inviting MCPTT user is not available from the SIP re-INVITE message or privacy of the inviting MCPTT ID is required; and\niii.\tshall include the value 'private' in the <Session Type> value in the MCPTT Session Identity field;\nd.\tshall include a Media Streams field, if the negotiated SDP in the pre-arranged session contains more media streams than required by the SDP in the SIP re-INVITE request; and\nNOTE:\tFor example if the call is a private call without floor control the Media Streams field needs to be included with the <Control Channel> value set to '0'.\ne.\tmay set the first bit in the subtype of the Connect message to '1' (Acknowledgment is required) as described in clause 8.3.2;\n2.\tshall start timer T55 (Connect);\n3.\tshall initialise counter C55 (Connect) to 1;\n4.\tshall reserve the media channel resources if not yet reserved; and\n5.\tshall enter the 'G: Pre-established session in use' state.\nThe 'G: Pre-established session in use' state is a stable state. The participating MCPTT function is in this state when a pre-established session is used for a call.\nIn this state the participating MCPTT function can receive RTP media packets and pre-established session call control messages.\nUpon receiving a floor control message the participating MCPTT function:\n1.\tshall perform the actions in clause 6.4.1; and\n2.\tshall remain in the 'G: Pre-established session in use' state.\nUpon receiving an RTP media packet the participating MCPTT function:\n1.\tshall perform the actions in clause 6.4.1; and\n2.\tshall remain in the 'G: Pre-established session in use' state.\nUpon receiving an indication from the MCPTT client that the call is released but the pre-established session is kept alive (see 3GPP TS 24.379 [2]), the participating MCPTT function:\n1.\tshall send call release to the controlling MCPTT function as specified in 3GPP TS 24.379 [2];\n2.\tmay release the media resources associated with the call not needed for the pre-established session;\n3.\tshall stop timer T55 (Connect); and\n4.\tshall enter the 'G: Pre-established session not in use' state.\nUpon receiving an indication from the controlling MCPTT function that the call is released (see 3GPP TS 24.379 [2]), the participating MCPTT function:\n1.\tshall stop timer T55 (Connect)if running;\n2.\tshall send Disconnect message to the MCPTT client. The Disconnect message:\na.\tshall include the MCPTT Session Identity field with the same content as sent in the Connect message when the MCPTT call was established; and\nb.\tshould set the first bit in the subtype of the Disconnect message to '1' (Acknowledgment is required) as described in clause 8.3.2;\n3.\tshall start timer T56 (Disconnect);\n4.\tshall initialise counter C56 (Disconnect) to 1; and\n5.\tshall enter the 'G: Call releasing' state.\nUpon receiving the pre-established session release indication (see 3GPP TS 24.379 [2]) from the MCPTT client. The participating MCPTT function:\n1.\tshall stop sending RTP media packet and floor control messages between the MCPTT client and the controlling MCPTT function;\n2.\tshall release any media plane resources and timers associated with this pre-established session; and\n3.\tshall enter the 'Start-stop' state.\nUpon receiving an Acknowledge message from the MCPTT client, the participating MCPTT function:\n1.\tshall stop timer T55 (Connect);\n2.\tif the Reason Code is not 'Accepted' the participating MCPTT function:\na.\tshall send Disconnect message to the MCPTT client;\ni.\tshall include the MCPTT Session Identity field with the same content as sent in the Connect message when the MCPTT call was established;\nii.\tshould set the first bit in the subtype of the Disconnect message to '1' (Acknowledgment is required) as described in clause 8.3.2; and\niii.\tif a Reason Code field was received in the Acknowledge message with other than an 'Accepted' reason code value, shall include the Reason Cause field with a value corresponding to the received Reason Code value; and\nb.\tshall start timer T56 (Disconnect);\nc.\tshall initialise counter C56 (Disconnect) to 1;\nd.\tshall send a call release indication to the controlling MCPTT function (see 3GPP TS 24.379 [2]); and\ne.\tshall enter the 'G: Call releasing' state; and\n3.\totherwise the participating MCPTT function:\na.\tshall send a SIP 200 (OK) response to the SIP INVITE request as specified in 3GPP TS 24.379 [2] if the SIP 200 (OK) response to the SIP INVITE request is not already sent; and\nb.\tshall remain in the 'G: Pre-established session in use' state.\nOn the expiry of timer T55 (Connect) the participating MCPTT function:\n1.\tshall retransmit the Connect message sent to the MCPTT client using the media plane control transport channel defined for this MCPTT call;\n2.\tshall start timer T55 (Connect);\n3.\tshall increment counter C55 (Connect) by 1; and\n4.\tshall remain in the 'G: Pre-established session in use' state.\nWhen timer T55 (Connect) expires by the upper limit of counter C55 (Connect) times, the participating MCPTT function:\n1.\tshall send a call release indication to the controlling MCPTT function as specified in 3GPP TS 24.379 [2];\n2.\tmay release the media resources associated with the call not needed for the pre-established session; and\n3.\tshall enter the 'G: Pre-established session not in use' state.\nUpon receiving a SIP 200 (OK) response from the controlling MCPTT function, the participating MCPTT function:\n1.\tshall send the Connect message to the MCPTT client which initiated this call using the media plane control transport channel defined for this call. The Connect message:\na.\tshall include the SIP URI received in the Contact header field of the SIP 200 (OK) response in the <MCPTT Session Identity> value in the MCPTT Session Identity field;\nb.\tif an \"application/vnd.3gpp.mcptt-info+xml\" MIME body with an <session-type> element is included in the SIP 200 (OK) response, shall include the <Session Type> value in the MCPTT Session Identity field with a value corresponding to the <session-type> element;\nc.\tif an \"application/vnd.3gpp.mcptt-info+xml\" MIME body with an <session-type> element is not included in the SIP 200 (OK) response, shall include the <Session Type> value set to 'no session type' in the MCPTT Session Identity field;\nd.\tif a Warning header field with a SIP \"warn-code\" set to the value \"399\" is received in the SIP 200 (OK) response, shall include the content of the SIP \"warn-text\" parameter from the received Warning header field in the <Warning Text> value in the Warning Text field;\ne.\tif a P-Answer-State header field is included in the SIP 200 (OK) response, shall include an Answer State field with an <Answer State> value corresponding to the \"answer-type\" parameter; and\nf\tshould set the first bit in the subtype of the Connect message to '1' (Acknowledgment is required) as described in clause 8.3.2;\n2.\tshall start timer T55 (Connect);\n3.\tshall increment counter C55 (Connect) by 1; and,\n4.\tshall remain in the 'G: Pre-established session in use' state.\nUpon receiving a failed call setup indication from the controlling MCPTT function, the participating MCPTT function:\n1.\tshall send an Disconnect message to the MCPTT client;\na.\tshall include the MCPTT Session Identity field with the same content as sent in the Connect message when the MCPTT call was established; and\nb.\tshould set the first bit in the subtype of the Disconnect message to '1' (Acknowledgment is required) as described in clause 8.3.2;\n2.\tshall start timer T56 (Disconnect);\n3.\tshall initialise counter C56 (Disconnect) to 1;\n4.\tshall terminate the call; and\n5.\tshall enter the 'G: Call releasing' state.\nThe 'G: Call releasing' state is a transition state. The participating MCPTT function is in this state when a call is being released by keeping the pre-established session.\nTimer T56 (Disconnect) is running in this state.\nUpon receiving an Acknowledge message from the MCPTT client, the participating MCPTT function:\n1.\tshall stop timer T55 (Connect), if running;\n2.\tshall stop timer T56 (Disconnect);\n3.\tmay release the media resources associated with the call not needed for the pre-established session; and\n4.\tshall enter the 'G: Pre-established session not in use' state.\nOn the expiry of timer T56 (Disconnect) less than the upper limit of counter C56 (Disconnect) times, the participating MCPTT function:\n1.\tshall retransmit the Disconnect message sent to the MCPTT client using the media plane control transport channel defined for this call;\n2.\tshall start timer T56 (Disconnect);\n3.\tshall increment counter C56 (Disconnect) by 1; and\n4.\tshall remain in the 'G: Call releasing' state.\nWhen timer T56 (Disconnect) expires by the upper limit of counter C56 (Disconnect) times, the participating MCPTT function:\n1.\tmay release the media resources associated with the call not needed for the pre-established session; and\n2.\tshall enter the 'G: Pre-established session not in use' state.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "10\tMBMS subchannel control procedure",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "10.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "A participating MCPTT function sending floor control messages and RTP media packets over a MBMS bearer shall support the procedures in the following clauses.\nThe MBMS bearer can be used for conversations in group calls. Prior to using the MBMS bearer the participating MCPTT function needs to activate the MBMS bearer and announce the MBMS bearer as described in clause 4.1.3.\nFloor control messages and RTP media packets received over the MBMS subchannel are used as input to the floor participant state machine in the same way as floor control messages and RTP media packets received over the unicast bearer.\nMedia plane security procedures for media and floor control messages sent over the MBMS subchannels are specified in clause 13.\nThe participating MCPTT function can apply Robust header compression (ROHC) (see RFC 5795 [20]) before pushing packets to the BM-SC with MB2-U, or can request the BM-SC to apply ROHC, as described in 3GPP TS 29.468 [6].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "10.2\tMBMS subchannel control procedure for the participating MCPTT function",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.2.1\tGeneral",
                            "text_content": "If the participating MCPTT function supports the MBMS subchannel control procedure, the participating MCPTT function shall support the behaviour implied by the state machine specified in this clause. The specifications are on the reception of floor control messages from the controlling MCPTT function, sending of floor control messages and the allocation/deallocation of a MBMS subchannel for a conversation in a group session.\nFigure 10.2.1-1 shows the participating MCPTT function MBMS subchannel control state diagram.\nThe figure depicts a detailed diagram of the MBMS subchannel control state, illustrating the various states and their corresponding actions. The diagram includes a flowchart of the subchannel control process, with each state representing a different action taken by the MBMS. The diagram also includes a legend to help understand the different states and their meanings. The figure is a crucial visual aid for understanding the MBMS subchannel control process and its role in the overall system.\nFigure 10.2.1-1: Participating MCPTT function MBMS subchannel control state diagram\nIf a floor control message or RTP media packet arrives in a state where there are no procedures specified in the clauses below, the participating MCPTT function shall discard the message.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.2.2\tState: 'Start-stop'",
                            "text_content": "In this state:\n-\tno instance of the 'Participating MCPTT function MBMS subchannel control state machine exists;\n-\ta pre-activated MBMS bearer may exist;\n-\tno conversation using a MBMS subchannel control is active but a group session exists where a conversation over the unicast channel may be ongoing; and\n-\tthe participating MCPTT function handles floor control messages and RTP media packets as for during normal operations described in clause 6.4.\nUpon receiving a Floor Request message or a Floor Taken message and when the participating MCPTT function decides that an MBMS subchannel shall be used for a conversation in an ongoing group session, the participating MCPTT function needs to determine if the MBMS bearer has sufficient capacity for the new conversation. If the new MBMS bearer has sufficient capacity the participating MCPTT function:\nNOTE:\tThe participating MCPTT function can take that decision when receiving the first Floor Request from a floor participant or when receiving a Floor Taken message destined to one of the floor participants served by the participating MCPTT client.\n1.\tshall create an instance of the 'Participating MCPTT function MBMS subchannel control' state machine;\n2.\tshall send a Map Group To Bearer message over the general purpose MBMS subchannel. The Map Group To Bearer message:\na.\tshall include TMGI;\nb.\tshall include the identifier of the media stream; and\nc.\tshall include the MCPTT Group identifier field;\n3.\tshall start timer T15 (Conversation);\n4.\tshall start timer T16 (Unmap Group To Bearer);\n5.\tshall enter the 'M: A conversation is active' state;\n6.\tif the Floor Request was received, shall perform actions as described in clause 6.4.2; and\n7.\tif the Floor Taken was received, shall perform the actions described in clause 10.2.3.3.\nIf the MBMS bearer does not have sufficient capacity for the new conversation the participating MCPTT function:\n1.\tmay free capacity for the new conversation by transfering an existing conversation over an MBMS bearer to unicast bearers following the procedure in clause 10.2.3.12; or\n2.\tmay use the MBMS bearer for the signaling messages, while using unicast bearers for the media message.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.2.3\tState: 'M: A conversation is active'",
                            "text_content": "In this state a MBMS subchannel exists and can be used by a group call.\nIn this state a conversation is active and Floor Taken, Floor Idle and Floor Release Multi Talker messages and RTP media packets shall be sent over the MBMS subchannel.\nIn this state timer T15 (Conversation) and timer T16 (Map Group To Bearer re-transmit) are running.\nIn this state the timer T17 (Unmap Group To Bearer) may be running.\nWhen a Floor Idle message destined to a floor participant listening to the MBMS subchannel is received, the participating MCPTT function:\n1.\tshall for each received Floor Idle message, check if there is a stored message-sequence-number value associated with the conversation;\n2.\tif a message-sequence-number value associated with the conversation is stored, compared the value of the stored message-sequence-number value with the value in the received Floor Idle message;\na.\tif the received message-sequence-number value is higher than the stored value:\ni.\tshall replace the stored message-sequence-number value with the received message-sequence-number field;\nii.\tshall set the acknowledgment bit to '0' as specified in clause 8.2.2, if not already set; and\niii.\tshall send the received Floor Idle message over the MBMS subchannel; and\nb.\tif the received message-sequence-number value is lower or the same as the stored value, shall discard the received Floor Idle message;\n3.\tif a message-sequence-number value associated with the conversation is not stored (i.e. this is the first floor control message received in the conversation):\na.\tshall store the received message-sequence-number value and associate the value with the conversation;\nb.\tshall set the acknowledgment bit to '0' as specified in clause 8.2.2, if not already set; and\nc.\tshall send the received Floor Idle message over the MBMS subchannel;\n4.\tif the received Floor Idle message indicates that a Floor Ack message is expected (i.e. the acknowledgment bit is set to '1' as specified in clause 8.2.2), shall send a Floor Ack message towards the controlling MCPTT function. The Floor Ack message:\na.\tshall include the Message Type field set to '5' (Floor Idle); and\nb.\tshall include the Source field set to '1' (participating MCPTT function is the source);\n5.\tshall restart timer T15 (Conversation); and\n6.\tshall remain in the 'M: A conversation is active' state.\nWhen a Floor Taken message destined to a floor participant listening to the MBMS subchannel is received, the participating MCPTT function:\n1.\tshall for each received Floor Taken message, check if there is a stored message-sequence-number value associated with the conversation;\n2.\tif a message-sequence-number value associated with the conversation is stored, compare the value of the stored message-sequence-number value with the value in the received Floor Taken message;\na.\tif the received message-sequence-number value is higher than the stored value:\ni.\tshall replace the stored message-sequence-number value with the received message-sequence-number field;\nii.\tshall set the acknowledgment bit to '0' as specified in clause 8.2.2, if not already set; and\niii.\tshall send the received Floor Taken message over the MBMS subchannel; and\nb.\tif the received message-sequence-number value is lower or the same as the stored value, shall discard the received Floor Taken message;\n3.\tif a message-sequence-number value associated with the conversation is not stored (i.e. this is the first floor control message received in the conversation):\na.\tshall store the received message-sequence-number value and associate the value with the conversation;\nb.\tshall set the acknowledgment bit to '0' as specified in clause 8.2.2, if not already set; and\nc.\tshall send the received Floor Taken message over the MBMS subchannel;\n4.\tif the received Floor Taken message indicates that a Floor Ack message is expected (i.e. the acknowledgment bit is set to '1' as specified in clause 8.2.2), shall send a Floor Ack message towards the controlling MCPTT function The Floor Ack message:\na.\tshall include the Message Type field set to '2' (Floor Taken); and\nb.\tshall include the Source field set to '1' (participating MCPTT function is the source);\n5.\tshall restart timer T15 (Conversation); and\n6.\tshall remain in the 'M: A conversation is active' state.\nWhen a Floor Release Multi Talker message destined to a floor participant listening to the MBMS subchannel is received, the participating MCPTT function:\n1.\tshall for each received Floor Release Multi Talker message, check if there is a stored message-sequence-number value associated with the conversation;\n2.\tif a message-sequence-number value associated with the conversation is stored, compare the value of the stored message-sequence-number value with the value in the received Floor Release Multi Talker message;\na.\tif the received message-sequence-number value is higher than the stored value:\ni.\tshall replace the stored message-sequence-number value with the received message-sequence-number field; and\nii.\tshall send the received Floor Release Multi Talker message over the MBMS subchannel; and\nb.\tif the received message-sequence-number value is lower or the same as the stored value, shall discard the received Floor Release Multi Talker message;\n3.\tif a message-sequence-number value associated with the conversation is not stored (i.e. this is the first floor control message received in the conversation):\na.\tshall store the received message-sequence-number value and associate the value with the conversation; and\nb.\tshall send the received Floor Release Multi Talker message over the MBMS subchannel;\n4.\tshall restart timer T15 (Conversation); and\n5.\tshall remain in the 'M: A conversation is active' state.\nWhen a floor control message other than the Floor Idle and Floor Taken message is received from a floor participant or received from the floor control server, the participating MCPTT function:\n1.\tshall forward the floor control message as specified in clause 6.4;\n2.\tshall restart timer T15 (Conversation); and\n3.\tshall remain in the 'M: A conversation is active' state.\nWhen receiving a RTP media packet destined to one of the MCPTT client listening to the MBMS subchannel, the participating MCPTT function:\nNOTE:\tAn RTP media packet not destined to an MCPTT client listening to the MBMS subchannel is forwarded to the MCPTT client over the unicast bearer.\n1.\tshall check if the media packet is already sent over the MBMS subchannel or not;\n2.\tif the RTP media packet is already sent over the MBMS subchannel, shall discard the RTP media packet;\n3.\tif the RTP media packet is not already sent over the MBMS sub channel, shall instruct the media distribution function to send the RTP media packet over the MBMS subchannel;\n4.\tshall restart timer T15 (Conversation); and\n5.\tshall remain in the 'M: A conversation is active' state.\nUpon expiry of timer T15 (Conversation), the participating MCPTT function shall:\n1.\tif the application indicates that there is no longer an MCPTT client listening to the MBMS bearer,\na.\tshall release the instance of the 'Participating MCPTT function MBMS subchannel management' state machine used for the conversation; and\nb.\tshall enter the 'Start-stop' state; and\n2.\tif the application indicates that there are MCPTT client still listening to the MBMS bearer:\na.\tshall send the Unmap Group To Bearer message over the MBMS subchannel. The Unmap Group To Bearer message:\ni.\tshall include the MCPTT Group ID field;\nb.\tshall start timer T17 (Unmap Group To Bearer) and initialise counter C17 (Unmap Group To Bearer) to 1; and\nc.\tshall remain in the 'M: A conversation is active' state.\nUpon expiry of timer T16 (Map Group To Bearer), the participating MCPTT function:\n1.\tshall send a Map Group To Bearer message over the general purpose MBMS subchannel. The Map Group To Bearer message:\na.\tshall include a TMGI field;\nb.\tshall include a MBMS Subchannel field; and\nc\tshall include the MCPTT Group identifier field;\n2.\tshall restart timer T16 (Map Group To Bearer); and\n3.\tshall remain in the 'M: A conversation is active' state.\nUpon expiry of timer T17 (Unmap Group To Bearer) less than the upper limit of counter C17 (Unmap Group To Bearer) times, the participating MCPTT function:\n1.\tshall send the Unmap Group To Bearer message over the MBMS subchannel. The Unmap Group To Bearer message:\na.\tshall include the MCPTT Group ID field; and\n2.\tshall restart the timer T17 (Map Group To Bearer re-transmit) and increment counter C17 (Unmap Group To Bearer) by 1.\nUpon expiry of timer T17 (Unmap Group To Bearer) by the upper limit of counter C17 (Unmap Group To Bearer), the participating MCPTT function:\n1.\tshall send the Unmap Group To Bearer message over the MBMS subchannel. The Unmap Group To Bearer message:\na.\tshall include the MCPTT Group ID field; and\n2.\tshall release the instance of the 'Participating MCPTT function MBMS subchannel management' state machine used for the conversation.\nUpon receiving an indication from the application and signalling plane that all MCPTT clients now listens to the unicast channel, the participating MCPTT function:\n1.\tshall release the instance of the 'Participating MCPTT function MBMS subchannel management' state machine used for the conversation.\nIf the control and signalling plane indicates that the group call session is released, the participating MCPTT function:\n1.\tshall send the Unmap Group To Bearer message over the MBMS subchannel. The Unmap Group To Bearer message:\na.\tshall include the MCPTT Group ID field;\n2.\tshall stop timer T15 (Conversation), timer T16 (Map Group To Bearer) and timer T17 (Unmap Group To Bearer), if running; and\n3.\tshall release the instance of the 'Participating MCPTT function MBMS subchannel management' state machine used for the conversation.\nIf the participating MCPTT server decides that an ongoing conversation over an MBMS bearer shall start using unicast bearers, the participating MCPTT function may send an Application Paging message over the MBMS subchannel associated with this conversation.\nNOTE:\tThe Application Paging message can be sent at the same time as the conversation is started using unicast bearers, this will improve the MCPTT access time since the Application Paging message in most cases will reach the client quicker than using normal paging procedures.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.3\tMBMS subchannel control procedure for the MCPTT client",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.3.1\tGeneral",
                            "text_content": "An MCPTT client that supports receiving floor control messages and RTP media packets over an MBMS bearer shall support the procedures in the following clauses.\nThe procedures in the following clauses assume that an MBMS bearer is active and announced as described in clause 4.1.3.\nNOTE:\tThe floor control procedures described in clause 6.2 are not impacted due to the use of an MBMS bearer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.2\tConversation over a pre-activated MBMS bearer is started",
                            "text_content": "When receiving a Map Group To Bearer message over the general purpose MBMS subchannel, the MBMS interface in the MCPTT client:\n1.\tshall associate the TMGI in the TMGI field, the MBMS subchannel for audio and for floor control with the MCPTT group identity in the MCPTT Group ID field.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.3\tReceive floor control messages and RTP media packets over a MBMS subchannel",
                            "text_content": "If the MBMS interface receives RTP media packets or floor control messages over the MBMS subchannel, the MBMS interface in the MCPTT client:\n1.\tif there is an association between the TMGI, the MBMS subchannel for audio and for floor control to an ongoing conversation in a group session:\na.\tshall forward the received floor control messages to the floor participant in the conversation; and\nb.\tif the received RTP media contains a different SSRC value than the SSRC value used by the MCPTT client, shall forward the received RTP packets to the media mixer in the conversation; and\n2.\tif there is no such association:\na.\tshall ignore the received floor control message or received RTP media packet.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.4\tConversation ended",
                            "text_content": "When receiving the Unmap Group To Bearer message over a MBMS subchannel, the MBMS interface in the MCPTT client:\n1.\tshall remove the association between the TMGI, the MBMS subchannel for audio and for floor control from the conversation in the group session identified by the MCPTT Group ID field, if such an association exists.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.5\tReceive Application Paging message",
                            "text_content": "When receiving an Application Paging message over an MBMS subchannel, an MCPTT client in idle mode shall make a service request to enter RRC Connected mode.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.6\tReceive MBMS bearer announcement over MBMS bearer",
                            "text_content": "When receiving an MBMS bearer announcement message over an MBMS subchannel, an MCPTT client shall acknowledge this message by sending an MBMS bearer listening status report as as specified in 3GPP TS 24.379 [2] clause 14.2.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.4\tHeader compression",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.4.1\tGeneral",
                            "text_content": "Packet headers can be compressed with ROHC (ref. RFC 5795 [20]) when delivered over MBMS to save network resources.\nThe participating MCPTT function can apply ROHC before pushing packets to the BM-SC over the MB2-U interface, or can request the BM-SC to apply ROHC, as described in 3GPP TS 29.468 [6].\nHeader compression is done after media plane encryption and header decompression is done before media plane decryption.\nHeader compression supported profiles for MCPTT are profile 0x0101 for RTP/UDP/IP compression, specified in RFC 5225 [22], and profile 0x0000 for sending uncompressed packets, specified in RFC 3095 [21]. MBMS subchannels encoded with profile 0x0101 use a distinct CID (ROHC context ID). One common CID may be used for all MBMS subchannels encoded with profile 0x0000.\nBefore establishing an MBMS bearer with header compression, the participating MCPTT function determines the value for the MAX_CID parameter (clause 5.1.2 in RFC 5795 [20]). If MAX_CID > 15 then the header compressor uses the large CID representation. Else, the header compressor uses the small CID representation.\nOnly the unidirectional mode of operation (clause 4.4.1 in IETF RFC 3095 [21]) is used for MCPTT over MBMS.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.4.2\tParticipating MCPTT function procedure for ROHC",
                            "text_content": "If the participating MCPTT function decides to compress headers for a given MBMS bearer, the participating MCPTT function:\n1)\tshall declare the usage of ROHC within the MBMS bearer announcement, as specified in 3GPP TS 24.379 [2];\n2)\tif the participating MCPTT function asks the BM-SC to apply ROHC (procedure 10.7.3.12.3 of 3GPP TS 23.280 [23]), the participating MCPTT function shall indicate the list of multicast IP and ports to be header compressed with profile 0x0101 when activating or modifying a MBMS bearer (see 3GPP TS 29.468 [6]); and\n3)\tif the participating MCPTT function applies ROHC (procedure 10.7.3.12.2 of 3GPP TS 23.280 [23]), the participating MCPTT function shall compress the packet headers according to RFC 3095 [21] and RFC 5795 [20] for any packet to be delivered to the MBMS bearer, using the unidirectional mode and without ROHC segmentation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.4.3\tMCPTT client procedure for ROHC",
                            "text_content": "If usage of ROHC is declared within the MBMS bearer announcement, as specified in 3GPP TS 24.379 [2], the MCPTT client:\n1)\tshall decompress the received ROHC packets according to RFC 3095 [21] and RFC 5795 [20]; and2)\tshall forward the decompressed packets to the media mixer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "10A\tAdditional MBMS procedures",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "10A.1\tGroup dynamic data notifications",
                    "description": "",
                    "summary": "",
                    "text_content": "Prior to using the MBMS bearer the participating MCPTT function needs to activate the MBMS bearer and announce the MBMS bearer as described in clause 4.1.3. The participating MCPTT function uses the listening status reports to decide for which users the participating MCPTT function sends the group dynamic data notifications over MBMS, and for which users the participating MCPTT function continues to use unicast bearers.\nThis procedure is used when MCPTT clients subscribe to group dynamic data. When the terminating participating function receives a SIP NOTIFY request towards a user listening to the MBMS subchannel that comes from the controlling MCPTT function and is related to a subscription for group dynamic data, the participating MCPTT function shall:\n1.\trespond to the SIP NOTIFY request with a SIP 200 (OK) request;\n2.\tmap the information in the SIP NOTIFY request to the information elements in clause 8.5.3; and\n3.\tsend the Group Dynamic Data Notify message over the MBMS bearer.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "10B\tMBS subchannel control procedure",
            "description": "All steps of clause 10 apply also for MBS, with the clarification that terminology mapping specified in Annex X applies.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "11\tConfigurable parameters",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "11.1\tTimers",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "11.1.1\tTimers in the on-network floor participant",
                            "text_content": "The table 11.1.1-1 recommends timer values, describes the reason for starting the timer, normal stop and the action on expiry for the on-network floor participant procedures.\nTable 11.1.1-1: Timers in the on-network floor participant\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 11.1.1-1: Timers in the on-network floor participant",
                                    "table number": 15,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "11.1.2\tTimers in the off-network floor participant",
                            "text_content": "The table 11.1.2-1 recommends timer values, describes the reason for starting the timer, normal stop and the action on expiry for the off-network floor participant procedures.\nTable 11.1.2-1: Timers in the off-network floor participant\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 11.1.2-1: Timers in the off-network floor participant",
                                    "table number": 16,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "11.1.3\tTimers in the floor control server",
                            "text_content": "The table 11.1.3-1 recommends timer values, describes the reason for starting the timer, normal stop and the action on expiry for the floor control server procedures.\nTable 11.1.3-1: Timers in the floor control server.\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 11.1.3-1: Timers in the floor control server.",
                                    "table number": 17,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "11.1.4\tTimers in the participating MCPTT function",
                            "text_content": "The table 11.1.4-1 and table 11.1.4-2 recommends timer values, describes the reason for starting the timer, normal stop and the action on expiry.\nTable 11.1.4-1 shows the timers used in the call over pre-established session procedures in the participating MCPTT function.\nTable 11.1.4-1: Timers in the participating MCPTT function for pre-established session control.\n\nTable 11.1.4-2 shows the timers used in the participating MCPTT function for MBMS channel control.\nTable 11.1.4-2: Timers in the participating MCPTT function for MBMS channel control.\n\nTable 11.1.4-3 shows the timers used in the participating MCPTT function for MBS channel control.\nTable 11.1.4-3: Timers in the participating MCPTT function for MBS channel control.\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 11.1.4-1: Timers in the participating MCPTT function for pre-established session control.",
                                    "table number": 18,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 11.1.4-2: Timers in the participating MCPTT function for MBMS channel control.",
                                    "table number": 19,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 11.1.4-3: Timers in the participating MCPTT function for MBS channel control.",
                                    "table number": 20,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                },
                {
                    "title": "11.2\tCounters",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "11.2.1\tCounters in the on-network floor participant",
                            "text_content": "Table 11.2.1-1 enlists counters, their limits and the action on expiry.\nTable 11.2.1-1: Counter used in the floor participant for on-network floor control\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 11.2.1-1: Counter used in the floor participant for on-network floor control",
                                    "table number": 21,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "11.2.2\tCounters in the off-network floor participant",
                            "text_content": "The table 11.2.2-1 lists the counters used by the off-network participant, their default upper limits and the action to take upon reaching the upper limit. The counters start at 1.\nTable 11.2.1.2-1: Counter used in the floor participant for off-network floor control\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 11.2.1.2-1: Counter used in the floor participant for off-network floor control",
                                    "table number": 22,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "11.2.3\tCounters in the controlling MCPTT function",
                            "text_content": "The table 11.2.3-1 enlists counters, their limits and the action on expiry for the 'general control operation' state machine in the controlling MCPTT function.\nTable 11.2.3-1: Counters used in the 'general floor control operation' state machine\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 11.2.3-1: Counters used in the 'general floor control operation' state machine",
                                    "table number": 23,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "11.2.4\tCounters in the participating MCPTT function",
                            "text_content": "The table 11.2.4-1 enlists counters, their limits and the action on expiry for the 'pre-established session state machine'.\nTable 11.2.4-1: Counters used in the 'pre-established session state machine'\n\nThe table 11.2.4-2 enlists counters, their limits and the action on expiry for the 'Participating MCPTT function MBMS subchannel control state machine'.\nTable 11.2.4-2: Counters used in the 'Participating MCPTT function MBMS subchannel control state machine'\n\nThe table 11.2.4-3 shows counters, their limits and the action on expiry for the 'Participating MCPTT function MBS subchannel control state machine'.\nTable 11.2.4-3: Counters used in the 'Participating MCPTT function MBS subchannel control state machine'\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 11.2.4-1: Counters used in the 'pre-established session state machine'",
                                    "table number": 24,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 11.2.4-2: Counters used in the 'Participating MCPTT function MBMS subchannel control state machine'",
                                    "table number": 25,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 11.2.4-3: Counters used in the 'Participating MCPTT function MBS subchannel control state machine'",
                                    "table number": 26,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "12\tExtensions within the present document",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "12.1\tSession description types defined within the present document",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "12.1.1\tGeneral",
                            "text_content": "This clause contains definitions for SDP parameters that are specific to SDP usage with MCPTT and therefore are not described in an RFC.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "12.1.2\tSDP \"fmtp\" attribute for MCPTT",
                            "text_content": "This clause defines the structure and syntax of the SDP \"fmtp\" attribute, when used to negotiate an MCPTT media plane control channel. The MCPTT media plane control channel, and the protocols used on the control channel, is described in the present specification.\nIn an SDP offer and answer, the \"mc_queueing\" fmtp attribute is used to indicate support of the Floor Request message queueing mechanism, as defined in the present specification.\nIn an SDP offer, the \"mc_priority\" fmtp attribute indicates (using an integer value between '1' and '255') the maximum floor priority that the offerer requests to be used with Floor Request messages sent by the offerer. In an SDP answer, the attribute parameter indicates the maximum priority level that the answerer has granted to the offerer. The value must be equal or less than the value provided in the associated SDP offer.\nNOTE 1: If the \"mc_priority\" fmtp attribute is not used within an SDP offer or answer, a default priority value is assumed.\nIn an SDP offer, the \"mc_granted\" fmtp attribute parameter indicates that the offerer supports the procedure where the answerer indicates, using the fmtp attribute in the associated SDP answer, that the floor has been granted to the offerer.\nNOTE 2: When the \"mc_granted\" fmtp attribute is used in an SDP offer, it does not indicate an actual request for the floor. The SDP \"mc_implicit_request\" fmtp attribute can be used to request the floor. In an SDP answer, the attribute indicates that the floor has been granted to the offerer.\nNOTE 3: Once the offerer has been granted the floor, the offerer has the floor until it receives a Floor Revoke message, or until the offerer itself releases the floor by sending a Floor Release message, as described in the present specification.\nIn an SDP offer, the \"mc_implicit_request\" fmtp attribute indicates that the offerer implicitly requests the floor (without the need to send a Floor Request message). In an SDP answer, the attribute parameter indicates that the answerer has accepted the implicit floor request. Once the answerer grants the floor to the offerer, the answerer will send a Floor Granted message.\nNOTE 4: The usage of the \"mc_implicit_request\" fmtp attribute in an SDP answer does not mean that the answerer has granted the floor to the offerer, only that the answerer has accepted the implicit floor request.\nIn an SDP answer, the \"mc_ssrc\" fmtp attribute indicates the value of the Audio SSRC to be used by the offerer. The value may be equal to the value provided in the associated SDP offer or different, e.g. if a collision is detected. If the associated SDP offer does not indicate the ssrc value then the server determines an appropriate value. This value is returned in an SDP answer only if the answerer accepts the implicit floor request offered in SDP.\nIn an SDP offer, the \"mc_no_floor_ctrl\" fmtp attribute indicates that the offerer wants to use pre-established session call control during the session without floor control over the offered media plane control channel. In an SDP answer, the attribute parameter indicates that the answerer has accepted the request to use the offered media plane control channel for pre-established session call control during the session without floor control.\nIn an SDP offer (resp. SDP answer), the \"mc_floor_ssrc\" fmtp attribute indicates the SSRC that the answerer (resp. offerer) shall use in the RTCP header of Floor Control messages sent to the offerer (resp. answerer) in this session.\nTable 12.1.2.3-1: SDP \"fmtp\" attribute for the MCPTT media plane control channel\n\nfmtp-attr-mpcp      =  \"a=fmtp:\" \"MCPTT\" SP attr-param-list\nattr-param-list     =  attr-param *(COLON attr-param)\nattr-param          =  mc_queueing / mc_priority / mc_granted / mc_implicit_request / mc_ssrc / mc_no_floor_ctrl / mc_floor_ssrc\nmc_queueing         =  \"mc_queueing\"\nmc_priority         =  \"mc_priority=\" 1*2(DIGIT)\nmc_granted          =  \"mc_granted\"\nmc_implicit_request =  \"mc_implicit_request\"\nmc_ssrc\t\t        =  \"mc_ssrc=\" 1*(DIGIT)\nmc_no_floor_ctrl    =  \"mc_no_floor_ctrl\"\nmc_floor_ssrc       =  \"mc_floor_ssrc=\" 1*(DIGIT)\n\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "13\tMedia plane security",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "13.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "Media plane security provides integrity and confidentiality protection of individual media streams and media plane control messages in MCPTT sessions.\nThe media plane security is based on 3GPP MCPTT security solution including key management and end-to-end media and floor control messages protection as defined in 3GPP TS 33.180 [18].\nVarious keys and associated key identifiers protect:\n1.\tRTP transported media;\n2.\tRTCP transported media control messages (i.e. RTCP SR packets, RTCP RR packets, RTCP SDES packets);\n3.\tRTCP APP transported floor control messages;\n4.\tRTCP APP transported pre-established session call control messages; and\n5.\tRTCP APP transported MBMS subchannel control messages.\nIn an on-network group call of an MCPTT group which is not a constituent MCPTT group of a temporary MCPTT group:\n1.\tif protection of media is negotiated, the GMK and the GMK-ID of the MCPTT group protect the media sent and received by an MCPTT clients;\n2.\tif protection of floor control messages sent using unicast between the MCPTT client and the participating MCPTT function serving the MCPTT client is negotiated, the CSK and the CSK-ID protect the floor control messages sent and received using unicast by the MCPTT client and by a participating MCPTT function;\n3.\tif protection of floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients is required:\nA)\tif a MuSiK and a MuSiK-ID are associated with the on-network group call, the MuSiK and the MuSiK-ID associated with the on-network group call protect the floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients; and\nB)\tif a MuSiK and a MuSiK-ID are not associated with the on-network group call, the MKFC and the MKFC-ID of the MCPTT group protect the floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients;\nNOTE 1:\tIf protection of floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients is required and the participating MCPTT function is compliant to Release 14 of the present document, a MuSiK and a MuSiK-ID are always associated with the on-network group call.\n4.\tif protection of floor control messages between the participating MCPTT function and the controlling MCPTT function is negotiated, the SPK and the SPK-ID protect the floor control messages sent and received between the participating MCPTT function and the controlling MCPTT function;\n5.\tif protection of media control messages sent using unicast between the MCPTT client and the participating MCPTT function serving the MCPTT client is negotiated, the CSK and the CSK-ID protect the media control messages sent and received using unicast by the MCPTT client and by a participating MCPTT function; and\n6.\tif protection of media control messages between the participating MCPTT function and the controlling MCPTT function is negotiated, the SPK and the SPK-ID protect the media control messages sent and received between the participating MCPTT function and the controlling MCPTT function.\nIn an on-network group call of an MCPTT group which is a constituent MCPTT group of a temporary MCPTT group:\n1.\tif protection of media is negotiated, the GMK and the GMK-ID of the temporary MCPTT group protect the media sent and received by an MCPTT client;\n2.\tif protection of floor control messages sent using unicast between the MCPTT client and the participating MCPTT function serving the MCPTT client is negotiated, the CSK and the CSK-ID protect the floor control messages sent and received using unicast by the MCPTT client and by the participating MCPTT function;\n3.\tif protection of floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients is required:\nA)\tif a MuSiK and a MuSiK-ID are associated with the on-network group call, the MuSiK and the MuSiK-ID associated with the on-network group call protect the floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients; and\nB)\tif a MuSiK and a MuSiK-ID are not associated with the on-network group call, the MKFC and the MKFC-ID of the temporary MCPTT group protect the floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients;\nNOTE 2:\tIf protection of floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients is required and the participating MCPTT function is compliant to Release 14 of the present document, a MuSiK and a MuSiK-ID are always associated with the on-network group call.\n4.\tif protection of floor control messages between the participating MCPTT function and the non-controlling MCPTT function is negotiated, the SPK and the SPK-ID protect the floor control messages sent and received between the participating MCPTT function and the non-controlling MCPTT function;\n5.\tif protection of floor control messages between the non-controlling MCPTT function and the controlling MCPTT function is negotiated, the SPK and the SPK-ID protect the floor control messages sent and received between the non-controlling MCPTT function and the controlling MCPTT function;\n6.\tif protection of media control messages sent using unicast between the MCPTT client and the participating MCPTT function serving the MCPTT client is negotiated, the CSK and the CSK-ID protect the media control messages sent and received using unicast by the MCPTT client and by a participating MCPTT function;\n7.\tif protection of media control messages between the participating MCPTT function and the non-controlling MCPTT function is negotiated, the SPK and the SPK-ID protect the media control messages sent and received between the participating MCPTT function and the non-controlling MCPTT function; and\n8.\tif protection of media control messages between the non-controlling MCPTT function and the controlling MCPTT function is negotiated, the SPK and the SPK-ID protect the media control messages sent and received between the non-controlling MCPTT function and the controlling MCPTT function.\nIn an on-network private call:\n1.\tif protection of media is negotiated, the PCK and the PCK-ID protect media sent and received by the MCPTT clients;\n2.\tif protection of floor control messages sent using unicast between the MCPTT client and the participating MCPTT function serving the MCPTT client is negotiated, the CSK and the CSK-ID protect the floor control messages sent and received by the MCPTT client and by the participating MCPTT function;\n3.\tif protection of floor control messages between the participating MCPTT function and the controlling MCPTT function is negotiated, the SPK and the SPK-ID protect the floor control messages sent and received between the participating MCPTT function and the controlling MCPTT function;\n4.\tif protection of media control messages sent using unicast between the MCPTT client and the participating MCPTT function serving the MCPTT client is negotiated, the CSK and the CSK-ID protect the media control messages sent and received using unicast by the MCPTT client and by a participating MCPTT function; and\n5.\tif protection of media control messages between the participating MCPTT function and the controlling MCPTT function is negotiated, the SPK and the SPK-ID protect the media control messages sent and received between the participating MCPTT function and the controlling MCPTT function.\nIn an off-network group call of an MCPTT group:\n1.\tif protection of media is announced, the GMK and the GMK-ID of the MCPTT group protect the media sent and received by an MCPTT client;\n2.\tif protection of floor control messages is announced, the GMK and the GMK-ID of the MCPTT group protect the floor control messages sent and received by an MCPTT client; and\n3.\tif protection of media control messages is announced, the GMK and the GMK-ID of the MCPTT group protect the media sent and received by an MCPTT client.\nIn an off-network private call:\n1.\tif protection of media is negotiated, the PCK and the PCK-ID protect media sent and received by an MCPTT client;\n2.\tif protection of floor control messages is negotiated, the PCK and the PCK-ID protect floor control messages sent and received by an MCPTT client; and\n3.\tif protection of media control messages is negotiated, the PCK and the PCK-ID protect media control messages and received by an MCPTT client.\nIn an pre-established session, if the pre-established session call control messages between the MCPTT client and the participating MCPTT function serving the MCPTT client are negotiated to be protected, the CSK and the CSK-ID protect the pre-established session call control messages sent and received by the MCPTT client and by the participating MCPTT function serving the MCPTT client.\nIf protection of MBMS subchannel control messages sent over the general purpose MBMS subchannel of an MBMS bearer is required, the MSCCK and the MSCCK-ID associated with the MBMS bearer protect the MBMS subchannel control messages sent over the general purpose MBMS subchannel of the MBMS bearer by the participating MCPTT function to the MCPTT client.\nThe GMK and the GMK-ID are distributed to the MCPTT clients using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12].\nThe CSK and the CSK-ID are generated by the MCPTT client and provided to the participating MCPTT function serving the MCPTT client using SIP signalling according to 3GPP TS 24.379 [2].\nThe MKFC and the MKFC-ID are distributed to the MCPTT clients using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12]. The MKFC and the MKFC-ID are distributed to the controlling MCPTT function using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12] and the controlling MCPTT function provides the MKFC and the MKFC-ID to the participating MCPTT function using SIP signalling according to 3GPP TS 24.379 [2].\nThe SPK and the SPK-ID are configured in the participating MCPTT function, the controlling MCPTT function and the non-controlling MCPTT function.\nThe PCK and the PCK-ID are generated by the MCPTT client initiating the private call and provided to the MCPTT client receiving the private call using SIP signalling according to 3GPP TS 24.379 [2], using Connect message described in clause 8.3.4 or using MONP signalling according to 3GPP TS 24.379 [2].\nThe MSCCK and the MSCCK-ID associated with an MBMS bearer are generated by the participating MCPTT function which activated the MBMS bearer and are provided to one or more served MCPTTs clients using SIP signalling according to 3GPP TS 24.379 [2].\nThe MuSiK and the MuSiK-ID are associated with the on-network group call according to 3GPP TS 24.379 [2].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "13.2\tDerivation of SRTP/SRTCP master keys",
                    "description": "",
                    "summary": "",
                    "text_content": "Each key (i.e. CSK, GMK, MKFC, PCK, SPK, MSCCK, MuSiK) and its associated key identifier (i.e. CSK-ID, GMK-ID, MKFC-ID, PCK-ID, SPK-ID, MSCCK-ID, MuSiK-ID) described in clause 13.1 are used to derive SRTP-MK, SRTP-MS and SRTP-MKI.\nSRTP-MK, SRTP-MS and SRTP-MKI are used in encryption of media or floor control messages in SRTP as specified in IETF RFC 3711 [16] and 3GPP TS 33.180 [18].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "13.3\tMedia plane encryption and decryption",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "13.3.1\tGeneral",
                            "text_content": "Void.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "13.3.2\tThe participating MCPTT function",
                            "text_content": "The participating MCPTT function:\n1.\tif protection of media is negotiated, shall be transparent to RTP media streams and shall forward encrypted RTP media streams without decrypting the payload;\n2.\tif protection of floor control messages sent using unicast between the participating MCPTT function and the MCPTT client is negotiated and the CSK and the CSK-ID were received from the MCPTT client using SIP signalling according to 3GPP TS 24.379 [2]:\nA)\tshall encrypt floor control messages sent using unicast to the served MCPTT client according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nB)\tshall decrypt floor control messages received using unicast from the served MCPTT client according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2;\n3.\tif protection of floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients is required and a MuSiK and a MuSiK-ID are associated with the on-network group call of the floor control messages:\nA)\tshall encrypt floor control messages sent over the MBMS subchannel according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the MuSiK and MuSiK-ID as specified in clause 13.2;\nNOTE:\tThe participating MCPTT function compliant to Release 14 of the present document does not use MKFC and MKFC-ID.\n4.\tif protection of floor control messages between the participating MCPTT function and the controlling MCPTT function is negotiated and the SPK and the SPK-ID are configured in the participating MCPTT function:\nA)\tshall encrypt floor control messages sent to the controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tshall decrypt floor control messages received from the controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2;\n5.\tif protection of floor control messages between the participating MCPTT function and the non-controlling MCPTT function is negotiated and the SPK and the SPK-ID are configured in the participating MCPTT function:\nA)\tshall encrypt floor control messages sent to the non-controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tshall decrypt floor control messages received from the non-controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2;\n6.\tif protection of pre-established session call control messages between the participating MCPTT function and the MCPTT client is negotiated and the CSK and the CSK-ID were received from the MCPTT client using SIP signalling according to 3GPP TS 24.379 [2]:\nA)\tshall encrypt pre-established session call control messages sent to the served MCPTT client according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nB)\tshall decrypt pre-established session call control messages received from served MCPTT client according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2;\n7.\tif protection of media control messages sent using unicast between the participating MCPTT function and the MCPTT client is negotiated between the participating MCPTT function and the MCPTT client and the CSK and the CSK-ID were received from the MCPTT client using SIP signalling according to 3GPP TS 24.379 [2];\nA)\tshall encrypt media control messages sent using unicast to the served MCPTT client according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nB)\tshall decrypt media control messages received using unicast from the served MCPTT client according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2;\n8.\tif protection of media control messages between the participating MCPTT function and the controlling MCPTT function is negotiated and the SPK and the SPK-ID are configured in the participating MCPTT function:\nA)\tshall encrypt media control messages sent to the controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tshall decrypt media control messages received from the controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2;\n9.\tif protection of media control messages between the participating MCPTT function and the non-controlling MCPTT function is negotiated and the SPK and the SPK-ID are configured in the participating MCPTT function:\nA)\tshall encrypt media control messages sent to the non-controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tshall decrypt media control messages received from the non-controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\n10.\tif protection of MBMS subchannel control messages sent over the general purpose MBMS subchannel of an MBMS bearer is required and the MSCCK and the MSCCK-ID associated with the MBMS bearer were sent to one or more served MCPTT clients using SIP signalling according to 3GPP TS 24.379 [2]:\nA)\tshall encrypt MBMS subchannel control messages specified in clause 8.4 sent over the general purpose MBMS subchannel of the MBMS bearer according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the MSCCK and MSCCK-ID associated with the MBMS bearer as specified in clause 13.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "13.3.3\tThe MCPTT client",
                            "text_content": "The MCPTT client:\n1.\tin an on-network group call of an MCPTT group which is not a constituent MCPTT group of a temporary MCPTT group:\nA)\tif protection of media is negotiated and the GMK and the GMK-ID of the MCPTT group were received using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12] for the MCPTT group:\ni)\tshall encrypt sent media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID as specified in clause 13.2; and\nii)\tshall decrypt received media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID as specified in clause 13.2;\nB)\tif protection of floor control messages sent using unicast is negotiated and the CSK and the CSK-ID were sent to the participating MCPTT function using SIP signalling according to 3GPP TS 24.379 [2]:\ni)\tshall encrypt floor control messages sent using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nii)\tshall decrypt floor control messages received using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2;\nC)\tif protection of floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients is required:\ni)\tif a MuSiK and a MuSiK-ID are associated with the on-network group call, shall decrypt floor control messages received over the MBMS subchannel for floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the MuSiK and the MuSiK-ID associated with the on-network group call as specified in clause 13.2; and\nii)\tif a MuSiK and a MuSiK-ID are not associated with the on-network group call and the MKFC and the MKFC-ID of the MCPTT group were received using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12] for the MCPTT group, shall decrypt floor control messages received over the MBMS subchannel for floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the MKFC and MKFC-ID as specified in clause 13.2; and\nNOTE 1:\tThe MCPTT client can receive floor control messages encrypted using SRTP-MK, SRTP-MS and SRTP-MKI generated using the MKFC and MKFC-ID from a participating MCPTT function compliant only to Release 13 of the present document.\nD)\tif protection of media control messages sent using unicast between the participating MCPTT function and the MCPTT client is negotiated and the CSK and the CSK-ID were sent to the participating MCPTT function using SIP signalling according to 3GPP TS 24.379 [2]:\ni)\tshall encrypt media control messages sent using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nii)\tshall decrypt media control messages received using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2;\n2.\tin an on-network group call of an MCPTT group which is a constituent MCPTT group of a temporary MCPTT group:\nA)\tif protection of media is negotiated and the GMK and the GMK-ID of the temporary MCPTT group were received using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12] for the constituent MCPTT group:\ni)\tshall encrypt sent media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID of the temporary MCPTT group as specified in clause 13.2; and\nii)\tshall decrypt received media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID of the temporary MCPTT group as specified in clause 13.2;\nB)\tif protection of floor control messages sent using unicast is negotiated and the CSK and the CSK-ID were sent to the participating MCPTT function using SIP signalling according to 3GPP TS 24.379 [2]:\ni)\tshall encrypt floor control messages sent using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nii)\tshall decrypt floor control messages received using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2;\nC)\tif protection of floor control messages sent over the MBMS subchannel from the participating MCPTT function to the served MCPTT clients is required:\ni)\tif a MuSiK and a MuSiK-ID are associated with the on-network group call, shall decrypt floor control messages received over the MBMS subchannel for floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the MuSiK and the MuSiK-ID associated with the on-network group call as specified in clause 13.2; and\nii)\tif a MuSiK and a MuSiK-ID are not associated with the on-network group call and the MKFC and the MKFC-ID of the temporary MCPTT group were received using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12] for the constituent MCPTT group, shall decrypt floor control messages received over the MBMS subchannel for floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the MKFC and MKFC-ID of the temporary MCPTT group as specified in clause 13.2; and\nNOTE 2:\tThe MCPTT client can receive floor control messages encrypted using SRTP-MK, SRTP-MS and SRTP-MKI generated using the MKFC and MKFC-ID from a participating MCPTT function compliant only to Release 13 of the present document.\nD)\tif protection of media media control messages sent using unicast between the participating MCPTT function and the MCPTT client is negotiated and the CSK and the CSK-ID were sent to the participating MCPTT function using SIP signalling according to 3GPP TS 24.379 [2]:\ni)\tshall encrypt media control messages sent using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2;\nii)\tshall decrypt media control messages received using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2;\n3.\tin an on-network private call:\nA)\tif:\ni)\tprotection of media is negotiated in originating call and the PCK and the PCK-ID were sent to the remote MCPTT client using SIP signalling according to 3GPP TS 24.379 [2]; or\nii)\tprotection of media is negotiated in terminating call and the PCK and the PCK-ID were received from the remote MCPTT client using SIP signalling according to 3GPP TS 24.379 [2];\nthen:\ni)\tshall encrypt sent media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the PCK and PCK-ID as specified in clause 13.2; and\nii)\tshall decrypt received media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the PCK and PCK-ID as specified in clause 13.2;\nB)\tif protection of floor control messages is negotiated and the CSK and the CSK-ID were sent to the participating MCPTT function using SIP signalling according to 3GPP TS 24.379 [2]:\ni)\tshall encrypt sent floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nii)\tshall decrypt received floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nD)\tif protection of media media control messages sent using unicast between the participating MCPTT function and the MCPTT client is negotiated and the CSK and the CSK-ID were sent to the participating MCPTT function using SIP signalling according to 3GPP TS 24.379 [2]:\ni)\tshall encrypt media control messages sent using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nii)\tshall decrypt media control messages received using unicast according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2;\n4.\tin an off-network group call of an MCPTT group:\nA)\tif protection of media is announced and the GMK and GMK-ID of the MCPTT group were received when on-network using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12] for the MCPTT group:\ni)\tshall encrypt sent media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID as specified in clause 13.2; and\nii)\tshall decrypt received media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID as specified in clause 13.2;\nB)\tif protection of floor control messages is announced and the GMK and the GMK-ID of the MCPTT group were received when on-network using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12] for the MCPTT group:\ni)\tshall encrypt sent floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID as specified in clause 13.2; and\nii)\tshall decrypt received floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID as specified in clause 13.2; and\nC)\tif protection of media control messages is announced and the GMK and GMK-ID of the MCPTT group were received when on-network using the group document subscription and notification procedure specified in 3GPP TS 24.481 [12] for the MCPTT group:\ni)\tshall encrypt sent sent media control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID as specified in clause 13.2; and\nii)\tshall decrypt received received media control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the GMK and GMK-ID as specified in clause 13.2;\n5.\tin an off-network private call:\nA)\tif:\ni)\tprotection of media is negotiated in originating call and the PCK and the PCK-ID were sent to the remote MCPTT client using MONP signalling according to 3GPP TS 24.379 [2]; or\nii)\tprotection of media is negotiated in terminating call and the PCK and the PCK-ID were received from the remote MCPTT client using MONP signalling according to 3GPP TS 24.379 [2];\nthen:\ni)\tshall encrypt sent media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the PCK and PCK-ID as specified in clause 13.2; and\nii)\tshall decrypt received media according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the PCK and PCK-ID as specified in clause 13.2;\nB)\tif:\ni)\tprotection of floor control messages is negotiated in originating call and the PCK and the PCK-ID were sent to the remote MCPTT client using MONP signalling according to 3GPP TS 24.379 [2]; or\nii)\tprotection of floor control messages is negotiated in terminating call and the PCK and the PCK-ID were received from the remote MCPTT client using MONP signalling according to 3GPP TS 24.379 [2].\nthen:\ni)\tshall encrypt sent floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the PCK and PCK-ID as specified in clause 13.2; and\nii)\tshall decrypt received floor control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the PCK and PCK -ID as specified in clause 13.2; and\nC)\tif:\ni)\tprotection of media control messages is negotiated in originating call and the PCK and the PCK-ID were sent to the remote MCPTT client using MONP signalling according to 3GPP TS 24.379 [2]; or\nii)\tprotection of media control messages is negotiated in terminating call and the PCK and the PCK-ID were received from the remote MCPTT client using MONP signalling according to 3GPP TS 24.379 [2];\nthen:\ni)\tshall encrypt sent sent media control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the PCK and PCK-ID as specified in clause 13.2; and\nii)\tshall decrypt received received media control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the PCK and PCK-ID as specified in clause 13.2;\n6.\tif protection of pre-established session control messages is negotiated and the CSK and the CSK-ID were sent to the participating MCPTT function using SIP signalling according to 3GPP TS 24.379 [2]:\nA)\tshall encrypt sent pre-established session call control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\nB)\tshall decrypt received pre-established session call control messages according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the CSK and CSK-ID as specified in clause 13.2; and\n6.\tif the MSCCK and the MSCCK-ID associated with the MBMS bearer were received from the participating MCPTT function using SIP signalling according to 3GPP TS 24.379 [2]:\nA)\tshall decrypt MBMS subchannel control messages specified in clause 8.4 received over the general purpose MBMS subchannel of the MBMS bearer according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the MSCCK and MSCCK-ID associated with the MBMS bearer as specified in clause 13.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "13.3.4\tThe controlling MCPTT function",
                            "text_content": "The controlling MCPTT function:\n1.\tif protection of media is negotiated, shall be transparent to RTP media streams and shall forward encrypted RTP media streams without decrypting the payload;\n2.\tin an on-network group call of an MCPTT group which is not a constituent MCPTT group of a temporary MCPTT group:\nA)\tif protection of floor control messages between the controlling MCPTT function and the participating MCPTT function is negotiated and the SPK and the SPK-ID are configured in the controlling MCPTT function:\ni)\tshall encrypt floor control messages sent to the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nii)\tshall decrypt floor control messages received from the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tif protection of media control messages between the controlling MCPTT function and the participating MCPTT function is negotiated and the SPK and the SPK-ID are configured in the controlling MCPTT function:\ni)\tshall encrypt media control messages sent to the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nii)\tshall decrypt media control messages received from the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2;\n3.\tin an on-network group call of an MCPTT group which is a constituent MCPTT group of a temporary MCPTT group:\nA)\tif protection of floor control messages between the controlling MCPTT function and the non-controlling MCPTT function is negotiated and the SPK and the SPK-ID are configured in the controlling MCPTT function:\ni)\tshall encrypt floor control messages sent to the non-controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nii)\tshall decrypt floor control messages received from the non-controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tif protection of media control messages between the controlling MCPTT function and the non-controlling MCPTT function is negotiated and the SPK and the SPK-ID are configured in the controlling MCPTT function:\ni)\tshall encrypt media control messages sent to the non-controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nii)\tshall decrypt media control messages received from the non-controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\n4.\tin an on-network private call:\nA)\tif protection of floor control messages between the controlling MCPTT function and the participating MCPTT function is negotiated and the SPK and the SPK-ID are configured in the controlling MCPTT function:\ni)\tshall encrypt floor control messages sent to the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nii)\tshall decrypt floor control messages received from the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tif protection of media control messages between the controlling MCPTT function and the participating MCPTT function is negotiated and the SPK and the SPK-ID are configured in the controlling MCPTT function:\ni)\tshall encrypt media control messages sent to the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2;\nii)\tshall decrypt media control messages received from the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "13.3.5\tThe non-controlling MCPTT function",
                            "text_content": "The non-controlling MCPTT function:\n1.\tif protection of media is negotiated, shall be transparent to RTP media streams and shall forward encrypted RTP media streams without decrypting the payload;\n2.\tif protection of floor control messages between the non-controlling MCPTT function and the participating MCPTT function is negotiated and the SPK and the SPK-ID are configured in the non-controlling MCPTT function:\nA)\tshall encrypt floor control messages sent to the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tshall decrypt floor control messages received from the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2;\n3.\tif protection of floor control messages between the non-controlling MCPTT function and the controlling CPTT function is negotiated and the SPK and the SPK-ID are configured in the non-controlling MCPTT function:\nA)\tshall encrypt floor control messages sent to the controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tshall decrypt floor control messages received from the controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2;\n4)\tif protection of media control messages between the non-controlling MCPTT function and the participating MCPTT function is negotiated and the SPK and the SPK-ID are configured in the non-controlling MCPTT function:\nA)\tshall encrypt media control messages sent to the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tshall decrypt media control messages received from the participating MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\n5)\tif protection of media control messages between the non-controlling MCPTT function and the controlling MCPTT function is negotiated and the SPK and the SPK-ID are configured in the non-controlling MCPTT function:\nA)\tshall encrypt media control messages sent to the controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2; and\nB)\tshall decrypt media control messages received from the controlling MCPTT function according to IETF RFC 3711 [16] and 3GPP TS 33.180 [18] using SRTP-MK, SRTP-MS and SRTP-MKI generated using the SPK and SPK-ID as specified in clause 13.2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "14\tSDP offer/ answer procedures",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "14.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The capabilities described in clause 4.3 are negotiated in the signalling and application plane using SDP offer / answer in SIP requests or SIP responses as specified in 3GPP TS 24.379 [2].\nNOTE:\tIf the group is configured for audio cut-in floor control the \"mc_quueing\" and the \"mc_priority\" attributes are ignored as specified in 3GPP TS 24.379 [2].\nThis clause describes the details of the SDP offer / answer procedures with regards to the MCPTT fmtp attribute in the \"m=application\" m-line.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "14.2\tGenerating an SDP offer",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "14.2.1\tGeneral",
                            "text_content": "When the offerer generates an SDP offer, in order to negotiate the establishment of a media plane control channel, the offerer shall include a media description (\"m=\" line) associated with the media plane control channel. In addition, the offerer may associate an SDP fmtp attribute with the media description.\nNOTE:\t\"Initial offer\" refers to the offer when the media plane control channel is initially negotiated. It might, or might not, be the initial offer within the session.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.2.2\t\"mc_queueing\" fmtp attribute",
                            "text_content": "The MCPTT client shall include the \"mc_queueing\" fmtp attribute in SDP offers when queueing of floor request is supported.\nThe controlling MCPTT function shall include the \"mc_queueing\" fmtp attribute in SDP offers when queueing of floor request is supported.\nThe non-controlling MCPTT function shall include the \"mc_queueing\" fmtp attribute in SDP offers if the controlling MCPTT included the \"mc_queueing\" fmtp attribute in the SDP offer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.2.3\t\"mc_priority\" fmtp attribute",
                            "text_content": "The MCPTT client shall include the \"mc_priority\" fmtp attribute when a floor priority different than the default priority is required. The MCPTT client should base floor priority on the configured value in 3GPP TS 24.484 [13].\nWhen inviting an MCPTT client or an MCPTT group to a pre-arranged group call, the controlling MCPTT function and the non-controlling MCPTT function shall include in the \"mc_priority\" fmtp attribute with the value of the <user-priority> element in the <entry> element specified in 3GPP TS 24.481 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.2.4\t\"mc_granted\" fmtp attribute",
                            "text_content": "The MCPTT client shall include the \"mc_granted\" fmtp attribute in the SDP offer of an initial SIP INVITE request when it is acceptable for the MCPTT client to receive a granted indication in the SIP 200 (OK) response to an initial INVITE request.\nNOTE:\tThe use of \"mc_granted\" fmtp attribute in the SDP offer in SIP requests does not replace or change the basic operation of Floor Granted message as described in clause 6.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.2.5\t\"mc_implicit_request\" fmtp attribute",
                            "text_content": "The MCPTT client shall include the \"mc_implicit_request\" fmtp attribute when a SIP request shall be interpreted as an implicit floor request. If not explicitly stated in procedures in the present document or in procedures in 3GPP TS 24.379 [2] that the \"mc_implicit_request\" fmtp attribute shall be included, the decision to include the \"mc_implicit_request\" fmtp attribute or not, is an implementation option.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.2.6\t\"mc_no_floor_ctrl\" fmtp attribute",
                            "text_content": "When the MCPTT user wants to make a private call or a first-to-answer call without floor control using a pre-established session, the MCPTT client shall include the \"mc_no_floor_ctrl\" fmtp attribute in SDP offer of a SIP request. The floor control related fmtp attributes shall not be included.\nThe MCPTT client shall include the \"mc_no_floor_ctrl\" fmtp attribute in SDP offer of an initial SIP INVITE request for establishing pre-established session when a floor control shall not be used during the private call or first-to-answer call session. The floor control related fmtp attributes shall not be included.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.2.7\t\"mc_floor_ssrc\" fmtp attribute",
                            "text_content": "The MCPTT client, the participating MCPTT function, the controlling MCPTT function and the non-controlling MCPTT function shall include the \"mc_floor_ssrc\" fmtp attribute in SDP offers if multiplexing is supported.\nThe offerer shall assign a unique SSRC value to be used by the answerer in the media floor control messages sent to the offerer in this session, for the offerer to be able to associate the received media floor control message to the correct session in case of multiplexing. The assigned SSRC value shall be unique for the offerer to ensure that there is no SSRC collision.\nThe offerer shall include that assigned SSRC value in an \"mc_floor_ssrc\" fmtp attribute in the SDP offer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "14.3\tGenerating the SDP answer",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "14.3.1\tGeneral",
                            "text_content": "When the answerer receives an SDP offer, which contains a media description for a media plane control channel, the answerer shall include a media description associated with the media plane control channel in the answer. In addition, the answerer may associate an SDP fmtp attribute with the media description. The SDP fmtp attribute shall not include parameters that were not present in the associated SDP offer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.3.2\t\"mc_queueing\" fmtp attribute",
                            "text_content": "The MCPTT client shall include the \"mc_queueing\" fmtp attribute in SDP answers when queueing of floor request is supported.\nThe controlling MCPTT function shall include the \"mc_queueing\" fmtp attribute in SDP answers when queueing of floor request is supported and the \"mc_queueing\" fmtp attribute was included in the SDP offer.\nThe non-controlling MCPTT function shall include the \"mc_queueing\" fmtp attribute in SDP answers if the controlling MCPTT function included the \"mc_queueing\" fmtp attribute in the SDP offer.\nNOTE:\tFor MCPTT clients connected to the non-controlling MCPTT function, the determination of if queueing is supported or not is determine case by case using the Track Info field for each individual floor participant.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.3.3\t\"mc_priority\" fmtp attribute",
                            "text_content": "If the \"mc_priority\" fmtp attribute is included in an SDP offer, the controlling MCPTT function:\n1.\tif the <on-network-recvonly> element is present in the <entry> element as specified in 3GPP TS 24.481 [12] for the MCPTT user identified by the <entry> element, shall not include a \"mc_priority\" fmtp attribute in the SDP answer;\n2.\tif the <on-network-recvonly> element is not present in the <entry> element as specified in 3GPP TS 24.481 [12] for the MCPTT user identified by the <entry> element in the MCPTT group document:\na.\tshall determine the priority value to include in \"mc_priority\" fmtp attribute of the SDP answer, by choosing the lowest value from the following inputs:\ni.\tthe value of floor priority in the \"mc_priority\" fmtp attribute included in the SDP offer;\nii.\tthe value of the <user-priority> element in the MCPTT group document as specified in 3GPP TS 24.481 [12]; and\niii\tthe value of the <num-levels-priority-hierarchy> element in the MCPTT service configuration document as specified in 3GPP TS 24.484 [13]; and\nb.\tshall include the priority value determined above in step 2a, in the \"mc_priority\" fmtp attribute of the SDP answer.\nIf the \"mc_priority\" fmtp attribute is included in an SDP offer, the MCPTT client and the non-controlling MCPTT function shall return the value included in the SDP offer in the SDP answer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.3.4\t\"mc_granted\" fmtp attribute",
                            "text_content": "If the mc_granted\" fmtp attribute is included in an SDP offer, the controlling MCPTT function:\n1.\tif the MCPTT call is not a temporary group session, may use the SIP 200 (OK) response to indicate that the implicit floor request is granted; and\n2.\tif the MCPTT call is a temporary group session, shall not indicate that the implicit floor request is granted.\nNOTE:\tA MCPTT group call is a temporary group session when the <on-network-temporary> element is present in the <list-service> element as specified in 3GPP TS 24.481 [12].\nIf the controlling MCPTT function grants the implicit request and decide to use the SIPP 200 (OK) response to grant the implicit request, the controlling MCPTT function shall include the \"mc_granted\" fmtp attribute in the SDP answer.\nIf the controlling MCPTT function decides not to grant the implicit request, the controlling MCPTT function shall not include the \"mc_granted\" fmtp attribute in the SDP answer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.3.5\t\"mc_implicit_request\" fmtp attribute",
                            "text_content": "If the \"mc_implicit_request\" fmtp attribute is included in an SDP offer, the MCPTT server shall accept the initial INVITE request to be an implicit request for floor unless the MCPTT client is joining a chat group call or an ongoing pre-arranged call and include the \"mc_implicit_request\" fmtp attribute in responses to the SIP request.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.3.6\t\"mc_ssrc\" fmtp attribute",
                            "text_content": "If the \"ssrc\" media attribute is included in an SDP offer and the SIP request shall be interpreted as an implicit floor request (\"mc_implicit_request\" fmtp attribute is included), the MCPTT server shall return the value included in the SDP offer or a new ssrc value if a collision is detected or if the associated SDP offer does not indicate the ssrc value then the server can determine an appropriate value in the SDP answer of \"mc_ssrc\" fmtp attribute irrespective of whether \"mc_granted\" fmtp attribute is present or not in the application m-line.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.3.7\t\"mc_no_floor_ctrl\" fmtp attribute",
                            "text_content": "If the \"mc_no_floor_ctrl\" fmtp attribute is included in an SDP offer, the MCPTT server shall accept the initial SIP INVITE request for establishing pre-established session without the floor control support during the private call or first-to-answer call session and include the \"mc_implicit_request\" fmtp attribute in responses to the initial SIP INVITE request. Shall discard if any floor control related fmtp attributes are included.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.3.8\t\"mc_floor_ssrc\" fmtp attribute",
                            "text_content": "The MCPTT client, the participating MCPTT function, the controlling MCPTT function and the non-controlling MCPTT function shall include the \"mc_floor_ssrc\" fmtp attribute in SDP answers if multiplexing is supported and that the \"mc_floor_ssrc\" fmtp attribute was received in the SDP offers.\nThe answerer shall assign a unique SSRC value to be used by the offerer in the media floor control messages sent to the answerer in this session, for the answerer to be able to associate the received media floor control message to the correct session in case of multiplexing. The assigned SSRC value shall be unique for the answerer to ensure that there is no SSRC collision.\nThe answerer shall include that assigned SSRC value in an \"mc_floor_ssrc\" fmtp attribute in the SDP answer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "14.4\tOfferer processing of the SDP answer",
                    "description": "",
                    "summary": "",
                    "text_content": "If the offerer receives an SDP answer that includes the \"mc_ssrc\" fmtp attribute, the offerer shall use the returned value from the \"mc_ssrc\" fmtp attribute of SDP answer even if the \"mc_ssrc\" attribute was not present in the associated offer.\nIf the offerer receives an SDP answer that includes the \"mc_floor_ssrc\" fmtp attribute the offerer shall treat the SDP answerer as an entity that supports multiplexing and may based on that information determine that support for multiplexing.\nWhen the offerer receives an SDP answer, if an SDP fmtp attribute is associated with the media description associated with the media plane control channel, and if the attribute contains attribute parameters that were not present in the associated offer, the offerer shall discard those attribute parameters.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "14.5\tModifying the media plane control channel",
                    "description": "",
                    "summary": "",
                    "text_content": "When an offerer generates a subsequent SDP offer, the offerer follows the rules for generating an initial offer, as described in clause 14.2, with the exception that the offerer shall not include the 'mc_granted' SDP fmtp attribute parameter in a subsequent offer. No semantics has been defined for the 'mc_granted' attribute parameter in a subsequent offer.\nFor the 'mc_implicit_request' semantic is only defined for a subsequent SDP offer when upgrading from normal to an emergency call using an SIP re-INVITE request as specified in 3GPP TS 24.379 [2].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "14.6\tThe use of SDP offer / answer procedures in off-network mode",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "14.6.1\tGeneral",
                            "text_content": "The MCPTT client can negotiate the capabilities used in a private call using PRIVATE CALL SETUP REQUEST message and PRIVATE CALL ACCEPT message as specified in 3GPP TS 24.379 [2]. The PRIVATE CALL SETUP REQUEST message contains the SDP offer and the PRIVATE CALL ACCEPT message contains the SDP answer.\nWhen initiating a group call or a broadcast group call using the GROUP CALL ANNOUNCEMENT message or GROUP CALL BROADCAST message as specified in 3GPP TS 24.379 [2] the capabilities to be used during the call cannot be negotiated.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "14.6.2\tfmtp attribute \"mc_queueing\"",
                            "text_content": "When initiating a private call and if the MCPTT client supports queueing of floor requests, the MCPTT client shall include the fmtp attribute \"mc_queueing\" in the SDP offer.\nWhen an MCPTT client accepting the invitation to the private call receives an SDP offer containing the fmtp attribute \"mc_queueing\" and if the MCPTT client supports queueing of floor requests, the MCPTT client shall include the fmtp attribute \"mc_queueing\" in the SDP answer.\nWhen initiating a group call and if queueing of floor requests is supported, the MCPTT client shall include the fmtp attribute \"mc_queueing\" in the SDP offer.\nNOTE:\tParticipants in a group call where queueing is used acknowledge the support of queueing in the Floor Indicator field in the Floor Request message.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "A.1\tScope of signalling flows",
            "description": "This annex gives examples of signalling flows for media plane such as:\n1.\tOn-network floor control signalling flows;\n2.\tOff-network floor control signalling flows;\n2.\tPre-established session control signalling; and\n3.\tMBMS subchannel control signalling flows.\nThese signalling flows provide detailed signalling flows, which expand on the overview information flows provided in 3GPP TS 23.379 [5].\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "A.2\tIntroduction",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "General",
                    "description": "",
                    "summary": "",
                    "text_content": "The signalling flows provided in this annex follow the methodology developed in this specification.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "Key required to interpret signalling flows",
                    "description": "",
                    "summary": "",
                    "text_content": "In order to differentiate between messages for floor control, pre-established call session control, MBMS subchannel control messages, SIP messages and RTP media packets, the notation in figure A.2.2-1 is used.\nThe figure depicts a simplified representation of the signalling flow in a 5G network, illustrating the various components involved in the communication process. The diagram includes the base station (gNB), user equipment (UE), and scatterers, highlighting the importance of beamforming techniques to mitigate interference. The layered design of the optical backbone aligns with SDN principles, emphasizing the importance of redundancy and failover reliability.\nFigure A.2.2-1: Signalling flow notation\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "A.3\tOn-network floor control signalling flows",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "A.3.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The following clauses contain the following on-network example flows:\n1.\tFloor request when the floor is idle in clause A.3.2;\n2.\tFloor request when floor is taken and queueing is not applied in clause A.3.3;\n3.\tFloor request when floor is taken and queueing is applied in clause A.3.4; and\n4.\tPre-emptive floor request when floor is taken in clause A.3.5.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.3.2\tFloor request when the floor is idle",
                    "description": "",
                    "summary": "",
                    "text_content": "Figure A.3.2-1 illustrates a case a user request floor and is granted the floor during an ongoing MCPTT call.\nThe figure depicts a floor request when the floor is idle, showing a request for a floor to be available for use. The request is sent to the floor manager, who then sends a request to the floor to be available. The floor manager then sends a request to the floor to be available to the floor manager, and so on, until the floor is ready for use.\nFigure A.3.2-1: Floor request when the floor is idle\nThe user at MCPTT client A wants to talk and presses the push-to-talk button.\nThe steps of the flow are as follows:\n1.\tThe floor participant in the MCPTT client A sends a Floor Request message to the floor control server.\n2.\tWhen the floor control interface towards the MCPTT client A receives the Floor Request message in the 'U: not permitted and Floor Idle' state the Floor Request message is forwarded to the floor control arbitration logic.\n3.\tWhen the floor control arbitration logic receives the Floor Request message in the 'G: Idle' state, the floor request is authorized. If the floor request is authorized, the floor control arbitration logic sends the Floor Granted message to the floor control interface towards the MCPTT client A and changes the state to 'G: Floor Taken'.\n4.\tThe floor control interface towards the MCPTT client A forwards the Floor Granted message to the floor participant in the associated MCPTT client and changes the state to 'U: permitted'.\n5.\tThe floor control arbitration logic sends a Floor Taken message to all other participants in the MCPTT call via the other floor control interfaces towards the MCPTT clients.\nWhen the Floor Taken message is received by the other floor control interfaces towards the MCPTT clients the Floor Taken message is forwarded to the floor participant in the associated MCPTT client and the state is changed to the 'U: not permitted and Floor Taken' state.\n6.\tOn receipt of the Floor Granted message the floor participant in the associated MCPTT client provides a grant notification to the MCPTT user, changes the state to 'U: has permission' and the MCPTT client A starts to forward RTP media packets towards the MCPTT server.\n7.\tThe media distributor distributes the RTP media packets to all other MCPTT clients in the MCPTT call.\n8.\tWhen the user at MCPTT client A stops talking and releases the push-to-talk button the floor participant in the MCPTT client A sends a Floor Release message to the floor control server and enter the 'U: pending Release' state.\n9.\tWhen the floor control interface towards the MCPTT client A receives the Floor Release message the Floor Release message is forwarded to the floor control arbitration logic. The floor control interface towards the MCPTT client A allows the last RTP media packets to be forwarded to the media distributor in the MCPTT server.\n10.\tWhen the last RTP media packet is forwarded to the media distributor in the MCPTT server the floor control interface towards the MCPTT client A sends the Floor Idle message to the floor participant in associated MCPTT client A and changes the state to 'U: not permitted and Floor Idle'.\n11.\tWhen the floor control arbitration logic receives the Floor Release message the last RTP media packets are allowed to be forwarded.\n12.\tWhen the last RTP media packets are distributed by the media distributor the floor control arbitration logic sends a Floor Idle message to all participants in the MCPTT call with the exception of the MCPTT client that was permitted to send media and changes state to 'G: Floor Idle'. The Floor Idle message is forwarded by the other floor control interface towards MCPTT clients. The state in the other floor control interface towards MCPTT clients is changed to 'U: not permitted and Floor Idle'.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.3.3\tFloor request when floor is taken and queueing is not applied",
                    "description": "",
                    "summary": "",
                    "text_content": "Figure A.3.3-1 illustrates a case when a user requests the floor when the floor is taken and queueing is not applied in the MCPTT call.\nThe figure depicts a floor request when the floor is taken when queueing is not applied, illustrating the process of floor requests in a queueing system.\nFigure A.3.3-1: Floor request when floor is taken when queueing is not applied\nOne of the users in the MCPTT call wants to speak and presses the push-to-talk when the floor is already taken by the MCPTT client A.\n1.\tThe floor participant in one of the other MCPTT clients sends the Floor Request message towards the floor control server. The Floor participant enters the 'U: pending Request' state.\n2.\tWhen one of the other floor control interface towards MCPTT clients receives a Floor Request message in the 'U: not permitted and Floor Taken' state and if:\n-\tthe floor request does not include higher priority than the current user permitted to talk requested; and\n-\twhen queueing of floor requests are not negotiated;\nthen the other floor control interface towards MCPTT clients send a Floor Deny message towards the floor participant in the associated MCPTT client.\nWhen the floor participant in the associated MCPTT client receives the Floor Deny message, the floor participant provides a deny notification to the user. The Floor participant enters the 'U: has no permission' state.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.3.4\tFloor request when floor is taken and queueing is applied",
                    "description": "",
                    "summary": "",
                    "text_content": "Figure A.3.4-1 illustrates a case when a user request floor when the floor is taken and queueing is applied in the MCPTT call.\nThe figure depicts a floor request when the floor is taken and queueing is applied, illustrating the process of floor request management in a queueing system.\nFigure A.3.4-1: Floor request when floor is taken and queueing applied\nThe user at MCPTT client B wants to speak and presses the push-to-talk when the floor is already taken by the MCPTT client A.\nThe steps of the flow is as follows:\n1.\tThe floor participant in the MCPTT client B sends the Floor Request message towards the floor control server.\n2.\tWhen the floor control interface towards the MCPTT client B receives a Floor Request message in the 'U: not permitted and Floor Taken' state and if:\na.\tthe floor request does not include higher priority than the user already permitted to talk requested; and\nb.\twhen queueing of floor requests are negotiated as specified in clause 14;\nthen the floor control interface towards the MCPTT client B queues the Floor Request message and sends a Floor Queue Position Info message towards the floor participant in the MCPTT client B.\nWhen the floor participant in MCPTT client B receives the Floor Queue Position Info message the floor participant provides a queueing indication to the user and enters the 'U: queued' state.\n3.\tWhen the user at MCPTT client A stops talking and releases the push-to-talk button the floor participant in the MCPTT client A sends a Floor Release message to the floor control server and enters the 'U: pending Release' state.\n4.\tWhen the floor control interface towards the MCPTT client A receives the Floor Release message the Floor Release message is forwarded to the floor control arbitration logic.\n5.\tWhen the floor control arbitration logic receives the Floor Release message the last RTP media packets are allowed to be forwarded. When the last RTP media packets are distributed the floor control arbitration logic checks the active floor request queue. In this example there is one floor request in the queue and a Floor Granted message is sent towards the floor participant in the MCPTT client B.\n6.\tThe floor control interface towards MCPTT client B interface forwards the Floor Granted message to the floor participant in MCPTT client B and changes the state to 'U: permitted'.\n7.\tThe floor control arbitration logic sends a Floor Taken message to all other participants in the MCPTT call via the other floor control interfaces towards MCPTT clients.\nWhen the Floor Taken message is received by the other floor control interface towards MCPTT clients Floor Taken message is forwarded to the floor participants in the associated MCPTT client. The floor participant in the MCPTT client A changes the state to the 'U: not permitted and Floor Taken' state.\n8.\tOn receipt of the Floor Granted message the floor participant in MCPTT client B provides a grant notification to the MCPTT user, changes the state to 'U: has permission' and the MCPTT client A starts to forward RTP media packets towards the MCPTT server.\n9.\tThe media distributor distributes the RTP media packets to all other MCPTT clients in the MCPTT call.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.3.5\tPre-emptive floor request when floor is taken",
                    "description": "",
                    "summary": "",
                    "text_content": "Figure A.3.5-1 shows the message flow when a user with pre-emptive priority request floor when the floor is already taken by another user.\nThe figure depicts a pre-emptive floor request system, where a floor is taken before the request is processed. The system uses a priority queue to determine which requests are processed first. The figure shows the system's architecture, including the floor request queue, the request processing system, and the floor request system.\nFigure A.3.5-1: Pre-emptive floor request when floor is taken\nThe user at MCPTT client B wants to interrupt the user at the MCPTT client presses the push-to-talk indicating a pre-emptive priority.\nThe steps of the flow are as follows:\n1.\tThe floor participant in the MCPTT client B sends the Floor Request message towards the floor control server. The message includes a pre-emptive priority.\n2.\tWhen the floor control interface towards MCPTT client interface in the MCPTT server receives a Floor Request message in the 'U: not permitted and Floor Taken' state and since the Floor Request message includes a higher pre-emptive priority than the user that is already permitted to send media the floor control interface towards the MCPTT client sends the Floor Request message to the floor control server arbitration logic.\n3.\tWhen the floor control server arbitration logic receives the Floor Request message with the high pre-emptive priority, the floor control server arbitration logic revokes the current talker's permission to talk by sending a Floor Revoke message to the floor control interface towards the MCPTT client A.\n4.\tThe floor control interface towards MCPTT client A forwards the Floor Revoke message to the floor participant in MCPTT A.\n5.\tWhen the floor participant in the MCPTT client A receives the Floor Revoke message, the floor participant provides a floor revoke indication to the MCPTT user, sends a Floor Release message and changes the state to 'U: pending Release'.\n6. When the floor control interface towards the MCPTT client A receives the Floor Release message, the Floor Release message is forwarded to the floor control server arbitration logic.\n7.\tWhen the floor control arbitration logic receives the Floor Release message the last RTP media packets are allowed to be received. When the last RTP media packets are distributed the floor control arbitration logic sends a Floor Granted message towards the floor control interface towards the MCPTT client B.\n8.\tThe floor control interface towards MCPTT client receives the Floor Granted message the Floor Granted message is sent to the floor participant in MCPTT client B and changes the state to 'U: permitted'.\n9.\tThe floor control arbitration logic sends a Floor Taken message to all other participants in the MCPTT call via the other floor control interfaces towards the MCPTT clients.\nWhen the Floor Taken message is received by the other floor control interfaces to MCPTT clients the Floor Taken message is forwarded to the floor participant in the associated MCPTT client. The floor participant in the MCPTT client A changes the state to the 'U: not permitted and Floor Taken' state.\n10.\tOn receipt of the Floor Granted message the floor participant in MCPTT client B provides a grant notification to the MCPTT user, changes the state to 'U: has permission' and the MCPTT client A starts to forward RTP media packets towards the MCPTT server.\n11.\tThe media distributor in the MCPTT server distributes the RTP media packets to all other MCPTT clients in the MCPTT call.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "A.4\tOff-network floor control signalling flows",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "A.4.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause provides the following message flow examples:\n1.\tfloor request when the floor is idle is shown in clause A.4.2.1;\n2.\tfloor request when floor is taken and queueing of floor requests is not applied is shown in clause A.4.2.2;\n3.\tfloor request when floor is taken and queueing of floor requests is applied is shown in clause A.4.2.3; and\n4.\tpre-emptive floor request when floor is taken is shown in clause A.4.2.4.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.4.2\tOff-network floor control during an MCPTT group call",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "A.4.2.1\tFloor request when the floor is idle",
                            "text_content": "Figure A.4.2.1-1 illustrates a user's floor request when the floor is idle i.e. there is no floor arbitrator.\nThe figure depicts a floor request when the floor is idle, showing a request for a floor to be available for use. The request is sent to the floor manager, who then sends a request to the floor to be available. The floor manager then sends a request to the floor to be available to the floor manager, and so on, until the floor is ready for use.\nFigure A.4.2.1-1: Floor request when the floor is idle\nThe user at MCPTT client A wants to talk and presses the push-to-talk button.\nThe steps of the flow are as follows:\n1.\tThe floor participant in the MCPTT client A sends a Floor Request message towards other MCPTT clients and starts timer T201 (Floor Request). MCPTT client A moves to 'O: pending request' state.\n2.\tOn expiry of T201 (Floor Request) MCPTT client A re-sends the Floor Request message and restarts timer T201 (Floor Request). This step has to be repeated for a pre-configured number of times (3 times in the example figure) before assuming that the floor is idle.\n3.\tOn the expiry of the last iteration of timer T201 (Floor Request), MCPTT client A sends a Floor Taken message towards other MCPTT client and assumes the role of floor arbitrator. MCPTT client A moves to 'O: has permission state'.\n4.\tOn receiving Floor Taken message, all other MCPTT clients move to 'O: has no permission state'.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "A.4.2.2\tFloor request when floor is taken and queueing of floor requests is not applied",
                            "text_content": "Figure A.4.2.2-1 illustrates a user's floor request when the floor is taken and queueing is not applied in the MCPTT call.\nThe figure depicts a floor request when the floor is taken when the queue is not applied, illustrating the process of managing and prioritizing floor requests in a queue system.\nFigure A.4.2.2-1: Floor request when floor is taken when queueing is not applied\nOne of the users in the MCPTT call wants to speak and presses the push-to-talk when the floor is already taken by the MCPTT client B and queueing is not applied.\n1.\tThe floor participant in MCPTT client A sends the Floor Request message towards other MCPTT clients. The Floor participant enters the 'O: pending request' state.\n2.\tOn receiving Floor Request message, MCPTT client B sends a Floor Deny message with MCPTT client A's ID towards all MCPTT clients.\n3.\tOn receiving Floor Deny message, MCPTT client A moves back to 'O: has no permission' state.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "A.4.2.3\tFloor request when floor is taken and queueing is applied",
                            "text_content": "Figure A.4.2.3-1 illustrates a user's floor request when the floor is taken and queueing is applied in the MCPTT call.\nThe figure depicts a floor request when the floor is taken and queueing is applied, illustrating the process of managing floor requests in a queueing system.\nFigure A.4.2.3-1: Floor request when floor is taken and queueing applied\nThe users at MCPTT client A wants to speak and presses the PTT button when the floor is already taken by the MCPTT client B.\nThe steps of the flow are as follows:\n1.\tThe floor participant in the MCPTT client A sends the Floor Request message towards other MCPTT clients. MCPTT client A moves to 'O: pending request' state and starts timer T201 (Floor Request).\n2.\tOn expiry of timer T201 (Floor Request) MCPTT client A re-sends the Floor Request message and restarts timer T201 (Floor Request). This step has to be repeated for a pre-configured number of times before assuming that the floor is idle.\n3.\tReceiving RTP media indicates that the floor is taken and a floor arbitrator is present. Sending multiple requests till a reply to the request is received helps reduce conflicts. Therefore, the counter associated to T201 (Floor Request) is reset every time RTP media is received.\n4.\tOn receiving Floor Queue Position Info message from the floor arbitrator, MCPTT client A stops timer T201 (Floor Request) and moves to 'O: queued' state. Any RTP media received in this state is rendered.\n5.\tWhen the user at MCPTT client B indicates to terminate RTP media transmission, MCPTT client B sends Floor Granted message to the next (MCPTT client A) in queue. MCPTT client B start timer T205 (Floor Granted request) and moves to 'O: pending grant' state.\n6.\tOn receiving Floor Granted message, MCPTT client A starts timer T233 (pending user action) and waits for user to indicate start of RTP media transmission.\n7.\tOn expiry of timer T205 (Floor Granted) MCPTT client B re-sends the Floor Granted message and restarts timer T205 (Floor Granted). This step has to be repeated for a pre-configured number of times while no media is received from MCPTT client A.\n8. Upon expiry of timer T205 (Floor Granted) for a preconfigured number of times, MCPTT client B starts timer T233 (pending user action), waiting for RTP media from MCPTT client A.\n9.\tMCPTT client A stops timer T233 (pending user action) upon user action. MCPTT client A moves to 'O: has permission' state and starts transmission of RTP media as floor arbitrator.\n10.\tOn receiving RTP media from MCPTT client A, MCPTT client B stops timer T233 (pending user action) and moves to 'O: has no permission' state.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "A.4.2.4\tPre-emptive floor request when floor is taken",
                            "text_content": "Figure A.4.2.4-1 shows the message flow when a user requests floor with a pre-emptive priority when the floor is already taken.\nThe figure depicts a pre-emptive floor request system, which is a crucial component in managing floor space in a building. The system uses a series of floor request buttons, each labeled with a unique number, to signal the need for a floor change. The system is designed to be user-friendly and efficient, with a clear and intuitive interface for users to easily navigate through the process. The figure also includes a visual representation of the floor request system, including the buttons, labels, and the overall layout of the system. This helps to ensure that users can understand the system's functionality and how to use it effectively. Overall, the figure provides a comprehensive overview of the pre-emptive floor request system, making it easier for users to understand and use the system.\nFigure A.4.2.4-1: Pre-emptive Floor request\nThe user at MCPTT client A, with higher priority than the current floor arbitrator, wants to speak and presses the push-to-talk when the floor is taken by the MCPTT client B.\nThe steps of the flow are as follows:\n1.\tThe floor participant in the MCPTT client A sends the pre-emptive Floor Request message towards other MCPTT clients and starts timer T201 (Floor Request). MCPTT client A moves to 'O: pending request' state.\n2.\tUpon receiving a higher priority floor request, MCPTT client B sends Floor Granted message and start timer T205 (Floor Granted request) . Any RTP media transmission is stopped and MCPTT client B moves to 'O: pending grant' state. User at MCPTT client B can be notified of the pre-emption and any RTP media transmission is stooped.\n3.\tOn expiry of timer T205 (Floor Granted) the MCPTT client B re-sends the Floor Granted message and restarts timer T205 (Floor Granted). This step has to be repeated for a pre-configured number of times, if no RTP media from MCPTT client A.\n4.\tMCPTT client A moves to 'O: has permission' state and assumes the role of floor arbitrator upon receiving Floor Granted message.\n5.\tOn receiving RTP media from MCPTT client A, MCPTT client B stops timer T205 (Floor Granted) and moves to 'O: has no permission' state.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "A.5\tPre-established session signalling flows",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "A.5.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "In the following clauses signalling flows are presented for sample procedures related to the call setup and the call release when pre-established session is used.\nThe behaviour of an originating and terminating client is specified in clause 9.2. The behaviour of the participating MCPTT function is specified in clause 9.3\nThe behaviour of the controlling MCPTT function is specified in 3GPP TS 24.379 [2]\nOnly the names of the messages are indicated on the signal flow arrows. The information elements of each message can be found in clause 9.2 and clause 9.3 for media plane control messages and in 3GPP TS 24.379 [2] for SIP messages.\nThe signalling flow diagrams also indicate the state of the MCPTT client and the participating MCPTT function in the state machines specified in clause 9.2 and clause 9.3 respectively.\nWhen the call initialization is accepted additional floor control dialogue is also indicated in the signalling flow.\nThe following signalling flows are provided:\n1.\tcall initialization at the originating side when the initialization is accepted (clause A.5.2.1);\n2.\tcall initialization at the originating side when the initialization is rejected (clause A.5.2.2);\n3.\tcall initialization at the termination side when call is accepted (clause A.5.2.3); and\n4.\tcall release (clause A.5.3).\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.5.2\tCall Initialization",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "A.5.2.1\tOriginating Side when initialization accepted",
                            "text_content": "Figure A.5.2.1-1 illustrates the flow of MCPT and MCPC messages when the call initiation request sent by an originating MCPTT client is accepted by the controlling MCPTT function. In this diagram it is assumed that the call initiation request includes implicit floor request.\nThe figure depicts a call initiation process in a 5G network, with the originating side highlighted. The call is initiated by the user equipment (UE) and is then forwarded to the base station (gNB) for further processing. The figure illustrates the various components involved in the call initiation process, including the gNB, the user equipment, and the base station.\nFigure A.5.2.1-1: Call initialization accepted; originating side\nOne of the users with a pre-established session initiates a call and the call is accepted by the controlling MCPTT function. Steps 1 to 5 are conducted using SIP messages (see 3GPP TS 24.379 [2]).\n1.\tA pre-established session is created between the origination MCPTT user and the participating MCPTT server. The MCPTT client is in 'U: Pre-established session not in use\" state and the participating MCPTT function is in 'G: Pre-established session not in use' state.\n2.\tThe origination MCPTT client initiates a call as described in 3GPP TS 24 379 [2] by sending a SIP REFER message. The participating MCPTT function enters into 'G: Pre-established session in use' state.\n3.\tThe participating MCPTT function sends SIP 200 (OK) to the originating MCPTT client and then the originating MCPTT client enters into 'U:Pre-established session in use' state.\n4-5.The participating MCPTT function sends a SIP INVITE message to the controlling MCPTT function and receives the SIP 200 (OK) response from the controlling MCPTT function.\n6.\tThe participating MCPTT server sends a 'Connect' message to the Originating MCPTT client.\n7.\tThe originating MCPTT client responds with an Acknowledge (accepted) message.\n8.\tThe controlling MCPTT server grants the floor to the originating MCPTT client by sending a Floor Granted message\n9.\tThe participating MCPTT server forwards the Floor Granted message to the originating MCPTT client\n10.\tThe originating MCPTT clients starts sending the media packets.\n11.\tThe participating MCPTT server forwards the media packets to the controlling MCPTT server.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "A.5.2.2\tOriginating Side when initialization rejected",
                            "text_content": "Figure A.5.2.2-1 illustrates the flow of MCPC messages when the call initiation request by an originating MCPTT client is rejected.\nThe figure depicts a call initialization rejected scenario, showing a call that has been terminated due to a failed call setup. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination. The call setup includes a call setup, a call setup failure, and a call termination\nFigure A.5.2.2-1: Call initialization rejected\nOne of the users with a pre-established session initiates a call and the call is rejected by the controlling MCPTT function. Steps 1- 5 are conducted using SIP messages (see 3GPP TS 24.379 [2]).\n1.\tA pre-established session is created between the origination MCPTT client and the participating MCPTT server. The MCPTT client is in 'U:Pre-established session not in use\" state and the participating MCPTT function is in 'G: Pre-established session not in use' state.\n2.\tThe origination MCPTT client initiates a call as described in 3GPP TS 24.379 [2] by sending a SIP REFER message.The participating MCPTT function enters into 'G:Pre-established session in use' state.\n3.\tThe participating MCPTT function sends SIP 200 (OK) to the originating MCPTT client and then the originating MCPTT client enters into 'U:Pre-established session in use' state.\n4-5.The participating MCPTT function sends a SIP INVITE message to the controlling MCPTT function and receives SIP 4xx response from the controlling MCPTT function. The participating MCPTT function enters into 'G: Call Releasing' state.\n6.\tThe participating MCPTT server sends a Disconnect message to the originating MCPTT client. The originating MCPTT client enters into 'U: Pre-established session not in use' state.\n7.\tThe originating MCPTT client responds with an Acknowledge message. After receiving the Acknowledge message the participating MCPTT function enters into 'G:Pre-established session not in use' state.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "A.5.2.3\tTermination Side when call initialization accepted",
                            "text_content": "Figure A.5.2.3-1 illustrates the flow of MCPC and MCPT messages when the call initiation is informed to the terminating MCPTT client. In this figure it is assumed that the call initiation request includes implicit floor request. Although the figure shows only one terminating MCPTT client, the messaging takes place with each one of the terminating MCPTT clients with a pre-established session.\nThe figure depicts a call initiation and termination process in a telecommunications network. It shows the signaling process, including the call setup, call termination, and call termination confirmation. The figure illustrates the use of signaling protocols such as signaling protocol 1 (SP1) and signaling protocol 2 (SP2) to ensure reliable communication.\nFigure A.5.2.3-1: Call initialization accepted; terminating side\nWhen a call initiation is accepted by the controlling MCPTT function, the terminating MCPTT client(s) with pre-established session is (are) informed. Steps 1 to 3 are conducted using SIP messages (see 3GPP TS 24.379 [2]).\n1.\tA pre-established session is created between the terminating MCPTT user and the participating MCPTT server. The MCPTT client is in 'U: Pre-established session not in use\" state and the participating MCPTT function is in 'G: Pre-established session not in use' state.\n2.\tThe controlling MCPTT server informs the participating MCPTT server the call initiation by sending an SIP INVITE message. The participating MCPTT function enters into 'G: pre-established session in use' state.\n3.\tThe participating MCPTT function sends SIP 200 (OK) to the controlling MCPTT function.\n4.\tThe participating MCPTT function sends a Connect message to the terminating MCPTT client.\n5.\tThe terminating MCPTT client responds with an Acknowledge message. The terminating MCPTT client enters into 'U:Pre-established session in use' state.\n6.\tThe controlling MCPTT server informs that the floor is granted to another MCPTT client by sending a Floor Taken message\n7.\tThe participating MCPTT server forwards the Floor Taken message to the originating MCPTT client\n8.\tThe controlling MCPTT server starts distributing the media packets sent by the talking MCPTT client.\n9.\tThe participating MCPTT server forwards the media packets to the terminating MCPTT client.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "A.5.3\tCall release",
                    "description": "",
                    "summary": "",
                    "text_content": "Figure A.5.3-1 illustrates the flow of MCPC messages when the call is released but the pre-established session used by this call is preserved.\nThe figure depicts a call release for a call with pre-established session, showing the call setup and release process. The call setup includes the call number, the session ID, and the call type. The release process involves the call being released to the network, and the call being placed on the network.\nFigure A.5.3-1: Call release for a call with pre-established session\nA call with a pre-established session is released by preserving the pre-established session used by this call. Steps 2 and 3 are conducted using SIP messages (see 3GPP TS 24.379 [2]).\n1.\tA call using a pre-established session is being conducted. The MCPTT client is in 'U:Pre-established session in use' state and the participating MCPTT function is in 'G: Pre-established session in use' state.\n2.\tThe call release decision is taken by the controlling MCPTT function and informed to the participating MCPTT function as described in 3GPP TS 24.379 [2] by sending a SIP BYE message.\n3.\tThe participating MCPTT function sends an SIP ACK message to the controlling MCPTT function and enters into 'G: Call Releasing' state.\n4.\tThe participating MCPTT server sends a Disconnect message to the MCPTT client of this pre-established session.\n5.\tThe MCPTT client sends an Acknowledge message to the participating MCPTT server. The MCPTT client enters to 'U: Pre-established session not in use' state and the participating MCPTT function is in 'G: Pre-established session not in use' state.\n6.\tThe pre-established session between the MCPTT client and the participating MCPTT server is preserved.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "A.6\tMBMS subchannel control signalling flows",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "A.6.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The following clauses describe examples of how an MBMS bearer is managed during group call.\nThe following signalling flows are provided:\n-\tannouncing MBMS subchannels (clause A.6.2);\n-\tinitiating a conversation and requesting floor, originating side (clause A.6.3); and\n-\treleasing floor and ending a conversation (clause A.6.4).\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.6.2\tAnnouncing MBMS subchannels",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause contains an example message flow illustrating how the participating MCPTT function announces MBMS subchannels.\nThe pre-requisites to the flow are:\n1.\tThe MCPTT client participates in an ongoing group session. The group session can be either a chat group session or a pre-arranged group session.\n2.\tThere is no conversation ongoing, i.e. the floor is idle.\n3.\tThe group session has a small number of participants that depending on the availability of MBMS subchannels can use a MBMS subchannel or the unicast bearer when in an MBMS service area.\nFigure A.6.2-1 shows the message flow.\nThe figure depicts MBMS subchannels, which are used to deliver multimedia services over the 5G network. The subchannels are distributed across the network, with each subchannel carrying a specific set of services, such as video, voice, and data. The figure shows the distribution of subchannels, with each subchannel represented by a different color and symbol, indicating the type of service it carries. The figure also includes a legend to help users understand the different subchannels and their respective services. Overall, the figure provides a clear and concise representation of the MBMS subchannels in the 5G network.\nFigure A.6.2-1: Announcing MBMS subchannels\nThe steps of the message flow are as follows:\n1.\tA group session is ongoing. This can be a chat group or a pre-arranged group. The MCPTT session identity for this group is 12345@controller1.mcptt-op.net.\n2.\tThe participating MCPTT function pre-activates MBMS bearers. The trigger for doing this is implementation dependent but can be a result of received location reports from MCPTT clients served by the participating MCPTT function.\n3-5.\tThe participating MCPTT functions sends a SIP MESSAGE request to a selected number of MCPTT clients. This can happen exactly after a pre-activated MBMS bearer is created or when an MCPTT client registers or an MCPTT user affiliates to a group. The SIP MESSAGE request contains:\na.\tthe \"application/vnd.3gpp.mcptt-mbms-usage-info\" MIME body with:\ni.\ta reference to media line in the \"application/sdp\" MIME body where the general purpose MBMS subchannels are defined in the <SDP-ref> element; and\nii.\tone or more <announcement> elements where each announcement contains:\nA.\tTMGI in the <TMGI> element identifying the announcement;\nB.\tQCI in the <QCI> element;\nC.\tif multiple carrier are supported, frequency in the <frequency> element;\nD.\ta list of MBMS service areas in the <mbms-service-areas> element;\nb.\tan \"application/sdp\" MIME body with:\ni.\tone \"m=audio …\" media line containing the relevant media-line attributes. Where:\nA.\tthe IP address is set the unspecified address (0.0.0.0), if IPv4, or to a domain name within the \".invalid\" DNS top-level domain, if IPv6; and\nB\tthe port number is set to \"9\".\ni.\tone \"m=application …\" media line to be used as the general purpose MBMS subchannel; and\nii.\toptionally, one or more \"a=application …\" media lines to be used as the MBMS subchannel for floor control.\n6-8.\tThe MCPTT client acknowledges the SIP MESSAGE request by means of the SIP 200 (OK) response.\n9.\tThe MCPTT client moves into an MBMS service area where the announced MBMS bearer is available.\n10-12.\tThe MCPTT client sends a SIP MESSAGE request containing the \"application/vnd.3gpp.mcptt-mbms-usage-info\" MIME body containing:\na.\tthe <mbms-listening-status> element set to the value \"listening\"; and\nb.\tthe <general-purpose> set to \"true\".\n13-15.\tThe participating MCPTT function acknowledges the SIP MESSAGE request by means of the SIP 200 (OK) response.\n16.\tThe participating MCPTT server receives a Floor Request message from one of the served MCPTT clients or a Floor Taken message from the controlling MCPTT function indicating that a conversation is started in the group session.\n17.\tThe participating MCPTT function decides to use one of the MBMS subchannels in the pre-activated MBMS bearer for the conversation in the group session.\n18.\tThe participating MCPTT function sends the Map Group to Bearer messages over the general purpose MBMS subchannel, the Map Group To Bearer message contains:\na.\tthe TMGI in the TMGI field;\nb.\tthe MCPTT Group Identity field in the MCPTT Group ID field;\nc.\tthe MBMS Subchannel field containing:\ni.\tthe TMGI,\nii.\ta reference to which media line to be used for audio; and\nii.\toptionally, a reference to the media line specifying the \"m=application …\". If this reference is absent, floor control messages are sent over the MBMS subchannel used for audio.\n19-21.\tThe MCPTT client sends a SIP MESSAGE request containing the \"application/vnd.3gpp.mcptt-mbms-usage-info\" MIME body containing:\na.\tthe <mbms-listening-status> element set to the value \"listening\";\nb.\tthe <mcptt-session-id> set to 12345@controller1.mcptt-op.net; and\nc.\tthe TMGI;\n22.\tThe MCPTT client starts listen to the MBMS subchannel(s) indicated in the Map Group To Bearer message. Note that RTP media packets can now be received over both the MBMS subchannel and the unicast channel (the same applies for floor control messages) and the MCPTT client needs to ignore duplicated RTP media packets and floor control messages.\n23-25.\tThe participating MCPTT function acknowledge with a 200 (OK) response to the SIP MESSAGE request.\n26.\tWhen the MCPTT client receives the SIP 200 (OK) response the MCPTT client stops listen to the unicast bearer.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.6.3\tInitiating a conversation and requesting floor, originating side",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause shows the signalling flow when an MCPTT client starts a conversation in an ongoing group session using a pre-activated MBMS bearer.\nFigure A.6.3-1 shows the signalling flow.\n\nThe MBMS bearer is a key component in the telecommunication system, facilitating the transmission of data over long distances. The figure depicts the MBMS bearer, with arrows indicating the direction of the data flow and boxes representing the MBMS bearer itself. The dotted lines represent the paths taken by the data, ensuring efficient and reliable communication.\nNOTE:\tThe arrows and boxes with dotted lines represent events sent over the MBMS bearer.\nFigure A.6.3-1: Initiating a conversation and requesting floor\nThe MCPTT clients 1 to 4 participate in a group session. All MCPTT clients are served by the same participating MCPTT function. The MCPTT clients 1 to 3 are within an area where an MBMS bearer is available. The MCPTT client 4 is outside this area and can only use a unicast bearer.\nA MBMS subchannel exists and associated with a general purpose media plane control channel which can be used to deliver MBMS subchannel control messages of any group in this MBMS service area.\nThe steps of the flow are as follows:\n1.\tA group session is ongoing. At the moment none of the group members has the permission to send media.\n2.\tThe participating MCPTT function activates and announces an MBMS bearer as described in clause A.6.2. The pre-activated MBMS bearer is not yet associated with a particular group with participants served by this participating MCPTT function.\n3.\tThe user at the MCPTT client 1 presses the PTT button.\n4-5.\tThe floor participant 1 sends a Floor Request as specified in clause 6.2. The Floor Request is forwarded by the participating MCPTT function to the controlling MCPTT function.\n6.\tWhen the participating MCPTT function receives the Floor Request message the participating MCPTT function determines that the previously activated and announced MBMS bearer can be used for this conversation and sends the Map Group to Bearer message over the general purpose MBMS subchannel to inform about the start of the conversation. The Map Group to Bearer message includes the TMGI, the MBMS subchannel for audio and floor control and the MCPTT group identifier in the activated MBMS bearer used for the conversation. The participating MCPTT function enters the 'M: A conversation is active' state. On receipt of the Map Group to Bearer message the MBMS interface in the MCPTT client 1, 2 and 3 associates the conversation with the TMGI, the MBMS subchannel for audio and floor control with the MCPTT group identifier in the Map Group to Bearer message.\n7-8.\tOn receipt of the Floor Request message, the floor control server function grants the floor participant 1 to send media by sending the Floor Granted message. The participating MCPTT function forwards the message to the floor participant 1 over the unicast bearer.\n9-16.\tThe floor control server sends the Floor Taken message towards all participants. The participating MCPTT functions sends one Floor Taken message over the MBMS subchannel associated with this group as declared in step 6 and discards the remaining Floor Taken messages with the exception of the Floor Taken messages towards participants not listening to the MBMS bearer, in this example, the floor participant 4.\nNOTE:\tThe participating MCPTT function uses the message-sequence-number field to determine if a Floor Taken message is already sent over the MBMS floor control bearer or not.\n17.\tThe floor control continues as described in clause A.5.2.\n18.\tWhen the Floor Granted message is received in the floor participant 1, the floor participant 1 requests the MCPTT client to start encoding voice and send RTP media packets. The MCPTT client 1 starts encoding voice from the MCPTT user and sends RTP media packets over the unicast bearer towards the participating MCPTT function. The participating MCPTT function forwards the RTP media packets towards the controlling MCPTT function.\n19-24.\tThe controlling MCPTT function distributes the RTP media packets to all MCPTT clients. The participating MCPTT function sends one media stream over the MBMS subchannel associated with this group. If an MCPTT client is not listening to the MBMS bearer, in this example the MCPTT client 4, the participating MCPTT function forwards the RTP media packets to MCPTT client 1 over the unicast bearer.\nAs long as the conversation is active and the MBMS subchannel for this group is available any of the MCPTT users can request floor and the Floor Taken, Floor Idle and RTP packets are sent over the MBMS bearer.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "A.6.4\tReleasing floor and ending a conversation",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause describes how the participant 1 releases the floor and how the participating MCPTT function decides to end the conversation.\nFigure A.6.4-1 shows the signalling flow.\nThe MBMS bearer is a key component in the telecommunication system, facilitating the transmission of data over long distances. The figure depicts the MBMS bearer, with arrows indicating the direction of the data flow and boxes representing the MBMS bearer itself. The dotted lines represent the paths taken by the data, ensuring efficient and reliable communication.\nNOTE:\tThe arrows and boxes with dotted lines represent events sent over the MBMS bearer.\nFigure A.6.4-1: Releasing floor and ending a conversation\nThe steps of the flow are:\n1.\tThe MCPTT clients 1 to 4 participate in a group session. All MCPTT clients are served by the same participating MCPTT function. The MCPTT clients 1 to 3 are within an area where a MBMS subchannel is used for the conversation. The MCPTT client 4 is outside this area and can only use a unicast bearer. At the moment the participant at MCPTT client 1 has the floor. The conversation over the MBMS bearer started as described in clause A.6.4.\n2.\tThe MCPTT user at the MCPTT client 1 releases the PTT button. The MCPTT client 1 indicates to the floor participant 1 that the PTT button is released.\n3-4.\tThe floor participant 1 sends the Floor Release message over the unicast bearer. The participating MCPTT function forwards the message to the controlling MCPTT function.\n5-13.\tThe floor control server sends the Floor Idle message to all participants. The participating MCPTT function sends the first received Floor Idle message destined to an MCPTT client using the MBMS subchannel mentioned in step 1. Any other Floor Idle messages destined to an MCPTT client listening to the MBMS bearer are discarded. Any Floor Idle message destined to an MCPTT client outside the MBMS bearer coverage, in this case the MCPTT client 4, is forwarded over the unicast bearer to the floor participant.\n14.\tThe conversation ends. The conversation timer expires and the participating MCPTT server decides to end the conversation on this MBMS subchannel.\nThe conversation timer is a relative long timer and needed to avoid that inactive group sessions are unnecessarily occupying the MBMS subchannel. The MBMS subchannel can then be reused by other conversations in other group sessions.\n15.\tThe participating MCPTT function sends the Unmap Group to Bearer message over the MBMS subchannel. The MBMS interfaces in the MCPTT clients 1, 2 and 3 removes the association between the TMGI, the MBMS subchannel for audio and for floor control and the MCPTT group identity.\n16.\tThe participating MCPTT function continues to retransmit the Unmap Group to Bearer message until all MCPTT clients has moved to unicast. When all MCPTT client is listening to the unicast bearer, the participating MCPTT function enter the 'M: No conversation is active' state.\nTable B-1 shows specific header field values of the media plane packet from the originating MCPTT client, starting with the codec payload to the MCPTT server, from where it is distributed in downlink via IP multicast over MBMS to the terminating MCPTT clients. Each line represents a logical or physical \"Entity\" which handles the incoming packet (or generated packet for the first line) and passes it to the next \"Entity\" via the interface \"Reference Point\" indicated in this line. Additional entries of the line represent specific parts of the packet when it is put to the \"Reference Point\" by the \"Entity\". The rightmost column is the inner part of the packet. The parameters indicated in a column indicate the value of specific information elements set by the \"Entity\" in the header encapsulating all the parts to the right of the column.\nAll shown IP addresses (as s= for the source address and as d= as the destination address) can be IPv4 or IPv6 and are considered routable as necessary and distinct from each other within the same domain if they have different designations: it is up to the implementations to handle local IP addresses, perform NAT or use additional tunnelling. UDP ports of different designations correspond to potentially different port numbers. The UDP port numbers are designated as capital letter within squared brackets.\nThe unicast IP address IP1 and the sending UDP port [A] of the originator UE are as specified in the SDP during the most recent setup for the SIP session which precedes the MBMS distribution of MCPTT traffic. The multicast IP address IP5m and the associated receiving UDP port [H] used for the distribution of media packets are provided to the terminating MCPTT clients via MCPTT signalling.\nThe SSRC is set to a value that uniquely identifies the originating MCPTT client during the (S)RTP session, in accordance to IETF RFC 3550 [3] and IETF RFC 3711 [16].\nThe inner IP header, inner UDP port and (S) RTP header may be compressed with ROHC as specified in clause 10.4.\nTable B-1 Media encapsulation for end-to-end distribution using downlink MBMS bearers\n\n",
                    "tables": [
                        {
                            "description": "Table B-1 Media encapsulation for end-to-end distribution using downlink MBMS bearers",
                            "table number": 27,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "C.1\tIntroduction",
            "description": "This annex contains state transitions tables.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "C.2\tOff-network tables",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "C.2.1\tOff-network call floor control state machine transitions",
                    "description": "",
                    "summary": "",
                    "text_content": "The table is a representation of the off-network call floor control state machine in terms of:\n1)\tthe resulting state, and\n2)\tthe actions to be done;\nas a function of:\n3)\tthe current state, and\n4)\tthe trigger causing the transition.\nThe trigger is either an external event, an input coming externally to the state machine or an auxiliary internal even like the expiry of a timer or a counter.\nExamples for an action to be done are the transmission of a message, initiation of a timer or a counter etc.\nTable C.2.1-1 shows the off-network group call floor control transitions.\nTable C.2.1-1: Off-network group call floor control transitions\n\nIn the EPS, using the MBMS procedures, in the 5GS or MBMS and 5G MBS co- existence, using the MBS procedures;\n-\tin the MBS procedures, references to 4G \"MBMS\" is understood to be references to 5G \"MBS\";\n-\tin the MBS procedures, \"MBS session ID\" corresponds to the \"TMGI\" in MBMS;\n-\tin the MBS procedures, \"Map Group To Session Stream\" corresponds to the \"Map Group To Bearer\" in MBMS; and\n-\tin the MBS procedures, \"UnMap Group From Session Stream\" corresponds to the \"UnMap Group To Bearer\" in MBMS.\n\n\n\n",
                    "tables": [
                        {
                            "description": "Table C.2.1-1: Off-network group call floor control transitions",
                            "table number": 28,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "",
                            "table number": 29,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "",
                            "table number": 30,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        }
    ]
}
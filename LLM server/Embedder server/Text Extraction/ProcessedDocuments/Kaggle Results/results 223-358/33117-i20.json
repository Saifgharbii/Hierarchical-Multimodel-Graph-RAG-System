{
    "document_name": "33117-i20.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Specification has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\nIn the present document, modal verbs have the following meanings:\nshall\tindicates a mandatory requirement to do something\nshall not\tindicates an interdiction (prohibition) to do something\nThe constructions \"shall\" and \"shall not\" are confined to the context of normative provisions, and do not appear in Technical Reports.\nThe constructions \"must\" and \"must not\" are not used as substitutes for \"shall\" and \"shall not\". Their use is avoided insofar as possible, and they are not used in a normative context except in a direct citation from an external, referenced, non-3GPP document, or so as to maintain continuity of style when extending or modifying the provisions of such a referenced document.\nshould\tindicates a recommendation to do something\nshould not\tindicates a recommendation not to do something\nmay\tindicates permission to do something\nneed not\tindicates permission not to do something\nThe construction \"may not\" is ambiguous and is not used in normative elements. The unambiguous constructions \"might not\" or \"shall not\" are used instead, depending upon the meaning intended.\ncan\tindicates that something is possible\ncannot\tindicates that something is impossible\nThe constructions \"can\" and \"cannot\" are not substitutes for \"may\" and \"need not\".\nwill\tindicates that something is certain or expected to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nwill not\tindicates that something is certain or expected not to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nmight\tindicates a likelihood that something will happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nmight not\tindicates a likelihood that something will not happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nIn addition:\nis\t(or any other verb in the indicative mood) indicates a statement of fact\nis not\t(or any other negative verb in the indicative mood) indicates a statement of fact\nThe constructions \"is\" and \"is not\" do not indicate requirements.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document contains objectives, requirements and test cases that are deemed applicable, possibly after adaptation, to several network product classes.\nSeveral network product classes share very similar if not identical security requirements for some aspects. Therefore, these are collected in this \"catalogue\" document applicable to many network product classes. In addition to this catalogue, requirements specific to different network product classes will be captured in separate documents.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[2]\t Void\n[3]\tIETF RFC 3871: \"Operational Security Requirements for Large Internet Service Provider (ISP) IP Network Infrastructure\".\n[4]\t3GPP TR 33.926: \"Security Assurance Specification (SCAS) threats and critical assets in 3GPP network product classes\".\n[5]\t Void\n[6]\tVoid\n[7]\tVoid\n[8]\tVoid\n[9]\t3GPP TS 33.310: \"Network Domain Security (NDS); Authentication Framework (AF)\".\n[10]\t3GPP TS 33.501: \"Security architecture and procedures for 5G system\".\n[11]\tIETF RFC 7540: \"Hypertext Transfer Protocol Version 2 (HTTP/2)\".\n[12]\tIETF RFC 6749: \"OAuth2.0 Authorization Framework\".\n[13]\t3GPP TS 29.501: \"Principles and Guidelines for Services Definition\".\n[14]\tVoid\n[15]\t3GPP TS 33.210: \"Network Domain Security (NDS); IP network layer security\".\n[16]\tIETF RFC 7515:\"JSON Web Signature (JWS)\".\n[17]\tIETF RFC 7519:\"JSON Web Token (JWT)\".\n[18]\t3GPP TS 23.501: \"System Architecture for the 5G System\".\n[19]\t3GPP TR 33.916: \"Security Assurance Methodology (SECAM) for 3GPP network products\".\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tDefinitions",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the terms and definitions given in TR 21.905 [1] and the following apply. A term defined in the present document takes precedence over the definition of the same term, if any, in TR 21.905 [1].\nDeveloper: A creator of systems, components, or services for use on or with a 3GPP network.\nExpert knowledge: Possesing skills, training and experience in analysing and understanding security threats in a wide variety of situations.\nIdentifiable person: one who can be identified, directly or indirectly, in particular by reference to an identification number, name or to one or more factors specific to their physical, physiological, mental, economic, cultural or social identity.\nNOTE 1: \tpersonal data can be gathered from user data and traffic data.\nLocal access: Communication through a direct network access interface.\nMachine Accounts: accounts used for authentication and authorization from system to system or between applications on a system and cannot be assigned to a single person or a group of persons.\nNetwork Element: As defined in TS 23.501[18]\nNetwork Function: As defined in TS 23.501[18]\nNetwork product: As defined in TR 33.916[19]\nNetwork product class: As defined in TR 33.916[19]\nOwner: The person or enity responsible for creating and maintaining content. The person or enity determines who has access to the content and the content permissions.\nPersonal data: any information relating to an identified or identifiable natural person ('data subject').\nNOTE: \tvoid\nRemote access: Communication through an external network access interface.\nScreenshot: A digital image that shows the contents of a display.\nSensitive data: data used for authentication or may help to identify the user, such as user names, passwords, PINs, cryptographic keys, IMSIs, IMEIs, MSISDNs, or IP addresses of the UE, as well as files of a system that are needed for the functionality such as firmware images, patches, drivers or kernel modules.\nSystem group account: a predefined system account in the network product, usually with special privileges, which has a predefined user id and hence cannot be tied to a single user (individual) in a normal operating environment.\nEXAMPLE:\tthe 'root' account.\nVendor: A commercial supplier of 3GPP network software or hardware.\nVulnerability: As defined in TR 33.916[19].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in 3GPP TR 21.905 [1] and the following apply. An abbreviation defined in the present document takes precedence over the definition of the same abbreviation, if any, in 3GPP TR 21.905 [1].\nAAA\tAuthentication Authorization and AccountingBOOTP\tBootstrap Protocol\nBVT\tBasic Vulnerability Testing\nCAPTCHA\tCompletely Automated Public Turing test to tell Computers and Humans Apart\nCD\t\tCompact Disk\nCDP\tCustomer Data Platform\nCIS\tCenter for Internet Security\nCOTS\tCommercial Off The Shelf\nCVE\tCommon Vulnerabilities and Exposures\nDTLS\tDatagram Transport Layer Security\nDVD\tDigital Video Disk\nFOSS\tFree Open-Source Software\nFTP\tFile Transfer Protocol\nGTP-C\tGPRS Tunnelling Protocol for Control Plane\nGUI\tGraphical User Interface\nGUID\tGlobally Unique Identifer\nIKE\tInternet Key Exchange\nIPsec\tInternet Protocol Security\nJSON\tJava Script Object Notation\nJWS\tJSON Web Signature\nLLDP\tLocal Loop Demarcation Protocol\nMOP\tMaintenance Operations ProtocolNRF\tNetwork Repository Function\nNSI\tNetwork Slice Instance\nNSI ID\tNetwork Slice Instance Identifier\nNSSAI\tNetwork Slice Selection Assistance Information\nPHP\tHypertext Preprocessor\nPM\tPerformance Management\nQMS\tQuality Management System\nRAM\tRandom Access Memory\nRBAC\tRole Based Access Control\nRCP \tRemote Copy Program\nRDP\tRemote Delete Program\nRPH\tReverse Path Filter\nRSH\tRemote shell\nSBA\tService Based Architecture\nSBI\tService Based Interfaces\nSCAS\t\tSecurity Assurance Specification\nSCP\tService Communication Proxy\nSECAM\tSecurity Assurance Methodology\nSEPP\tSecurity Edge Protection Proxy\nSFTP\tSecure File Transfer Protocol\nSGID\tSpecial Group Identification\nS-NSSAI\tSingle Network Slice Selection Assistance Information\nSSH \tSecure Shell\nSSI\tServer Side Includes\nSSO\tSingle Sign-On\nSUID\tSet owner User Idenification\nSYN\tSynchrounous Transmission\nTFTP\tTrivial File Transfer Protocol\nWAS\tWeb Application Security\nWebDAV\tWeb Distributed Authoring and Versioning\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tCatalogue of security requirements and related test cases",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tIntroduction",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.1.1\tPre-requisites for testing",
                            "text_content": "The SCAS tests, as described in the present specification, are to be applied to a network product whose software and hardware has been brought into use so that the network product can provide the intended functionality, either in a real network environment or in a simulated environment. This implies that, before any testing is performed, the hardware and software has been installed correctly, the network product is powered on, and communication has been established over all standardized interfaces and O&M interfaces related with the network product's functionality, as described in the vendor's documentation.\nCommunication over external non standardized Interfaces that may exist and are marked as optional, according to the vendor's documentation, shall also be established during testing unless they are explicitly marked as \"not recommended\" in the vendor's documentation.\nFor each of the enabled external communication interfaces there may be various optional capabilities. During testing, all such capabilities shall be enabled unless they are explicitly marked as \"not recommended\" in the vendor's documentation.\nIn some cases a testcase might require configuration changes as part of the execution steps or pre-conditions. After such test is executed and prior to any further test execution it needs to be ensured that the state of the Product under Evaluation is restored back in the original state.\nSCAS testing is not about security in operations and deployments. So, in particular, SCAS testing is independent of any network operator guidelines or considerations on specific deployment scenarios.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.1.2\tUse of tools in testing",
                            "text_content": "The following text shall apply to all test cases described in the present document:\nThe present document takes into account that the landscape of testing tools evolves more rapidly than SCAS specifications. It is therefore allowed that, for each requirement, the actual test carried out may deviate from the stepwise description of the test case in the present document if the following conditions are fulfilled:\n(1)\t The test is carried out by preferably using Commercial-of-the-Shelf (COTS) and Free-Open-Source-Software (FOSS) tools that are available for other testers that may want to repeat the test. In case a tool not in any of these two categories is used then evidence of the quality assurance of the tool needs to be provided. This applies only to tools used to perform the actual test and not supportive tools needed for setting up the testing environment like for example traffic generators/ simulators.\nIn cases where a tester is not able to obtain the necessary tools to perform the test, vendor proprietary test tools may be used by the tester as long the test tool is controlled under a suitable quality management system (QMS). The tester ensures that this QMS is in place in order to avail of a vendor’s test tool.\nAdditionally in cases where the test lab does not have the necessary test environment to perform a test, it shall be possible for the test lab personnel to perform the test in a vendor's test lab. In such cases the tester shall record details of test environment, test set-up used and how the test was performed.\n(2)\t The tester provides evidence, e.g. by referring to the documentation of the tool, that the tool is suitable to verify the requirement, and the scope of testing is equal or larger to the one of the test case described in the present document. The evidence needs to be sufficiently detailed for experts in the field of testing, not for the general public.\n(3)\t The tester provides evidence that the tool has been actually used for testing the network product (e.g. by providing a trace).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.1.3\tDocumentation Requirements",
                            "text_content": "When a test case makes an assumption on the availability of certain items in the product documentation then this assumption is to be considered part of the requirement even if the requirements text does not mention the documentation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.2\tSecurity functional requirements and related test cases",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.2.1\tIntroduction",
                            "text_content": "The present clause describes the security functional requirements and the corresponding test cases, independent of a specific network product class. In particular the proposed security requirements are classified in two groups:\n-\tSecurity functional requirements deriving from 3GPP specifications and detailed in clause 4.2.2\n-\tGeneral security functional requirements which include requirements not already addressed in the 3GPP specifications but whose support is also important to ensure a network product conforms to a common security baseline detailed in clause 4.2.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.2\tSecurity functional requirements deriving from 3GPP specifications and related test cases",
                            "text_content": "The present clause describes the general approach taken towards security functional requirements deriving from 3GPP specifications and the corresponding test cases, independent of a specific network product class.\nIt is assumed for the purpose of the present SCAS that a network product conforms to all mandatory security-related provisions in 3GPP specifications pertaining to it, in particular:\n-\tall 3GPP specifications of the 33-series (security specifications) that are pertinent to the network product class;\n-\tother 3GPP specifications that make reference to security specifications or are referred to from one of them.\n3GPP has decided to develop test specifications for the UE in the TSs of the 34-series under the responsibility of Working Group RAN5. 3GPP saw, however, no need to develop test specifications for network elements. For network elements, 3GPP rather trusts that tests are run under the responsibility of the vendors.\nSecurity procedures pertaining to a network product are typically embedded in non-security procedures and are hence assumed to be tested together with them.\nIt is the purpose of the present SCAS to identify security requirements from the EPS and 5G security architecture that require special attention in testing as they can:\n(a) lead to vulnerabilities when not satisfied;\n(b) not be captured through ordinary testing activity for non-security procedures;\n(c) address security-relevant failure cases and exceptions or 'negative' requirements of the kind: \"The network product shall not…\"\nIt is not an intention of the present document to provide an exhaustive set of test cases that would be sufficient to demonstrate conformance of all security procedures with the above-mentioned specifications.\nThe purpose of the sub-clauses in 4.2.2.2 is to identify and describe the general baseline requirements from SBA security architecture and the corresponding test cases. The general baseline requirements are applicable to all Network Function (NF) within the 5G Core (5GC) utilizing Service-Based Interfaces (SBI), independent of a specific network product class.\nRequirement Name: Protection at the transport layer\nRequirement Reference: TS 33.501 [10], clause 5.9.2.1, clause 13.1, clause 13.3.2\nRequirement Description:\nNF Service Request and Response procedure supports mutual authentication between NF consumer and NF producer as specified in TS 33.501 [10], clause 5.9.2.1 .\nAll network functions supports TLS. Network functions support both server-side and client-side certificates. The TLS profile follows the profile given in Annex E of TS 33.310 [9] with the restriction to be compliant with the profile given by HTTP/2 as defined in RFC 7540 [11] as specified in TS 33.501 [10], clause 13.1.\nAuthentication between network functions within one PLMN uses one of the following methods:\n-\tIf the PLMN uses protection at the transport layer as described in clause 13.1, authentication provided by the transport layer protection solution is used for authentication between NFs as specified in TS 33.501 [10], clause 13.3.2.\nThreat References: TR 33.926 [4], clause 5.3.6.3, Weak cryptographic algorithms\nTest case:\nTest Name: TC_PROTECT_TRANSPORT_LAYER\nPurpose:\nVerify that TLS protocol for NF mutual authentication and NF transport layer protection is implemented in the network products based on the profile required.\nProcedure and execution steps:\nPre-Conditions:\nNetwork product documentation containing information about supported TLS protocol and certificates is provided by the vendor.\nA peer implementing the TLS protocol configured by the vendor shall be available.\nThe tester shall base the tests on the profile defined by 3GPP in Annex E of TS 33.310 [9] with the restriction that it shall be compliant with the profile given by HTTP/2 as defined in RFC 7540 [11].\nExecution Steps\n1.\tThe tester shall check that compliance with the TLS profile can be inferred from detailed provisions in the network product documentation.\n2.\tThe tester shall establish a secure connection between the network product under test and the peer and verify that all TLS protocol versions and combinations of cryptographic algorithms that are mandated by the TLS profile are supported by the network product under test.\n3.\tThe tester shall try to establish a secure connection between the network product under test and the peer and verify that this is not possible when the peer only offers a feature, including protocol version and combination of cryptographic algorithms, that is forbidden by the TLS profile.\nExpected can Results:\n-\tThe network product under test and the peer establish TLS if the TLS profiles used by the peer are compliant with the profile requirements in TS 33.310 [9] Annex E and RFC 7540 [11].\n- \tThe network product under test and the peer fail to establish TLS if the TLS profiles used by the peer are forbidden in TS 33.310 [9] Annex E or RFC 7540 [11].\nExpected format of evidence:\nProvide evidence of the check of the product documentation in plain text. Save the logs and the communication flow in a .pcap file.\nRequirement Name: Authorization token verification failure handling within one PLMN\nRequirement Reference: TS 33.501 [10], clause 13.4.1.1\nRequirement Description:\nAccording to TS 33.501 [10], clause 13.4.1.1, the NF Service producer verifies the access token as follows:\n-\tThe NF Service producer ensures the integrity of the access token by verifying the signature using NRF’s public key or checking the MAC value using the shared secret. If integrity check is successful, the NF Service producer verifies the claims in the access token as follows:\nNOTE: Void.\n-\tIt checks that the audience claim in the access token matches its own identity or the type of NF service producer. If a list of NSSAIs or list of NSI IDs is present, the NF service producer checks that it serves the corresponding slice(s).\n-\tIf an NF Set ID present, the NF Service Producer checks the NF Set ID in the claim matches its own NF Set ID.\n- \tIf the access token contains \"additional scope\" information (i.e. allowed resources and allowed actions (service operations) on the resources), it checks that the additional scope matches the requested service operation.\n-\tIf scope is present, it checks that the scope matches the requested service operation.\n-\tIt checks that the access token has not expired by verifying the expiration time in the access token against the current data/time.\n-\tIf the verification is successful, the NF Service producer executes the requested service and responds back to the NF Service consumer. Otherwise it replies based on Oauth 2.0 error response defined in RFC 6749 [12]. The NF service consumer optionally stores the received token(s). Stored tokens may be re-used for accessing service(s) from producer NF type listed in claims (scope, audience) during their validity time.\nThreat References: TR 33.926 [4], clause 6.3.3.1, Incorrect Verification of Access Tokens\nTest Case:\nTest Name: TC_AUTHORIZATION_TOKEN_VERIFICATION_FAILURE_ONE_PLMN\nPurpose:\nVerify that the NF service producer does not grant service access if the verification of authorization token from a NF service consumer in the same PLMN fails.\nProcedure and execution steps:\nPre-Conditions:\n-\tTest environment with a NF service consumer.\n-\tThe NF service consumer may be simulated.\n-\tThe network product under test has already mutually authenticated with the NF service consumer.\n-\tThe tester shall have access to the interface between the NF service consumer and the network product under test.\n-\tThe tester has the NRF’s private key or the shared key.\n-\tThe network product under test is preconfigured with the NRF’s public key or the shared key.\n\nExecution Steps\nThe network product under test receives the access token sent from the NF service consumer, verifies the access token based on Oauth 2.0.\nTest Cases 1~4 are tests on failure handling by the network product under test when the mandatory claims in access token failed verification.\nTest Case 1: Verification failure of the access token integrity\n1)\tThe tester computes an access token correctly, except that the signature or the MAC is incorrect, e.g., the signature or the MAC is randomly selected, and then includes the access token in the NF Service Request sent from the NF service consumer to the network product under test.\n2)\tThe integrity verification of the access token by the network product under test fails.\nTest Case 2: Incorrect audience claim in the access token\n1)\tThe tester computes an access token correctly, except that the audience claim is incorrect, i.e., the audience claim in the access token does not match the identity or the type of the network product under test, and then includes the access token in the NF Service Request sent from NF service consumer to the network product under test.\n2)\tThe network product under test verifies that the integrity of the access token is valid. However, the audience claim in the access token does not match its identity or type.\nTest Case 3: Incorrect scope claim in the access token\n1)\tThe tester computes an access token correctly, except that the scope is incorrect, i.e., the scope does not match the requested service operation, and then includes the access token in the NF Service Request sent from the NF service consumer to the network product under test.\n2)\tThe network product under test verifies that the integrity of the access token and the audience claim are  valid. However, the scope does not match the requested service operation.\nTest Case 4: Expired access token\n1)\tThe tester computes an access token correctly, except that the expiration time has expired against the current data/time, and then includes the access token in the NF Service Request sent from the NF service consumer to the network product under test.\n2)\tThe network product under test verifies that the integrity of the access token, the audience and scope claims are all valid. However, the expiration time in the access token has expired against the current data/time.\nTest Cases 5~8 are tests on failure handling by the network product under test when the optional claims in access token failed verification.\nNOTE:\tThe test cases below only apply to the NFs which support identifying and understanding the optioanl claims in the received access token.\nTest Case 5: Incorrect list of S-NSSAIs in the access token\n1)\tThe tester computes an access token correctly, except that the list of S-NSSAIs is incorrect, i.e., the network product under test does not serve the slices indicated in the list of S-NSSAIs, and then includes the access token in the NF Service Request sent from NF service consumer to the network product under test.\n2)\tThe network product under test verifies that the integrity of the access token, the audience, scope and expiration time claims are all valid. Then it further checks the list of S--NSSAIs included in the access token.\nTest Case 6: Incorrect list of NSIs in the access token\n1)\tThe tester computes an access token correctly, except that the list of NSIs is incorrect, i.e., the network product under test does not serve the slices indicated in the list of NSIs, and then includes the access token in the NF Service Request sent from NF service consumer to the network product under test.\n2)\tThe network product under test verifies that the integrity of the access token, the audience, scope and expiration time claims are all valid. Then it further checks the list of NSIs included in the access token.\nTest Case 7: Incorrect NF Set ID in the access token\n1)\tThe tester computes an access token correctly, except that the NF Set ID is incorrect, i.e. the NF Set ID in the claim does not match the NF Set ID of the network product under test, and then includes the access token in the NF Service Request sent from NF service consumer to the network product under test.\n2)\tThe network product under test verifies that the integrity of the access token, the audience, scope and expiration time claims are all valid. Then it further checks the NF Set ID included in the access token.\nTest Case 8: Incorrect additional scope in the access token\n1)\tThe tester computes an access token correctly, except that the additional scope information is incorrect, i.e. the allowed resources and allowed actions on the resources do not match the requested service operations, and then includes the access token in the NF Service Request sent from the NF service consumer to the network product under test.\n2)\tThe network product under test verifies that the integrity of the access token, the audience, scope and expiration time claims are all valid. Then it further checks the additional scope included in the access token.\nExpected Results:\nFor test cases 1~4 on verification failure of mandatory claims in the access token, the network product under test rejects the NF service consumer’s service request based on Oauth 2.0 error response defined in RFC 6749 [12].\nFor test cases 5~8 on verification failure of optional claims in the access token, if the network product under test understands these optional claims (list of S-NSSAIs, list of NSIs, NF Set ID, additional scope), it rejects the NF service consumer’s service request based on Oauth 2.0 error response defined in RFC 6749 [12].\nExpected format of evidence:\nEvidence suitable for the interface, e.g., Screenshot containing the operational results.\nRequirement Name: Authorization token verification failure handling in different PLMNs\nRequirement Reference: TS 33.501 [10], clause 13.4.1.2\nRequirement Description:\nThe NF service producer checks that the home PLMN ID of audience claim in the access token matches its own PLMN identity.\nThreat References:  TR 33.926 [4], clause 6.3.3.1, Incorrect Verification of Access Tokens\nNOTE:\tThe test case below only applies to the NFs which support identifying and understanding the producerPlmnId claim.\nTest Case:\nTest Name: TC_AUTHORIZATION_TOKEN_VERIFICATION_FAILURE_DIFF_PLMN\nPurpose:\nVerify that the NF service producer does not grant service access if the verification of authorization token from a NF service consumer in a different PLMN fails.\nProcedure and execution steps:\nPre-Conditions:\n-\tTest environment with a NF service consumer and two SEPPs (one cSEPP, one pSEPP).\n-\tThe NF service consumer and SEPPs may be simulated.\n-\tThe network product under test has already mutually authenticated with the NF service consumer in a different PLMN via the SEPPs.\n-\tThe tester has the NRF’s private key or the shared key.\n-\tThe network product under test is preconfigured with the NRF’s public key or the shared key.\n-\tThe tester shall have access to the interfaces of the NF service consumer and the network product under test.\n\nExecution Steps\nThe network product under test receives the access token sent from the NF service consumer, verifies the access token in accordance with the execution steps in 4.2.2.2.3.1, with the following additional test cases:\nTest Case 1: incorrect PLMN ID of the NF service producer in the access token\n1)\tThe test computes an access token correctly, except that the PLMN ID in the producerPlmnId claim of the access token is empty or different from the home PLMN ID of the network product under test, and then includes the access token in the NF Service Request sent from the NF service consumer to the network product under test through the SEPPs.\n2)\tThe network product under test receives the access token sent from the NF service consumer through the SEPPs, verifies that the PLMN ID in the producerPlmnId claim of the access token is different from its own home PLMN identity.\nTest Case 2: absent PLMN ID of the NF service producer in the access token\n1)\tThe test computes an access token correctly, except that no producerPlmnId claim is included in the access token, and then includes the access token in the NF Service Request sent from the NF service consumer to the network product under test through the SEPPs.\n2)\tThe network product under test receives the access token sent from the NF service consumer through the SEPPs, verifies that the access token is not a token to be used by the NF service consumer in a different PLMN, based on the absence of PLMN ID of the NF service producer in the access token.\nExpected Results:\nFor both test cases 1 and 2, the network product under test rejects the NF service consumer’s service request based on Oauth 2.0 error response defined in RFC 6749 [12].\nExpected format of evidence:\nEvidence suitable for the interface, e.g., Screenshot containing the operational results.\nRequirement Name: Correct handling of client credentials assertion validation failure\nRequirement Reference: TS 33.501 [10], clause 13.3.8.3\nRequirement Description:\nThe verification of the Client credentials assertion is performed by the receiving node, i.e., NRF or NF Service Producer in the following way:\n-\tIt validates the signature of the JWS as described in RFC 7515 [16].\n-\tIf validates the timestamp (iat) and/or the expiration time (exp) as specified in RFC 7519 [17].\nIf the receiving node is the NR\tF, the NRF validates the timestamp (iat) and the expiration time (exp).\nIf the receiving node is the NF Service Producer, the NF service Producer validates the expiration time and it may validate the timestamp.\n-\tIt checks that the audience claim in the the client credentials assertion matches its own type.\nIt verifies that the NF instance ID in the client credentials assertion matches the NF instance ID in the public key certificate used for signing the assertion.\nThreat References: TR 33.926 [4], clause 6.3.x.1, Incorrect validation of client credentials assertion\nNote: The following test case only applies if the NF under test implements verification of client credentials assertions.\nTest Case:\nTest Name: TC_CLIENT_CREDENTIALS_ASSERTION_VALIDATION\nPurpose:\nVerify that the NF under test correctly handles client credentials assertion validation failure.\nEditor's Note: This test case applies for Rel-16 NFs. The formulation for indicating the applicable release may need to be updated.\nProcedure and execution steps:\nPre-Conditions:\n-\tTest environment with a consumer NF and a SCP, which may be simulated. (Potentially simulated) consumer NF and (potentially simulated) SCP can be combined for the testing purpose.\n-\tThe NF under test is preconfigured with the certificate of the consumer NF.\n-\tThe NF under test is configured to require assertions for NF consumer authentication for at least one of its services.\n- \tThe NF under test has implemented the client credentials assertion (CCA) authentication method as specified in TS 33.501 [10], clause 13.3.8.3.\n-\tThe tester has the private key of the consumer NF.\n-\tThe tester has access to the interface between the consumer NF and the NF under test.\nExecution Steps\nTest Case 1: Failed verification of the client credentials assertion integrity\n1)\tThe tester computes a client credentials assertion correctly, except that the signature is incorrect, and then includes the client credentials assertion in the service request sent from the consumer NF to the NF under test via the SCP.\n2)\tThe integrity verification of the client credentials assertion by the NF under test fails.\nTest Case 2: Incorrect audience claim in the client credentials assertion\n1)\tThe tester computes a client credentials assertion correctly, except that the audience claim is incorrect, i.e., the audience claim in the client credentials assertion does not match the type of the NF under test, and then includes the signed client credentials assertion in the service request sent from the consumer NF to the NF under test via the SCP.\n2)\tThe NF under test verifies that the audience claim in the client credentials assertion does not match its type.\nTest Case 3: Expired client credentials assertion\n1)\tThe tester computes an access token correctly, except that the expiration time (exp) has expired against the current time, and then includes the signed client credentials assertion in the service request sent from the consumer NF to the NF under test via the SCP.\n2)\tThe NF under test verifies that the expiration time in the client credentials assertion has expired against the current time.\nExpected Results:\nFor test cases 1~3, the NF under test rejects the consumer NF’s service request and sends back an error message.\nEditor's Note: the result needs to be aligned with the relevant error handling description to be added in TS 29.500.\nExpected format of evidence:\nEvidence suitable for the interface, e.g. screenshot containing the operational results.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.3\tTechnical baseline",
                            "text_content": "The technical baseline is a generic set of security requirements to be fulfilled by all network products.\nIn particular these requirements counter the security threats and objectives identified in the TR 33.926 [4] and they basically aim to guarantee the network product confidentiality, integrity and availability.\nAdequate security measures for protecting sensitive data shall be implemented as defined in the present document. Further measures (that are beyond the scope of the present document) may be required by local regulation depending on the classification of the data and other factors such as type of network used during transmission, storage location for data, etc.\nRequirement Name: Unauthorized Viewing\nRequirement Reference: In accordance with industry best practice.\nRequirement Description: When the system is not under maintenance, there shall be no system function that reveals confidential system internal data in the clear to users and administrators. Such functions could be, for example, local or remote O&M CLI or GUI, logging messages, alarms, configuration file exports etc. Confidential system internal data contains authentication data (i.e. PINs, cryptographic keys, passwords, cookies) as well as system internal data that is not required for systems administration and could be of advantage to attackers (i.e. stack traces in error messages).\nThreat References: TR 33.926 [4]Test case:\nTest Name: TC_CONFIDENTIAL_SYSTEM_INTERNAL_DATA\nPurpose:\nVerify that no system function reveals sensitive data in the clear\nProcedure and execution steps:\nPre-Condition:\nThe vendor shall provide documentation describing how confidential system internal information that could possibly be revealed in clear-text is handled by system functions.\nA list of all system functions in the network product, information on how to enable and execute them should be provided as a part of the vendor's documentation. A system function is every function implemented in the network product needed by the services/functionalities provided by the network product itself.\nExecution Steps\nExecute the following steps:\n1.\tReview the documentation provided by the vendor describing how confidential system internal information is handled by system functions.\n2.\tThe tester checks whether any system functions as described in the product documentation (e.g. local or remote O&M CLI or GUI, logging messages, alarms, error messages, configuration file exports, stack traces)  reveal any confidential system internal data in the clear (for example, passphrases).\nExpected Results:\nThere should be no confidential system internal data revealed in the clear by any\t system function.\nExpected format of evidence:\nEvidence suitable for the interface, e.g. screenshot containing the operational results.\nRequirement Name: Protecting data and information in storage\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nFor sensitive data in (persistent or temporary) storage read access rights shall be restricted. Files of a system that are needed for the functionality shall be protected against manipulation.\nIn addition, the following rules apply for:\n-\tSystems that need access to identification and authentication data in the clear, e.g. in order to perform an authentication. Such systems shall not store this data in the clear, but scramble or encrypt it by implementation-specific means.\n-\tSystems that do not need access to sensitive data (e.g. user passwords) in the clear. Such systems shall hash this sensitive data with a non-broken cryptographic hash algorithm and use mechanisms to make dictionary attacks more difficult and prevent hash collisions when using identical sensitive data. A common mechanism is e.g., using a unique, random salt per record.\nNOTE 1:\tA \"non-broken\" cryptographic hash algorithm is a cryptographic hash algorithm without publicly available/published vulnerabilities.\n-\tStored files on the network product: examples for protection against manipulation are the use of checksum or cryptographic methods.\nThreat References: TR 33.926 [4]Test case:\nTest Name: TC_PSW_STOR_SUPPORT\nPurpose:\nVerify that Password storage uses a non-broken one-way cryptographic hash algorithm.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe tester can access the storage of own user account password.\n-\tThe tester has privileges to change the password.\n-\tThe original password is P1.\n-\tNew passwords are represented by the variable P2.\nExecution Steps\n1.\tThe tester accesses the storage where the result of P1 is, and the corresponding hash value is recorded as A\n2.\tThe tester changes the password with P2, then the tester records the storage hash value of the new password as B\n3.\tThe tester repeats the step 2 to get other records with the following requirements for password P2:\n-\tat least one new password P2 differs from P1 by exactly one bit\n-\tat least one new password P2 shall be the same as P1\n-\tat least one new password P2 shall have a different length compared to P1\n4. The tester verifies whether all the records comply with the characteristic of one-way cryptographic hash result.\na. All collected records contain different hash values, even if the corresponding passwords were identical.\nNOTE 2: \tEven if P1 and P2 only differ by one bit, the resulting hash values should differ substantially. (Bit independence criterion)\nb. The bit length of the hash values is fixed and independent from the password length.\nc. The hash value does not contain any information that could be used for password disclosure. (e.g. contains part of the password in plain text or some sort of password length indicator)\nNOTE 3: \tDepending on the implementation the recorded hash values A and B could be stored with their salt combined in some way (e.g. salt is prefix or suffix of hash value). The tester needs to exclude the salt when comparing records\nExpected Results:\nAll records comply with the characteristic of one-way cryptographic hash result.\nExpected format of evidence:\nEvidence suitable for the interface, e.g. screenshot containing the operation results.\nRequirement Name: Protecting data and information in transfer\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\n-\tUsage of cryptographically protected network protocols is required.\n-\tThe transmission of data with a need of protection shall use industry standard network protocols with sufficient security measures and industry accepted algorithms. In particular, a protocol version without known vulnerabilities or a secure alternative shall be used.\nThreat References: TR 33.926 [4]Test case:\nTest Name: TC_PROTECT_DATA_INFO_TRANSFER_1\nPurpose:\nVerify the mechanisms implemented to protect data and information in transfer to and from the Network Product's O&M interface.\nNOTE: \tThe test is limited to the O&M interface although the requirement does not have this limitation because the protection of standardised interfaces will be covered by regular interoperability testing and the proprietary use of HTTPS is covered in clause 4.2.5.1.\nProcedure and execution steps:\nPre-Conditions:\nNetwork product documentation containing information about supported O&M protocols is provided by the vendor,\nA peer implementing the security protocol configured by the vendor (e.g SSH client supporting SSHv2 or HTTPS client) shall be available.\nNetwork product documentation stating which security protocols for protection of data in transit are implemented and which profiles in TS 33.310 [9] and TS 33.210 [15] are applicable is provided by the vendor\nFor TLS/DTLS, the tester shall base the tests on the profile defined by 3GPP in TS 33.310 [9] and TS 33.210 [15]. For IKE and IPsec, the tester shall base the tests on the profile defined by 3GPP in TS 33.210 [15]. For protocols, for which 3GPP did not define a security profile, e.g. SSH, the tester shall base the tests on a widely recognised and publicly available security profile.\nExecution Steps\n1.\tThe tester shall check that compliance with the selected security profile can be inferred from detailed provisions in the product documentation.\n2.\tThe tester shall check that the default security parameters are the same as those stated in the product documentation.\n3. The tester shall establish a secure connection between the network product and the peer and verify that all protocol versions and combinations of cryptographic algorithms that are mandated by the security profile are supported by the network product and the network product does not use the deprecated or unsecure protocol versions and algorithms.\n4.\tThe tester shall try to establish a secure connection between the network product and the peer and verify that this is not possible when the peer only offers a feature, including protocol version and combination of cryptographic algorithms, that is forbidden by the security profile.\nExpected Results:\nThe traffic is properly protected, and insecure options are not accepted by the Network Product.\nExpected format of evidence:\nProvide evidence of the check of the product documentation in plain text. Save the logs and the communication flow in a .pcap file.\nRequirement Name: Logging access to personal data\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nIn some cases access to personal data in clear text might be required. If such access is required, access to this data shall be logged, and the log shall contain who accessed what data without revealing personal data in clear text. When for practical purposes such logging is not available, a coarser grain logging is allowed.\nIn some cases, the personal data stored in the log files may allow the direct identification of a subscriber. In such cases, the revealed personal information shall not expose the subscriber to any kind of privacy violation.\nThreat References: TR 33.926 [4]\nTest case:\nTest Name: TC_LOGGING_ACCESS_TO_PERSONAL_DATA\nPurpose:\nVerify that in cases where a network product presents personal data in clear text, access attempts to such data are logged and the log information includes the user identity that has accessed the data. The test case also verifies that the personal data itself is not included in clear text in the log.\nProcedure and execution steps:\nPre-Conditions:\nA document which provides a description of where personal data in clear text is accessible on the network product, how it can be accessed, and details of where such access attempts are logged and how to view these logs.\nExecution Steps\n-\tThe tester verifies, for cases where personal data is accessible in clear text, that attempts to access it are recorded in a log, that the log includes the identity of the user that has attempted to access the data, and that the log does not include the actual personal data in clear-text.\n-\tThe tester repeats the check for each case where personal data is accessible.\nExpected Results:\nAll access attempts to personal data (in clear text) are recorded in the described logs, with the user identity included and no personal data visible in the log.\nExpected format of evidence:\nSample copies of the log files.\nRequirement Name: System handling during overload situations\nRequirement Reference: In accordance with industry best practice\n-\tRequirement Description:\nThe system shall provide security measures to deal with overload situations which can occur as a result of a denial of service attack or during periods of increased traffic, or reach the congestion threshold. In particular, partial or complete impairment of system availability shall be avoided. Potential protective measures include:\n-\tRestricting available RAM per application.\n-\tRestricting maximum sessions for a Web application.\n-\tDefining the maximum size of a dataset.\n-\tRestricting CPU resources per process.\n-\tPrioritizing processes.\n-\tOverload control method, e.g. limiting amount or size of transactions of a user or from an IP address in a specific time range.\nThreat Reference: TR 33.926 [4]\nTest case: Refer to test case in clause 4.2.3.3.3.\nRequirement name: Boot from intended memory devices only\nRequirement reference: In accordance with industry best practice\nRequirement Description:\nThe network product can boot only from the memory devices intended for this purpose.\n\nTest case:\nTest Name: TC_BOOT_INT_MEM_1\nPurpose:\nVerify that the network product can only boot from memory devices intended for this purpose (e.g. not from external memory like USB key).\nProcedure and execution steps:\nPre-Conditions:\nA document which contains information regarding the firmware access mechanism supported by the product and about the memory devices from which the network product can boot.\nExecution Steps\n1.\tThe tester verifies that the network product is configured to boot from memory devices declared in the network product document only.\n2.\tThe tester verifies that there is no possibility to access and modify the firmware of the network product without successful authentication and the authenticated subject (e.g., person or process) has no possibility to access and modify the firmware without privileged access rights.\nExpected Results:\nThe network product cannot boot from a memory device that is not configured in its firmware, and access to the firmware is only possible with the correct authentication.\nExpected format of evidence: NA\nRequirement Name: System handling during excessive overload situations.\nRequirement Reference: In accordance with industry best practice.\nRequirement Description: The system shall act in a predictable way if an overload situation cannot be prevented. A system shall be built in this way that it can react on an overload situation in a controlled way. However it is possible that a situation happens where the security measures are no longer sufficient.\nIn such case it shall be ensured that the system cannot reach an undefined and thus potentially insecure state. In an extreme case this means that a controlled system shutdown is preferable to uncontrolled failure of the security functions and thus loss of system protection.\nThe vendor shall provide a technical description of the network product's Over Load Control mechanisms (especially whether these mechanisms rely on cooperation of other network elements e.g. eNode B) and the accompanying test case for this requirement checks that the description provides sufficient detail in order for an evaluator to understand how the mechanism is designed.\nThreat References: TR 33.926 [4].\nTest case:\nTest Name: TC_SYSTEM_HANDLING_OF_OVERLOAD_SITUATIONS\nNote: \tThis test case covers requirements 4.2.3.3.1 and this requirement4.2.3.3.3.\nPurpose:\nVerify that the network product:\n-\thas a detailed technical description of the overload control mechanisms used to deal with overload scenarios;\n-\thas test results verifying the operation of the overload control mechanisms.\nProcedure and execution steps:\nPre-Conditions:\n-\tA document which provide a detailed technical description of the overload control mechanisms.\n-\tTest results from a test execution phase of overload control mechanism testing.\nExecution Steps\n-\tThe tester verifies that there is:\n-\tA technical description providing a high-level overview of the overload control design:\n-\tAn overview of the types of overload scenarios that the network product overload control mechanisms are expected to handle.\n-\tAn overview of the overload control thresholds that the network product uses to trigger overload control mechanisms.\n-\tDescription of the types of attacks that can cause an overload to the network product and how these are handled.\n-\tA description of how the network product discards or handles input during various overload situations including excessive overloads. i.e. where the overload is significantly greater than the thresholds where overload detection is triggered.\n-\tA description of how the network product security functions operate and perform during overload.\n-\tA description of how the network product shuts down or performs or takes other abatement or corrective actions during excessive overload conditions.\n-\tThe tester verifies that the test results:\n-\tContain details of the overload conditions used in the test execution that are consistent with the technical description document.\n-\tDescribe test procedures used to verify the overload control mechanisms.\n-\tContain data which demonstrates/indicates that the overload control mechanisms described in the technical description document have been implemented.\n-\tContain details of the test set-up including the mechanisms for creating the overload. Where simulators and/or scripts are used to artificially create a load then details of these should also be included.\nExpected Results:\n-\tA technical description provides a high-level overview of the overload control design.\n-\tA overview of the types of overload scenarios and overload control thresholds that are considered.\n-\tDescription on the types of attacks that may cause an overload to the system and how these are handled.\n-\tA description of how the network product discards or handles input during various overload situations.\n-\tDescribes if or how the network product security functions operate and perform during overload.\n-\tIf parts of the system shutdown or take other abatement or corrective actions these should be described.\nNote: \tIf some of the items listed above are not applicable to a network product then, in those cases, it should be clarified by the vendor why these items are not applicable.\nThe test results should:\n-\tContain details of the overload conditions used in the test execution that are consistent with the technical description document.\n-\tDescribe the test procedures used to verify the overload control mechanisms.\n-\tContain data which demonstrates/indicates that the overload control mechanisms described in the technical description document have been implemented.\n-\tContain details of the test set-up including the mechanisms for creating the overload.\nExpected format of evidence:\nDocumentation showing each of the points in the results sections.\n\nRequirement Name: System robustness against unexpected input.\nRequirement Reference: In accordance with industry best practice.\nRequirement Description: During transmission of data to a system it is necessary to validate input to the network product before processing. This includes all data which is sent to the system. Examples of this are user input, values in arrays and content in protocols. The following typical implementation error shall be avoided:\n-\tNo validation on the lengths of transferred data\n-\tIncorrect assumptions about data formats\n-\tNo validation that received data complies with the specification\n-\tInsufficient handling of protocol errors in received data\n-\tInsufficient restriction on recursion when parsing complex data formats\n-\tWhite listing or escaping for inputs outside the values margin\nThreat References: TR 33.926 [4]\nTest case:This requirement will be verified by Robustness and Protocol fuzzing tests as defined in clause 4.4.4 Robustness and fuzz testing.\nRequirement name: Network product Software integrity validation\nRequirement reference: In accordance with industry best practice\nRequirement Description:\n1)\tSoftware package integrity shall be validated in the installation/upgrade stage.\n2)\tNetwork product shall support software package integrity validation via cryptographic means, e.g. digital signature. To this end, the network product has a list of public keys or certificates of authorised software sources, and uses the keys to verify that the software update is originated from only these sources.\n3)\tTampered software shall not be executed or installed if integrity check fails.\n4)\tA security mechanism is required to guarantee that only authorized individuals can initiate and deploy a software update, and modify the list mentioned in bullet 2.\nThreat References: TR 33.926 [4]Test case:\nTest Name: TC_SW_PKG_INTEGRITY_1\nPurpose:\nVerify that:\n1.\tThe Network Product validates the software package integrity during the installation/upgrade stage.\n2.\tThe software package integrity validation mechanism is performed using cryptographic mechanisms, e.g. digital signature using the public keys or certificates configured in the network product.\n3. \tSoftware that fails an integrity check is rejected by the network product.\n4. \tOnly authorized users are allowed to install software.\nProcedure and execution steps:\nPre-Conditions:\n-\tA network product document containing information regarding software package integrity checks, including details of how the integrity check is carried out, where public keys or certificates of sources authorised to sign software packages are stored on the network product and who these sources are, and what evidence is created to prove that the integrity check has been executed and what the result of the check was. Documentation which describes the installation procedure including how a user is authorized and authenticated to perform installation process.\n-\tA valid network product software load/package and one that is not-valid (or could be deemed to have been tampered with) are available.\nExecution Steps\nThe tester checks the permissions required to install software on the network product ensuring that a user is properly authenticated by the network product and that they have the required access privileges to perform the installation activity.\nThe tester checks, when a software package is attempted to be installed on the network product, that the software package integrity check is executed (check for evidence of execution as described in network product documentation) and that valid software is allowed to be installed but invalid software is rejected.\nThe tester checks the access control permissions for the software package integrity checking process, the list of public keys of authorised software sources, and any related credentials or keys for the process, to ensure that the process cannot be controlled by persons that are not authorized to do so.\nExpected Results:\n-\tEvidence that the software package integrity check has been executed for both cases of software installation (valid and invalid software packages).\n-\tAuthentication and access control mechanisms are in operation for software package installation and around the software package integrity checking mechanism.\n-\tThe installation/upgrade operation fails when using an invalid software package.\n-\tThe installation/upgrade operation is successful when using a valid software package.\nExpected format of evidence:\nSnapshots containing the result of the installation of package A and B.\n4.2.3.4.1.1\tSuccessful authentication and authorization of system functions\nRequirement Name: Authentication and authorization for System functions\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe usage of a system function without successful authentication on basis of the user identity and at least one authentication attribute (e.g. password, certificate) shall be prevented. System functions comprise, for example network services (like SSH, SFTP, Web services), local access via a management console, local usage of operating system and applications. This requirement shall also be applied to accounts that are only used for communication between systems. An exception to the authentication and authorization requirement are functions for public use such as those for a Web server on the Internet, via which information is made available to the public.\nThreat References: TR 33.926 [4]Test case:\nTest Name: TC_SYS_FUN_USAGE\nPurpose:\nTo ensure that system functions shall not be used without successful authentication and authorization.\nProcedure and execution steps:\nPre-Conditions:\n1. The vendor shall supply the list of system functions which include network services, local access via a management console, local usage of operating system and applications.\n2. The vendor shall supply the list of access entries for system functions.\nExecution Steps\nThe tester is required to execute the following steps:\n1.\tThe tester verifies, based on his/her own experience, that the list is adequate.\n2.\tThe tester verifies that the access entries to use system functions, which are listed by the vendor, require successful authentication on basis of the user name and at least one authentication attribute. The tester also verifies that the access entries to use system functions require authorization via an access control mechanism (e.g. Discretionary access control/Ownership/Capabilities or Mandatory access control). This applies to both system functions that are locally accessible and those that are remotely accessible via a network interface.\nExpected Results:\n1.\tThe network product does not allow access to any system function provided by the vendor without a successful user authentication and authorization.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n- \tDescription of executed tests and commands\n- \tRelevant output (e.g. Screenshot)\n- \tTest result (Passed or not)\n4.2.3.4.1.2\tUnambiguous identification of the user.\nRequirement name: Unambiguous identification of the user.\nRequirement Reference: In accordance with industry best practice.\nRequirement Description: Users shall be identified unambiguously by the network product. The network product shall support assignment of individual accounts per user, where a user could be a person, or, for Machine Accounts, an application, or a system. The network product shall not enable the use of group accounts or group credentials, or sharing of the same account between several users, by default. The network product shall support a minimum number of 50 individual accounts per user data base if not explicitly specified in a SCAS of a particular network product, so that accountability for each user is ensured even in large network operator networks. The network product shall not support user access credentials unrelated to an account.\nNOTE 1:\tThe network product can support independent user data bases for different access methods, e.g. one data base for command shell access on OS level and another data base for GUI access. User data bases can be stored locally on the network product or on a central AAA system that the network product accesses for user authentication.\nNOTE 2:\tThis requirement does not preclude user group concepts for access control.\nThreat References: TR 33.926 [4]Test case:\nNOTE 3:\tSome typical default accounts suggest that they are shared amongst several persons (e.g. vendor_xy, support), or do not allow identification of individual users (e.g. guest, ftp, anonymous). In order to avoid overlap of this test case with clause 4.2.3.4.2.2, it is assumed for this test case that such accounts have been deleted or disabled in line with clause 4.2.3.4.2.2.\nTest Name: TC_ACCOUNT_DOCUMENTATION\nPurpose:\nTo ensure that documentation of the network product does not encourage or require the use of group accounts, group credentials, or sharing of the same account between several users. To ensure that the network product does not support credentials unrelated to an account.\nProcedure and execution steps:\nPre-Conditions:\n1)\tAll user and group data bases for names and credentials supported by the network product are identified in the documentation accompanying the network product.\n2)\tAll predefined accounts and groups are identified in the documentation accompanying the Network Product.\n3)\tInstructions of how administrator users can add accounts, groups, and credentials to the database(s) are provided in the documentation accompanying the Network Product.\n4) \tThe operations manual describes O&M user and group concepts supported by the network product.\nExecution Steps:\nThe tester is required to execute the following steps:\n1)\tReview the system documentation (in particular operations manual) whether it encourages or requires the use of group accounts, group credentials, or sharing of the same account between several users.\n2)\tReview the system documentation whether the network product requires or supports entering credentials unrelated to an account, in order to perform specific actions, e.g. to enter a \"master password\" for access to privileged functions.\nExpected Results:\n1)\tThe reviewed documentation is in line with the requirement.\nExpected format of evidence:\nTest report that lists the reviewed documentation (incl. release dates and versions) and the findings.\nTest Name: TC_ACCOUNT_DEFAULTS\nPurpose:\nTo ensure that the default setup of the network product does not enable the use of group accounts or group credentials.\nProcedure and execution steps:\nPre-Conditions:\n1)\tAll user and group data bases for names and credentials supported by the network product are identified in the documentation accompanying the network product.\n2)\tInstructions of how administrator users can view all existing accounts, groups, and protected credentials in the databases are provided in the documentation accompanying the Network Product.\nExecution Steps:\nThe tester is required to execute the following steps:\n1)\tAfter login via an account with necessary access rights (e.g. Admin) search in the databases for any group credentials. Example for Linux®: /etc/gshadow\nExpected Results:\n1)\tNo group credentials are defined.\nExpected format of evidence:\nTest report that lists the reviewed documentation, reviewed user and group databases, and the findings.\nTest Name: TC_ACCOUNT_NUMBER\nPurpose:\nTo ensure that a minimum number of  individual accounts per user data base is supported. The minimum number is defined in the requirement description of this clause.\nProcedure and execution steps:\nPre-Conditions:\nAll user data bases for names and credentials supported by the network product are identified in the documentation accompanying the network product.\nExecution Steps:\nThe tester is required to execute the following steps:\nCreate accounts until the minimum number of accounts is reached.\nExpected Results:\nSuccessful creation of the minimum number of accounts.\nExpected format of evidence:\nTest report that lists the reviewed documentation, reviewed user databases, and the findings.\nRequirement Name: Account protection by at least one authentication attribute.\nRequirement Reference: In accordance with industry best practice.\nRequirement Description: The various user and machine accounts on a system shall be protected from misuse. To this end, an authentication attribute is typically used, which, when combined with the user name, enables unambiguous authentication and identification of the authorized user.\nAuthentication attributes include:\n-\tCryptographic keys\n-\tToken\n-\tPasswords\nThis means that authentication based on a parameter that can be spoofed (e.g. phone numbers, public IP addresses or VPN membership) is not permitted. Exceptions are attributes that cannot be faked or spoofed by an attacker.\nNOTE: \tSeveral of the above options can be combined (dual-factor authentication) to achieve a higher level of security. Whether or not this is suitable and necessary depends on the protection needs of the individual system and its data and is evaluated for individual cases.\nThreat References: TR 33.926 [4]\nTest Case:Test Name: TC_ACCOUNT_PROTECTION\nPurpose:\nTo ensure that all accounts are protected by at least one authentication attribute.\nProcedure and execution steps:\nPre-Conditions:\n1)\tAll predefined accounts are identified in the documentation accompanying the Network Product.\n2)\tInstructions of how to create new accounts are provided in the documentation accompanying the Network Product.\n3)\tInstructions of how administrator user can view all existing accounts in the database are provided in the documentation accompanying the Network Product.\nNOTE: \tNo test is provided here for finding undocumented hard coded accounts as such tests be impossible to define in a general way.\nExecution Steps:\nThe tester is required to execute the following steps:\n1)\tAfter login via account with necessary access rights (e.g. Admin) search in the database for any undocumented account.\n2)\tAttempt login to all predefined accounts identified (either documented or not) with and without using the respective authentication attribute.\n3)\tCreate a new account by following instructions in documentation.\n4)\tAttempt login to the newly created account.\nExpected Results:\n1)\tIt is not possible to login to any predefined account without using at least one authentication attribute that satisfies the conditions in the requirement.\n2)\tIt is not possible to login to any newly created account without usage of at least one authentication attribute that satisfies the conditions in the requirement.\nExpected format of evidence:\nEvidence containing the results of all login attempts, e.g. screenshots, log files, error messages.\n4.2.3.4.2.2\tDeletion or disablement of predefined accounts\nRequirement Name: Deletion or disablement of predefined accounts .\nRequirement Reference: In accordance with industry best practice.\nRequirement Description: All predefined or default accounts shall be deleted or disabled. Many systems have default accounts (e.g. guest, ctxsys), some of which are preconfigured with or without known passwords. These standard users shall be deleted or disabled. Should this measure not be possible the accounts shall be locked for remote login. In any case disabled or locked accounts shall be configured with a complex password as specified in clause 4.2.3.4.3.1 Password Structure. This is necessary to prevent unauthorized use of such an account in case of misconfiguration.\nExceptions to this requirement to delete or disable accounts are accounts that are used only internally on the system involved and that are required for one or more applications on the system to function. Also for these accounts remote access or local login shall be forbidden to prevent abusive use by users of the system.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_PREDEFINED_ACCOUNT_DELETION\nPurpose:\nTo ensure that predefined accounts are deleted or disabled unless there is specific exception as defined in the requirement 4.2.3.4.2.2.\nProcedure and execution steps:\nPre-Conditions:\n1)\tAll predefined accounts are identified in the documentation accompanying the Network Product.\n2)\tInstructions of how administrator user can view all existing accounts in the database are provided in the documentation accompanying the Network Product.\nNOTE: \tNo test is provided here for finding undocumented hard coded accounts as such tests can be impossible to define in a general way.\nExecution Steps:\n1)\tCheck in documentation of the existence of any documented predefined account and what is the reason for existence.\n2)\tAfter login via account with necessary access rights (e.g. Admin) search in the database for any undocumented account.\n3)\tCheck the password complexity of such existing predefined accounts according to the test provided in clause 4.2.3.4.3.1.\n4)\tAttempt remote login to such predefined accounts.\nExpected Results:\n1)\tPredefined accounts are either deleted/ disabled or, if existing, the reason is in accordance with the requirement exception.\n2)\tIf there are active predefined accounts in accordance with the requirement exception then there is no remote login possibility.\n3)\tIf predefined account is either disabled or locked then it shall anyway fulfil the complex password requirements as specified in clause 4.2.3.4.3.1 after enabling or unlocking it.\nExpected format of evidence:\nEvidence can be presented in the form of screenshot/screen-capture on showing for example a remote login failure or complexity of a password of e.g. locked or disabled accounts.\n4.2.3.4.2.3\tDeletion or disablement of predefined or default authentication attributes.\nRequirement Name: Deletion or disablement of predefined or default authentication attributes\nRequirement Reference: In accordance with industry best practice\nRequirement Description: Predefined or default authentication attributes shall be deleted or disabled.\nNormally, authentication attributes such as password or cryptographic keys will be preconfigured from vendor, manufacturer, or developer of a system. Such authentication attributes shall be changed by automatically forcing a user to change it on 1st time login to the system or the vendor provides instructions on how to manually change it.\nThreat References: TR 33.926 [4]\nTest Case:\n\nTest Name: TC_PREDEFINED_AUTHENTICATION_ATTRIBUTES_DELETION\nPurpose:\nTo ensure that predefined or default authentication attributes are deleted or disabled as defined in the requirement 4.2.3.4.2.3.\nProcedure and execution steps:\nPre-Conditions:\n1)\tInstructions of how administrator user can view all existing accounts in the database are provided in the documentation accompanying the Network Product.\n2)\tAll predefined accounts and their respective predefined or default passwords are identified in the documentation accompanying the Network Product.\nNOTE: \tNo test is provided here for finding undocumented hard coded accounts as such tests can be impossible to define in a general way.\nExecution Steps:\n1) \tCheck in documentation of the existence of any documented predefined account and what is the login password or if any cryptographic key for such accounts is preinstalled.\n2)\tAfter login via account with necessary access rights (e.g. Admin) search in the database for any undocumented account.\n3)\tAttempt login to such predefined accounts if existing.\nExpected Results:\n1)\tWhen login is attempted to any predefined account the user is automatically forced to change login password at first time login to the system.\n2)\tIf there is no automatic password change enforced then recommendation and clear instructions of how to manually change the password or how to create and reinstall a new cryptographic key exist in the documentation.\nExpected format of evidence:\nEvidence can be presented in the form of screenshot/screen-capture on how the network product prompts for password change at first login. Also extracts from product documentation with clear instructions of how to change any default password or cryptographic key.\n4.2.3.4.3.1\tPassword Structure\nRequirement Name: Password Complexity rule\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe setting by the vendor shall be such that a network product shall only accept passwords that comply with the following complexity criteria:\n1)\tAbsolute minimum length of 8 characters (shorter lengths shall be rejected by the network product). It shall not be possible setting this absolute minimum length to a lower value by configuration.\n2)\tComprising at least three of the following categories:\n-\tat least 1 uppercase character (A-Z)\n-\tat least 1 lowercase character (a-z)\n-\tat least 1 digit (0-9)\n-\tat least 1 special character (e.g. @;!$.)\nThe network product shall use a default minimum length of 10 characters. The minimum length of characters in the passwords shall be configurable by the network operator. The default minimum length is the value configured by the vendor before any network operator-specific configuration has been applied. The special characters can be categorized in sets according to their Unicode category.\nThe network product shall at least support passwords of a length of 64 characters or a length greater than 64 characters.\nIf a central system is used for user authentication, password policy is performed on the central system and additional assurance shall be provided that the central system enforces the same password complexity rules as laid down for the local system in this subclause. If a central system is not used for user authentication, the assurance on password complexity rules shall be performed on the Network Product.\nWhen a user is changing a password or entering a new password, the system checks and ensures that it meets the password requirements. Above requirements shall be applicable for all passwords used (e.g. application-level, OS-level, etc.).\nThreat References: TR 33.926 [4]\nTest case:\n\nTest Name: TC_PASSWORD_STRUCT\nPurpose:\nTo verify that password structure adheres to the password complexity criteria.\nTo verify that password structure is configurable as per the complexity criteria.\nProcedure and execution steps:\nPre-Conditions:\n1.\tTester has rights to create user account.\nExecution Steps\nExecute the following steps:\nA.\tTest Case 1\n1.\tThe tester logs into Network Product application using admin account.\n2.\tThe tester creates user A following the password complexity criteria.\n3.\tThe tester logs in as user A and attempts to change their password which contains characters from all four categories mentioned in the password complexity criteria.\nB.\tTest Case 2\n1. \tThe tester logins with privileged account.\n2.\t The tester modifies password structure policy on the network product by strengthening the policy (e.g. changing the minimum password length to 8+x, changing the minimum number of character Unicode categories to 4).\n3.\tThe tester logs in as user A and attempts to change their password to a password with a strength of less than that permitted by the policy strengthened in step 2 above.\nExpected Results:\nTester can change password only if new password fulfil the password complexity criteria\nExpected format of evidence:\nEvidence suitable for the interface, e.g. screenshot containing the operation result or report in text form.\n4.2.3.4.3.2\tPassword changes\nRequirement Name: Password changes\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nIf a password is used as an authentication attribute, then the system shall offer a function that enables a user to change his password at any time. When an external centralized system for user authentication is used it is possible to redirect or implement this function on this system.\nPassword change shall be enforced after initial login.\nThe system shall enforce password change based on password management policy. In particular, the system shall enforce password expiry.\nPreviously used passwords shall not be allowed up to a certain number (Password History). \nThe number of disallowed previously used passwords shall be:\n-\tConfigurable;\n-\tGreater than 0;\n-\tAnd its default value shall be 3. This means that the network product shall store at least the three previously set passwords. The maximum number of passwords that the network product can store for each user is up to the vendor.\nWhen a password is about to expire a password expiry notification shall be provided to the user.\nAbove requirements shall be applicable for all passwords used(e.g. application-level, OS-level, etc.). An exception to this requirement is machine accounts.\nThreat References: TR 33.926 [4]\n\nTest case:\nTest Name: TC_PASSWORD_CHANGES\nPurpose:\n-\tTo check whether the network product is provisioned with the functionality that enables its user to change the password at any time.\n-\tThe network product enforces password change after initial login.\n-\tTo verify the new password adheres to the password management policy and also to verify whether it has password expiry rule.\n-\tThe network product is configured to disallow specified number of previously used passwords (Password History).\nProcedure and execution steps:\nPre-Conditions:\n1.\tTester has account with username and password in the network product.\n2.\tNetwork product vendor will provide documentation for password management policy which should include details on how to change the password, configure password expiry rule and disallowing specified number of previously used passwords.\n3.\tThe network product vendor shall supply information on how many passwords the network product can store for each user in the password history.\n4.\tThe tester has privilege to modify the number of disallowed previously used password.\nExecution Steps\nExecute the following steps:\nA.\tPositive Test\nCase 1:\nTest case to enforce password change after initial login is covered in clause 4.2.3.4.2.3.\nCase 2:\n1\tThe tester logs into network product application using a privileged account .\n2\tThe network product application generates password expiry notification for user Y to force user Y to change the password.\n3\tThe tester logs out as a privileged user and logs on as user Y.\n4.\tThe tester is prompted to change his password and creates a new password by following the password policy management.\n5\tThe network product application confirms change in password by, for example, displaying \"Password Changed Successfully\".\n6\tThe tester successfully logs-in the network product application as user Y using the new password.\nCase 3:\n1.\tThe tester logs into network product application using a privileged account.\n2.\tTester configures the network product application for number of disallowed previously used passwords to x\n3.\tThe tester requests for a password change for user Y.\n4.\tThe tester logs out of the privileged account and logs on as user Y\n5. \tThe tester creates a new password by following the password policy management.\n6.\tIf the password is not equal to any of the x previously used passwords, the network product application still accepts the new password and displays \"Password Changed Successfully\".\nB.\tNegative Test\nCase 1:\nTest case to enforce password change after initial login is covered in clause 4.2.3.4.2.3.\nCase 2:\nNo negative test case for this scenario.\nCase 3:\n1.\tThe tester logs into network product application using privileged account.\n2.\tTester configures the network product application for number of disallowed previously used passwords to x for user Y.\n3.\tThe tester logs out of the privileged account and logs in as user Y\n4.\tThe tester requests for a password change.\n5.\tThe tester sets the new password to a value that is among the last x passwords used previously x times.\nExpected Results:\nA.\tPositive Test\nCase 1:\nExpected result for enforcing password change after initial login is covered in clause 4.2.3.4.2.3.\nCase 2:\nTester can successfully change the password.\nCase 3:\nTester can successfully change the password.\nB.\tNegative Test\nIf the negative test case passes, this shows that network product application does not work properly and it violates the requirement.\nCase 1:\nExpected result for enforcing password change after initial login is covered in clause 4.2.3.4.2.3.\nCase 2:\nNo negative test case for this scenario.\nCase 3:\nThe tester cannot successfully change the password.\nExpected format of evidence:\nEvidence suitable for the interface, e.g. screenshot contains the operation result.\n4.2.3.4.3.3\tProtection against brute force and dictionary attacks\nRequirement Name: Protection against brute force and dictionary attacks\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nIf a password is used as an authentication attribute, a protection against brute force and dictionary attacks that hinder password guessing shall be implemented.\nBrute force and dictionary attacks aim to use automated guessing to ascertain passwords for user and machine accounts. Various measures or a combination of these measures can be taken to prevent this.\nThe most commonly used protection measures are:\n1)\tUsing the timer delay (this delay could be the same or increased depending the network operator's policy for each attempt, e.g. double the delay, or 5 minutes delay, or 10 minutes delay) for each newly entered password input following an incorrect entry (\"tar pit\").\n2)\tBlocking an account following a specified number of incorrect attempts, refer to 4.2.3.4.5. However it has to be taken into account that this solution needs a process for unlocking and an attacker can force this to deactivate accounts and make them unusable.\n3)\tUsing CAPTCHA to prevent automated attempts (often used for Web applications).\n4) \tUsing a password disallow list to prevent vulnerable passwords.\nNOTE 1: \tPassword management and disallow list configuration can be done in a separate node that is different to the node under test, e.g. a SSO server or any other central credential manager.\nIn order to achieve higher security, it is often meaningful to combine two or more of the measures named here. It is left to the vendor to select appropriate measures.\nAbove requirements shall be applicable for all passwords used (e.g. application-level, OS-level, etc.). An exception to this requirement is machine accounts.\nThreat References: TR 33.926 [4]\n\nTest case:\nTest Name: TC_PROTECT_AGAINST_BRUTE_FORCE_AND_DICTIONARY_ATTACKS\nPurpose:\nTo ensure that the system uses a mechanism with adequate protection against brute force and dictionary attacks\nTo check whether system follows commonly used preventive measures which are mentioned below.\n1.\tUsing the timer delay (e.g. doubling wait times after every incorrect attempt, or 5 minutes delay, or 10 minutes delay) after each incorrect password input (\"tar pit\").\n2.\tBlocking an account following a specified number of incorrect attempts (typically 5). However administrator has to keep in account that this solution needs a process for unlocking and an attacker can utilize this process to deactivate the accounts and make them unusable.\n3.\tUsing CAPTCHA to prevent automated attempts (often used for Web interface).\n4.\tUsing a password disallow list to prevent vulnerable passwords.\nProcedure and execution steps:\nPre-Conditions:\nThis test applies only when the most commonly used protection measures used in the requirement are implemented. If they are not implemented, then the vendor documentation needs to provide alternative measures and the tester needs to develop suitable tests for these alternative measures. Since a vendor is free to select appropriate measures, only the vendor selected measures are to be tested.\n1.\tThe password policy management of the network product is configured to use the timer delay after each incorrect password input.\n2.\tThe password policy management is configured to block an account following a specified number of incorrect password attempts (typically 5).\n3.\tThe web interface should be configured with CAPTCHA feature to prevent automated attempts.\n4.\tCAPTCHA feature is optional and test is done only if implemented.\n5.\tA password disallow list is configured by the tester. At least one disallow list password (a password that meets the complexity criteria but is disallow listed) is documented.\nNOTE 2: \tPassword management and disallow list configuration may be done in a separate node that is different to the node under test, e.g. a SSO server or any other central credential manager.\n6.\tTester has valid credentials as an authorized user.\n7. \tIf the recommended protection measures mentioned in the Requirement Description are not implemented in the Network Product, the vendor provides a documentation describing the alternative measures that are implemented instead.\nExecution Steps\nExecute the following steps:\nA.\tPositive Test\nCase 1:\nTest case to use the timer delay after each incorrect password input is covered in clause 4.2.3.4.5.\nCase 2:\nTest case to block an account following a specified number of incorrect attempts is covered in clause 4.2.3.4.5.\nCase 3:\nIf the network product's login web interface is configured with a CAPTCHA feature, the tester enters the valid password and correct CAPTCHA.\nCase 4:\nIf the recommended protection measures mentioned in the Requirement Description are not implemented in the Network Product, the tester checks if the alternative measures described in the vendor provided documentation are meaningful and develops suitable test cases to verify their correct implementation.\nIn some cases the network product class can have two or more of the attack prevention methods available, which are a combination of Cases 1-3. In such cases the tester will need to run a combination of these test cases.\nB.\tNegative Test\nCase 1:\nTest case to use the timer delay after each incorrect password input is covered in clause 4.2.3.4.5.\nCase 2:\nTest case to block an account following a specified number of incorrect attempts is covered in clause 4.2.3.4.5.\nCase 3:\nIf the network product's login web interface is configured with a CAPTCHA feature, the tester enters the valid password without and with incorrect CAPTCHA.\nCase 4:\n1.\tThe tester tries to change the password to the disallow listed password.\nExpected Results:\nA.\tPositive Test\nCase 1:\nExpected result for the test case to use the timer delay after each incorrect password input is covered in clause 4.2.3.4.5.\nCase 2:\nExpected result for the test case to block an account following a specified number of incorrect attempts is covered in clause 4.2.3.4.5.\nCase 3:\nTester can login only after entering the correct password and CAPTCHA.\nCase 4:\nThe tester assesses the alternative measures for brute force and dictionary attack mitigation as meaningful and all developed test cases can be completed successfully.\nB.\tNegative Test\nCase 1:\nExpected result for the use the timer delay after each incorrect password input is covered in clause 4.2.3.4.5.\nCase 2:\nExpected result for the test case to block an account following a specified number of incorrect attempts is covered in clause 4.2.3.4.5.\nCase 3:\nTester cannot successfully log in to the network product.\nCase 4:\nTester cannot successfully change the password to the disallow listed password.\nExpected format of evidence:\nEvidence suitable for the interface, e.g. screenshot containing the operation result.\n4.2.3.4.3.4\tHiding password display\nRequirement Name: Hiding password display\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe password shall not be displayed in such a way that it could be seen and misused by a casual local observer. Typically, the individual characters of the password are replaced by a character such as \"*\". Under certain circumstances an individual character may be displayed briefly during input. Such a function is used, for example, on smartphones to make input easier. However, the entire password is never output to the display in plaintext.\nAbove requirements shall be applicable for all passwords used (e.g. application-level, OS-level, etc.). An exception to this requirement is machine accounts.\nThreat References: TR 33.926 [4]\n\nTest case:\nTest Name: TC_HIDING_PASSWORD_DISPLAY\nPurpose:\nVerify that the given password is not visible to the casual local observer.\nProcedure and execution steps:\nPre-Conditions:\nTester has account with username and password in the network product.\n\nExecution Steps\nExecute the following steps:\n1.\tThe network product will display the login screen.\n2.\tThe tester enters the username.\n3.\tThe tester enters the password.\nExpected Results:\nThe password shall not be displayed in such a way that it could be seen and misused by a casual local observer. Typically, the individual characters of the password are replaced by a character such as \"*\". Under certain circumstances an individual character may be displayed briefly during input. Such a function is used, for ex ample, on smartphones to make input easier. However, the entire password is never output to the display in plaintext.\nExpected format of evidence:\nEvidence suitable for the interface, e.g. screenshot contains the operation results.\n4.2.3.4.4.1\tNetwork Product Management and Maintenance interfaces\nRequirement Name: Network Product Management and Maintenance interfaces\nRequirement Reference: In accordance with industry best practice\nRequirement Description: The network product management shall support mutual authentication mechanisms, the mutual authentication mechanism can rely on the protocol used for the interface itself or other means.\nThreat References: TR 33.926 [4]\nTest case:\nTest Name: TC_MUTUAL_AUTHENTICATION-ON_NETWORK_PRODUCT_MANAGEMENT_PROTOCOLS\nPurpose:\nVerify that:\nThere is mutual authentication of entities for management interfaces on the network product.\nProcedure and execution steps:\nPre-conditions: Documentation that lists each of the management protocols and describes the authentication mechanism used for each one.\nExecution Steps\n1.\tThe tester checks that the authentication mechanisms have been configured on the network product.\n2.\tThe tester triggers communication between network product and a test entity that has a legitimate authentication credential.\n3.\tThen, the tester triggers communication between network product and a test entity that doesn't have a legitimate authentication credential.\nExpected results:\n-\tMutual authentication is successful and communication between network product and the entity with correct credentials can be established.\n-\tMutual authentication fails and communication between the network product and the entity with incorrect credentials cannot be established.\nExpected format of evidence: Test result pass/fail recorded by tester.\nRequirement Name: Policy regarding consecutive failed login attempts\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\na) \tThe maximum permissible number of consecutive failed user account login attempts should be configurable by the network operator. The definition of the default value set at manufacturing time for maximum number of failed user account login attempts shall be less than or equal to 8, typically 5. After the maximum permissible number of consecutive failed user account login attempts is exceeded by a user there shall be a block delay in allowing the user to attempt login again. This block delay and also the capability to set period of the block delay, e.g. double the delay, or 5 minutes delay, or 10 minutes delay, after each login failure should be configurable by the network operator. The default value set at manufacturing time for this delay shall be greater than or equal to 5 sec.\nb) \tIf supported, infinite (permanent) locking of an account that has exceeded maximum permissible number of consecutive failed user account login attempts should also be possible via configuration, with the exception of administrative accounts which shall get only temporarily locked.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_FAILED_LOGIN_ATTEMPTS\nPurpose:\nTo ensure that the policy regarding failed login attempts is adhered to.\nCase 1: Testing for requirement 4.2.3.4.5 a)\nProcedure and execution steps:\nPre-Conditions:\n1)\tAt least one user account has been created as per vendor instructions.\n2)\tDirections of how to configure the maximum permissible number of consecutive failed user account login attempts and the default value of this number are identified in the documentation accompanying the Network Product. Default value shall be stated as well.\n3)\tDirections of how to configure the block delay in allowing a user attempt to login again when the number of failed login attempts has exceeded the maximum number are identified in the documentation accompanying the Network Product. Default value of the delay shall be stated as well.\n\nExecution Steps:\nThe tester is required to execute the following steps:\n1)\tCheck default values from precondition 2 and 3.\n2)\tPerform consecutive failed login attempts for the user account until the default maximum number of precondition 2 is reached.\n3)\tAttempt again one extra login, which fails again.\n4)\tAttempt one extra login in less time than the default for the delay of precondition 3, using the correct credentials.\n5)\tAttempt one extra login in more time than the default for the delay of precondition 3, using the correct credentials.\n\nExpected Results:\n1)\tDefault values from precondition 2 and 3 are in accordance with the requirement.\n2)\tIn execution step 2, 3 and 4, the login attempt shall be rejected in all cases.\n3)\tIn execution step 5, it is verified that the user can login only at the last login attempt.\n\nExpected format of evidence:\n\nEvidence containing the results of all login attempts, e.g. screenshots, log files, configurations, error messages.\n\nCase 2: Testing for requirement 4.2.3.4.5 b)\nProcedure and execution steps:\nPre-Conditions:\n1. \tAt least one user account has been created as pervendor 's instructions.\n2. \tDirections of how to configure the maximum permissible number of consecutive failed user account login attempts and the default value of this number are identified in the documentation accompanying the Network Product. Default value shall be stated as well.\n3. \tDirections of how to optionally configure permanent locking for non-administrative accounts shall be stated as well.\nExecution Steps:\nThe accredited evaluator's test lab is required to execute the following steps:\n1. \tCheck default values from precondition 2.\n2. \tPerform consecutive failed login attempts for the user account until the default maximum number of precondition 2 is reached.\n3. \tAttempt again one extra login, which fails again.\n4. \tAttempt one extra login in more time than the default for the delay of precondition 3, using the correct credentials.\n5a. \tIf supported enable permanent locking of accounts exceeding the maximum permissible number of consecutive failed user account login attempts and repeat steps 1-4 for an unprivileged user.\n5b. If supported enable permanent locking of accounts exceeding the maximum permissible number of consecutive failed user account login attempts and repeat steps 1-4 for a user with administrative access rights.\nExpected Results:\nIn execution step 5a it is verified that the user cannot login at any execution step.\nIn execution step 5b it is verified that an administrator user can successfully login only at execution step 5b.\nExpected format of evidence:\nEvidence containing the results of all login attempts, e.g. screenshots, log files, configurations, error messages.\n4.2.3.4.6.1\tAuthorization policy\nRequirement Name: Authorization policy\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe authorizations for accounts and applications shall be reduced to the minimum required for the tasks they have to perform.\nAuthorizations to a system shall be restricted to a level in which a user can only access data and use functions that he needs in the course of his work. Suitable authorizations shall also be assigned for access to files that are components of the operating system or of applications or that are generated by the same (e.g. configuration and logging files).\nAlongside access to data, execution of applications and components shall also take place with rights that are as low as possible. Applications should not be executed with administrator or system rights.\nThreat References: TR 33.926 [4]\nTest case: verify authorization policy is in place and that user access and data access in the system are according to the authorization policy.\nProcedure and execution steps:\nPre-Conditions:\nDocumentation describing the authorization policy defined for the system including details on the lowest access rights assigned to user accounts, access to data, application execution and components.\nExecution Steps:\n1.\tAssign access rights (e.g. read only) to user accounts, data files, and applications.\n2.\tOperations, that are allowed as per authorization policy (as defined in the network product documentation), are attempted via the different user accounts, data files, and applications.\nExpected Results:\n1.\tUser accounts, data files, and applications are allowed to be accessed (e.g. able to read but not write to a file, able to execute an application as a user account without administrator rights, etc.) according to the access rights assigned.\n2.\tUser accounts, data files, and applications are not allowed to be accessed above the access rights assigned (e.g. able to write to a read only file, able to execute an application as an administrator, etc.).\nExpected format of evidence:\nPass/fail results as recorded by the tester.\n4.2.3.4.6.2\tRole-based access control\nRequirement Name: Role-based access control\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe network product shall support Role Based Access Control (RBAC). A role-based access control system uses a set of controls which determines how users interact with domains and resources. The domains could be Fault Management (FM), Performance Management (PM), System Admin, etc. The RBAC system controls how users or groups of users are allowed access to the various domains and what type of operation they can perform, i.e. the specific operation command or command group (e.g. View, Modify, Execute).\nThe network product supports RBAC, in particular, for O&M privilege management for network product Management and Maintenance, including authorization of the operation for configuration data and software via the network product console interface.\nThreat References: TR 33.926 [4]\nTest case:\nPurpose:\nVerify that users are granted access with role-based privileges.\nProcedure and execution steps:\nPre-Conditions:\nDocumentation describing the role based access control system including details on which user roles are defined.\nExecution Steps\n1.\tUser accounts which are assigned to different access roles are created.\n2.\tOperations, that are allowed by different roles (as defined in the network product documentation), are attempted via the different user accounts.\nExpected Results:\n1.\tUsers that are assigned to a role that is not allowed to execute an operation are prevented from executing the operation.\n2.\tUsers that are assigned to a role that is allowed to execute an operation can successfully execute the operation.\nExpected format of evidence:\nPass/fail results as recorded by the tester.\nRequirement Name: Protecting sessions – logout function\nRequirement References: In accordance with industry best practice\nRequirement Description: The system shall have a function that allows a signed in user to logout at any time. All processes under the logged in user ID shall be terminated on log out. The network product shall be able to continue to operate without interactive sessions.\nOnly for debugging purposes, processes under a logged in user ID may be allowed to continue to run after detaching the interactive session.\nThreat References: TR 33.926 [4]\nTest Name: TC_PROTECTING_SESSION_LOGOUT\nPurpose:\nTo ensure a signed in user can logout at any time.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe vendor shall declare that it has a function that allows a signed in user to logout at any time.\n-\tThe tester has privileges to create a new account or use an existing account.\nExecution Steps:\nThe tester is required to execute the following steps:\n1)\tThe tester creates a new account.\n2)\tThe tester uses the new account or an existing account to log into network product. After x minutes the tester tries to logout network product.\nNOTE: \tThe value of x can be arbitrarily set by the tester.\nExpected Results:\n-\tThe tester can use a new account or an existing account to log into network product and logout network product after x minutes.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tSettings, and configurations used\n-\tTest result (Passed or not)\nRequirement Name: Protecting sessions – inactivity timeout\nRequirement Reference: In accordance with industry best practice\nRequirement Description: An O&M user interactive session shall be terminated automatically after a specified period of inactivity. It shall be possible to configure an inactivity time-out period.\nNote: \tThe kind of activity required to reset the timeout timer depends on the type of user session.\nTest Name: TC_PROTECTING_SESSION_ INAC TIMEOUT\nPurpose:\nTo ensure an O&M user interactive session shall be terminated at inactivity timeout.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe tester has privileges to create an O&M user interactive session.\n-\tThe tester has privileges to configure the inactivity time-out period for user interactive session.\n-\tSession log should be enabled.\nExecution Steps\n1.\tThe tester creates O&M user A interaction session.\n2.\tThe tester configures the inactivity time-out period for user A to x minute, for example 1 minute.\n3.\tThe tester does not make any actions on the network production in x minutes. After that, the tester checks whether O&M user A interaction session has been terminated automatically.\nExpected Results:\n-\tIn step 3, O&M user A interaction session has been terminated automatically after x minute.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tSession log\n-\tSettings, protocols and configurations used\n-\tTest result (Passed or not)\nRequirement Name: Security event logging\nRequirement Reference: In accordance with industry best practice\nRequirement Description: Security events shall be logged together with a unique system reference (e.g. host name, IP or MAC address) and the exact time the incident occurred. For each security event, the log entry shall include user name and/or timestamp and/or performed action and/or result and/or length of session and/or values exceeded and/or value reached.\nIETF RFC 3871 [x], section 2.11.10 specifies the minimum set of security events. Each vendor shall document what security events the product logs so that it can be verified by testing.\nIn particular, it shall be possible to log the following events (which are intended to be supported by the network product and which can be enabled by default at manufacturing time or at a later time by the network operator):\n\nIn addition, optionally it shall be possible to log also the following event (if supported):\n\nThreat References: TR 33.926 [4]Test case:\nTest Name: TC_SECURITY_EVENT_LOGGING\nPurpose:\nTo verify that the network product correctly logs all required security event types.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe following information shall be provided by the documentation accompanying the network product:\n-\tThe log where the event is recorded and how it can be accessed (e.g. the complete path).\n-\tIf the event type is enabled by default or how to enable it.\n-\tWhat O&M services can be used on the Network Product in the configuration according to the pre-requisites for testing in clause 4.1 and how to use them.\n-\tThe tester has the needed administrative privileges to sufficiently perform the tests\n-\tIf needed for testing specific O&M services, a tester machine is available.\nExecution Steps\nFor each O&M service perform the following test steps\n-\tThe Tester sequentially triggers each security event listed in the requirement, while covering each option detailed in the individual security event descriptions.\n-\tThe Tester verifies whether the security events, and their individual options, were correctly logged. In particular it is verified whether they include at least the event data specified as required to be logged.\nExpected Results:\nAll security events are appropriately logged, including all required event data.\nExpected format of evidence:\nThe testing report contains the following information for each security event:\n-\tList of O&M services\n-\tCommands executed per O&M services\n-\tThe relevant parts of the logs in appropriate form (e.g. file, screenshot)\n-\tTest result (Passed or not)\nRequirement Name: Log transfer to centralized storage\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\na)\tThe Network Product shall support forwarding of security event logging data to an external system. Secure transport protocols in accordance with clause 4.2.3.2.4, shall be used.\nb)\tLog functions should support secure uploading of log files to a central location or to an external system for the Network Product that is logging.\nThreat References: TR 33.926 [4]Test Name: TC_LOG TRANS_TO_CENTR STORAGE\nPurpose:\nTo ensure log shall be transferred to centralized storage.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe vendor shall list the standard protocols which transfer security event logging data.\n-\tThe session between network product and central location or external system for network product log functions has been set up.\n-\tThe tester has privilege to operate network product and related logs can be outputted.\nExecution Steps\n1.\tThe tester configures the network product to forward event logs to an external system (according to bullet a) of requirement) and related logs are sent out.\n2.\tThe tester checks whether the used transport protocol is secure protocol.\n3.\tThe tester checks whether the central location or external system for network product log functions has stored the related logs.\n4.\tThe tester configures the network product for secure upload of event log files to an external system (according to bullet b) of requirement) and performs a log file upload.\n5.\tThe tester checks whether the used transport protocol for log file upload is a secure standard protocol.\n6.\tThe tester checks whether the central location or external system for network product log functions has stored the related logs.\nExpected Results:\n-\tThe listed transport protocols are secure protocols.\n-\tThe used transport protocol for log file upload is a secure standard protocol.\n-\tThe tester finds that the central location or external system for network product log functions has stored the related logs.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tSettings, protocols and configurations used,\n-\tScreenshot\n-\tTest result (Passed or not)\nRequirement Name: Protection of security event log files\nRequirement References: In accordance with industry best practice\nRequirement Description: The security event log shall be access controlled (file access rights) so only privileged users have access to the log files.\nThreat References: TR 33.926 [4]\n\nTest case:\nPurpose:\nVerify that the log(s) is(are) only accessible by privileged user(s).\nProcedure and execution steps:\nPre-Conditions:\n-\tDocumentation describing where logs are stored and how these logs are accessed and the Network Product interfaces that these logs can be access from.\nExecution Steps\n1. \tThe tester attempts to access log files using users accounts with and without the correct permissions for accessing log files.\n2. Repeat the test as described in step 1 using each of the interfaces as described in the Network Product documentation.\nExpected Results:\nThe tester checks that log files are accessible when a user with the appropriate authorisation attempts to access them and fails when a user without the correct permissions attempts to access them\nExpected format of evidence:\nPass/fail result as recorded by the tester.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "In particular, it shall be possible to log the following events (which are intended to be supported by the network product and which can be enabled by default at manufacturing time or at a later time by the network operator):",
                                    "table number": 1,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In addition, optionally it shall be possible to log also the following event (if supported):",
                                    "table number": 2,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "4.2.4\tOperating systems",
                            "text_content": "4.2.4.1.1.1\tHandling of growing content\nRequirement Name: Handling of growing content.\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nGrowing or dynamic content (e.g. log files, uploads) shall not influence system functions. A file system that reaches its maximum capacity shall not stop a system from operating properly. Therefore, countermeasures shall be taken such as usage of dedicated filesystems, separated from main system functions, or quotas, or at least a file system monitoring to ensure that this scenario is avoided.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_HANDLING_OF_GROWING_CONTENT\nPurpose:\nTo verify that the growing or dynamic content does not influence system functions.\nProcedure and execution steps:\nPre-Conditions:\n1. Growing or dynamic content sources like e.g. log files and their paths are documented.\n2. Measures that are taken to protect system functions from growing or dynamic content that can exhaust file system capacity are documented.\n3. All logging capabilities that are not enabled by default are enabled manually as per the documentation instructions.\nExecution Steps\n1. Tester checks that the sources that are susceptible to being exhausted have been documented and measures aimed to counteract this are described.\n2. Tester enables monitoring of the system operation.\n3. Tester initiates traffic that causes increase of log files and monitors the system behaviour until the log file either reaches its quota or until file system is exhausted.\n4. In case file uploading is allowed (e.g. via SFTP) the tester initiates file uploading and tries to exhaust the file system.\nExpected Results:\n1. It is verified that the taken measures are sufficient so that system operation is not influenced by growing or dynamic content at any case.\nExpected format of evidence:\nSystem monitoring data (e.g. Alarms, logs, CPU utilization, etc.).\n4.2.4.1.1.2\tHandling of ICMP\nRequirement Name: Processing of ICMPv4 and ICMPv6 packets\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nProcessing of ICMPv4 and ICMPv6 packets which are not required for operation shall be disabled on the network product. In particular, there are certain types of ICMP4 and ICMPv6 that are not used in most networks, but represent a risk.\nICMP message types which on receipt lead to responses or to configuration changes are not mentioned in this requirement, but they may be necessary to support relevant and specified networking features. Those shall be documented.\nCertain ICMP types are generally permitted and do not need to be specifically documented. Those are marked as \"Permitted\" in below table.\nThe network product shall not send certain ICMP types by default, but it may support the option to enable utilization of these types (e.g. for debugging). This is marked as \"Optional\" in below table.\n\nThe network product shall not respond to, or process (i.e. do changes to configuration), under any circumstances certain ICMP message types as marked in below table.\n\nThreat Reference: TR 33.926 [4]\nTest Case:\nThe test for this requirement can be carried out using a suitable tool or manually by performing the steps described below. If a tool is used then the tester needs to provide evidence, e.g. by referring to the documentation of the tool, that the tool actually provides functionality equivalent to the steps described below.\nTest Name: TC_HANDLING_OF_ICMP\nPurpose:\nTo verify that the network product does not reply to certain ICMP types in accordance with the requirement. To verify that the network product does not send 'Time Exceeded'.\nTo verify that the network product does not process the following ICMPv4 and ICMPv6 types:\n-\t\"Redirect (5)\"\n-\tRouter Solicitation\n-\tRouter Advertisement\nProcedure and execution steps:\nPre-Conditions:\n-\tThe tester knows whether the network product supports IPv4 and/or IPv6:\n-\tIf applicable, the tester has the needed system privileges for confirming that the ICMP messages with types \"Not Permitted\" to process are indeed not leading to configuration changes..\n-\tIf applicable, the tester has the needed system privileges for confirming that certain ICMP message types are dropped by the network product on receipt.\n-\tA tester machine is available and equipped with a suitable ICMP packets generator tool.\nExecution Steps\nThe following needs to be done for all IP protocol versions (IPv4 and/or IPv6) supported by the network element.\nFor verifying that the network product does not reply to ICMP messages with types where this is not permitted: The tester sends samples of the applicable ICMP messages from the tester machine to the network product and verifies by appropriate means that\n-\tthe messages are dropped on receipt by the network product (e.g. by means of appropriate firewall rules),\n-\tor no response is sent out towards the test machine,\n-\tor there are other means ensuring that the ICMP messages cannot trigger a response.\nFor verifying that the network product does not change its configuration due to receiving ICMP messages with types where this is not permitted: The tester sends samples of the applicable ICMP messages from the tester machine to the network product and verifies by appropriate means that\n-\tthe messages are dropped on receipt by the network product (e.g. by means of appropriate firewall rules),\n-\tor the network product's applicable system configuration remains unchanged upon receipt of the messages,\n-\tor there are other means ensuring that the ICMP messages cannot lead to configuration changes.\nThe tester utilizes appropriate means to verify consistency between the documentation in regard to ICMP and the network product.\nExpected Results:\nThe ICMP messages which are \"Not Permitted\" to generate a response from the network product do not generate a response.\nThe ICMP messages which are \"Not Permitted\" to change the configuration of the network element do not change the configuration.\nICMP message types which lead to responses or to configuration changes on receipt, if neither mentioned in the requirement nor in the documentation, are not enabled.\nExpected format of evidence:\nThe following information needs to be retained and included into the report as appropriate:\n-\tTools used and their configuration\n-\tTool output\n-\tTest result (Passed or not)\n4.2.4.1.1.3\tHandling of IP options and extensions\nRequirement Name: Handling of IP options and extensions\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nIP packets with unnecessary options or extension headers shall not be processed. IP options and extension headers (e.g. source routing) are only required in exceptional cases. So, all packets with enabled IP options or extension headers shall be filtered.\nThreat References: TR 33.926 [4]\nTest Case:\nThe test for this requirement can be carried out using a suitable tool or manually by performing the steps described below. If a tool is used then the tester needs to provide evidence, e.g. by referring to the documentation of the tool, that the tool actually provides functionality equivalent to the steps described below.\nTest Name: TC_HANDLING-IP-OPTIONS-AND-EXTENSIONS\nPurpose: To verify that the network product provides functionality to filter out IP packets with unnecessary options or extension headers.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe vendor declares in the documentation accompanying the network product at least the following information:\n-\tThe support of filtering capability for IP packets with unnecessary options or extensions headers.\n-\tThe actions performed by the network product when an IP packet with unnecessary options or extensions headers is received (e.g. the packet is dropped, the options or extensions are ignored and the packet is treated as if it has no IP options, etc.) .\n-\tGuidelines on how to enable and configure this filtering capability.\n-\tThe network product has at least one physical interface named if1 supporting both IPv4 and IPv6. If the network product does not support IPv6 then IPv6 related steps and checks are skipped.\n-\tA network traffic analyser on the network product (e.g. TCPDUMP) or an external traffic analyser directly connected to the network product is available .\n-\tThe tester has administrative privileges.\n-\tA tester machine is available with a tool able to send IPv4 packets with the IP Options and IPv6 packets (if supported by the network product) with Extension Header set (e.g. Scapy).\nExecution Steps\n1.\tThe tester logs in the network product.\n2.\tThe tester configures on the network product a filtering rule to drop all IP packets containing an IP Option set\na)\tThe tester establishes an O&M session on if1 interface\nb)\tUsing the tool (e.g. Scapy) the tester sends from the tester machine an IPv4 TCP SYN packet with an appropriate destination portto if1 interface without setting any IP Options\nc)\tUsing the network traffic analyser, the tester verifies that the IP packet is received by the network product and the tester verifies that the corresponding ACK message is sent back.\nd)\tUsing the tool (e.g. Scapy) the tester sends an IPv4 TCP SYN packet with an appropriate destination port  and an IP Option set to the if1 interface\ne)\tUsing the network traffic analyser, the tester verifies that the IP packet is received by the network product but no ACK message is sent back. This confirms the packet is dropped as expected from the filtering rule.\n3.\tThe tester configures on the network product a filtering rule to drop all incoming packets based on specific Extension Header Types, e.g. packets with the Routing Header extension. Skip Step 3 if the network product does not support IPv6.\na)\tUsing the tool (e.g. Scapy) the tester sends from the tester machine an IPv6 TCP SYN packet with an appropriate destination port  to if1 interface without setting any extension header\nb)\tUsing the network traffic analyser, the tester verifies that the IP packet is received by the network product and the tester verifies that the corresponding ACK message is sent back.\nc)\tUsing the tool (e.g. Scapy) the tester sends an IPv6 TCP SYN packet with an appropriate destination port  and an extension header set to the if1 interface\nd)\tUsing the network traffic analyser, the tester verifies that the IP packet is received by the network product but no ACK message is sent back. This confirms the packet is dropped as expected from the filtering rule.\nExpected Results:\nThe network product discards IPv4 packets with unnecessary options or IPv6 packets (assuming the network product supports IPv6) with extension header.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tUsed tools and their configurations\n-\tSettings and configurations used\n-\tPcap trace\n-\tScreenshot\n-\tTest result (Passed or not)\n4.2.4.1.2.1\tAuthenticated Privilege Escalation only\nRequirement Name: Authenticated Privilege Escalation only.\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThere shall not be a privilege escalation method in interactive sessions (CLI or GUI) which allows a user to gain administrator/root privileges from another user account without re-authentication.. Implementation example: Disable insecure privilege escalation methods so that users are required to (re-)login directly into the account with the required permissions.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_OS_PRIVILEGE\nPurpose:\nTo ensure that privileged operating system functions shall not be used without successful authentication and authorization, and that violations of this requirement are documented and strictly limited in number and functionality.\nProcedure and execution steps:\nPre-Conditions:\n1.\tThe vendor shall provide documentation of the operating system(s) used in the network product.\n2.\tThe vendor shall supply a list \"A\" of operating system functions which a system user can use to explicitly gain higher privileges, and how these functions are configured. Unix® example: sudo command and its configuration file /etc/sudoers or used Linux® capabilities.\n3.\tThe vendor shall supply a list \"B\" of operating system commands, GUI functions, and files which will execute specifically limited tasks automatically with higher privileges, even when used by a low-privileged user. List \"B\" shall also contain:\n- \tconfiguration of these commands and GUI functions;\n-\t owner and permission settings of files;\n-\t justification for having the command, GUI function or file on the network product\nUnix® example: root-owned files with SUID and SGID permissions or Linux® capabilities.\nNOTE: \tLinux® capabilities can provide a subset of root user privileges to a process rather than granting total root access. Some capabilities can be used for privilege escalation\nExecution Steps\nThe tester is required to execute the following steps:\n1.\tThe tester logs into the network product and verifies that list \"A\" is accurate, based on his expert knowledge of the operating system(s) used in the network product, and operating system documentation.\n2.\tThe tester verifies that entries in the list \"A\" require successful authentication for all users without exception, on basis of the user name and at least one authentication attribute.\n3.\tThe tester logs into the network product and verifies that list \"B\" is accurate, based on his expert knowledge of the operating system(s) used in the network product, and operating system documentation. Unix® example: To list files with SUID and SGID permissions and Linux® capabilities, the following commands can be used:\nSUID:       find / -perm -4000 -type f -exec ls {} \\; > suid_files.txt\nSGID:       find / -perm -2000 -type f -exec ls {} \\; > sgid_files.txt\nCapabilities: getcap -r / 2>/dev/null\n4.\tThe tester verifies that file entries in the list \"B\" do not have write permissions for anyone else than the owner.\n5.\tThe tester verifies that entries in the list \"B\" only allow execution of specifically limited tasks which are needed on this network product, based on his expert knowledge of the operating system(s) used in the network product, and operating system documentation.\n6.\tThe tester logs into the network product and tests for every entry in the list \"B\" that it does not provide a means to execute arbitrary functions with administrator/root privileges, e.g. via a shell escape.\nExpected Results:\n1.\tThe network product does not allow a user to gain administrator/root privileges from another user account without re-authentication.\n2.\tIf a network product provides functions and files which execute specifically limited tasks automatically with higher privileges, it ensures that these limits cannot be bypassed.\n3.\tThe system documentation about means for a user to gain administrator/root privileges from another user account accurately describes the network product.\nExpected format of evidence:\nA test report provided by the tester which will consist of the following information:\n- \tDocumentation provided by the vendor: lists \"A\" and \"B\"\n- \tDescription of executed tests and commands\n- \tRelevant output (e.g. screenshot or terminal log)\n- \tTest result (passed or not passed)\nNOTE:\tThe term 'UNIX®' is throughout the present document meant to include all major UNIX®-like derivatives, including Linux®.\nRequirement Name: System account identification\nRequirement Reference: In accordance with industry best practice\nRequirement Description: Each system account in UNIX® shall have a unique UID.\nThreat References: TR 33.926 [4]\nTest case:\nTest Name: TC_UNIQUE_SYSTEM_ACCOUNT_IDENTIFICATION\nPurpose: To verify that UNIX® account UIDs are assigned uniquely.\nProcedure and execution steps:\nPre-Conditions: UNIX® is used on the Network Product.\nExecution Steps\n1.\tCreate several UNIX® accounts.\n2.\tCheck UIDs of created accounts and of existing system accounts and, in particular, the root account.\nExpected Results: The UIDs are all different and, in particular, only the root account has UID = 0.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "The network product shall not send certain ICMP types by default, but it may support the option to enable utilization of these types (e.g. for debugging). This is marked as \"Optional\" in below table.",
                                    "table number": 3,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The network product shall not respond to, or process (i.e. do changes to configuration), under any circumstances certain ICMP message types as marked in below table.",
                                    "table number": 4,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "4.2.5\tWeb Servers",
                            "text_content": "Requirement Name: HTTPS\nRequirement Reference: In accordance with industry best practice\nRequirement Description: The communication between Web client and Web server shall be protected using TLS. The TLS profile defined in Annex E of TS 33.310 shall be followed with the following modifications:\nCipher suites with NULL encryption shall not be supported\nThreat References: TR 33.926 [4]\n\nTest case:\nTest Name: HTTPS\nPurpose: Verify the above requirement.\nProcedure and execution steps, expected results, expected format of evidence:\nThese are the same as for the test case in clause 4.2.3.2.4, except that, for execution step 2, it is tested that NULL encryption is not supported.\nRequirement Name: Webserver logging\nRequirement Reference: In accordance with industry best practice\nRequirement Description: Access to the webserver shall be logged. The web server log shall contain the following information:\n-\tAccess timestamp\n-\tSource (IP address)\n-\t(Optional) Account (if known)\n-\t(Optional) Attempted login name (if the associated account does not exist)\n-\tRelevant fields in http request. The URL should be included whenever possible.\n-\tStatus code of web server response\nThreat References: TR 33.926 [4]\nTest case:\nTest Name: TC_WEBSERVER_LOGGING\nPurpose:\nVerify that all accesses to the webserver are logged with the required information.\nProcedure and execution steps:\nPre-Condition:\nNetwork Product documentation which contains information on log file location and procedure to access it.\nTester has the necessary privileges to access the log files.\nExecution Steps\nExecute the following steps:\n1.\tThe tester tries to login to the webserver using the correct and incorrect login credentials.\n2.\tThe tester verifies whether the login attempts were logged correctly with all of the required information.\nExpected Results:\nAll webserver events are logged with all of the required information.\nExpected format of evidence:\nTesting report contains copies of the log file showing the captured information.\nRequirement Name: User sessions\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nTo protect user sessions the Network Product shall support the following session ID and session cookie requirements:\n1.\tThe session ID shall uniquely identify the user and distinguish the session from all other active sessions.\n2.\tThe session ID shall be unpredictable.\n3.\tThe session ID shall not contain sensitive information in clear text (e.g. account number, social security, etc.).\n4.\tIn addition to the Session Idle Timeout (see clause 4.2.3.5.2\tProtecting sessions – Inactivity timeout), the Network Product shall automatically terminate sessions after a configurable maximum lifetime This maximum lifetime defines the maximum session span. When the maximum lifetime expires, the session shall be closed, the session ID shall be deleted and the user shall be forced to (re)authenticate in the web application and to establish a new session. The default value for this maximum lifetime shall be set to 8 hours.\n5.\tSession ID's shall be regenerated for each new session (e.g. each time a user logs in).\n6.\tThe session ID shall not be reused or renewed in subsequent sessions.\n7.\tThe Network Product shall not use persistent cookies to manage sessions but only session cookies. This means that neither the \"expire\" nor the \"max-age\" attribute shall be set in the cookies.\n8.\tWhere session cookies are used the attribute 'HttpOnly' shall be set to true.\n9.\tWhere session cookies are used the 'domain' attribute shall be set to ensure that the cookie can only be sent to the specified domain.\n10.\tWhere session cookies are used the 'path' attribute shall be set to ensure that the cookie can only be sent to the specified directory or sub-directory.\n11.\tThe Network Product shall not accept session identifiers from GET/POST variables.\n12.\tThe Network Product shall be configured to only accept server generated session ID's.\nThreat References: TR 33.926 [4]\n\nTest case:\nPurpose:\nVerify that the above 12 session ID and session cookie requirements have been met.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe Network Product uses a session ID that is communicated between the client and Network Product to establish and maintain a session.\n-\tDocumentation describing how a session is maintained and where the session ID is stored / and how this is communicated and after how long sessions expire.\n-\tThe documentation should describe the algorithm used to generate the session IDs.\nExecution Steps\n1. \tThe tester logs in repeatedly with different user IDs and a number of times with the same user ID in a row and collects the session IDs according to the documentation and the user IDs associated with them. The tester verifies that:\na.\tThe session IDs are different between sessions of the same and different users;\nb.\tThe session IDs seems random based on his/her own experience. The tester may use tests like the bitstream test or the count-the-1s-tests from the diehard test suite. The tester documents how randomness was verified;\nc.\tThe session IDs are always different between sessions, also when the user ID is the \tsame.\n2.\tThe tester verifies that when session cookies are used\na.\tneither the \"expire\" or the \"max-age\" is set;\nb.\tthe 'HttpOnly' is set to true;\nc.\tthe 'domain' attribute is set to the correct domain;\nd.\tthe 'path' attribute is set to the correct directory or sub-directory.\n3.\tThe tester verifies that it is impossible to:\na.\taccess a session by retrieving the session ID and communicating the session ID through a POST or GET variable.\nb.\tgenerate a session ID on the client by attempting to login with a custom generated session ID.\nc.\tkeep a session alive for longer than the configured maximum lifetime (by default 8 hours).\nExpected Results:\n1.\tA list of session IDs and user IDs that are different between sessions even when the tester has logged in with the same user and that are unpredictable as is confirmed by the entropy calculation.\n2.\tA confirmation from the tester that the correct variables are indeed set.\n3.\tA denied access to the tester when attempting the two login steps of step 3 and an expired session in step 3c.\nExpected format of evidence:\nA confirmation that the tester has confirmed that:\n1.\tSession IDs follow the rules 1-3, 5, 6.\n2.\tA session times out after 8 hours or sooner according to the documentation.\n3.\tThe correct cookie settings are used.\n4.\tThe network product does not accept customly generated session IDs and that session IDs over GET or POST are ignored.\nRequirement Name: Input validation\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe Network Product shall have a mechanism in place to ensure that web application inputs are not vulnerable to command injection or cross-site scripting attacks. The Network Product shall validate, filter, escape, and encode user-controllable input before it is placed in output that is used as a web page that is served to other users.\nThreat References: TR 33.926 [4]\nTest case:\nThis requirement is covered by the basic vulnerability testing as described in clause 4.4.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.6\tNetwork Devices",
                            "text_content": "Refer to clause  4.2.3.2 for requirements on protection of data and information.\nRequirement Name: Packet filtering\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe Network Product shall provide a mechanism to filter incoming IP packets on any IP interface (see RFC 3871 for further information).\nIn particular the Network Product shall provide a mechanism:\n1)\tTo filter incoming IP packets on any IP interface at Network Layer .and Transport Layer of the stack ISO/OSI.\n2)\tTo allow specified actions to be taken when a filter rule matches. In particular at least the following actions should be supported:\n-\tDiscard/Drop: the matching message is discarded, no subsequent rules are applied and no answer is sent back.\n-\tAccept: the matching message is accepted.\n-\tAccount: the matching message is accounted for i.e. a counter for the rule is incremented. This action can be combined with the previous ones. This feature is useful to monitor traffic before its blocking.\n3)\tTo enable/disable for each rule the logging for Dropped packets, i.e. details on messages matching the rule for troubleshooting.\n4)\tTo filter on the basis of the value(s) of any portion of the protocol header.\n5)\tTo reset the accounting.\n6)\tThe Network Product shall provide a mechanism to disable/enable each defined rule.\nThreat References: TR 33.926 [4]\nTest case:\nTest Name: TC_PACKET_FILTERING\nPurpose:\nVerify that the system provides functionality for incoming packet filtering\nProcedure and execution steps:\nPre-Conditions:\n-\tThe Network Product has packet filtering enabled.\n-\tThe Network Product has 2 different logical or physical Ethernet ports and each port is connected to a host.\nExecution Steps\n1.\tThe tester configures the Network Product to only allow ICMP traffic from host 1.\n2.\tThe tester initiates ping traffic from host 1.\n3.\tThe tester initiates ping traffic from host 2.\nExpected Results:\nHost 1 will receive a 'ping' answer back, but host 2 will not.\nExpected format of evidence:\nNA\nRequirement Name: Interface robustness\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nA network device shall be not affected in its availability or robustness by incoming packets, from other network element, that are manipulated or differing the norm. This means that inappropriate or manipulated packets shall be detected as invalid and be discarded. The process shall not be affecting the performance of the network device. This robustness shall be just as effective for a great mass of invalid packets as for individual or a small number of packets.\nExamples of such packets are:\n-\tMass-produced TCP packets with a set SYN flag to produce half-open TCP connections (SYN flooding attack).\n-\tPackets with the same IP sender address and IP recipient address (Land attack).\n-\tMass-produced ICMP packets with the broadcast address of a network as target address (Smurf attack).\n-\tFragmented IP packets with overlapping offset fields (Teardrop attack).\n-\tICMP packets that are larger than the maximum permitted size (65,535 Bytes) of IPv4 packets (Ping-of-death attack).\n-\tUncorrelated reply packets (i.e. packets which cannot be correlated to any request).\nSometimes the relevant behaviour of the network device is configured. In other cases, the behaviour of the network device can only be verified by the relevant tests.\nThreat References: TR 33.926 [4]Test case: Refer to Test Case in clause 4.4.4.\nRequirement Name: GTP-C Filtering\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe following capability is conditionally required:\n-\tFor each message of a GTP-C-based protocol, it shall be possible to check whether the sender of this message is authorized to send a message pertaining to this protocol.\nNOTE 1: \tThe check could be performed e.g. against an allow list or disallow list of permitted message type / sender identity combinations.\n-\tAt least the following actions should be supported when the check is satisfied:\n-\tDiscard: the matching message is discarded.\n-\tAccept: the matching message is accepted.\n-\tAccount: the matching message is accounted for, i.e. a counter for the rule is incremented. This action can be combined with the previous ones. This feature is useful to monitor traffic before its blocking.\nThis requirement is conditional in the following sense: It is required that at least one of the following two statements holds:\n-\tThe Network Product supports the capability described above and this is stated in the product documentation.\n-\tThe Network Product's product documentation states that the capability is not supported and that the Network Product needs to be deployed together with a separate entity which provides the capability described above.\nNOTE 2: \tSuch a separate entity could e.g. be a GTP Firewall.\nNOTE 3: \tTest cases for this separate entity are not provided in the present document, but are believed to be similar to them.\nNOTE 4: The test cases are only applicable to all network product classes utilizing GTP-C based protocol.\nThreat References: TR 33.926 [4]Test case:\nThe test case described here apply only when GTP-C filtering is provided on the Network Product itself.\nTest Name: TC_GTP-C_FILTERING\nPurpose:\nTo verify that the network product provides filtering functionalities for incoming GTP-C messages. In particular this test case verifies that:\n1.\tThe network product provides filtering of incoming GTP-C messages on any interface.\n2.\tIt is possible to block all GTP-C messages on those network product interfaces where they are unwanted.\n3.\tIt is possible to specify defined actions for each rule.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe network product has at least two physical interfaces, named if1 and if2.\n-\tThe tester has the privileges to configure GTP-C filtering on the network product.\n-\tThe vendor declares that the GTP-C filtering is supported.\n-\tThe vendor includes a guideline to configure the GTP-C filtering in the documentation accompanying the network product.\n-\tA network traffic generator or a pcap file containing the GTP-C messages is available.\n-\tA network traffic analyser on the network product (e.g. tcpdump) is available.\nExecution Steps\n1.\tThe tester log in the network product.\n2.\tThe tester configures the network product with the following rules:\na)\tAccept only GTP-C EchoRequest messages on if1.\nb)\tDiscard all GTP-C messages on if2.\nc)\tFor each rule above the accounting is also enabled.\n3.\tThe tester turns on the network traffic analyser on if2.\n4.\tThe tester sends on if2 EchoRequest messages replaying a pcap file or using a network generator.\na)\tUsing the network analyser the tester verifies that the network product correctly receives the EchoRequest messages on if2.\nb)\tUsing the accounting, the tester verifies that the messages are discarded and that any response is sent back by the network product.\n5.\tThe tester sends to if1 EchoRequest messages replaying a pcap file or using a network generator.\na)\tUsing the network analyser, the tester verifies that the messages are correctly received by the network product.\nb)\tThe tester verifies that the GTP-C EchoRequest messages are not discarded because EchoResponse messages are sent back by the network product.\n6.\tThe tester verifies that the matching messages are correctly accounted for both rules.\n7.\tThe tester sends to if1 GTP-C messages different from EchoRequest replaying a pcap file or using a network generator.\na)\tUsing the network analyser, the tester verifies that the messages are correctly received by the network product.\nb)\tUsing the accounting, the tester verifies that the messages are discarded and that any response is sent back by the network product.\n8.\tThe tester deletes the previous rules and configures a new rule, i.e. to accept only GTP-C EchoRequest on if1 coming from a certain IP Address named IP1.\n9.\tThe tester sends GTP-C EchoRequest messages with source IP Address set to IP1:\na)\tUsing the network analyser, the tester verifies that the messages are correctly received by the network product.\nb)\tThe tester verifies that the GTP-C EchoRequest messages are not discarded and EchoResponse messages are sent back by the network product.\n10.\tThe tester sends GTP-C EchoRequest messages with source IP Address set to IP2 different from IP1 using a network traffic generator or replaying a pcap file.\na)\tUsing the network analyser the tester verifies that the messages are correctly received by the network product.\nb)\tThe tester verifies that the GTP-C EchoRequest messages are discarded and that no EchoResponse messages are sent back.\nExpected Results:\n-\tFor steps 4, 5, 6 and 7 the tester receives GTP-C EchoResponse messages from if1 only.\n-\tFor steps 4, 5, 6 and 7 the messages matching the rules are correctly accounted.\n-\tFor steps 8, 9, 10 the tester receives GTP-C EchoResponse messages only for the authorized source IP address.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tThe used tool(s) name and version information\n-\tSettings and configurations used\n-\tPcap trace\n-\tScreenshot\nTest result (Passed or not)\nRequirement Name: GTP-U Filtering\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe following capability is conditionally required:\n-\tFor each message of a GTP-U-based protocol, it shall be possible to check whether the sender of this message is authorized to send a message pertaining to this protocol.\nNOTE 1: \tThe check could be performed e.g. against an allow list  or disallow list of permitted message type / sender identity combinations.\n-\tAt least the following actions should be supported when the check is satisfied:\n-\tDiscard: the matching message is discarded.\n-\tAccept: the matching message is accepted.\n-\tAccount: the matching message is accounted for, i.e. a counter for the rule is incremented. This action can be combined with the previous ones. This feature is useful to monitor traffic before its blocking.\nThis requirement is conditional in the following sense: It is required that at least one of the following two statements holds:\n-\tThe Network Product supports the capability described above and this is stated in the product documentation.\n-\tThe Network Product's product documentation states that the capability is not supported and that the Network Product needs to be deployed together with a separate entity which provides the capability described above.\nNOTE 2: \tSuch a separate entity could e.g. be a GTP Firewall.\nNOTE 3: \tTest cases for this separate entity are not provided in the present document, but are believed to be similar to them.\nNOTE 4: The test cases are only applicable to all network product classes utilizing GTP-U based protocol.\nThreat References: TR 33.926 [4]Test case:\nThe test case described here apply only when GTP-U filtering is provided on the Network Product itself.\nTest Name: TC_GTP-U_FILTERING\nPurpose:\nTo verify that the network product provides filtering functionalities for incoming GTP-U messages. In particular this test case verifies that:\n1.\tThe network product provides filtering of incoming GTP-U messages on any interface.\n2.\tIt is possible to block all GTP-U messages on those network product interfaces where they are unwanted.\n3.\tIt is possible to specify defined actions for each rule.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe network product has at least one physical interface named if1 and may have another physical interface named if2 .\n-\tThe tester has the privileges to configure GTP-U filtering on the network product.\n-\tThe vendor declares that the GTP-U filtering is supported.\n-\tThe vendor includes a guideline to configure the GTP-U filtering in the documentation accompanying the network product.\n-\tA network traffic generator or a pcap file containing the GTP-U messages is available.\n-\tA network traffic analyser on the network product (e.g. tcpdump) is available.\nNOTE:\tIf the network product has only one physical interface named if1, execution steps on if2 are not needed.\n\nExecution Steps\n1.\tThe tester log in the network product.\n2.\tThe tester configures the network product with the following rules:\na)\tAccept only GTP-U EchoRequest messages on if1.\nb)\tDiscard all GTP-U messages on if2.\nc)\tFor each rule above the accounting is also enabled.\n3.\tThe tester turns on the network traffic analyser on if2.\n4.\tThe tester sends on if2 EchoRequest messages replaying a pcap file or using a network generator.\na)\tUsing the network analyser the tester verifies that the network product correctly receives the EchoRequest messages on if2.\nb)\tUsing the accounting, the tester verifies that the messages are discarded and that any response is sent back by the network product.\n5.\tThe tester sends to if1 EchoRequest messages replaying a pcap file or using a network generator.\na)\tUsing the network analyser, the tester verifies that the messages are correctly received by the network product.\nb)\tThe tester verifies that the GTP-U EchoRequest messages are not discarded because EchoResponse messages are sent back by the network product.\n6.\tThe tester verifies that the matching messages are correctly accounted for both rules.\n7.\tThe tester sends to if1 GTP-U messages different from EchoRequest replaying a pcap file or using a network generator.\na)\tUsing the network analyser, the tester verifies that the messages are correctly received by the network product.\nb)\tUsing the accounting, the tester verifies that the messages are discarded and that any response is sent back by the network product.\n8.\tThe tester deletes the previous rules and configures a new rule, i.e. to accept only GTP-U EchoRequest on if1 coming from a certain IP Address named IP1.\n9.\tThe tester sends GTP-U EchoRequest messages with source IP Address set to IP1:\na)\tUsing the network analyser, the tester verifies that the messages are correctly received by the network product.\nb)\tThe tester verifies that the GTP-U EchoRequest messages are not discarded and EchoResponse messages are sent back by the network product.\n10.\tThe tester sends GTP-U EchoRequest messages with source IP Address set to IP2 different from IP1 using a network traffic generator or replaying a pcap file.\na)\tUsing the network analyser the tester verifies that the messages are correctly received by the network product.\nb)\tThe tester verifies that the GTP-U EchoRequest messages are discarded and that no EchoResponse messages are sent back.\nExpected Results:\n-\tFor steps 4, 5, 6 and 7 the tester receives GTP-U EchoResponse messages from if1 only.\n-\tFor steps 4, 5, 6 and 7 the messages matching the rules are correctly accounted.\n-\tFor steps 8, 9, 10 the tester receives GTP-U EchoResponse messages only for the authorized source IP address.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tThe used tool(s) name and version information\n-\tSettings and configurations used\n-\tPcap trace\n-\tScreenshot\nTest result (Passed or not)\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.3\tSecurity requirements and related test cases related to hardening",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.3.1\tIntroduction",
                            "text_content": "The requirements proposed hereafter (with the relative test cases) aim to securing network products (including the network functions in service-based architecture) by reducing its surface of vulnerability. In particular the identified requirements aim to ensure that all the default network product configurations (including operating system software, firmware and applications) are appropriately set.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.2\tTechnical Baseline",
                            "text_content": "Requirement Name: No unnecessary or insecure services / protocols\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe network product shall only run protocol handlers and services which are needed for its operation, and which do not have any known security vulnerabilities. In particular, by default the following services shall be initially configured to be disabled on the network product by the vendor except if services are needed during deployment. In that case those services shall be disabled according to vendor’s instructions after deployment is done. Disabled protocols can still be enabled for other reasons by the network operators, e.g. remote diagnostics.\n-\tFTP\n-\tTFTP\n-\tTelnet\n-\trlogin, RCP, RSH\n-\tHTTP\n-\tSNMPv1 and v2\n-\tSSHv1\n-\tTCP/UDP Small Servers (Echo, Chargen, Discard and Daytime)\n-\tFinger\n-\tBOOTP server\n-\tDiscovery protocols (CDP, LLDP)\n-\tIP Identification Service (Identd)\n-\tPAD\n-\tMOP\nNOTE 1:\tAs an alternative to disabling the HTTP service, it is also possible for this service to remain active for reasons of user friendliness. In this case, however, queries to the web service are not answered directly on this port but from a redirected to HTTPS service.\nNote 2:\t Full documentation of required protocols and services of the network product and their purpose needs to be provided by the vendor as prerequisite for the test case.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_UNNECESSARY_SERVICE\nPurpose:\nTo ensure that on all network interfaces, there are no unsecure services or protocols that might be running.\nProcedure and execution steps:\nPre-Conditions:\nA list of all required network protocols and services containing at least the following information shall be included in the documentation accompanying the Network Product:\n-\tprotocol handlers and services needed for the operation of network product;\n-\ttheir open ports and associated services;\n-\tand a description of their purposes.\nThe tool used shall be capable to detect and identify the protocol handlers and running services in the system.\nExecution Steps\nThe tester is required to execute the following steps:\n1.\tVerification of the compliance to the prerequisites:\na.\tVerification that the list of available network services and protocol handlers is available in the documentation of the Network Product.\nb.\tValidation that all entries in the list are meaningful and reasonably necessary for the operation of the Network Product class.\n2.\tIdentification of the network services and protocol handlers by means of capable tools or any other suitable testing means.\n3.\tValidation that there are no entries in the list of network services and handlers apart from the ones that have been mentioned and deemed necessary for the operation of the Network Product in the attached documentation.\n4.\tThe tester shall reboot the network product and re-execute execution steps 2 and 3 without further configuration.\nExpected Results:\nThe report will contain:\n-\tThe names and version of the tool(s) used.\n-\tInformation of all the protocol handlers and services running in the network product.\nResult will show:\n-\tThere are no unnecessary services running in the network product except for the ones which are deemed necessary for its operation.\n-\tAny undocumented services running on the network product should be highlighted and brought out in the report.\n-\tThe network product behaves the same after reboot as before.\nExpected format of evidence:\nA report provided by the testing agency which will consist of the following information:\n-\tThe used tool(s) name and version information\n-\tSettings and configurations used\n-\tThe output pertaining to the test case performed and\n-\tThe test results i.e. services existing or not existing in the Network Product\nRequirement Name: Restricted reachability of services\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe network product shall restrict the reachability of services so that they can only be reached on interfaces where their usage is required. On interfaces were services are active, the reachability should be limited to legitimate communication peers. This limitation shall be realized on the network product itself (without measures (e.g. firewall) at network side) according to the requirement detailed in clause 4.2.6.2.1 Packet Filtering.\nExample:\tAdministrative services (e.g. SSH, HTTPS, RDP) shall be restricted to interfaces in the management network to support separation of management traffic from user traffic.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_RESTRICTED_ REACHABILITY _OF_SERVICES\nPurpose:\nTo verify that it is possible to bind the services only to the interfaces from which they are expected to be reachable.\nNote: \tThe test case developed for the requirement \" 4.2.6.2.1 Packet Filtering\" implicitly verifies that the network product permits to limit the reachability of the services only to legitimate communication peers,\nProcedure and execution steps:\nPre-Conditions:\n-\tThe vendor shall declare, in the documentation accompanying the network product if the network product supports the capability to restrict services reachability to only the nodes authorized to access them. In this case, the vendor shall detail how this capability can be configured.\n-\tA list of all required network protocols and services containing at least the following information shall be included in the documentation accompanying the Network Product:\n-\tprotocol handlers and services needed for the operation of network product;\n-\ttheir open ports and associated services;\n-\tthe configuration options;\n-\tand a description of their purposes.\n-\tThe network product is configured such that the required network protocols and services (as described in the network product documentation) are setup and each service is bound to an IP address of a specific network interface (e.g. IP1 which is the ip address of if1). Configuration may occur automatically during the initialization phase of the network product or manually as defined in the network product administration documentation.\n-\tThe network product shall have at least two interfaces enabled, if1 and if2 respectively configured with IP Address IP1 and IP2.\n-\tThe tester has administrative privileges.\n-\tA tester machine equipped with a network port scanner tool is available.\nExecution Steps\nFor every available interface if_n:\n1.\tThe tester runs a network port scanner (e.g. nmap) or uses local network interface information on if_n and verifies that the configured services (according to the vendor documentation) are open/reachable.\n2.\tThe tester runs a network port scanner (e.g. nmap) or uses local network interface information on all other available interfaces (except if_n) and verifies that the services configured for if_n are not open/reachable.\nExpected Results:\nServices can be enabled on per-interface basis.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n\n-\tThe network product configuration showing the mapping between interfaces and configured service.\n-\tPcap files.\n-\tScreenshot.\n-\tSoftware name and version of the used port scanner, log of the executed commands.\n-\tNetwork port scanner results (e.g. files containing this results).\n-\tTest result (Passed or not).\nRequirement Name: No unused software\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nUnused software components or parts of software which are not needed for operation or functionality of the network product shall not be installed or shall be deleted after installation. This includes also parts of a software, installed as examples but typically not be used (e.g. default web pages, example databases, test data).\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_UNUSED_SOFTWARE\nPurpose:\nTo ensure that there is no unused software or associated components that might be installed in the network product which are not required for its operation or functionality.\nProcedure and execution steps:\nPre-Conditions:\nA list of all available software and libraries and associated components containing at least the following information shall be included in the documentation accompanying the Network Product:\n-\tname of the software / library;\n-\tversion of the software / library installed;\n-\tlist of dependencies and versions;\n-\tany add-ons and functions;\n-\tany special hardware/debugging ports;\n-\tsoftware support type;\n-\tlicensing information;\n-\tbrief description of their purpose.\nExecution Steps\nThe tester is required to execute the following steps:\n1.\tVerification of the compliance to the prerequisites:\na.\tVerification that the list of software / libraries and components is available in the documentation of the Network Product.\nb.\tValidation that all entries in the list of software / libraries and components are meaningful and reasonably necessary for the operation of the Network Product class.\n2.\tIdentification of the software / libraries or components which are installed in the system using any suitable command line tools or any other suitable means of determination.\n3.\tValidation that there are no entries in the list of software / libraries installed in the system apart from the ones that have been mentioned and deemed necessary for the operation of the network product in the attached documentation.\n4.\tBased on his/her experience, the tester will check for known default example files for software installed on the system.\nExpected Results:\nThe report will contain the names and version of the tool(s) used for finding out what software /libraries is installed in the system. The detailed report will contain the name and version information of all the software / libraries installed in the system generated by the tool.\nThe list of all available software / libraries which has been deemed necessary for the operation of the network product by the vendor shall also be included as the test result. Any software / library not in the list of allowed software / libraries will be highlighted and brought out as a part of the report.\nThere should be no unnecessary software / library installed in the network product except for the ones which are deemed necessary for its operation.\nThere should be no more default example files for the installed software on the system.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tThe used tool(s) name and version information,\n-\tSettings and configurations used\n-\tthe output pertaining to the test case performed and,\n-\tthe test results i.e. list of allowed and disallowed software\nRequirement Name: No unused functions.\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nDuring installation of software and hardware often functions are activated that are not required for operation or function of the system. If unused functions of software cannot be deleted or deinstalled individually as required in clause \"4.3.2.3 No unused software\" of the present document, such functions shall be deactivated in the configuration of the network product permanently.\nAlso hardware functions which are not required for operation or function of the system (e.g. unused interfaces) shall be permanently deactivated. Permanently means that they shall not be reactivated again after network product reboot.\nExample: \tA debugging function in software which can be used for troubleshooting can not be activated during normal operation of the network product.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_UNUSED_FUNCTIONS\nPurpose:\nTo ensure that there is no unused hardware or software functions that are not deactivated in the network product which are not required for its operation or functionality.\nProcedure and execution steps:\nPre-Conditions:\nA list of all available software and associated components containing at least the following information shall be included in the documentation accompanying the Network Product:\n-\tname of the software;\n-\tversion of the software installed;\n-\tlist of dependencies and versions;\n-\tany add-ons and functions;\n-\tany special hardware/debugging ports;\n-\tsoftware support type;\n-\tlicensing information;\n-\trequirement during functioning of system;\n-\tbrief description of their purpose.\nExecution Steps:\nThe tester is required to execute the following steps:\n1.\tIdentification of the hardware and software functions which are installed in the system or might have been disabled using any suitable command line tools or any other suitable means of determination.\n2.\tValidate that there are no entries in the list of hardware and software functions installed in the system apart from the ones that have been mentioned and deemed necessary for the operation of the network product in the attached documentation.\nExpected Results:\nThe report will contain the names and version of the tool(s) used for finding out what software and associated function is installed in the system. The detailed report will contain the name and version information of all the software and components installed in the system generated by the test tool.\nThe list of all available software which has been deemed necessary for the operation of the network product by the vendor shall also be included as the test result. Any software not in the list of allowed software will be highlighted and brought out as a part of the report.\nThere should be no unused function that is not deactivated in the network product except for the ones which are deemed necessary for its operation.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tThe used tool(s) name and version information\n-\tSettings and configurations used\n-\tThe list of software and associated functions\n-\tthe test results i.e. allowed list of functions\nRequirement Name: No unsupported components.\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe network product shall not contain software and hardware components that are no longer supported by their vendor, manufacturer or developer, such as components that have reached end-of-life or end-of-support. Excluded are components that have a special support contract. This contract shall guarantee the correction of vulnerabilities over components' lifetime.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_UNSUPPORTED_COMPONENTS\nPurpose:\nTo ensure that there is no unsupported software that is running in the network product which is not supported anymore and has reached its end-of-life or end-of-support.\nProcedure and execution steps:\nPre-Conditions:\nA list of all available software and associated components containing at least the following information shall be included in the documentation accompanying the Network Product:\n-\tname of the software;\n-\tversion of the software installed;\n-\tlist of dependencies and versions;\n-\tany add-ons and functions;\n-\tany special hardware/debugging ports;\n-\tsoftware support type;\n-\tlicensing information;\n-\trequirement during functioning of system;\n-\tbrief description of their purpose.\nExecution Steps\nThe tester is required to execute the following steps:\n1.\tIdentification of the hardware and software components, version information and the kind of support available for the software provided by the vendor, the manufacturer, the developer or other contractual partner of the network operator using any tool or any other suitable means of determination.\n2.\tValidate that there are no entries in the list of hardware and software installed in the system which are not supported as given by the vendor of network product in the attached documentation.\nExpected Results:\nThe report will contain the names and versions of the tool(s) used for finding out what software and hardware components are installed in the system. The detailed report will contain the name and version of the software and hardware used in the system, and the period of support for each of these components.\nThe list of all available software and hardware components and their associated support information which has been deemed necessary for the operation of the network product by the vendor shall also be included as the test result. Any software or component which is not supported any longer by the vendor will be highlighted and brought out as a part of the report.\nThere should be no software installed in the network product which is unsupported as of the day of testing.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tThe used tool(s) name and version information\n-\tSoftware and hardware components used in the network product\n-\tthe test results i.e. support information of each listing\nRequirement Name: Remote login restrictions for privileged users\nRequirement Reference: In accordance with industry best practice\nRequirement Description: Direct login as root or equivalent highest privileged user shall be limited to the system console only. Root user will not be allowed to login to the system remotely.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_REMOTE_LOGIN_RESTRICTIONS_PRIVILEGED_USERS\nPurpose:\nVerify that root or equivalent highest privileged user will not be allowed to login to the system remotely.\nProcedure and execution steps:\nPre-Condition:\nA document that describes the interfaces to the network product and how the tester can login to them remotely.\nExecution Steps\nExecute the following steps:\n1.\tThe tester tries to remotely login to the network product using the credentials of the root or equivalent highest privileged user via the interfaces as described in the documentation.\n2.\tThe tester tries to login to the network product using the credentials of the root or equivalent highest privileged user from the physical console of the system.\nExpected Results:\nThe tester is not able to login to the system remotely using the root credentials.\nThe tester is able to login to the system from the physical console using the root credentials.\nExpected format of evidence:\nA Pass/Fail result.\nRequirement Name: Filesystem Authorization privileges.\nRequirement Reference: In accordance with industry best practice\nRequirement Description: The system shall be designed to ensure that only users that are authorized to modify files, data, directories or file systems have the necessary privileges to do so.\nEXAMPLE:\tOn unix® systems a 'sticky' bit may be set on all directories where all users have write permissions. This ensures that only the file's owner, the directory's owner, or root user can rename or delete the file. Without the sticky bit being set, any user that has write and execute permissions for the directory can rename or delete files within the directory, regardless of the file's owner.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_FILESYSTEM_AUTHORIZATION_PRIVILEGES\nPurpose:\nVerify that only users that are authorized to modify files, data, directories or file systems have the necessary privileges to do so.\nProcedure and execution steps:\nPre-Condition:\nA document describing how access control is configured for the filesystems in the network product shall be provided by the vendor.\nExecution Steps\nExecute the following steps:\n1.\tThe tester checks that OS-level permissions are configured correctly for users that are authorized to modify files, data, directories or file systems on the system.\n2.\tThe tester tries to modify the files and directories for which the user has the necessary privileges.\n3.\tThe tester tries to modify the files and directories for which the user doesn't have the necessary privileges.\nExpected Results:\nThe OS-level access permissions are set correctly for the users.\nThe users can only modify files, data, directories or file systems for which he has the necessary privileges to do so.\nExpected format of evidence:\nScreenshot containing the configuration file showing the OS-level permissions are set correctly.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.3\tOperating Systems",
                            "text_content": "Requirement Name: IP-Source address spoofing mitigation\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nSystems shall not process IP packets if their source address is not reachable via the incoming interface. Implementation example: Use of \"Reverse Path Filter\" (RPF) provides this function.\nThreat References: TR 33.926 [4]\nTest Case:\nThe test for this requirement can be carried out using a suitable tool or manually by performing the steps described below. If a tool is used then the tester needs to provide evidence, e.g. by referring to the documentation of the tool, that the tool actually provides functionality equivalent to the steps described below.\nTest Name: TC_IP_SPOOFING_MITIGATION\nPurpose:\nTo verify that the network product provides anti-spoofing function that is, before a packet is processed, the network product checks whether the source IP of the received packet is reachable through the interface it comes in.\nTo verify that if the received packet source address is not routable through the interface on which it comes, then the network product drops this packet.\nProcedure and execution steps:\nPre-Conditions:\n-\tA node N1 is available with:\n-\tTwo interfaces named respectively if1-n1 connected to the network product and if2-n1 to which the tester connects a tester machine\n-\trouting capabilities\n-\tif2-n1 has a static IP address (e.g. 192.168.3.1 belonging to the subnet 192.168.3.0/24)\n-\tA node N2 is available with:\n-\tTwo interfaces named respectively if1-n2 connected to the network product and if2-n2 to which the tester connects a tester machine\n-\tRouting capabilities. In particular N2 has a default route to if1-np subnet via if2-np (e.g. 192.168.2.1)\n-\tif2-n2 has a static IP address . This ip is the same as if2-n1 (e.g. 192.168.3.1 belonging to the subnet 192.168.3.0/24)\n-\tThe network product has at least 2 enabled interfaces said if1-np and if2-np:\n-\tThe interface if1-np is connected to interface if1-n1 of the node N1 on the subnet, e.g., 192.168.1.0/24.\n-\tThe interface if2-np is connected to interface if1-n2 of the node N2 on the subnet, e.g., 192.168.2.0/24.\n-\tThe network product is configured with a static route for the subnet where if2-n1 is connected to (e.g. 192.168.3.0/24), so this subnet can be reached via if1-n1 through if1-np.\nThe figure depicts the configurations for the network product N1 and N2, illustrating the various components and their respective roles in the network.\nFigure 1: Configurations for the network product, N1 and N2\n-\tThe vendor shall declare, in the documentation accompanying the network product, the supported anti-spoofing mechanism (e.g. RPF or similar function) and if it is enabled for all interfaces (e.g. net.ipv4.conf.all.rp_filter = 1 and net.ipv4.conf.default.rp_filter = 1 in the linux sysctl.conf file) or per interface bases.\n-\tThe vendor shall declare if the dropped packets can be logged and how to enable this logging\n-\tThe tester has administrator privileges\n-\tA tester machine is available and configured with:\n-\tA static IP address belonging to the subnet where if2-n1 and if2-n2 are connected to (e.g. 192.168.3.2/24)\n-\tA default gateway set to if2-n1 and if2-n2 IP Address (e.g. 192.168.3.1)\n-\tA network traffic analyser (e.g. tcpdump) on the network product is available\nExecution Steps\n1.\tThe tester starts to send ping messages to if1-np interface of the network product.\n2.\tThe tester verifies, through the network traffic analyser, that the ping reaches correctly the if1-np interface and that responses are sent back.\n3.\tThe tester disconnects the tester machine from if2-n1 interface of the node N1 and reconnects it to the interface if2-n2 of the node N2:\n-\tThe testers uses the same network configuration of the tester machine.\n-\tThe tester sends ping messages to if1-np interface of the network product.\n-\tThe tester verifies, through the network traffic analyser, that the pings reach the if1-np interface of the network product, but they are dropped and no response is sent back since the source of the received packet is not reachable through the interface it came in.\n-\tThe tester sends ping messages to if2-np interface of the network product.\n-\tThe tester verifies, through the network traffic analyser, that the pings reach the if2-np interface of the network product, but they are dropped and no response is sent back since there is a default route via if2-np.\n-\tIf the dropped packets are logged, the testers verifies that these packets are recorded.\nExpected Results:\nThe network product supports an anti-spoofing mechanism (e.g. the RPF function) and it accepts a packet only if it reaches the network product on the expected interface (i.e. this packet has a source ip address belonging to the same network as the interface where it came in or if it is routable through the interface on which it came in), otherwise it discards the packet.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tThe user settings and configurations\n-\tPcap files\n-\tLog file if available\n-\tTest result (Passed or not)\nRequirement Name: Minimized kernel network functions.\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nKernel based network functions not needed for the operation of the network element shall be deactivated.\nIn particular the following ones shall be disabled by default:\nNote:\tVoid\n-\tProxy ARP (to prevent resource exhaustion attack and man-in-the-middle attacks.\n-\tDirected broadcast (to prevent Smurf, Denial of Service attack and others like it.\n-\tIPv4 Multicast handling. In particular all packets with IP source or destination address belonging to the multicast IP ranges (224.0.0.0 through 239.255.255.255) shall be discarded by default and multicast route caching and forwarding shall be disabled to prevent smurf and fraggle attacks. A configuration option shall be available to enable the IPv4 multicast handling if required.\n-\tGratuitous ARP messages (to prevent ARP Cache Poisoning attacks [ef]). A Gratuitous ARP request can be used mainly to inform the neighbours about the change in the MAC for the specified IP and consequently to update their ARP tables or to update the switches with the new MAC address or to defend link-local IP addresses in the Zeroconf protocol. By default, the network product shall not send Unsolicited ARP and any incoming Gratuitous ARP requests shall be discarded.\nNote:\t The above text does not preclude that Gratuitous ARP can be enabled in certain deployment scenarios.\nAnswering routine for broadcast ICMP packets. In particular all ICMP ECHO and TIMESTAMP requests sent to network product via broadcast/multicast shall not be answered by default.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_PROXY_ARP_DISABLING\nPurpose:\nVerify that the Proxy ARP feature is disabled by default on the network product. In particular this test case verifies that the network product does not respond to ARP requests intended for another host.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe network product shall have at least 2 different physical or logical Ethernet interface IF1 and IF2. E.g.\n-\tHost 1 is connected to IF1 on subnet A (for example 172.16.10.0/16).\n-\tHost 2 is connected to IF2 on subnet B (for example 172.16.20.0/24).\n-\tNetwork traffic analyser on the network product (e.g. TCPDUMP) or an external traffic analyser directly connected to the network product is available.\nExecution Steps\n1.\tIf the feature is available in a configuration file, verify that it is disabled by default.\n2.\tBroadcast an ARP request from Host 1 on Subnet A to discover the MAC of Host 2 on subnet B. Since the ARP request is a broadcast, it reaches all nodes in the Subnet A, which include the IF1 interface of the network product, but it does not reach Host 2.\n3.\tVerify that the network product correctly receives this packet but that it does not send an ARP reply to Host 1 with its own MAC address.\nExpected Results:\nNo Arp Reply is received by Host 1.\nExpected format of evidence:\nPcap trace, snapshot of ARP Cache of Host 1\nTest Name: TC_DIRECTED_BROAD_DISABLING\nPurpose:\nVerify that the Directed broadcast is disabled by default on the network product. In particular this test case verifies that a packet received by a network product whose destination address is a valid broadcast address is dropped.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe network product has at least 2 different physical or logical Ethernet interface IF1 and IF2.\n-\tHost 1 is connected to IF1 on Subnet A and Host 2 is connected to IF2 on Subnet B.\n-\tNetwork traffic analyser on the network product (e.g. TCPDUMP) or an external traffic analyser directly connected to the network product is available.\nExecution Steps\n1.\tIf the feature is available in a configuration file, verify that it is disabled by default.\n2.\tSend an IP packet from Host 1 whose IP destination address is a valid broadcast address belonging to the subnet B.\n3.\tVerify that the Host 2 on Subnet B does not receive the packet because it will be dropped by the network product, rather than being broadcasted.\nExpected Results:\nThe packet is not broadcasted by the network product and Host 2 cannot receive it.\nExpected format of evidence:\nPcap trace showing that packet from host 1only incomes to the network product.\nTest Name: TC_ IP_MULTICAST_HANDLING\nPurpose:\nVerify that IP Multicast is disabled by default on the network product. In particular this test case verifies that packets with IP source or destination address belonging to the multicast IP ranges (224.0.0.0 through 239.255.255.255) are not handled by the network product.\nProcedure and execution steps:\nPre-Conditions:\n-\tNetwork traffic analyser on the network product or an external traffic analyser directly connected to the network product is available.\n-\tNetwork product\nCapability:\nNOT applicable in certain deployment scenarios where multicast needs to be enabled.\nExecution Steps\n1.\tIf the feature is available in a configuration file, verify that it is disabled by default.\n2.\tVerify that none of the network product's interfaces is running Multicast (e.g. typing command ip maddr or ifconfig on any Unix® based platform)\nExpected Results:\nNo interface is running multicast protocols\nExpected format of evidence:\nScreenshot containing command output.\nTest Name: TC_GRATUITOUS_ARP_DISABLING\nPurpose:\nVerify that the Gratuitous ARP feature is disabled by default on the network product. In particular this test case verifies that the network product cannot send gratuitous ARP requests and that the network product discards incoming Gratuitous ARP requests.\nProcedure and execution steps:\nPre-Conditions:\n-\tNetwork traffic analyser on the network product (e.g. TCPDUMP) or an external traffic analyser directly connected to the network product is available.\n-\tHost 1 is connected to the network product\n-\tThe network product ARP Cache already contains an entry for Host 1\n- \tThe network product documentation does not state any reason why gratuitous ARP may be deliberately enabled in order to satisfy certain deployment scenarios. If the network product documentation does, however, state that the usage of gratuitous ARP is enabled in certain deployment scenarios, then this test case is not applicable (refer to the NOTE in the requirement).\nExecution Steps\n1.\tIf the feature is available in a configuration file, verify that it is disabled by default.\n2.\tSend a Gratuitous ARP request from Host 1, i.e. an ARP request where the source and destination IP are both set to an IP address different from the one already cached in the network product ARP Cache for Host 1 and the destination MAC is the broadcast address ff:ff:ff:ff:ff:ff.\n3.\tVerify that the network product correctly receives this packet but discards it and that the ARP Cache is not updated.\n4.\tSend a Gratuitous ARP request i.e. an ARP reply where the source and destination IP are both set to an IP address different from the one already cached in the network product ARP Cache for Host 1 and the destination MAC is the broadcast address ff:ff:ff:ff:ff:ff.\n5.\tVerify that the network product correctly receives this packet but discards it and that the ARP Cache is not updated.\nExpected Results:\nThe network product ARP Cache is not updated.\nExpected format of evidence:\nSnapshot of the network product ARP Cache\nTest Name: TC_BROADCAST_ICMP_HANDLING\nPurpose:\nVerify that responses to ICMP broadcast packets are disabled by default on the network product . In particular this test case verifies that all ICMP ECHO and TIMESTAMP requests sent to the network product via broadcast/multicast are not answered.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe network product has at least one physical or logical Ethernet interface IF1 connected to a host, Host 1.\n-\tNetwork traffic analyser on the network product (e.g. TCPDUMP) or an external traffic analyser directly connected to the network product is available.\nExecution Steps\n1.\tIf the feature is available in a configuration file, verify that it is disabled by default. .\n2.\tSend an ICMP ECHO message from Host 1 to ping a broadcast address (such as 255.255.255.255, or 192.168.1.255 on a 192.168.1.0/24 subnet)\n3.\tVerify that the network product doesn't respond to the ping.\n4.\tSend an ICMP timestamp request (ICMP type 13) from host 1 to a broadcast address (such as 255.255.255.255, or 192.168.1.255 on a 192.168.1.0/24 subnet).\n5.\tVerify that the network product doesn't respond to the timestamp request.\nExpected Results:\nThe network product doesn't respond to any ICMP packet with a broadcast address.\nExpected format of evidence:\nPcap trace showing that the ICMP ECHO/ ICMP timestamp packets are received by the network product but no responses are generated by the network product.\nRequirement Name: No automatic launch of removable media\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe network product shall not automatically launch any application when removable media device such as CD-, DVD-, USB-Sticks or USB-Storage drive is connected. If the operating system supports an automatic launch, it shall be deactivated unless it is required to support availability requirements.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_AUTO_LAUNCH_OF_REMOVABLE_MEDIA\nPurpose:\nTo verify that the network product does not launch any applications automatically when a removable media device is connected. Any such feature should be deactivated.\nProcedure and execution steps:\nPre-Condition\nIf the network product is provisioned with the necessary physical ports/drives (CD/DVD drive, USB port, etc.) then the test case applies.\nExecution Steps\n1.\tThe tester log in the network product.\n2.\tFor all available physical ports which are externally accessible:\na.\tThe tester prepares a removable media device (e.g. CD, DVD, USB-Sticks and/or USB-Storage drives) that contain any kind of autostart file suitable for this port type.\nb.\tThe tester inserts the prepared media device into the network product under test.\n3.\tThe tester verifies that the media device is not automatically mounted and there is no automatic application launch triggered by its insertion.\nExpected Results:\nThe network product does not launch any applications to open the contents in the removable media device.\nIn Linux® machines, the removable media device is not automatically mounted in the filesystem.\nExpected format of evidence:\nEvidence can be presented in the form of logs/screenshot/screen-capture on how the network product responds when any removable media device is attached to it (e.g. the output log of the UNIX® mount command before and after insertion of the removable media device).\nRequirement Name: Syn Flood Prevention\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe network product shall support a mechanism to prevent Syn Flood attacks (e.g. implement the TCP Syn Cookie technique in the TCP stack by setting net.ipv4.tcp_syncookies = 1 in the linux sysctl.conf file). This feature shall be enabled by default.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_SYN_FLOOD_PREVENTION\nPurpose:\nVerify that the Network Product supports a Syn Flood Prevention technique.\nProcedure and execution steps:\nPre-Conditions:\n-\tVendor documentation describing the SYN flood attack prevention mechanism or setting and where to check for them.\n-\tThe Network Product is listening on a TCP port one of its interfaces.\n-\tA network traffic analyser on the network product (e.g. TCPDUMP) or an external traffic analyser directly connected to the network product is available.\n-\tA host is connected to the Network Product interface and it is equipped with a tool able to reproduce a Syn Flood attack (e.g. nmap or hping)\nExecution Steps\n1.\tThe tester verifies the prevention mechanism or setting described in the vendor documentation.\n2.\tThe tester configures the tool to send a huge amount of TCP Syn packets against the Network Product (e.g. hping3 -i <waiting time between each packet> -S -p <TCP port> -c <Number of packets> < Network Product IP>)\n3.\tThe tester verifies that the Network Product is still up and running normally, its services are still available and reachable, the service is able to respond to typical service function requests, the memory or CPU usage is not exhausted, there is no crash or deadlock.\na.\tWhile the SYN Flood attack is ongoing.\nb.\tAfter the SYN Flood attack was executed.\nExpected Results:\nThe Network Product does not become inoperative.\nExpected format of evidence:\n-\tExecuted commands or script used for the SYN flood attack.\n-\tPart of the configuration (plaintext or screenshot) showing the prevention mechanism or setting.\n-\tA Pass/Fail result provided by the tester.\nRequirement Name: Protection mechanisms against buffer overflows\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe system shall support mechanisms for buffer overflow protection. Documentation which describes these buffer overflow mechanisms and also how to check that they have been enabled and/or implemented shall be provided.\nThreat References: TR 33.926 [4]\nNote: \tVoid\nNOTE:\tVoid\nTest Case:\nTest Name: TC_PROTECTION_FROM_BUFFER_OVERFLOW\nPurpose:\nTo ensure that the system supports mechanisms that protect against buffer overflow.\nProcedure and execution steps:\nPre-Conditions:\n1.\tA document which provides a detailed technical description of the system's buffer overflow protection mechanisms.\nIf a standard buffer overflow mechanism from a 3rd party vendor is used then a reference to the standard feature in the 3rd party vendors documentation should be provided.\n2.\tTest results from a test execution phase of buffer overflow protection mechanism testing.\nExecution Steps:\nThe tester is required to execute the following steps:\n1.\tThe tester verifies that there is:\na)\tA technical description of the buffer overflow protection mechanisms that have been implemented on the system.\nb)\tDetails of whether the buffer overflow protection mechanisms are implemented by default or if additional actions (e.g. scripts or commands manually executed) are required.\nc) If manually executed actions are required then detailed instructions should be included in the technical description.\n2.\tThe tester verifies that the test results:\na)\tDescribe test procedures used to verify the buffer overflow protection mechanisms,\nb)\tContain data which demonstrates/indicates that the buffer overflow protection mechanisms described in the technical description document have been implemented.\nc)\tContains details of the test set-up for the testing of the buffer overflow protection mechanisms. Where simulators and/or scripts are used to artificially create the conditions to trigger the buffer overflow protection mechanism then details of these should also be included.\nExpected Results:\n1.\tA technical description of the buffer overflow protection mechanisms that have been implemented on the system.\n-\tDetails of whether the buffer overflow protection mechanisms are implemented by default or if additional actions (e.g. scripts or commands manually executed) are required.\n-\tIf manually executed actions are required then detailed instructions should be included in the technical description.\n2.\tThe test results should:\n-\tDescribe test procedures used to verify the buffer overflow protection mechanisms,\n-\tContain data which demonstrates/indicates that the buffer overflow protection mechanisms described in the technical description document have been implemented.\n-\tContain details of the test set-up for the testing of the buffer overflow protection mechanisms. Where simulators and/or scripts are used to artificially create the conditions to trigger the buffer overflow protection mechanism then details of these should also be included.\nExpected format of evidence:\nDocumentation showing each of the points in the results sections.\nRequirement Name: External file system mount restrictions\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nIf a user is allowed to mount external file systems (attached locally or via the network), OS-level restrictions shall be set properly in order to prevent privilege escalation or extended access permissions due to the contents of the mounted file systems.\nImplementation example: In Linux® systems, administrators shall set the options nodev and nosuid in the /etc/fstab for all filesystems, which also have the \"user\" option.\nNOTE: \tThis requirement does not apply when the docker is used to mount file system.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_EXTERNAL_FILE_SYSTEM_MOUNT_RESTRICTIONS\nPurpose:\nVerify that OS-level restrictions are set properly for users that are allowed to mount external file systems (attached locally or via the network). This is to prevent privilege escalation or extended access permissions due to the contents of the mounted file systems.\nProcedure and execution steps:\nPre-Condition:\nTester has admin access to check and configure the external filesystem mount permissions in the OS.\nTester has username and password of a user in the network product that has external filesystem mount privileges.\nExecution Steps\nExecute the following steps:\n1.\tThe tester shall verify that OS-level restrictions are set properly in order to prevent privilege escalation due to the contents of the mounted file systems (e.g. In Linux® systems, administrators shall set the options nodev and nosuid in the /etc/fstab for all filesystems, which also have the \"user\" option). The tester checks that OS-level parameters are configured correctly on the system.\n2.\tThe tester mounts an external filesystem prepared by the tester with files exploiting privilege escalation methods (e.g. with writable SUID/GUID files).\n3.\tThe tester tries to gain privileged access to system by using a suitable privilege escalation method using the contents of the mounted file system and then confirms that privilege escalation doesn't happen.\nExpected Results:\nThe OS-level restrictions are set properly in order to prevent privilege escalation or extended access permissions due to the contents of the mounted file systems.\nAny privilege escalation method used by the tester should be blocked.\nExpected format of evidence:\nScreenshot containing the configuration file showing that OS-level restrictions are set properly for users that are allowed to mount external file systems.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.4\tWeb Servers",
                            "text_content": "Hardening requirements for Web servers of this section are well covered also by external sources, such as Center for Internet Security (CIS) benchmarks <https://benchmarks.cisecurity.org/index.cfm>. It is highly recommended to consult e.g. CIS, for the purpose of using automatic testing tools, for product-specific considerations, and for manual auditing, when testing the below listed requirements. If and when such mapping of requirements is used, i.e. to those of an external source, it needs to be well verified and documented that they cover the requirements of this section.\nRequirement Name: No system privileges for web server.\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nNo web server processes shall run with system privileges. This is best achieved if the web server runs under an account that has minimum privileges. If a process is started by a user with system privileges, execution shall be transferred to a different user without system privileges after the start.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_SYSTEM_PRIVILEGES_WEB_SERVER\nPurpose:\nVerify that the Web server is not run under system privileges.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe tester has needed administrative privileges.\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured /script adapted in line with the Requirement Description.\nExecution Steps\n1.\tCheck that no web server processes runs with system privileges. Check that this is the case even for processes that may have been started by a user with system privileges.\na.\tStart the web server process as web server user and check process privileges.\nb.\tIf possible, sStart the web server procvess as with system privileges and check if process privileges get dropped.\n2.\tCheck in relevant system settings and web server configurations that a web server user is configured with minimal privileges needed to run the web server and the web server is executable by that user.\nExpected Results:\n-\tThere are no findings of web server processes that run with system privileges.\n-\tSystem settings have been found correctly set to ensure that no processes will run with system privileges.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n\n-\tLog files / command line output and screen shots of test executions\n-\tPart of web server and/or system configuration (plain text or screenshot) showing the configured user for the web server process\n-\tTest result (Passed or not)\nRequirement Name: No unused HTTP methods\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nHTTP methods that are not required shall be deactivated. Standard requests to web servers use GET, HEAD, and POST. If other methods are required, e.g, PUT, DELETE, PATCH, they shall not introduce security leaks such as TRACK or TRACE.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_UNUSED_HTTP_METHODS\nPurpose:\nVerify that the Web server has deactivated all HTTP methods that are not required.\nProcedure and execution steps\nPre-Conditions:\n-\tThe tester has needed administrative privileges.\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured / script adapted in line with the Requirement Description.\nExecution Steps\n-\tCheck that relevant system settings and configurations are correct to ensure fulfilment of the requirement.\nExpected Results:\n-\tSystem settings and configurations have been found adequately set, in all Web components of the system, to ensure that unneeded HTTP methods are deactivated.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tLog files and screen shots of test executions\n-\tTest result (Passed or not)\nRequirement Name: No unused add-ons\nRequirement Reference: In accordance with industry best practice\nRequirement Description: All optional add-ons and components of the web server shall be deactivated if they are not required. In particular, CGI or other scripting components, Server Side Includes (SSI), and WebDAV shall be deactivated if they are not required.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_UNUSED_ADD-ONS\nPurpose:\nTo verify that the Web server has deactivated unneeded add-ons and unneeded scripting components.\nProcedure and execution steps\nPre-Conditions:\n-\tThe vendor has supplied a list of add-ons or scripting tools for Web server components needed for system operation, and that therefore need to be exempted from the test investigation.\n-\tThe tester has administrative privileges.\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured / script adapted in line with the Requirement Description.\nExecution Steps\n1.\tCheck that the web server is only running and listening on known ports (e.g. tcp port 80 and/or 443). Check that CGI or other scripting components, Server Side Includes (SSI), and WebDAV are deactivated if they are not required. See also guidance under 4.3.4.12.\n2.\tCheck that nothing else has been installed than the web server.\n3.\tCheck that relevant system settings and configurations are correct to ensure fulfilment of the requirement.\nExpected Results:\n-\tSystem settings and configurations have been found adequately set, in all Web components of the system, to ensure that all unneeded add-ons or script components are deactivated.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tLog files and screen shots of test executions.\n-\tTest result (Passed or not).\nRequirement Name: No compiler, interpreter, or shell via CGI or other server-side scripting.\nRequirement Reference: In accordance with industry best practice\nRequirement Description: If CGI (Common Gateway Interface) or other scripting technology is used, the CGI directory - or other corresponding scripting directory - shall not include compilers or interpreters (e.g. PERL® interpreter, PHP interpreter/compiler, Tcl interpreter/compiler or operating system shells).\nThreat Reference: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_COMPILER_FOR_CGI\nPurpose:\nTo verify that there are no compilers, interpreters or shell accessible via CGI or other scripting components.\nProcedure and execution steps\nPre-Conditions:\n-\tThe tester has administrative privileges\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured /script adapted in line with the Requirement Description.\nExecution Steps\n1.\tConsult the web server configuration to identify all directories used for CGI or other scripting components.\n2.\tCheck that there are no compilers or interpreters (e.g., PERL® interpreter, PHP interpreter/compiler, Tcl interpreter/compiler or operating system shells) in the directory/directories used for CGI or for other scripting tools (including PERL®, PHP, and others).\nExpected Results:\nThere are no compilers, interpreters or shells in directories accessible via CGI or other scripting components.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n\n-\tLog files and screen shots of test executions.\n-\tPart of web server configuration (plaintext or screenshot) showing all directories accessible by the CGI/scripting components.\n-\tList of files (with types and permissions, if available) inside the directories accessible by the CGI/scripting components.\n-\tTest result (Passed or not).\nRequirement Name: No CGI or other scripting for uploads.\nRequirement Reference: In accordance with industry best practice\nRequirement Description: If CGI or other scripting technology is used, the associated CGI/script directory shall not be used for uploads.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_CGI_OR_SCRIPTING_FOR_UPLOADS\nPurpose:\nTo test whether the upload directory is equal to the CGI/Scripting directory.\nProcedure and execution steps:\nPre-Condition:\nIf the web server is configured with CGI/Scripting on, this test applies.\nExecution Steps\nExecute the following steps:\nThe tester checks whether the upload directory is configured to be different from the CGI/Scripting directory.\nExpected Results:\nThe configured upload directory is different from the CGI/Scripting directory.\nAdditional evidence might be provided that shows that the web server has no write rights for the CGI/Scripting directory.\nExpected format of evidence:\nA part of the configuration file / screenshot of the configuration showing that the web server is properly configured.\nRequirement Name: No execution of system commands with SSI.\nRequirement Reference: In accordance with industry best practice\nRequirement Description: If Server Side Includes (SSI) is active, the execution of system commands shall be deactivated.\nThreat Reference: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_EXECUTION_OF_SYSTEM_COMMANDS\nPurpose:\nTo test whether it is possible to use the exec directive and if so, whether it can be used for system commands.\nProcedure and execution steps:\nPre-Condition:\nIf the web server is configured with SSI active, this test applies.\nExecution Steps\nExecute the following steps:\n1.-The tester checks whether execution of system commands is disabled in the web server configuration.\n2.\tThe tester actually attempts to use the exec directive in an SSI file with and without system commands.\nExpected Results:\n-\tThe execution of system commands via SSIs exec directive is disabled in the web server configuration.\n-\tIt is impossible to execute system commands via SSIs exec directive.\nExpected format of evidence:\n-\tA part of the configuration file / screenshot of the configuration showing that the web server is properly configured. For example, a configuration file that shows that the IncludesNOEXEC (Apache HTTP Server®) or ssiExecDisable (Microsoft® IIS) is set.\n-\tWeb server log while executing step 2.\nRequirement Name: Access rights for web server configuration files\nRequirement Reference: In accordance with industry best practice\nRequirement Description: Access rights for web server configuration files shall only be granted to the owner of the web server process or to a user with system privileges. Implementation example: Delete \"read\" and \"write\" access rights for \"others.\" Only grant \"write\" access to the user who configures the web server.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_ACCESS_RIGHTS_WEB_SERVER_FILES\nPurpose:\nTo verify that the access rights for Web server configuration files are correctly set.\nProcedure and execution steps\nPre-Conditions:\n-\tThe tester has administrative privileges\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured / script adapted in line with the Requirement Description.\nExecution Steps\n-\tCheck the access rights settings for Web server system configuration files.\n-\tCheck that relevant system settings and configurations are correct to ensure fulfilment of the requirement.\nExpected Results:\n-\tAccess rights for system configuration files are adequately set.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tLog files and screen shots of test executions\n-\tTest result (Passed or not)\nRequirement Name: No default content.\nRequirement Reference: In accordance with industry best practice\nRequirement Description: Default content (examples, help files, documentation, aliases) that is provided with the standard installation of the web server shall be removed.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_DEFAULT_CONTENT\nPurpose:\nTo verify that there is no default content on the web server, that is not needed for web server operation, since such default content can be useful for an attacker.\nProcedure and execution steps\nPre-Conditions:\n-\tThe tester has needed administrative privileges\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured / script adapted in line with the Requirement Description.\nExecution Steps\n1.\tCheck that all default content (examples, help files, documentation, aliases) that is provided with the standard installation of the web server has been removed.\nExpected Results:\n-\tNo default content (examples, help files, documentation, aliases, un-needed directories or manuals) has been found to remain on any Web server component.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tLog files and screen shots of test executions.\n-\tTest result (Passed or not).\nRequirement Name: No directory listings / Directory Browsing.\nRequirement Reference: In accordance with industry best practice\nRequirement Description: Directory listings (indexing) / \"Directory browsing\" shall be deactivated.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_DIRECTORY_LISTINGS\nPurpose:\nTo verify that Directory listings / Directory browsing has been deactivated in all Web server components.\nProcedure and execution steps\nPre-Conditions:\n-\tThe tester has administrative privileges\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured / script adapted in line with the Requirement Description.\nExecution Steps\n-\tCheck that Directory listings (indexing) / \"Directory browsing\" has been deactivated in all Web server components.\nExpected Results:\n-\tEvidence that Directory listing / Directory browsing has been deactivated in all Web server components.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tLog files and screen shots of test executions\n-\tTest result (Passed or not)\nRequirement Name: Web server information in HTTP headers.\nRequirement Reference: In accordance with industry best practice\nRequirement Description: The HTTP header shall not include information on the version of the web server and the modules/add-ons used.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_WEB_SERVER_HEADER_INFORMATION\nPurpose:\nTo verify that HTTP headers do not include information on the version of the web server and the modules/add-ons used.\nProcedure and execution steps\nPre-Conditions:\n-\tThe tester has administrative privileges\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured / script adapted in line with the Requirement Description.\nExecution Steps\n1.\tCheck that HTTP headers do not include information on the version of the web server and the modules/add-ons used.\nExpected Results:\n-\tEvidence that HTTP headers do not include information on the version of the web server and the modules/add-ons used.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tLog files and screen shots of test executions\n-\tTest result (Passed or not)\nRequirement Name: Web server information in error pages.\nRequirement Reference: In accordance with industry best practice\nRequirement Description: User-defined error pages shall not include version information about the web server and the modules/add-ons used. Error messages shall not include internal information such as internal server names, error codes, etc. Default error pages of the web server shall be replaced by error pages defined by the vendor.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_WEB_SERVER_ERROR_PAGES_INFORMATION\nPurpose:\nTo verify that error pages and error messages do not include information about the web server.\nProcedure and execution steps\nPre-Conditions:\n-\tThe tester has needed administrative privileges.\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured / script adapted in line with the Requirement Description.\nExecution Steps\n-\tCheck that generated error pages and error messages do not include information about the web server.\nExpected Results:\n-\tEvidence that generated error pages and error messages do not include information about the web server.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tLog files and screen shots of test executions\n-\tTest result (Passed or not)\nRequirement Name: Minimized file type mappings Requirement Reference: In accordance with industry best practice\nRequirement Description: File type- or script-mappings that are not required shall be deleted, e.g. php, phtml, js, sh, csh, bin, exe, pl, vbe, vbs.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_NO_WEB_SERVER_FILE_TYPE MAPPINGS\nPurpose:\nTo verify that file type- or script-mappings that are not required have been deleted.\nProcedure and execution steps\nPre-Conditions:\n-\tThe tester has needed administrative privileges.\n-\tA tester machine is available.\n-\tRecommended: an automatic assessment tool has been configured / script adapted in line with the Requirement Description.\nExecution Steps\n-\tCheck that all file type- or script-mappings that are not required have been deleted.\nExpected Results:\n-\tEvidence that all file type- or script-mappings, that are not required, have been deleted.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tLog files and screen shots of test executions\n-\tTest result (Passed or not)\nRequirement Name: Restricted file access.\nRequirement Reference: In accordance with industry best practice\nRequirement Description: Restrictive access rights shall be assigned to all files which are directly or indirectly (e.g. via links or in virtual directories) in the web server's document directory. In particular, the web server shall not be able to access files which are not meant to be delivered.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_RESTRICTED_FILE_ACCESS\nPurpose:\nTo test whether the restrictive access rights are assigned to all files which are directly or indirectly in the web server's document directory and to verify whether path traversal is made improbable.\nProcedure and execution steps:\nPre-Condition:\n1.\tThe web server is configured according to the manual\nExecution Steps\nExecute the following steps:\n1.\tThe tester verifies that access rights on the servable content (meaning directories and files) is set to the following:\na.\tThe files are owned by the user that runs the web server;\nb.\tThe files are not writable to others, except the web server's account;\n2.\tThe tester verifies that the user running the web server is an unprivileged account;\n3.\tFor Operating Systems that have chrooted environments, the tester verifies that the web server runs inside a jail or chrooted environment.\nExpected Results:\n-\tName of user running the web server with the privileges of the account;\n-\tAccess rights of files and directories that the web server serves;\n-\tConfiguration that shows that the web server is in a chrooted environment.\nExpected format of evidence:\nA part of the configuration file / screenshot of the configuration showing that the web server, the file access rights and the account running the web server is properly configured.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.5\tNetwork Devices",
                            "text_content": "Requirement Name: Traffic Separation\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe network product shall support physical or logical separation of traffic belonging to different network domains. For example, O&M traffic and control plane traffic belong to different network domains. See RFC 3871 [3] for further information.\nThreat References: TR 33.926 [4]\nTest case:\nTest Name: TC_TRAFFIC_SEPARATION\nPurpose:\nTo test whether traffic belonging to different network domains is separated.\nProcedure and execution steps:\nPre-Condition:\nNOTE: \tThis test applies if the network product is meant to handle traffic from different network domains, e.g. both O&M and control plane traffic.\nThe network product has at least two separate (logical) interfaces dedicated to different network domains. Network products for which the test applies and that fail to meet this precondition fail the test by definition.\nExecution Steps\nExecute the following steps:\n1.\tThe tester checks whether the network product refuses traffic intended for one network domain on all interfaces meant for the other network domain, and vice versa.\n2.\tStep 1 is to be performed for all pairs of different network domains.\nExpected Results:\nThe two tests are successful.\nExpected format of evidence:\nA PASS or FAIL.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.6\tNetwork Functions in service-based architecture",
                            "text_content": "The purpose of the sub-clauses in 4.3.6 is to identify and describe the hardening related requirements for all Network Function (NF) within the 5G Core (5GC) utilizing Service-Based Interfaces (SBI) and the corresponding test cases.\nRequirement Name: No code execution or inclusion of external resources by JSON parsers.\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nParsers used by Network Functions (NF) shall not execute JavaScript or any other code contained in JSON objects received on Service Based Interfaces (SBI). Further, these parsers shall not include any resources external to the received JSON object itself, such as files from the NF’s filesystem or other resources loaded externally.\nThreat References: TR 33.926 [4], clause 6.3.2.1, JSON Parser Exploits\nTest Case:\nTest Name: TC_JSON_PARSER_CODE_EXEC_INCL\nPurpose:\nNFs implementing SBI transfer application data serialized as JSON objects. When receiving such data, an NF parses this JSON representation and creates equivalent internal data structures. Since the contents of the JSON objects shall be considered untrusted, blindly executing code fragments or loading resources from a local path or Uniform Resource Identifier (URI) shall not be possible.\nProcedure and execution steps:\nPre-Conditions:\n-\tThe tester has the privileges to log in the network product and to access to all system resources (e.g. log files)\n-\tA list of all available network services containing at least the following information shall be included in the documentation accompanying the Network Product:\n-\tall interfaces providing IP-based protocols;\n-\tthe available transport layer protocols on these interfaces;\n-\ttheir open ports and associated services in the form of an OpenAPI3.0 interface specification;\n-\tAn effective Web Application Security (WAS) test tool will be used that allows the tester to generate HTTP messages exploiting JSON parsers that do not prevent the above-mentioned scenarios of code execution and loading external resources. The test lab is expected to have sufficient expertise to recognize the level of effectiveness of the available tools.\n-\tA network traffic analyser on the network product (e.g. TCPDUMP) or an external traffic analyser directly connected to the network product and on a tester machine is available.\nExecution Steps\n1.\tExecution of available WAS test tools against the network product’s API endpoints via its Service Based Interfaces.\n2.\tUsing a network traffic analyser on the network product, e.g. TCPDUMP or an external traffic analyser directly connected to the network product, the tester verifies that no external resources get loaded during JSON parsing.\n3. \tDepending on the actual JavaScript code in the HTTP message, the tester verifies that the network product does not execute any of the contained actions.\nExpected Results:\n-\tThe NF does not load any resources external to the JSON object itself.\n-\tThe NF does not execute any JavaScript code contained in JSON objects.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n\n-\tThe used tool(s) name and version information\n-\tSettings and configurations used\n-\tThe output log file of the chosen tool that displays the results (passed/failed).\n-\tScreenshot\n-\tTest result (Passed or not)\nRequirement Name: Validation of the unique key values in IEs.\nRequirement Reference: 3GPP TS 29.501 Principles and Guidelines for Services Definition [13], clause 6.2.\nRequirement Description: \"For data structures where values are accessible using names (sometimes referred to as keys), e.g. a JSON object, the name shall be unique. The occurrence of the same name (or key) twice within such a structure shall be an error and the message shall be rejected”.\nThreat References: TR 33.926 [4], clause 6.3.2.2, JSON Parser not Robust\nTest Case:\nNOTE: This requirement can also be verified as part of Robustness and Protocol fuzzing tests as defined in clause 4.4.4 Robustness and fuzz testing according to referenced requirements.\nPurpose:\nVerify that the API implementation fullfills the requirements as specified in 29.501 [13], clause 6.2.\nPre-Conditions:\nTest environment with network product under test. Rest of the network and network products may be simulated.\nExecution Steps\n1)\tThe test equipment sends requests with duplicate keys in message IE payload to the network product under test.\n2)\tThe test equipment sends valid requests to network product under test\nExpected Results:\n1)\tNetwork product under tests responses with an error message\n2)\tNetwork product under test still responses normally to valid requests\nExpected format of evidence:\n-\tA testing report provided by the testing agency which will consist of the following information:\n-\tThe used tool(s) name and version information,\n-\tSettings and configurations used\n-\tThe output log file of the chosen tool that displays the results (passed/failed).\n-\tTest result (Passed or not)\n-\tLog/evidence tracing possible crashes\n-\tInformation of any input causing unspecified, undocumented, or unexpected behaviour\nRequirement Name: Validation of the IEs limits.\nRequirement Reference: 3GPP TS 29.501 Principles and Guidelines for Services Definition [13], clause 6.2\nRequirement Description: \"The valid format and range of values for each IE, when applicable, shall be defined unambiguously:\n-\tFor each message the number of leaf IEs shall not exceed 16000.\n-\tThe maximum size of the JSON body of any HTTP request shall not exceed 2 million bytes.\n-\tThe maximum nesting depth of leaves shall not exceed 32.\"\nThreat References: TR 33.926 [4], clause 6.3.2.2, JSON Parser not Robust\nTest Case:\nNOTE: This requirement can also be verified as part of Robustness and Protocol fuzzing tests as defined in clause 4.4.4 Robustness and fuzz testing according to referenced requirements.\nPurpose:\nVerify that the API implementation fullfills the requirements as specified in 29.501[13], clause 6.2.\nPre-Conditions:\nTest environment with network product under test. Rest of the network may be simulated.\nExecution Steps\n1)\tThe test equipment sends requests with out of bounds IEs towards the network product under test.\n\nExpected Results:\n-\tNetwork product under tests responses with an error message.\n\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n\n-\tThe used tool(s) name and version information,\n-\tSettings and configurations used.\n-\tThe output log file of the chosen tool that displays the results (passed/failed).\n-\tTest result (Passed or not).\n-\tLog/evidence tracing possible crashes.\n-\tInformation of any input causing unspecified, undocumented, or unexpected behaviour.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.4\tBasic vulnerability testing requirements",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.4.1\tIntroduction",
                            "text_content": "Basic Vulnerability Testing activities consist of requirements for running automated FOSS and COTS security testing tools against the external interfaces of a Network Product. These activities cover at least four aspects: Port Scanning, Vulnerability Scanner by the use of Vulnerability scanners and robustness/fuzz testing, and endpoint scanning. For each of these aspects, test requirements and test results are described in the present clause.\n\nNOTE: \tThe individual tools used for Basic Vulnerability Testing are selected by the evaluator. The SECAM accreditation body will ensure during accreditation of the evaluator's laboratory that the testers are able to utilize adequate tools.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.2\tPort Scanning",
                            "text_content": "Requirement Name: Port scaning\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nIt shall be ensured that on all network interfaces, only documented ports on the transport layer respond to requests from outside the system.\nThe test for this requirement can be carried out using a suitable tool or manually performed as described below. If a tool is used then the tester needs to provide evidence, e.g. by referring to the documentation of the tool, that the tool actually provides functionality equivalent to the steps described below.\nThreat References: TR 33.926 [4]\nTest Case:\nTest Name: TC_BVT_PORT_SCANNING\nPurpose:\nTo ensured that on all network interfaces, only documented ports on the transport layer respond to requests from outside the system\nProcedure and execution steps:\nPre-Conditions:\nA list of all available network services containing at least the following information shall be included in the documentation accompanying the Network Product:\n1.\tall interfaces providing IP-based protocols;\n2.\tthe available transport layer protocols on these interfaces;\n3.\ttheir open ports and associated services per transport layer protocol;\n4.\tand a free-form description of their purposes.\nThe port scanning tool that is used shall be capable to detect open ports on the relevant transport layer protocols.\nNOTE: \tIt might not be possible for certain transport layer protocols (like UDP) to unambiguously detect whether a port is open or not by means of external port scanning. Also in some circumstances it might not be efficient to do external port scanning, e.g. if there are security measures to limit the rate a system can be probed. In those cases the tester determines another means suitable to verify which ports are open.\nExecution Steps\nThe tester is required to execute the following steps:\n1.\tVerification of the compliance to the prerequisites:\na.\tVerification that the list of available network services is available in the documentation of the Network Product\nb.\tValidation that all entries in the list of services are meaningful and reasonably necessary for the operation of the Network Product class\n2.\tIdentification of the open ports by means of capable port scanning tools or other suitable testing means\n3.\tVerification that the list of identified open ports matches the list of available network services in the documentation of the Network Product\nExpected Results:\nThe used tool(s) name, their unambiguous version (also for plug-ins if applicable), used settings, and the relevant output containing all the technically relevant information about test results is evidence and shall be part of the testing documentation.\nAll discrepancies between the list of identified open ports and the list of available network services in the documentation shall be highlighted in the testing documentation.\nExpected format of evidence:\nOutput of portscan and list of identified discrepancies.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.3\tVulnerability scanning",
                            "text_content": "Requirement Name: Vulnerability scanning\nRequirement Reference: In accordance with industry best practice\nRequirement Description:\nThe purpose of vulnerability scanning is to ensure that there are no known vulnerabilities (or that relevant vulnerabilities are identified and remediation plans in place to mitigate them) on the Network Product, both in the OS and in the applications installed, that can be detected by means of automatic testing tools via the Internet Protocol enabled network interfaces.\nVulnerability scanning tools can report false positives and they shall be investigated and documented in the test report.\nThe test for this requirement can be carried out using a suitable tool or manually performed as described below. If a tool is used then the tester needs to provide evidence, e.g. by referring to the documentation of the tool, that the tool actually provides functionality equivalent to the steps described below.\nThreat References: TR 33.926 [4]\nTest case:\nTest Name: TC_BVT_VULNERABILITY_SCANNING\nPurpose:\nThe purpose of vulnerability scanning is to ensure that there are no known vulnerabilities (or that relevant vulnerabilities are identified and remediation plans in place to mitigate them) on the Network Product that can be detected by means of automatic testing tools via the Internet Protocol enabled network interfaces.\nProcedure and execution steps:\nPre-Conditions:\nA list of all available network services containing at least the following information shall be included in the documentation accompanying the Network Product:\n-\tall interfaces providing IP-based protocols;\n-\tthe available transport layer protocols on these interfaces;\n-\ttheir open ports and associated services;\n-\tand a free-form description of their purposes.\nNOTE 1: \tThis list is to be validated as part of the BVT port scanning activity.\n\nThe used vulnerability scanning tool shall be capable to detect known vulnerabilities on common services. The used vulnerability information shall be reasonably recent at the time of testing.\nExecution Steps\nThe tester is required to execute the following steps:\n1.\tExecution of the suitable vulnerability scanning tool against all interfaces providing IP-based protocols of the Network Product.\n2.\tEvaluation of the results based on their severity.\nExpected Results:\nThe used tool(s) name, their unambiguous version (also for plug-ins if applicable), used settings, and the relevant output is evidence and shall be part of the testing documentation.\nThe discovered vulnerabilities (including source, example CVE ID), together with a rating of their severity, shall be highlighted in the testing documentation.\nCOTS Vulnerability scanners, by their nature, (e.g. depending on how they are configured) can result in false findings/positives. The tool’s documentation even mention to repeat checks to determine a recurring problem. The tester shall make best efforts to determine if there is an issue with NE or the test tool and if necessary, work with the vendor of the network product to come to a consensus on the test result outcome.\nNOTE 2: \tThis testing documentation is input to the vulnerability mitigation process (that could include patching). This is part of the product lifecycle management process developed by GSMA SECAG.\nExpected format of evidence:\nOutput of BVT tool.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.4\tRobustness and fuzz testing",
                            "text_content": "Requirement Name: Robustness and fuzz testing\nRequirement Reference: 4.2.6.2.2. – Interface Robustness\nRequirement Description:\nIt shall be ensured that externally reachable services are reasonably robust when receiving unexpected input\nThreat References: TR 33.926 [4]\nTest case:\nTest Name: TC_BVT_ROBUSTNESS AND FUZZ TESTING\nPurpose:\nTo verify that the network product provides externally reachable services which are robust against unexpected input. The target of this test are the protocol stacks (e.g. diameter stack) rather than the applications (e.g. web app).\nProcedure and execution steps:\nPre-Conditions:\n-\tThe tester has the privileges to log in the network product and to access all system resources (e.g. log files)\n-\tA list of all available network services containing at least the following information shall be included in the documentation accompanying the Network Product:\n-\tall interfaces providing IP-based protocols;\n-\tthe available transport layer protocols on these interfaces;\n-\ttheir open ports and associated services;\n-\tand a free-form description of their purposes.\nNOTE: \tThis list is to be validated as part of the BVT port scanning activity.\n-\tThe robustness and fuzzing tools that are selected for this test shall utilize state-of-the-art technology to identify input which causes the Network Product to behave in an unspecified, undocumented, or unexpected manner.\n-\tFuzz testing tools are a highly sophisticated technology and adaptation to the individual protocols in question is needed to be effective. Therefore, there is a lack of available effective fuzz testing tools available especially for protocols proprietary to the Telco industry. Taking into account note 4 of TR 33.916's clause 7.2.4, test labs shall acquire fuzz testing tools for those protocols where commercially feasible.\n-\tIt needs to be taken into account that fuzz testing tools might show drastic differences in terms of effectiveness. The accredited test lab is expected to have sufficient expertise to recognize the level of effectiveness of the available tools.\n-\tA network traffic analyser on the network product (e.g. TCPDUMP) or an external traffic analyser directly connected to the network product and on a tester machine is available.\nExecution Steps\nThe tester is required to execute the following steps:\n1.\tExecution of available effective fuzzing tools against the protocols available via interfaces providing IP-based protocols of the Network Product for an amount of time sufficient to be effective.\n2.\tExecution of available effective robustness test tools against the protocols available via interfaces providing IP-based protocols of the Network Product for an amount of time sufficient to be effective.\n3.\tFor both step 1 and 2:\na.\tUsing a network traffic analyser on the network product (e.g. TCPDUMP) or an external traffic analyser directly connected to the network product, the tester verifies that the packets are correctly processed by the network product.\nb.\tThe testers verifies that the network product and any running network service does not crash.\nc.\tThe execution of tests shall run sufficient times.\nExpected Results:\nA list of all of the protocols of the network product reachable externally on an IP-based interface, together with an indication whether effective available robustness and fuzz testing tools have been used against them, shall be part of the testing documentation. If no tool can be acquired for a protocol, a free form statement shall be used to explain why not.\nThe used tool(s) name, their unambiguous version (also for plug-ins if applicable), used settings, and the relevant output is evidence and shall be part of the testing documentation.\nAny input causing unspecified, undocumented, or unexpected behaviour, and a description of this behaviour shall be highlighted in the testing documentation.\nCOTS fuzzing tools, by their nature, may have an acceptable failure rate (e.g. 0.1%) due to different non-deterministic variables in their implementation. At some point the tool’s documentation may even mention that the failing test shall be repeated to check whether it is really a recurring problem or not. The tester shall make best effort to determine if there is an issue with NE or the test tool and if necessary, work with the vendor of the network product to come to a consensus on the test result outcome.\nExpected format of evidence:\nA testing report provided by the testing agency which will consist of the following information:\n-\tThe used tool(s) name and version information,\n-\tSettings and configurations used\n-    The output log file of the chosen tool that displays the results (passed/failed).\n-\tScreenshot\n-\tTest result (Passed or not)\n-\tLog/evidence tracing possible crashes\n-\tAny input causing unspecified, undocumented, or unexpected behaviour\n\n\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "",
                                    "table number": 5,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
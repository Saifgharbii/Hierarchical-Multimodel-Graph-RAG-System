{
    "document_name": "33517-i00.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Specification has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\nY\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\nIn the present document, modal verbs have the following meanings:\nshall\t\tindicates a mandatory requirement to do something\nshall not\tindicates an interdiction (prohibition) to do something\nThe constructions \"shall\" and \"shall not\" are confined to the context of normative provisions, and do not appear in Technical Reports.\nThe constructions \"must\" and \"must not\" are not used as substitutes for \"shall\" and \"shall not\". Their use is avoided insofar as possible, and they are not used in a normative context except in a direct citation from an external, referenced, non-3GPP document, or so as to maintain continuity of style when extending or modifying the provisions of such a referenced document.\nshould\t\tindicates a recommendation to do something\nshould not\tindicates a recommendation not to do something\nmay\t\tindicates permission to do something\nneed not\tindicates permission not to do something\nThe construction \"may not\" is ambiguous and is not used in normative elements. The unambiguous constructions \"might not\" or \"shall not\" are used instead, depending upon the meaning intended.\ncan\t\tindicates that something is possible\ncannot\t\tindicates that something is impossible\nThe constructions \"can\" and \"cannot\" are not substitutes for \"may\" and \"need not\".\nwill\t\tindicates that something is certain or expected to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nwill not\t\tindicates that something is certain or expected not to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nmight\tindicates a likelihood that something will happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nmight not\tindicates a likelihood that something will not happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nIn addition:\nis\t(or any other verb in the indicative mood) indicates a statement of fact\nis not\t(or any other negative verb in the indicative mood) indicates a statement of fact\nThe constructions \"is\" and \"is not\" do not indicate requirements.\n\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document contains objectives, requirements and test cases that are specific to the SEPP network product class. It refers to the Catalogue of General Security Assurance Requirements and formulates specific adaptions of the requirements and test cases given there, as well as specifying requirements and test cases unique to the SEPP network product class.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[2]\t3GPP TS 33.117: \"Catalogue of General Security Assurance Requirements\".\n[3]\t3GPP TS 33.501: \"Security architecture and procedures for 5G system\".\n[4]\t3GPP TR 33.926: \"Security Assurance Specification (SCAS) threats and critical assets in 3GPP network product classes\".\n[5]\tVoid.\n[6]\t3GPP TS 29.573: \"5G System; Public Land Mobile Network (PLMN) Interconnection\".\n[7]\t3GPP TS 29.500: \"5G System; Technical Realization of Service Based Architecture\".\n[8]\t3GPP TS 23.501: \"System Architecture for 5G System (5GS)\".\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions of terms, symbols and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tTerms",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the terms given in 3GPP TR 21.905 [1] and the following apply. A term defined in the present document takes precedence over the definition of the same term, if any, in 3GPP TR 21.905 [1].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tSymbols",
                    "description": "",
                    "summary": "",
                    "text_content": "Void.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.3\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in 3GPP TR 21.905 [1] and the following apply. An abbreviation defined in the present document takes precedence over the definition of the same abbreviation, if any, in 3GPP TR 21.905 [1].\nIPX\tIP eXchange service\nJSON\tJavaScript Object Notation\nJWS\tJSON Web Signature\nNF\tNetwork Function\nSEPP\tSecurity Edge Protection Proxy\n\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tSEPP-specific security requirements and related test cases",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tIntroduction",
                    "description": "",
                    "summary": "",
                    "text_content": "SEPP specific security requirements include both requirements derived from SEPP-specific security functional requirements in relevant specifications as well as security requirements introduced in the present document derived from the threats specific to SEPP as described in TR 33.926 [4].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.2\tSEPP-specific adaptations of security functional requirements and related test cases",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.2.1\tIntroduction",
                            "text_content": "The present clause describes the security functional requirements and the corresponding test cases for SEPP network product class. The proposed security requirements are classified in two groups:\n-\tSecurity functional requirements derived from TS 33.501 [3] and detailed in clause 4.2.2.\n-\tGeneral security functional requirements which include requirements not already addressed in TS 33.501 [3] but whose support is also important to ensure that SEPP conforms to a common security baseline detailed in clause 4.2.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.2\tSecurity functional requirements on the SEPP deriving from 3GPP specifications and related test cases",
                            "text_content": "In addition to the requirements and test cases in TS 33.117 [2], clause 4.2.2.1, an SEPP shall satisfy the following:\n-\tIt is assumed for the purpose of the present SCAS that an SEPP conforms to all mandatory security-related provisions pertaining to an SEPP in:\n-\t3GPP TS 33.501 [3]: \"Security architecture and procedures for 5G system\";\n-\tother 3GPP specifications that make reference to TS 33.50 [3]1 or are referred to from TS 33.501 [3] Security procedures pertaining to an SEPP are typically embedded in NF/NF service status discovery/subscribe/notify procedures across PLMNs and are hence assumed to be tested together with them.\nRequirement Name: Correct handling of cryptographic material of peer SEPPs and IPX providers\nRequirement Reference: TS 33.501 [3], clause 5.9.3.2\nRequirement Description:\nThe SEPP is able to clearly differentiate between certificates used for authentication of peer SEPPs and certificates used for authentication of intermediates performing message modifications.\nThreat References: TR 33.926 [4], clause G.2.2.1, Misusing cryptographic material of peer SEPPs and IPX providers\nTest Case:\nTest Name: TC_CRYPT_MATERIAL_SEPP_IPX_SEPARATION\nPurpose:\nVerify that the SEPP under test does not accept raw public keys/certificates by intermediate IPX-providers for N32-c TLS connection establishment. The opposite is to be ensured as well: The SEPP under test shall not accept N32-f JSON patches signed with raw public keys/certificates of peer SEPPs.\nProcedure and execution steps:\nPre-Conditions:\n-\tSystem documentation of the SEPP under test, which details how raw public keys/certificates of peer SEPPs are to be configured and how internal log files can be accessed.\n-\tA second SEPP instance for N32 communication with the SEPP under test, which allows for the creation of custom N32-f messages. This system may be simulated.\n-\tBoth SEPPs are to be configured with a raw public key/certificate of their communication peer to be able to establish a N32-c connection.\n-\tTest environment with one node simulating an IPX-provider. This functionality includes parsing N32-f messages, creation of JSON-patches for message modifications and JWS operations, among others.\n-\tTwo public/private key pairs representing IPX-providers. These cryptographic keys need to be different from those of the two SEPPs.\nExecution Steps\n1.1\tBoth SEPPs are configured for N32-f communication via the simulated IPX-system.\n1.2\tBoth SEPPs establish a N32 connection with each other. The secondary SEPP provides the IPX-provider's public key/certificate to the SEPP under test as part of the IPX security information list via N32-c.\n1.3\tWhile the N32 connection from the previous step is still active, the tester attempts to establish an additional N32-c TLS connection using the IPX-providers private key.\n1.4\tBased on the internal log files, the tester validates how the SEPP under test handles the N32-c connection attempt.\n2.1\tBoth SEPPs are configured for N32-f communication via the simulated IPX-system.\n2.2\tBoth SEPPs establish a N32-c connection with each other. The secondary SEPP provides the IPX-provider's public key/certificate to the SEPP under test as part of the IPX security information list via N32-c.\n2.3\tThe tester sends a N32-f message from the secondary SEPP via the IPX-system towards the SEPP under test.\n2.4\tThe intermediate IPX-system appends an arbitrary JSON-(NULL-)patch to the N32-f message and signs it not with its own private key, but the private key of the secondary SEPP. The modified message is then forwarded to the SEPP under test.\n2.5\tBased on the internal log files, the tester validates how the received N32-f message is handled by the SEPP under test.\nExpected Results:\n-\tThe N32-c TLS connection establishment using the cryptographic material of the intermediate IPX-system fails with the SEPP to be tested (step 1.4).\n-\tThe JSON patch signed with the peer SEPP's private key is discarded by the SEPP under test (step 2.5).\nExpected format of evidence:\nLogs and the communication flow saved in a .pcap file.\nRequirement Name: Connection-specific scope of cryptographic material by IPX-providers\nRequirement Reference: TBA\nRequirement Description:\nCryptographic material from IPX providers, i.e. raw public keys or certificates, used to authenticate N32-f message modifications is only valid for the N32 connection it is exchanged in. The SEPP under test shall not accept N32-f message modifications signed by IPX-providers other than the ones whose cryptographic material has been exchanged as part of the IPX security information list via the related N32-c connection.\nThreat References: TR 33.926 [4], clause G.2.2.2, Misusing cryptographic material beyond connection-specific scope\nTest Case:\nTest Name: TC_CONNECTION_SPECIFIC_SCOPE_CRYPT_MATERIAL\nPurpose:\nVerify that the SEPP to be tested does not use cryptographic material from IPX-providers other than the ones whose raw public key/certificate has been exchanged in the related N32-c connection to authenticate N32-f message modifications.\nProcedure and execution steps:\nPre-Conditions:\n-\tSystem documentation of the SEPP under test, which details how raw public keys/certificates of peer SEPPs are to be configured and how internal log files can be accessed.\n-\tTest environment with one node simulating an IPX-provider. This functionality includes parsing N32-f messages, creation of JSON-patches for message modifications and JWS operations, among others.\n-\tTwo public/private key pairs representing IPX-providers.\n-\tA second SEPP instance for N32 communication with the SEPP under test, which allows for the creation of custom N32-f messages. This system may be simulated.\n-\tBoth SEPPs are to be configured with the raw public key/certificate of their communication peer to be able to establish an N32-c TLS connection.\nExecution Steps\n1.\tBoth SEPPs are configured for N32-f communication via the simulated IPX-system.\n2.\tBoth SEPPs establish a mutual N32-c connection. As part of the IPX security information list, the secondary SEPP provides one of the prepared raw public keys/certificates of the IPX-providers (KEY_A) to the SEPP under test.\n3.\tParallel to the N32 connection in step 1, an additional connection is established between the two SEPPs. Within this connection, an alternate raw public key/certificate of the IPX-providers (KEY_B) shall be exchanged.\n4.\tWithin the N32 connection established in step 1, the tester sends an N32-f message from the secondary SEPP towards the SEPP under test. The intermediate IPX-system appends an arbitrary JSON-(NULL-)patch, which is signed with the private key belonging to KEY_B, i.e. the one out of scope of this particular N32 connection. The modified message is then forwarded to the SEPP to be tested.\n5.\tBased on the log files of the SEPP under test, the tester validates how the received N32-f message is handled.\nExpected Results:\n-\tN32-f message modifications which have been signed by IPX-providers whose information has not been exchanged as part of the related N32-c connection are discarded by the SEPP under test.\nExpected format of evidence:\nLogs and the communication flow saved in a .pcap file.\nRequirement Name:\tCorrect handling of serving PLMN ID mismatch\nRequirement Reference: TS 33.501 [3], clause 13.2.4.7, and TS 33.501 [3], clause 13.4.1.2\nRequirement Description:\nThe receiving SEPP verifies that the PLMN-ID contained in the incoming N32-f message matches the PLMN-ID in the related N32-f context as specified in TS 33.501 [3], clause 13.2.4.7.\nThe pSEPP checks that the serving PLMN ID of subject claim in the access token matches the remote PLMN ID corresponding to the N32-f context Id in the N32 message\" as specified in TS 33.501 [3], clause 13.4.1.2.\nThreat References: TR 33.926 [4], clause G.2.3.1, Incorrect handling for PLMN ID mismatch\nTest case:\nTest Name: TC_PLMN_ID_MISMATCH\nPurpose:\nVerify that the SEPP under test is able to identify the mismatch between the PLMN-ID contained in the incoming N32-f message and the PLMN-ID in the related N32-f context, and take action accordingly.\nProcedure and execution steps:\nPre-Conditions:\n-\tTest environment with a peer SEPP instance (as cSEPP), which may be simulated.\n-\tThe SEPP under test and the peer SEPP have mutually authenticated and already established N32-c connection.\n-\tThe SEPP under test has established N32-f context with the peer SEPP. The SEPP under test is in possession of the N32-f peer information which contains remote PLMN ID of the peer SEPP.\n-\tThe tester shall have access to the interfaces of the SEPP under test and the peer SEPP.\nExecution Steps:\n1.\tThe tester computes an access token correctly, except that the PLMN ID appended in the subject claim of the access token is different from PLMN ID of the peer SEPP, and then includes the access token in a NF Service Request.\n2.\tThe peer SEPP sends to the SEPP under test a N32 message containing the NF Service Request with the access token.\n3.\tThe SEPP under test receives the incoming N32 message from the peer SEPP and verifies that the PLMN ID in the subject claim of the access token does not match the remote PLMN ID in the N32-f peer information in the N32-f context.\nExpected Results:\n-\tThe SEPP under test sends an error signalling message containing the N32-f Message Id and error code to the peer SEPP on the N32-c connection.\nExpected format of evidence:\nLogs and the communication flow saved in a .pcap file.\nRequirement Name: Confidential IEs replacement handling in original N32-f message\nRequirement Reference: TS 29.573 [6], clause 5.3.2.3\nRequirement Description:\nBased on the protection policy exchanged between the SEPPs, the sending SEPP prepares an input for the JWE ciphering and integrity protection as an array of free form JSON objects in the \"DataToIntegrityProtectAndCipher\" block with each entry containing either a HTTP header value or the value of a JSON payload IE of the API message being reformatted. The index value \"encBlockIdx\" in the payload part of DataToIntegrityProtectBlock points to the index of a header value or IE value in this input array.\nThreat References: TR 33.926 [4], clause G.2.4.2, Exposure of confidential IEs in N32-f message\nTest Case:\nPurpose:\nVerify that the SEPP under test correctly replaces information elements requiring encryption with the value \" encBlockIdx \".\nProcedure and execution steps:\nPre-Conditions:\n-\tSystem documentation of the SEPP under test, which details how raw public keys/certificates of peer SEPPs are to be configured and how internal log files can be accessed.\n-\tA second SEPP instance for N32 communication with the SEPP under test, which allows for the creation of custom N32-f messages. This system may be simulated.\n-\tBoth SEPPs are to be configured with a raw public key/certificate of their communication peer to be able to establish a N32-c connection.\n-\tAn arbitrary Data-type encryption policy which includes at least one information element requiring encryption on N32-f. The SEPP under test is to be configured with this policy.\nExecution Steps\n1.\tBoth SEPPs establish a mutual N32-c connection.\n2.\tVia the PLMN-internal interface, the tester provides the SEPP under test with a message to be forwarded to the peer SEPP on N32. This message needs to contain at least one information element that requires encryption according to the locally configured Data-type encryption policy.\n3.\tThe tester captures the related N32-f message after transformation by the SEPP under test.\nExpected Results:\nInformation elements in the original message that require encryption according to the Data-type encryption policy are replaced with the value \" encBlockIdx \".\nExpected format of evidence:\nEvidence suitable for the interface, e.g. text representation of the captured N32-f message.\nRequirement Name:\tCorrect handling of protection policy mismatch\nRequirement Reference: TS 33.501 [3], clause 13.2.3.6\nRequirement Description:\n\"When a SEPP receives a data-type encryption or modification policy on N32-c as specified in clause 13.2.2.2, it compares it to the one that has been manually configured for this specific roaming partner and IPX provider. If a mismatch occurs for one of the two policies, the SEPP performs one of the following actions, according to operator policy:\n-\tSend the error message as specified in TS 29.573 [6], clause 6.1.4.3.2,  to the peer SEPP\n-\tCreate a local warning\"\nThreat References: TR 33.926 [4], clause G.2.3.2, Incorrect handling for protection policy mismatch\nTest case:\nTest Name: TC_SEPP_POLICY_MISMATCH\nPurpose:\nVerify that the SEPP under test is able to identify the mismatch between the protection policies manually configured for a specific roaming partner and IPX provider and the protection policies received on N32-c connection, and take action accordingly.\nProcedure and execution steps:\nPre-Conditions:\n-\tTest environment with a peer SEPP instance (as cSEPP), which may be simulated.\n-\tThe SEPP under test and the peer SEPP have mutually authenticated and already established N32-c connection.\n-\tExchanging of Data-type encryption policies and Modification policies is required to be performed between the SEPP under test and the peer SEPP.\n-\tThe tester shall have access to the interfaces of the SEPP under test and the peer SEPP.\n-\tThe tester has configured on the SEPP under test the policies for receiving messages, i.e. the Data-type encryption policy d of the peer SEPP and the Modification policy m for the peer SEPP and an IPX provider I used for the peer SEPP.\n-\tThe tester has configured on the peer SEPP the policies for sending, i.e. the peer SEPP's Data-type encryption policy d' and the Modification policy m' for the IPX provider I used for the peer SEPP.\n-\t There are three cases to test:\na) \tthe data encryption policies d and d' are identical, the modification policies m and m' are different\nb)\tthe data encryption policies d and d' are different, the modification policies m and m' are identical\nc)\tboth the data encryption policies d and d' and the modification policies m and m' are different\nNOTE:\tThe test case below only applies in case the SEPP under test supports manual configuration of the data encryption policy and/or modification policy for the specific roaming partner and IPX provider.\n-\tThe tester has configured on SEPP under test the action to be taken for policy mismatch, which is sending error message.\nExecution Steps:\nFor each of the three cases above, the following is executed:\n1. The peer SEPP sends a Security Parameter Exchange Request message to the SEPP under test including the peer SEPP's Data-type encryption policy d', and the Modification policy m'.\n2. The SEPP under test stores the received Data-type encryption policy d' and the Modification policy m', then compare them with the Data-type encryption policy d and the Modification policy m configured on it.\nExpected Results:\n-\tThe SEPP under test sends an error signalling message to the peer SEPP on the N32-c connection or logs the error.\nExpected format of evidence:\nLogs and the communication flow saved in a .pcap file.\nRequirement Name:\tJWS profile restriction\nRequirement Reference: TS 33.501 [3], clause 13.2.4.9\nRequirement Description:\nSEPPs and IPXs follow the JWS profile as defined in TS 33.210 [8] with the restriction that they shall only use ES256 algorithm.\nThreat References: TR 33.926 [4], clause G.2.4.1, Use of weak JWS algorithm\nTest case:\nTest Name: TC_JWS_PROFILE_RESTRICTION\nPurpose:\nVerify that the SEPP under test is able to restrict the JWS profile to only use ES256 algorithm with IPX entities.\nProcedure and execution steps:\nPre-Conditions:\n-\tNetwork product documentation of the SEPP under test, containing the information about the supported signature algorithms for JWS operation.\n-\tTest environment with a peer SEPP instance, which may be simulated.\n-\tTest environment with one node simulating an IPX-provider, which supports JWS operation among others.\n-\tThe SEPP under test and the peer SEPP have mutually authenticated and already established N32-c connection.\n-\tThe tester shall have access to the interfaces of the SEPP under test, the peer SEPP, and the simulated IPX node.\n-\tThe tester has configured both the SEPP under test and peer SEPP for N32-f communication via the simulated IPX node.\n-\tThe tester has configured a JWS profile differently from what is required in TS 33.501 [3], clause 13.2.4.9 in the simulated IPX node for JWS operation.\nExecution Steps:\n1.\tThe tester shall check that the supported JWS algorithms in the network product documentation complies with the requirement on the restriction.\n2.\tThe tester sends a N32-f message from the peer SEPP via the intermediate IPX node towards the SEPP under test.\n3.\tThe IPX node modifies one or more attributes of the N32-f message from the peer SEPP and creates a modifiedDataToIntegrityProtect object, which is protected by the IPX node using the JWS algorithm configured by the tester.\n4.\tThe IPX node forwards the modified N32-f message to the SEPP under test.\n5.\tBased on the internal log files, the tester validates how the received N32-f message is handled by the SEPP under test.\nExpected Results:\n-\tThe modified N32-f message from the IPX node is discarded by the SEPP under test.\nExpected format of evidence:\nLogs and the communication flow saved in a .pcap file.\nRequirement Name:\tNo misplacement of encrypted IE in JSON object by IPX\nRequirement Reference: TS 33.501 [3], clause 13.2.3.4 and clause 13.2.4.1\nRequirement Description:\nAs specified in TS 33.501 [3] clause 13.2.3.4, the following basic validation rules are always applied irrespective of the policy exchanged between two roaming partners:\n-\tIEs requiring encryption will not be inserted at a different location in the JSON object.\nA SEPP verifies that an intermediate IPX has not moved or copied an encrypted IE to a location that would be reflected from the producer NF in an IE without encryption\" as specified in TS 33.501 [3], clause 13.2.4.1.\nThreat References: TR 33.926 [4], clause G.2.4.2 Exposure of confidential IEs in N32-f message\nTest case:\nTest Name: TC_NO_ENCRYPTED_IE_MISPLACEMENT\nPurpose:\nVerify that the SEPP under test is able to verify that an intermediate IPX has not misplaced (moved or copied) an encrypted IE to a different location in a JSON object that would be reflected from the producer NF for an IE without encryption.\nProcedure and execution steps:\nPre-Conditions:\n-\tSystem documentation of the SEPP under test, which details how raw public keys/certificates of peer SEPPs are to be configured and how internal log files can be accessed.\n-\tA second SEPP instance for N32 communication with the SEPP under test, which allows for the creation of custom N32-f messages. This system may be simulated.\n-\tBoth SEPPs are to be configured with a raw public key/certificate of their communication peer to be able to establish a N32-c connection.\n-\tTest environment with one node simulating an IPX-provider. This functionality includes parsing N32-f messages, creation of JSON-patches for message modifications and JWS operations, among others. It is configured with a modification policy.\n-\tAn arbitrary Data-type encryption policy which includes at least one information element requiring encryption on N32-f.\n-\tThe SEPP under test is to be configured with the Data-type encryption policy and the same modification policy as the one configured on the simulated IPX-system.\nExecution Steps:\n1.\tBoth SEPPs are configured for N32-f communication via the simulated IPX-system.\n2.\tBoth SEPPs establish a mutual N32-c connection.\n3.\tThe tester sends a N32-f message from the secondary SEPP via the IPX-system towards the SEPP under test. This message needs to contain at least one information element that requires encryption according to the locally configured Data-type encryption policy.\n4.\tThe IPX-system modifies the N32-f message according to its configured modification policy. The tester then inserts the encBlockIDx into a cleartext IE in the modified N32-f message before sending to the SEPP under test.\n5.\tThe IPX-system sends the modified N32-f message to the SEPP under test.\n6.\tBased on the internal log files, the tester validates how the received N32-f message is handled by the SEPP under test.\nExpected Results:\n-\tThe N32-f message is discarded by the SEPP under test. The error defined in the clause 6.1.5.3.7 of TS 29.573[6] is sent by the SEPP via N32-c interface.\n\nExpected format of evidence:\nLogs and the communication flow saved in a .pcap file.\nRequirement Name: Correct Handling of Inter-PLMN Routing\nRequirement Reference: TS 29.500 [7], clause 6.1.4.3.3\nRequirement Description:\nIf the SEPP receives an HTTP request from a NF with a request URI containing a telescopic FQDN and with a 3gpp-Sbi-Target-apiRoot header, the SEPP ignores the 3gpp-Sbi-Target-apiRoot header and route the request using the telescopic FQDN.\nThreat References: TR 33.926 [4], clause G.2.x.a, Inter-PLMN routing using the incorrect reference\nTest Case:\nTest Name: TC_CORRECT_INTER_PLMN_ROUTING\nPurpose:\nVerify that the SEPP under test correctly route the NF request to a remote PLMN when receving both a 3gpp-Sbi-Target-apiRoot header and a telescopic FQDN contained in the Request URI in the HTTP request from a NF.\nProcedure and execution steps:\nPre-Conditions:\n-\tSystem documentation of the SEPP under test, which details the methods supported for TLS protection between the NF and the SEPP and how internal log files can be accessed.\n-\tA peer SEPP instance of a remote PLMN for N32 communication with the SEPP under test, which may be simulated.\n-\tA NF for sending HTTP request to the remote PLMN of the peer SEPP via the SEPP under test, which may be simulated and supports both telescopic FQDN and the custom 3gpp-Sbi-Target-apiRoot header. The NF is configured with:\n-\tThe NF service profile containing service URI with \"https\" scheme and an authority of the remote PLMN for communication with the NF producer in the remote PLMN.\n-\tThe telescopic FQDN of the NF producer in the remote PLMN, having the FQDN of the SEPP under test as the trailing part.\n-\tThe FQDN of the SEPP under test.\n-\tThe SEPP under test is configured with:\n-\tThe FQDN of the peer SEPP in the remote PLMN.\n-\tThe security mechanism negotiated with the peer SEPP in the remote PLMN.\nExecution Steps\n1)\tThe NF sets up a TLS connection with the authoritative server for the configured telescopic FQDN, i.e. the SEPP under test.\n2)\tThe NF sends a HTTP service request with the request URI containing the configured telescopic FQDN within the TLS connection to the SEPP under test, before which the tester inserts in the HTTP request a 3gpp-Sbi-Target-apiRoot header set to the apiRoot of a NF producer in another PLMN different from the remote PLMN.\n3)\tThe NF sends a HTTP service request within the TLS connection to the SEPP under test, before which the tester inserts in the HTTP request a 3gpp-Sbi-Target-apiRoot header set to the apiRoot of the NF producer in the remote PLMN and changes the telescopic FQDN in request URI to be different from the configured one.\nExpected Results:\nAfter step 2), the peer SEPP received the HTTP request from the NF through the SEPP under test.\nAfter step 3), the peer SEPP did not receive the HTTP request from the NF through the SEPP under test\nExpected format of evidence:\nEvidence suitable for the interface, e.g. screenshot containing the operational results.\nRequirement Name: Correct Handling of the Custom HTTP Header with PRINS Security\nRequirement Reference: TS 29.500 [7], clause 6.1.4.3.4\nRequirement Description:\nThe 3gpp-Sbi-Target-apiRoot header is not used between SEPPs if PRINS security is negotiated between the SEPPs.\nThreat References: TR 33.926 [4], clause G.2.x.b, Tampering of target API root\nTest Case:\nTest Name: TC_HANDLING_CUSTOM_HTTPHEADER_WITH_PRINS\nPurpose:\nVerify that the SEPP under test correctly handle the 3gpp-Sbi-Target-apiRoot custom HTTP header received from a NF when PRINS security is negotiated with the peer SEPP in a remote PLMN.\nProcedure and execution steps:\nPre-Conditions:\n-\tSystem documentation of the SEPP under test, including the security mechanisms supported for protection between SEPPs.\n-\tA peer SEPP instance of a remote PLMN for N32 communication with the SEPP under test, which may be simulated.\n-\tA NF for sending HTTP request to the remote PLMN of the peer SEPP via the SEPP under test, which may be simulated and supports 3gpp-Sbi-Target-apiRoot header. The NF is configured to route all HTTP messages with inter PLMN FQDN as the \"authority\" part of the URI via the SEPP under test.\n-\tThe SEPP under test is configured with PRINS security as the security mechanism negotiated with the peer SEPP in the remote PLMN.\n-\tA TLS connection is setup between the SEPP under test and the peer SEPP in the remote PLMN for N32-f forwarding.\nExecution Steps\n1)\tThe NF initiates a HTTP message sent to the SEPP under test, which includes the 3gpp-Sbi-Target-apiRoot header containing the apiRoot of the target URI in the remote PLMN and the apiRoot in the request URI set to the apiRoot of the SEPP under test.\n2)\tThe SEPP under test forwards the HTTP request to the peer SEPP in the remote PLMN within the N32-f TLS tunnel.\nExpected Results:\nThe peer SEPP received the protected HTTP Request from the NF through the SEPP under test, in which the apiRoot in the request URI is the apiRoot of the target URI in the remote PLMN and no 3gpp-Sbi-Target-apiRoot header is present.\nExpected format of evidence:\nEvidence suitable for the interface, e.g. screenshot containing the operational results.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.3\tTechnical Baseline",
                            "text_content": "The present clause provides baseline technical requirements.\nThere are no SEPP-specific additions to clause 4.2.3.2.1 of TS 33.117 [2].\nThere are no SEPP-specific additions to clause 4.2.3.2.2 of TS 33.117 [2].\nThere are no SEPP-specific additions to clause 4.2.3.2.3 of TS 33.117 [2].\nThere are no SEPP-specific additions to clause 4.2.3.2.4 of TS 33.117 [2].\nThere are no SEPP-specific additions to clause 4.2.3.2.5 of TS 33.117 [2].\nThere are no SEPP-specific additions to clause 4.2.3.3 of TS 33.117 [2].\nThere are no SEPP-specific additions to clause 4.2.3.4 of TS 33.117 [2].\nThere are no SEPP-specific additions to clause 4.2.3.5 of TS 33.117 [2].\nThere are no SEPP-specific additions to clause 4.2.3.6 of TS 33.117 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.4\tOperating Systems",
                            "text_content": "There are no SEPP-specific additions to clause 4.2.4 of TS 33.117 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.5\tWeb Servers",
                            "text_content": "Requirement Name: Correct Handling of HTTPS Trust Anchoring\nRequirement Reference: TS 33.501 [3], clause 13.1.2\nRequirement Description: The SEPP maintains a set of trust anchors, each consisting of a list of trusted root certificates and a list of corresponding PLMN-IDs. Any given PLMN-ID appears in at most one trust anchor. During N32-c connection setup, the SEPP maps the PLMN-ID of the remote SEPP leaf (server or client) certificate to the associated trust anchor for the purposes of certificate chain verification. Only the root certificates in the associated list is treated as trusted during certificate chain verification. If the remote SEPP certificate contains multiple PLMN-IDs that are mapped to different trust anchors, then that certificate is rejected.\nThreat References: TR 33.926 [4], clause 5.3.3.7, Eavesdropping, clause 5.3.6.10, Insecure Network Services\nTest Case:\nTest Name: TC_CORRECT_TRUST_ANCHORING\nPurpose:\nVerify that the SEPP under test correctly implements trust anchoring when setting up HTTPS (TLS) connections.\nProcedure and execution steps:\nPre-Conditions:\n- \tSystem documentation of the SEPP under test, which details the methods supported for TLS protection on N32 and how internal log files can be accessed.\n- \tTwo simulated, independent root CAs, denoted RCA1 and RCA2\n-\tA peer SEPP instance of a remote PLMN for N32 communication with the SEPP under test, which may be simulated.\nExecution Steps\n1.\tThe tester selects two different PLMN IDs, denoted ID1 and ID2, e.g. ID1={MCC=262, MNC=01} and ID2={MCC=262, MNC=02}.\n2.\tThe tester configures two trust anchors in the SEPP under test, as follows:\n- \tID1 gets associated with RCA1 and\n-\tID2 gets associated with RCA2.\n3. The tester generates a server certificate for the SEPP under test with which it authenticates itself towards a peer SEPP. The peer SEPP is configured to accept these certificates.\n4.\tThe tester generates four TLS client certificates C1, C2, C3, C4 for the peer SEPP, as follows:\n-\tC1 contains ID1 and is signed by RCA1 (or a subCA which is signed only by RCA1)\n-\tC2 contains ID2 and is signed by RCA2 (or a subCA which is signed only by RCA2)\n-\tC3 contains ID1 and is signed by RCA2 (or a subCA which is signed only by RCA2)and\n-\tC4 contains both ID1 and ID2 and is signed by RCA1 or RCA2 (or a subCA which is signed by RCA1 or RCA2).\nNOTE 1: \tThe expression \"contains IDX\" means that there exists a Subject Alternative Name (SAN) field in the certificate that contains the value chosen in step 1. Examples of the SAN field contents are example.sepp.5gc.mnc02mcc262.3gppnetwork.org and example.sepp.5gc.mnc01mcc262.exampleipx.ipxnetwork.org\n5.\tThe peer SEPP is configured to authenticate itself using C1. If C1 was issued by a SubCA, then the SubCA certificate is included in the certificate chain which the peer SEPP uses to authenticate itself. The tester initiates an N32c connection from the SEPP under test towards the peer SEPP and observes whether the HTTPS connection succeeds, and, if not, documents the failure reasons as shown in the log files of the SEPP under test.\n6.\tThe tester repeats step 5,  replacing C1 with C2, C3, and C4 iteratively.\n7.\tSteps 3 to 6 are repeated in order to test for reversed client/server roles. Specifically, in step 3 the tester generates a client certificate (instead of a server certificate), in step 4 the tester generates four server certificates (instead of four client certificates), and in step 5 the tester initiates the connection from the peer SEPP (instead of initiating the connection from the SEPP under test).\nExpected Results:\nIn step 5, the TLS (HTTPS) connection setup succeeds for the iterations with C1 and C2 and fails for the iterations with C3 and C4.\nNOTE 2:\tThe iteration with C3 fails because the PLMN-ID indicated in the client certificate does not match any of the trusted certificates in the corresponding trust anchor. The iteration with C4 fails because the PLMN-IDs indicated in the client certificate are not associated with the same trust anchor.\nExpected format of evidence:\nThe evidence is in the form of log file entries associated with eight TLS connection establishment attempts, where entries for the cases with C1 and C2 indicate success, and entries for the cases with C3 and C4 indicate failure and show the corresponding failure reasons, including TLS Error Alert 48 (unknown_ca).\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.6\tNetwork Devices",
                            "text_content": "There are no SEPP-specific additions to clause 4.2.6 in TS 33.117 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.3\tSEPP-specific adaptations of hardening requirements and related test cases",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.3.1\tIntroduction",
                            "text_content": "The requirements proposed hereafter (with the relative test cases) aim to securing SEPP by reducing its surface of vulnerability. In particular, the identified requirements aim to ensure that all the default configurations of SEPP (including operating system software, firmware and applications) are appropriately set.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.2\tTechnical baseline",
                            "text_content": "There are no SEPP-specific additions to clause 4.3.2 in TS 33.117 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.3\tOperating systems",
                            "text_content": "There are no SEPP-specific additions to clause 4.3.3 in TS 33.117 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.4\tWeb servers",
                            "text_content": "There are no SEPP-specific additions to clause 4.3.4 in TS 33.117 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.5\tNetwork devices",
                            "text_content": "There are no SEPP-specific additions to clause 4.3.5 in TS 33.117 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.6\tNetwork functions in service-based architecture",
                            "text_content": "There are no SEPP-specific additions to clause 4.3.6 in TS 33.117 [2].\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.4\tSEPP-specific adaptations of basic vulnerability testing requirements and related test cases",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.4.1\tIntroduction",
                            "text_content": "There are no SEPP specific addtions to clause 4.4.1 of TS 33.117 [2].\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.2\tPort Scanning",
                            "text_content": "There are no SEPP specific addtions to clause 4.4.2 of TS 33.117 [2].\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.3\tVulnerability scanning",
                            "text_content": "There are no SEPP specific addtions to clause 4.4.3 of TS 33.117 [2].\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.4\tRobustness and fuzz testing",
                            "text_content": "The test cases under clause 4.4.4 of TS 33.117 [2] are applicable to SEPP.\n\nThe interface defined for the SEPP are in 4.2.4 of TS 23.501 [8].\n\nAccording to clause 4.4.4 of TS 33.117 [2], the transport protocols available on the interfaces providing IP-based protocols need to be robustness tested. Following TCP/IP layer model and considering all the protocols over transport layer, for SEPP, the following interfaces and protocols are in the scope of the testing:\n\n-\tFor SBI: the TCP, HTTP2 and JSON protocols.\n-\tFor N32-C: The TCP, HTTP2 and JSON procotols.\n-\tFor N32-F: The TCP, HTTP2 and JSON procotols.\n\nNOTE: There could be other interfaces and/or protocols requiring testing under clause 4.4.4 of TS 33.117 [2]\n\n\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "",
                                    "table number": 1,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
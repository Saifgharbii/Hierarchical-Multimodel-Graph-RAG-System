{
    "document_name": "33310-i20.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Specification has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "Introduction",
            "description": "For 3GPP systems there is a need for truly scalable entity Authentication Framework (AF) since an increasing number of network elements and interfaces are covered by security mechanisms.\nThis specification provides a highly scalable entity authentication framework for 3GPP network nodes. This framework is developed in the context of the Network Domain Security work item, which effectively limits the scope to the control plane entities of the core network. Thus, the Authentication Framework will provide entity authentication for the nodes that are using NDS/IP.\nFeasible trust models (i.e. how CAs are organized) and their effects are provided. Additionally, requirements are presented for the used protocols and certificate profiles, to make it possible for operator IPsec and PKI implementations to interoperate.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The scope of this Technical Specification is limited to authentication of network elements, which are using NDS/IP or TLS, and to Certificate Enrolment for Base Stations as described in the present document.\nIn the case of NDS/IP this specification includes both the authentication of Security Gateways (SEG) at the corresponding Za-interfaces and the authentication between NEs and between NEs and SEGs at the Zb-interface. Authentication of end entities (i.e. NEs and SEGs) in the intra-operator domain is considered an internal issue for operators. This is quite much in line with [1] which states that only Za is mandatory and that the security domain operator can decide if the Zb-interface is deployed or not, as the Zb-interface is optional for implementation. Validity of certificates may be restricted to the operator's domain in case of Zb interface or in case of Za-interface between two security domains of the same operator.\nNOTE:\tIn case two SEGs interconnect separate network regions under a single administrative authority (e.g. owned by the same mobile operator) then the Za-interface is not subject to interconnect agreements, but the decision on applying Za-interface is left to operators.\nThe NDS architecture for IP-based protocols is illustrated in figure 1.\nThe NDS (Network Data Service) architecture for IP-based protocols is depicted in Figure 1, illustrating the network data service's role in supporting IP-based communication. The figure shows the network data service as a central component, responsible for providing data services to network devices. It includes various components such as the network data service controller (NDSC), network data service provider (NDSP), and network data service provider (NDSP). The figure also highlights the role of the network data service provider (NDSP) in providing data services to network devices, such as routers and switches. The NDS architecture is designed to support IP-based protocols and ensure efficient data transfer and management.\nFigure 1: NDS architecture for IP-based protocols [1]\nIn the case of TLS this Specification concentrates on authentication of TLS entities across inter-operator links. For example, TLS is specified for inter-operator communications between IMS and non-IMS networks TS 33.203 [9] and on the Zn' interface in GBA TS 33.220 [10]. Authentication of TLS entities across intra-operator links is considered an internal issue for operators. However, NDS/AF can easily be adapted to the intra-operator use case since it is just a simplification of the inter-operator case when all TLS NEs and the PKI infrastructure belong to the same operator. Validity of certificates may be restricted to the operator's domain. An Annex contains information on the manual handling of TLS certificates in case automatic enrolment and revocation according to NDS/AF for TLS is not implemented.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies.  In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TS 33.210: \"3rd Generation Partnership Project; Technical Specification Group Services and System Aspects; 3G Security; Network domain security; IP network layer security\".\n[2]\tIETF RFC 2986: \"PKCS#10 Certification Request Syntax Specification Version 1.7\".\n[3]\tVoid.\n[4]\tIETF RFC 4210: \"Internet X.509 Public Key Infrastructure Certificate Management Protocol\".\n[5]\tIETF RFC 2252: \"Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions\".\n[6]\tVoid.\n[7]\t\"PKI basics – A Technical Perspective\", November 2002, .\n[8]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[9]\t3GPP TS 33.203: \"Access security for IP-based services\".\n[10]\t3GPP TS 33.220: \"Generic Authentication Architecture: Generic Bootstrapping Architecture\".\n[11]\tVoid.\n[12]\tVoid.\n[13]\tVoid.\n[14]\tIETF RFC 5280: \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\".\n[15]\tIETF RFC 4945: \"The Internet IP Security PKI Profile of IKEv1/ISAKMP, IKEv2, and PKIX\".\n[16]\tVoid.\n[17]\tVoid.\n[18]\tIETF  RFC 6712: \"Internet X.509 Public Key Infrastructure -- HTTP Transfer for the Certificate Management Protocol (CMP)\".\n[19]\tIETF RFC 4211: \"Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)\".\n[20]\tIETF RFC 2818: \"HTTP Over TLS\".\n[21]\tIETF RFC 5922: \"Domain Certificates in the Session Initiation Protocol (SIP)\".\n[22]\tIETF RFC 5924: \"Extended Key Usage (EKU) for Session Initiation Protocol (SIP) X.509 Certificates\".\n[23]\tVoid.\n[24]\tVoid.\n[25]\tIETF RFC 1035: \"Domain Names - Implementation and Specification\".\n[26]\tVoid.\n[27]\tVoid.\n[28]\tVoid.\n[29]\tVoid.\n[30]\tVoid.\n[31]\t3GPP TS 23.251: \"Network sharing; Architecture and functional description\".\n[32]\t3GPP TS 32.508: \"Telecommunication management; Procedure flows for multi-vendor plug-and-play eNode B connection to the network\".\n[33]\t3GPP TS 32.509: \"Telecommunication management; Data formats for multi-vendor plug and play eNode B connection to the network\".\n[34]\tVoid.\n[35]\tVoid.\n[36]\tVoid.\n[37]\tVoid.\n[38]\tVoid.\n[39]\tVoid.\n[40]\tVoid.\n[41]\tVoid.\n[42]\tIETF RFC 7296: \"Internet Key Exchange Protocol Version 2 (IKEv2)\".\n[43]\tIETF RFC 7427: \"Signature Authentication in the Internet Key Exchange Version 2 (IKEv2)\".\n[44]\tVoid.\n[45]\tVoid.\n[46]\tVoid.\n[47]\tIETF RFC 6960: \" X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP\".\n[48]\tIETF RFC 8201: \"Path MTU Discovery for IP version 6\".\n[49]\tIETF RFC 8446: \"The Transport Layer Security (TLS) Protocol Version 1.3\".\n[50]\tIETF RFC 9113: \"HTTP/2\".\n[51]\tIETF RFC 6066: \"Transport Layer Security (TLS) Extensions: Extension Definitions\".\n[52]\tIETF RFC 6125: \"Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)\".\n[53]\tIETF RFC 7633: \"X.509v3 Transport Layer Security (TLS) Feature Extension\".\n[54]\tIETF RFC 5246: \"The Transport Layer Security (TLS) Protocol Version 1.2\".\n[55]\t3GPP TS 23.003: \"Numbering, addressing and identification\".\n[56]\t3GPP TS 29.510: \"5G System; Network function repository services; Stage 3\".\n[57]\t3GPP TS 29.571: \"5G System; Common Data Types for Service Based Interfaces; Stage 3\".\n[58]\tIETF RFC 6979: \" Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)\".\n[59]\tCA-Browser-Forum-BR-1.8.0, August 2021, .\n[60]\tGSMA FS.34  Key Management for 4G and 5G inter-PLMN Security, .\n[61]\tIETF RFC 9310: \"X.509 Certificate Extension for 5G Network Function Types\".\n[62]\t3GPP TS 33.501: \"Security architecture and procedures for 5G system\".\n[63]\tIETF draft-ietf-lamps-nf-eku-01: \"X.509 Certificate Extended Key Usage (EKU) for 5G Network Functions\".\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tDefinitions",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the definitions given in TR 21.905 [8] and the following definitions apply:\nCA: \"Certification Authority\", a PKI entity issuing X.509 certificates\nInterconnection CA: The CA that issues cross-certificates on behalf of a particular operator to the SEG CAs of other domains with which the operator’s SEGs have interconnection.\nInterconnect Agreement: In the context of this specification an interconnect agreement is an agreement by two operators to establish secure communications. This may be for the purpose of protecting various forms of communications between the operators, e.g. GPRS roaming, MMS interconnect, WLAN roaming and IMS interconnect.\nLocal CR: Repository that contains cross-certificates.\nLocal CRL: Repository that contains cross-certificate revocations.\nOSCP: Online Certificate Status Protocol. Protocol for revocation checking which is can also be used offline in so called “OCSP stapling”. Can be used instead of CRL or together with CRL.\nPSK: Pre-Shared Key. Method of authentication used by IKE between SEG in NDS/IP [1].\nPublic CRL: Repository that contains revocations of SEG and CA certificates and can be accessed by other operators.\nRA: \"Registration Authority\", an optional PKI entity that does not issue certificates and is separate from the CA.\nNOTE: An RA is delegated by a CA to receive and evaluate certificate signing requests, potentially verify them, and forward them to the CA which will issue an X.509 certificate.\nRA/CA: The PKI entity or entities in the operator network issuing certificates, and making them available to base stations via CMPv2.\nNOTE: If used in context of receiving certificate signing requests from a base station, the term may mean RA. If used in context of issuing certificates, the term means CA.\n: The CA that issues end entity certificates to SEGs within a particular operator’s domain.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in TR 21.905 [8] and the following abbreviations apply:\nAF\tAuthentication Framework\nCA\tCertification Authority\nCR\tCertificate Repository\nCRL\tCertificate Revocation List\nGBA\tGeneric Bootstrapping Architecture\nIMS\tIP Multimedia Subsystem\nNDS\tNetwork Domain Security\nOCSP\tOnline Certificate Status Protocol\nPKI\tPublic Key Infrastructure\nPOP\tProof Of Possession\nPSK\tPre-Shared Key\nRA\tRegistration Authority\nSEG\tSecurity Gateway\nVPN\tVirtual Private Network\nZa\tInterface between SEGs belonging to different networks/security domains (a Za interface may be an intra or an inter operator interface).\nZb\tInterface between SEGs and NEs and interface between NEs within the same network/security domain\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tIntroduction to Public Key Infrastructure (PKI)",
            "description": "PKI Forum's \"PKI basics – A Technical Perspective\" [7] provides a concise vendor neutral introduction to the PKI technology. Thus only two cross-certification aspects are described in this introduction section.\nCross-certification is a process that establishes a trust relationship between two authorities. When an authority A is cross-certified with authority B, the authority A has chosen to trust certificates issued by the authority B. Cross-certification process enables the users under both authorities to trust the other authority's certificates. Trust in this context equals being able to authenticate.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tManual Cross-certification",
                    "description": "",
                    "summary": "",
                    "text_content": "Mutual cross-certifications are established directly between the authorities. This approach is often called manual cross-certification. In manual cross-certification the authority makes decisions about trust locally. When an authority A chooses to trust an authority B, the authority A signs the certificate of the authority B and distributes the new certificate (B's certificate signed by A) locally.\nThe disadvantage of this approach is that it often results in scenarios where there needs to be a lot of certificates available for the entities doing the trust decisions: There needs to be a certificate signed by the local authority for each security domain the local authority wishes to trust. However, all the certificates can be configured locally and are locally signed, so the management of them is often flexible.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.2\tCross-certification with a Bridge CA",
                    "description": "",
                    "summary": "",
                    "text_content": "The bridge CA is a concept that reduces the amount of certificates that needs to be configured for the entity that does the certificate checking. The name \"bridge\" is descriptive; when two authorities are mutually cross-certified with the bridge, the authorities do not need to know about each other. Authorities can still trust each other because the trust in this model is transitive (A trusts bridge, bridge trusts B, thus A trusts B and vice versa). The bridge CA acts like a bridge between the authorities. However, the two authorities shall also trust that the bridge does the right thing for them. All the decisions about trust can be delegated to the bridge, which is desirable in some use cases. If the bridge decides to cross-certify with an authority M, the previously cross-certified authorities start to trust M automatically.\nstyle cross-certifications are useful in scenarios where all entities share a common authority that everybody believes to work correctly for them. If an authority needs to restrict the trust or access control derived from the bridge CA, it additionally needs to implement those restrictions.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "5\tArchitecture and use cases of the NDS/AF",
            "description": "The following types of certification authority are defined:\n-\tSEG CA: A CA that issues end entity certificates to SEGs within a particular operator's domain.\n-\t: A CA that issues end entity IPsec certificates to NE's within a particular operator's domain. Certificates issued by an  shall be restricted to the Zb-interface.\n-\tTLS client CA: A CA that issues end entity TLS client certificates to TLS entities within a particular operator's domain.\n-\tTLS server CA: A CA that issues end entity TLS server certificates to TLS entities within a particular operator's domain.\n-\tInterconnection CA: A CA that issues cross-certificates on behalf of a particular operator to the SEG CAs, TLS client CAs and TLS server CAs of other domains with which the operator's SEGs and TLS entities have interconnection.\nThe public key of the interconnection CA shall be stored securely in each SEG and TLS entity within the operator's domain. This allows the SEG and TLS entity to verify cross-certificates issued by its operator's Interconnection CA.\nAn operator may choose to combine two or more of the above CAs. For example, the same CA may be used to issue end entity TLS and IPsec certificates. Furthermore, the same CA may be used to issue both end entity certificates and cross-certificates.\nThe NDS/AF is initially based on a simple trust model (see Annex B) that avoids the introduction of transitive trust and/or additional authorisation information. The simple trust model implies manual cross-certification.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "5.1\tPKI architecture for NDS/AF",
                    "description": "",
                    "summary": "",
                    "text_content": "This chapter defines the PKI architecture for the NDS/AF. The goal is to define a flexible, yet simple architecture, which is easily interoperable with other implementations.\nThe architecture described below uses a simple access control method, i.e. every element which is authenticated is also provided service. More fine-grained access control may be implemented, but it is out of scope of this specification.\nThe architecture does not rely on bridge CAs, but instead uses direct cross-certifications between the security domains. This enables easy policy configurations in the SEGs and TLS entities.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.1.1\tGeneral architecture",
                            "text_content": "Unless the operator chooses to combine CAs, each security domain has at least one  , , TLS client CA or TLS server CA, and one Interconnection CA dedicated to it.\nThe SEG CA of the domain issues certificates to the SEGs in the domain that have interconnection with SEGs in other domains i.e. Za-interface. The SEG certificate can be used also in communication with an NE over the Zb-interface. An  issues certificates to NE's for communication between NEs and between NE and SEGs within the responsible domain i.e. Zb interface. The TLS client CA of the domain issues certificates to the TLS clients in that domain that need to establish TLS connections with TLS servers in other domains. The TLS server CA of the domain issues certificates to the TLS servers in that domain that need to establish TLS connections with TLS clients in other domains. The Interconnection CA of the domain issues certificates to the SEG CAs, TLS client CA or TLS server CA, of other domains with which the operator’s SEGs and TLS entities have interconnection. This specification describes the profile for the various certificates that are needed. Also a method for creating the cross-certificates is described.\nIn general, all of the certificates shall be based on the Internet X.509 certificate profile [14].\nIn the following, the architecture for issuing IPsec certificates using SEG CAs is described.\nThe SEG CA shall issue certificates for SEGs that implement the Za interface. When SEG of the security domain A establishes a secure connection with the SEG of the domain B, they shall be able to authenticate each other. The mutual authentication is checked using the certificates the SEG CAs issued for the SEGs. When an interconnect agreement is established between the domains, the Interconnection CA cross-certifies the SEG CA of the peer operator. The created cross-certificates need only to be configured locally to each domain. The cross-certificate, which Interconnection CA of security domain A created for the SEG CA of security domain B, shall be available for the domain A SEG which provides the Za interface towards domain B. Equally the corresponding certificate, which the Interconnection CA of the security domain B created for the SEG CA of security domain A, shall be available for the domain B SEG which provides Za interface towards domain A.\nThe general architecture for IPsec certificate based authentication of SEGs and NEs is illustrated in Figure 2.\nNOTE 1: A potential NE CAA has not been depicted in the Figure 2, in order not to overload it.\n\nThe figure depicts the trust validation path in the context of Network Function Virtualization (NFV) and Internet Protocol (IP) networks. It illustrates the various stages of trust validation, including authentication, authorization, and encryption, and how they are implemented in the network. The figure also highlights the importance of security protocols and the role of network functions virtualization (NFV) in ensuring the security of the network.\nFigure 2: Trust validation path in the context of NDS/IP\nAfter cross-certification, the SEGa is able to verify the path: SEGb -> SEG CAB  -> Interconnection CAA. Only the certificate of the Interconnection CAA in domain A needs to be trusted by entities in security domain A.\nEqually the SEGb is able to verify the path: SEGa -> SEG CAA -> Interconnection CAB. The path is verifiable in domain B, because the path terminates to a trusted certificate (Interconnection CAB of the security domain B in this case).\nThe Interconnection CA signs the second certificate in the path. For example, in domain A, the certificate for SEG CA B is signed by the Interconnection CA of domain A when the cross-certification is done.\nIn the following, the architecture for issuing TLS certificates using TLS CAs is described.\nThe TLS client CA shall issue certificates for TLS clients in its domain. Similarly the TLS server CA shall issue certificates for TLS servers in its domain. When a TLS entity of the security domain A establishes a secure connection with a TLS entity of the domain B, they shall be able to authenticate each other. The mutual authentication is checked using the certificates the TLS client/server CAs issued for the TLS entities. When an interconnect agreement is established between the domains, the Interconnection CA cross-certifies the TLS client/server CAs of the peer operator. The created cross-certificates need only to be configured locally to each domain. The cross-certificate, which Interconnection CA of security domain A created for the TLS client/server CAs of security domain B, shall be available for the domain A TLS entities which need to communicate with domain B. Equally the corresponding certificate, which the Interconnection CA of the security domain B created for the TLS client/server CAs of security domain A, shall be available for the domain B TLS entities which need to communicate with domain A.\nThe general architecture for authentication of TLS entities is illustrated in Figure 2a.\n\nIn the context of TLS, the trust validation path is a crucial component that ensures the integrity and authenticity of the communication between the sender and the receiver. This path is essential for preventing man-in-the-middle attacks and ensuring that the data is transmitted securely. The trust validation path is typically implemented using a combination of cryptographic techniques, such as digital signatures, digital certificates, and digital signatures, to verify the identity of the sender and the receiver. This ensures that the data is transmitted securely and that the sender and the receiver are who they claim to be.\nFigure 2a: Trust validation path in the context of TLS\nAfter cross-certification, the TLS client A is able to verify the path: TLS server B -> TLS server CAB  -> Interconnection CAA. Only the certificate of the Interconnection CAA in domain A needs to be trusted by entities in security domain A.\nEqually the TLS server B is able to verify the path: TLS client A -> TLS client CAA -> Interconnection CAB. The path is verifiable in domain B, because the path terminates to a trusted certificate (Interconnection CAB of the security domain B in this case).\nThe Interconnection CA signs the second certificate in the path. For example, in domain A, the certificates for TLS server CA B and TLS client CA B are signed by the Interconnection CA of domain A when the cross-certification is done.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.2\tUse cases",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.2.1\tOperator Registration: Creation of interconnect agreement",
                            "text_content": "SEGs or TLS entities of two different security domains need to establish a secure connection, when the operators make an interconnect agreement. The first technical step in creating the interconnect agreement between domains is the creation of cross-certificates by the Interconnection CAs of the two domains.\nInter-operator cross-certification can be done using different protocols, but the certification authority shall support the PKCS#10 method for certificate requests as specified in RFC 2986 [2]. The SEG CA, TLS client CA and TLS server CA create a PKCS#10 certificate request, and send it to the other operator's Interconnection CA. The method for transferring the PKCS#10 request is not specified, but the transfer method shall be secure. The PKCS#10 can be transferred e.g. HTTPS, in a flash drive, or be send in a signed email. The PKCS#10 request contains the public key of the authority and the name of the authority requesting the cross-certificate. When the Interconnection CA accepts the request, a new cross-certificate is created for the requesting CA. The Interconnection CA shall make the new cross-certificate available to SEGs and TLS entities in its own domain that need to use it. Cross-certificates on the other domain's SEG CA's are stored in a local CR (Certificate Repository) which all SEGs that need to communicate with the other domains shall access using LDAP as specified in RFC 2252  [5]. Cross-certificates on TLS client CAs and TLS server CAs are made available to TLS entities, e.g. by storing them in a file of trusted CAs on the TLS entity, or by storing them in a local CR (Certificate Repository) which all TLS entities that need to communicate with the other domain shall access e.g. using LDAP as specified in RFC 2252  [5].\nThe cross-certification is a manual operation, and thus PKCS#10 is a suitable solution for the interconnect agreement.\nCreation of an interconnect agreement only involves use of the private keys of the Interconnection CAs. There is no need for the operators to use the private keys of their respective SEG CAs, TLS client CAs or TLS server CAs in forming an interconnect agreement.\nWhen creating the new cross-certificate, the Interconnection CA should use basic constraint extension (according to section 4.2.1.9 of RFC 5280 [14]) and set the path length to zero. This inhibits the new cross-certificate to be used in signing new CA certificates. The validity of the certificate should be set sufficiently long. The cross-certification process needs to be done again when the validity of the cross-certificate is ending.\nWhen the new cross-certificate is available to the SEG, all that needs to be configured in the SEG is the DNS name or IP address of the peering SEG gateway. The authentication can be done based on the created cross-certificates.\nWhen the new cross-certificate is available to a TLS entity, it allows that TLS entity to authenticate TLS entities in the peering network. Authentication is done based on the created cross-certificates.\nThe certificate hierarchy in the case of two peering operators is illustrated in Figure 3.\n\nThe figure depicts a hierarchical structure of certificates, illustrating the various levels of security and authentication required in a 5G network. The diagram illustrates the different types of certificates, such as private, public, and enterprise, and their corresponding security levels. This helps in understanding the complexity of the 5G network security architecture and the need for a robust certificate management system.\nFigure 3: Certificate Hierarchy\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.2\tEstablishment of secure communications",
                            "text_content": "After establishing an interconnect agreement and finishing the required preliminary certificate management operations as specified in clause 5.2.1, the operators configure their SEGs for SEG-SEG connection, and the SAs are established as specified by NDS/IP [1].\nIn each connection configuration, the remote SEG DNS name or IP address is specified. Only the local Interconnection CA and  are configured as trusted CAs. Because of the cross-certification, any operator whose  has been cross-certified can get access using this VPN connection configuration.\nThe following is the flow of connection negotiation from the point of view of Operator A's SEG (initiator). Operator B's SEG (responder) shall behave in a similar fashion. In case of any failure in following steps, SEG A will treat this as an error and abort the procedure.\n-\tDuring connection initiation, the initiating Operator A's SEG A provides its own SEG certificate and the corresponding digital signature in the IKE_AUTH exchange for IKEv2;\n-\tSEG A receives the remote SEG B certificate and signature;\n-\tSEG A verifies the remote SEG B signature;\n-\tSEG A checks the validity of the SEG B certificate by a revocation check to Operator B’s CRL databases or OCSP server. If a SEG cannot successfully perform the revocation check, it shall treat this as an error and abort tunnel establishment;\n-\tSEG A verifies the SEG B certificate by executing the following actions:\n-\t\tSEG A fetches the cross-certificate for Operator B's SEG CA from Operator A's Certificate Repository or from a local cache.\n-\tSEG A checks the validity of the cross-certificate for Operator B's SEG CA by a revocation check to Operator A's Interconnection CA CRL database or OCSP server. If a SEG cannot successfully perform the revocation check, it shall treat this as an error and abort tunnel establishment;\n-\tSEG A verifies the cross-certificate for Operator B's SEG CA using Operator A's Interconnection CA's certificate. Operator A's Interconnection CA's certificate shall be verified if the Interconnection CA is not a top-level CA, otherwise the Interconnection CA's public key is implicitly trusted.\n-     SEG A verifies the SEG B certificate using cross-certificate for Operator B’s SEG CA.\nWhen IKEv2 has been initiated, then the IKE_AUTH exchange is now completed. Now the IKEv2 CREATE_CHILD_SA exchange can be initiated as described in NDS/IP [1] with PSK authentication.\nNOTE:\tThis specification provides authentication of SEGs in an \"end-to-end\" fashion as regards to interconnect traffic (operator to operator). If NDS/AF (IKE) authentication were to be used for both access to the transport network (e.g. GRX) and for the end-to-end interconnect traffic, IPsec mechanisms and policies such as iterated tunnels or hop-by-hop security would need to be used. However, it is highlighted that the authentication framework specified is independent of the underlying IP transport network.\nIn this case there is no need for cross-certification. Both end entity certificates belong to the same administrative domain and thus authorization check resolves to the same top level CA.\nThe following is the flow of connection negotiation from the point of view of NE-A (initiator). NE-B (or SEG-B) from the same domain (responder) shall behave in a similar fashion. In case of any failure in following steps, NE A will treat this as an error and abort the procedure.\n-\tDuring connection initiation, the initiating Operator A's NE-A provides its own NE certificate and the corresponding digital signature in the IKE_AUTH exchange for IKEv2;\n-\tNE A receives the NE B (or SEG B) certificate and signature;\n-\tNE A verifies the NE B (or SEG B) signature;\n-\tNE A checks the validity of the NE B (or SEG B) certificate by a revocation check to the CRL databases or OCSP server of the same domain. If a NE cannot successfully perform the CRL check, it shall treat this as an error and abort tunnel establishment;\n-    NE A verifies the NE B (or SEG B) certificate using Operator NE CA certificate.\nWhen IKEv2 has been initiated, then the IKE_AUTH exchange is now completed. Now the IKEv2 CREATE_CHILD_SA exchange can be initiated as described in NDS/IP [1] with PSK authentication.\nAfter establishing a interconnect agreement and finishing the required preliminary certificate management operations as specified in clause 5.2.1, the operators configure their TLS entities for secure interconnection. The exact process for establishing the TLS connections is dependent on the application protocol and is outside the scope of this specification. However, the general flow is described in the remainder of this clause.\nThe local Interconnection CA and TLS client/server CAs are configured as trusted CAs in the TLS entity typically by storing them in a file of trusted CAs on the TLS entity. The cross-certificates on the TLS client/server CAs of the remote operator are also made available to the TLS entity, e.g. by storing them in a file of trusted CAs on the TLS entity, or by storing them in a local CR (Certificate Repository) which all TLS entities that need to communicate with the other domain shall access e.g. using LDAP. Because of the cross-certification, any operator whose TLS client CA or TLS server CA has been cross-certified by another operator can establish TLS connections with that other operator.\nThe following is the connection establishment from the point of view of a TLS client in Operator A (TLSa) and a TLS server in Operator B (TLSb). The case where the TLS client is in Operator B and the TLS server is in Operator A is treated in a similar fashion. The flow is based on the TLS handshake protocol as described in RFC 8446 [49]. In case of any failure in following steps, TLSa or TLSb will treat this as an error and abort the procedure.\n-\tDuring connection initiation, the TLSa sends a ClientHello message to TLSb. TLSb responds with a ServerHello message followed by a Certificate message, an optional CertificateRequest message, and other additional messages depending on the TLS version and options. The Certificate message will contain TLSb's certificate (or certificate chain)that was issued by Operator B's TLS server CA. The CertificateRequest message is sent if TLSb wants to authenticate TLSa using certificates in TLS, TLSa may otherwise be authenticated at a later stage using the application layer.\n-\tTLSa receives the messages from TLSb\n-\tTLSa verifies the received TLS messages using TLSb's public key\n-\tTLSa checks the validity of TLSb's certificate by a revocation check to Operator B’s CRL databases or OCSP server. If a TLS peer cannot successfully perform the revocation check, it shall treat this as an error and abort the TLS handshake\n-\tTLSa verifies TLSb's certificate using the cross-certificate for Operator B's TLS server CA by executing the following actions:\n-\tTLSa fetches the cross-certificate for Operator B's TLS server CA from Operator A's Certificate Repository, from a local cache of the Certificate Repository on TLSa, or from a local certificate store on TLSa if a separate Certificate Repository is not used.\n-\tTLSa checks the validity of the cross-certificate for Operator B's TLS server CA by a revocation check to Operator A's Interconnection CA CRL database or OCSP server. If a TLS peer cannot successfully perform the revocation check, it shall treat this as an error and abort the TLS handshake;\n-\tTLSa verifies the cross-certificate for Operator B's TLS server CA using Operator A's Interconnection CA's certificate if the Interconnection CA is not a top-level CA, otherwise the Interconnection CA's public key is implicitly trusted.\n-     TLSa verifies TLSb’s certificate using the cross-certificate for Operator B’s TLS server CA.\n-\tIf TLSb requested a certificate using the CertificateRequest message, then TLSa responds with a Certificate message followed by a CertificateVerify message and a Finished message. The Certificate and CertificateVerify messages are only sent if the Server requests a certificate. If present, the Certificate message will contain TLSa's certificate (or certificate chain) that was issued by Operator A's TLS client CA. The CertificateVerify message is used to provide explicit verification of a client certificate.\n-\tTLSb receives the messages from TLSa.\n-\tIf TLSb requested a certificate using the CertificateRequest message, then TLSb verifies the CertificateVerify message using TLSa’s public key.\n-\tIf TLSb requested a certificate using the CertificateRequest message, then TLSb checks the validity of TLSa's certificate by a revocation check to Operator A's CRL databases or OCSP server. If a TLS entity cannot successfully perform both revocation checks, it shall treat this as an error and abort the TLS handshake.\n-\tIf TLSb requested a certificate using the CertificateRequest message, then TLSb validates TLSa's certificate using the cross-certificate for Operator A's TLS client CA by executing the following actions:\n-\tTLSb fetches the cross-certificate for Operator A's TLS client CA from Operator B's Certificate Repository, from a local cache of the Certificate Repository on TLSb, or from a local certificate store on TLSb if a separate Certificate Repository is not used.\n-\tTLSb checks the validity of the cross-certificate for Operator A's TLS client CA by a revocation check to Operator B's Interconnection CA CRL database or OCSP server. If a TLS entity cannot successfully perform the revocation check, it shall treat this as an error and abort the TLS handshake\n-\tTLSb verifies the cross-certificate for Operator A's TLS client CA using Operator B's Interconnection CA's certificate if the Interconnection CA is not a top-level CA, otherwise the Interconnection CA's public key is implicitly trusted.\n-\tTLSb verifies TLSa’s certificate using the cross-certificate for Operator A’s TLS client CA.\n\nWhen both Finished messages has been sent, then the secure communications can take place over the TLS connection.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.3\tOperator deregistration: Termination of interconnect agreement",
                            "text_content": "When an interconnect agreement is terminated or due to an urgent service termination need, all concerned SEG peers shall remove the IPsec SAs using device-specific management methods, while all concerned TLS entities shall terminate any ongoing TLS sessions with the peer network and not permit those sessions to be resumed (e.g. by prohibiting TLS session resumption).\nEach concerned operator shall also list the cross-certificate created for the Interconnection CA, , TLS client CA and TLS server CA of the terminated operator in his own local CRL or OCSP server.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.3a\tInterconnection CA registration",
                            "text_content": "In principle only one Interconnection CA shall be used within the operator's network, but using more than one Interconnection CA is possible (in which case the public keys of all the operator’s interconnection CAs should be installed in the operator’s SEGs or TLS entities). The involved actions in Interconnection CA registration are those as described in the cross-certification part of clause 5.2.1: 'Operator Registration: creation of interconnect agreement'. Such a situation may exist if the Interconnection CA functions are to be moved from one responsible organisation to another (e.g. outsourcing of CA services).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.3b\tInterconnection CA deregistration",
                            "text_content": "If an Interconnection CA is removed from the network, it shall be assured that all certificates that have been issued by that CA to SEG or TLS CAs, and have not expired yet, shall be listed in the CRLs or OCSP servers.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.3c\tInterconnection CA certification creation",
                            "text_content": "The Interconnection CA certificate may not be the top-level CA of the operator, which means that the Interconnection CA certificate is not self-signed. If the Interconnection CA certificate is self-signed then it needs to be securely transferred to each SEG or TLS entity and stored within secure memory otherwise it can be managed in the same way as a SEG or TLS entity certificate.\nThe Interconnection CA certificate shall have a 'longer' lifetime than   or  certificates in order to avoid the cross-certification actions that are needed each time an Interconnection CA certificate has to be renewed.\nNOTE:\tThere is no need to involve other operators when creating an Interconnection CA certificate.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.3d\tInterconnection CA certification revocation",
                            "text_content": "If an Interconnection CA key pair gets compromised then a hacker could use the keys to issue himself   or  certificates which in turn could be used to issue SEG or TLS entity certificates. Since however the trusted Interconnection CA certificates are stored locally on the SEG or TLS entity device or in a dedicated repository (i.e. received Interconnection CA certificates within the IKE payload or TLS handshake shall not be accepted), the hacker also needs to compromise the SEG, TLS entity, or the local repository to be able to set up a secure connection.\nExisting secure connections need not be torn down. The old cross-certificates - and any other certificates - issued by the Interconnection CA shall be taken out of service by listing them in the Interconnection CA’s CRL or OCSP server (provided the operator still has the key available to sign) and removing them from the dedicated repository. If the Interconnection CA certificate is self-signed then it shall be removed from each of the operator’s SEGs and TLS entities. If the Interconnection CA certificate is issued by a higher level CA of the operator, then it shall be revoked by this higher level CA.\nThe operator has to create a new Interconnection CA key pair, perform the actions as described within clause 5.2.3c for Interconnection CA certification creation, and perform the actions as described within clause 5.2.1 to generate new cross-certificates for all his interconnected networks SEG CAs or TLS CAs.\nNOTE:\tThere is no need to involve other operators when revoking an Interconnection CA certificate.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.3e\tInterconnection CA certification renewal",
                            "text_content": "The Interconnection CA certificate has to be renewed before the old Interconnection CA certificate expires. The renewing of an Interconnection CA certificate involves repeating the actions as described in clause 5.2.3c. This should be done before the old certificate expires.\nNOTE:\tThere is no need to involve other operators when renewing an Interconnection CA certificate.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.4\tSEG/TLS CA registration",
                            "text_content": "In principle only one , one TLS client CA and one TLS server CA shall be used within the operator's network, but using more than one of each of these CAs is possible. The involved actions are those as described in the cross-certification part of clause 5.2.1: 'Operator Registration: creation of interconnect agreement'. Such a situation of having multiple CAs of each type may exist if the CA functions are to be moved from one responsible organisation to another (e.g. outsourcing of CA services).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.5\tSEG/TLS CA deregistration",
                            "text_content": "If a SEG CA or   is removed from the network, it shall be assured that the SEG CA or   certificates and all certificates that have been issued by the SEG CA or  to SEGs or TLS entities, and have not expired yet, shall be listed in CRLs or OCSP servers. The cross-certificates that are issued to these SEG CAs or TLS CAs, and have not expired yet, should also be listed in CRLs and OCSP servers.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.6\tSEG/TLS CA certificate creation",
                            "text_content": "The involved actions are those as described in the cross-certification part of clause 5.2.1: 'Operator Registration: creation of interconnect agreement'.\nThe SEG CA or   certificate does not have to be the top-level CA of the operator, which means that the SEG CA or  certificate is not self-signed. One option is to sign the operator's  and TLS CAs with the operator’s own Interconnection CA, as this will already be a trust point established in the operator's own SEGs and TLS entities. If the SEG CA or  certificates are self-signed then they should be securely transferred to each of the operator's SEGs and TLS entities and stored within secure memory (see NOTE to clause 7.5).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.7\tSEG/TLS CA certificate revocation",
                            "text_content": "This compromise is a serious event as it will require all the cross-certificates issued by other operators' Interconnection CAs to that SEG CA or  to be revoked.\nExisting secure connections need not be torn down, unless they were formed very recently i.e. after the time at which the operator suspects the CA key became compromised, but before the cross-certificate used to establish the tunnel was revoked.\nIt shall be assured that the SEG CA or   certificates and all certificates that have been issued by the SEG CA or  to SEGs or TLS entities, and have not expired yet, shall be listed in CRLs or OCSP servers. The cross-certificates that are issued to these SEG CAs or TLS CAs, and have not expired yet, should also be listed in CRLs or OCSP servers.\nTo restore inter-domain interoperability, the operator has to create a new   or  key pair and use it to issue certificates to all the SEGs and TLS entities in the operator’s own domain. The operator shall then provide a cross-certification request (see clause 5.2.1) for the new   or  key pair to the operators with whom it has interconnect agreements.\nIt is recommended that operators carefully protect their SEG CA and  keys to limit this knock-on effect across the operator community.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.8\tSEG/TLS CA certificate renewal",
                            "text_content": "The SEG CA and   certificate has to be renewed before the old   and  certificate expires. The renewing of a SEG CA or TLS CA certificate involves repeating the actions as described in the cross-certification part of clause 5.2.1: 'Operator Registration: creation of interconnect agreement'. This should be done before the old certificate expires.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.9\tEnd entity registration",
                            "text_content": "If not already done, a SEG certificate has to be created (see clause 5.2.11 for a description on certificate creation).\nIf a SEG is added to the network, the policy database of this SEG has to be configured using device-specific management methods.\nOther operators have to be informed of the new SEG: The SEG policy databases of SEGs in other networks may have to be adapted.\nIf not already done, a TLS client certificate has to be created (see clause 5.2.11 for a description on certificate creation).\nIf a TLS client is added to the network, then some local configuration may be needed to take the new TLS client into use for secure inter-operator communication. In addition, other operators may need to be informed of the new TLS client.\nIf not already done, a TLS server certificate has to be created (see clause 5.2.11 for a description on certificate creation).\nIf a TLS server is added to the network, then some local configuration may be needed to take the new TLS server into use for secure inter-operator communication. In addition, other operators may need to be informed of the new TLS server.\nIf not already done, an NE certificate has to be created (see clause 5.2.11 for a description on certificate creation).\nIf an NE is added to the network, the policy database of this NE has to be configured using device-specific management methods.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.10\tEnd entity deregistration",
                            "text_content": "If a SEG is removed from the network, the SAs shall be removed using device-specific management methods. The operator of the SEG shall have the certificate of the SEG listed in his CRL or OCSP server. The SPD of the partner network may have to be adapted.\nIf a TLS client is removed from the network, the TLS connections shall be terminated using device-specific management methods. The operator of the TLS client shall have the certificate of the TLS client listed in his CRL or OCSP server.\nIf a TLS server is removed from the network, the TLS connections shall be terminated using device-specific management methods. The operator of the TLS server shall have the certificate of the TLS server listed in his CRL or OCSP server.\nIf a NE is removed from the network, the SAs shall be removed using device-specific management methods. The operator of the NE shall have the certificate of the NE listed in his CRL or OCSP server.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.11\tEnd entity certificate creation",
                            "text_content": "Using device-specific management methods, the certificate creation shall be initiated. As specified in section 7.2, either the CMPv2 protocol for automatic certificate enrolment or manual certificate installation using PKCS#10 formats can be used. This is an operator decision depending for example on the number of NEs or SEGs and TLS entities.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.12\tEnd entity certificate revocation",
                            "text_content": "If a SEG or TLS entity key pair gets compromised then the existing SAs shall be removed using device-specific management methods. The operator of the SEG or TLS entity shall include the revoked certificate in his CRL or OCSP server.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.13\tEnd entity certificate renewal",
                            "text_content": "A new NE, SEG or TLS entity certificate needs to be in place before the old certificate expires. The procedure is similar to the certificate creation and can be either fully automated by using CMPv2 as specified in section 7.2 or done manually using PKCS#10 formats. This is an operator decision depending for example on the number of NEs, SEGs and TLS entities.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.14\tNE CA deregistration",
                            "text_content": "If an NE CA is removed from the network, it shall be assured that the NE CA certificate and all certificates that have been issued by the  to the NEs, and have not expired yet, shall be listed in CRLs or OCSP server.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.15\t certification creation",
                            "text_content": "The NE CA certificate does not have to be the top-level CA of the operator, which means that the  certificate is not self-signed. If the  certificates are self-signed then they should be securely transferred to each of the operator's NEs and stored within secure memory (see NOTE to clause 7.5).\nNOTE:\tThere is no need to involve other operators when creating an  certificate.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.16\t certificate revocation",
                            "text_content": "This serious event will require that all NE certificates needs to be revoked.\nExisting intra-security domain security connections need not be torn down, unless they were formed very recently i.e. after the time at which the operator suspects the NE CA key became compromised but before the certificate has been listed as revoked.\nIt shall be assured that the NE CA certificate and all certificates that have been issued by the  to NEs, and have not expired yet, shall be listed in CRLs or OCSP server.\nTo restore intra-domain security, the operator has to create a new  key pair and use it to issue certificates to all the NEs in the operator’s own domain.\nNOTE:\tThere is no need to involve other operators when revoking an  certificate.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.17\t certificate renewal",
                            "text_content": "The NE CA certificate has to be renewed before the old  certificate expires.\nNOTE:\tThere is no need to involve other operators when renewing an  certificate.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "6\tProfiling",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "6.1\tCertificate profiles",
                    "description": "",
                    "summary": "",
                    "text_content": "NOTE:\tThe present clause contains the general 3GPP certificate profile. Other 3GPP specifications (e.g. TS 33.203 [9], TS 33.220 [10], etc.) point to the present clause. Thus parts of the present clause may also apply to devices and network nodes as specified in other specifications. New specifications using certificates should refer to this profile with as few exceptions as possible.\nThe present clause profiles the certificates to be used for NDS/AF. An NDS/AF component shall not expect any specific behaviour from other entities, based on certificate fields not specified in this section.\nCertificate profiling requirements as contained in this specification have to be applied in addition to those contained within RFC5280 [14]. In case of conflicting requirements, the requirements in this specification override and obsolete the requirements in RFC5280 [14]. This applies for the SEG, NE, the TLS entity, the SEG CA and the Interconnection CA.\nA receiving SEG or TLS entity shall be able to process an extension marked as critical in the present document.\n\nBefore fulfilling any certificate signing request, the NE CA,  and Interconnection CA shall make sure that the request suits the profiles defined in this section. Furthermore, the CAs shall check the Subject's DirectoryString order for consistency, and that the Subject's DirectoryString belongs to its own administrative domain.\nNEs, SEGs and TLS entities shall check compliance of certificates with the NDS/AF profiles and shall only accept compliant certificates.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.1.1\tCommon rules to all certificates",
                            "text_content": "-\tVersion 3 certificate according to RFC5280 [14].\n-\tHash algorithm for use before signing certificate: SHA-256 shall be supported, SHA-384 should be supported, MD5, MD2, and SHA-1 shall not be supported.\nNOTE 1:\tVoid.\n-\tSignature algorithm: RSAEncryption and ecdsa shall be supported. RSAEncryption is not recommended as it uses PKCS#1v1.5 padding.\n-\tPublic key algorithm: rsaEncryption and id-ecPublicKey shall be supported.\n-\tParameters: For ecdsa and id-ecPublicKey, secp256r1 shall be supported. secp384r1 should be supported.\n-\tECDSA is recommended for newly created certificates.\n-\tFor RSA certificates: The public key length shall be at least 2048-bit. A public key length of at least 4096-bit shall be supported. Public key lengths of less than 2048-bit shall not be supported. PKCS#1v1.5 padding and key lengths less than 3072-bits should not be used in certificates that expire after 2030. RSA public exponent shall be no less than 65537.\n-\tFor ECDSA certificates: Except curve25519, ed25519, and W-25519, elliptic curve groups of less than 256 bits shall not be supported. A public key length of at least 384-bit shall be supported. Deterministic ECDSA [58] may be used.\nNOTE 2:\tVoid.\nNOTE 3:\tIn practice, certificates often have a long lifetime, for example about ten years. The use of RSA with PKCS#1v1.5 padding and key lengths less than 3072-bits is planned to be prohibited by several organisations no later than 2030.\n-\tThe security level of the public key used to sign the certificate shall be at least the same as the public keys in the certificate.\n-\tSubject and issuer name format.\n-\t(C=<country>), O=<Organization Name>, CN=<Some distinguishing name>. Organization and CN shall be in UTF8 format. Note that C is optional element.\nor\n-\tcn=<hostname>, (ou=<servers>), dc=<domain>, dc=<domain>. Note that ou is optional element.\n-\tCRLs as specified in subclause 6.1a shall be supported for certificate revocation verification.\n-\tOCSP as specified in subclause 6.1b should be supported for certificate revocation verification.\n-\tCertificate extensions which are not mdated by this specification but which are mentioned within RFC5280 [14] are optional for implementation. If present, such optional extensions shall be marked as “non critical“.\nNOTE 3:\tThe above requirement implies that an NE, SEG or TLS entity receiving such optional extensions marked as “critical” will react with an error because, according to the introduction to clause 6.1 of the present document, NEs, SEGs and TLS entities shall only accept compliant certificates.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.1.2\tInterconnection CA Certificate profile",
                            "text_content": "In addition to clause 6.1.1, the following requirements apply:\n-\tExtensions:\n-\tOptionally non critical authority key identifier;\n-\tOptionally non critical subject key identifier;\n-\tMandatory critical key usage: At least keyCertSign and cRLSign should be asserted;\n-\tMandatory critical basic constraints:  CA=True, path length unlimited or at least 1.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.1.3\tSEG Certificate profile",
                            "text_content": "SEG certificates shall be directly signed by the SEG CA in the operator domain that the SEG belongs to. Any SEG shall use exactly one certificate to identify itself within the NDS/AF.\nIn addition to clause 6.1.1 and the provisions of RFC4945 [15], the following requirements apply:\n-\tIssuer name is the same as the subject name in the SEG CA certificate.\n-\tExtensions:\n-\tOptionally non critical authority key identifier;\n-\tOptionally non critical subject key identifier;\n-\tMandatory non-critical subjectAltName;\n-\tMandatory critical key usage: At least digitalSignature or nonRepudiation bits shall be set;\n-\tMandatory non-critical Distribution points: CRL distribution point;\nNOTE:\tDepending on the availability of DNS between peer SEGs, the following rule is applied:\n-\tsubjectAltName should contain IP address (in case DNS is not available);\n-\tsubjectAltName should contain FQDN (in case DNS is available).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.1.3a\tTLS entity certificate profile",
                            "text_content": "TLS client certificates shall be directly signed by the TLS client CA in the operator domain that the TLS client belongs to. TLS server certificates shall be directly signed by the TLS server CA in the operator domain that the TLS server belongs to.\nIn addition to clause 6.1.1, the following requirements apply:\n-\tFor SIP domain certificates, the recommendations in RFC 5922 [21] and RFC 5924 [22] should be followed.\n-\tIssuer name is the same as the subject name in the TLS CA certificate.\n-\tExtensions:\n-\tOptionally non critical authority key identifier;\n-\tOptionally non critical subject key identifier;\n-\tMandatory critical key usage: At least digitalSignature shall be set;\n-\tOptional non-critical extended key usage: If present, at least id-kp-serverAuth shall be set for TLS server certificates, d at least id-kp-clientAuth shall be set for TLS client certificates;\n-\tMandatory non-critical Distribution points: CRL distribution point.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.1.3b\tNE Certificate profile",
                            "text_content": "NE certificates shall be directly signed by the  in the operator domain that the NE belongs to. Any NE shall use exactly one certificate to identify itself within the NDS/AF.\nThe same requirements as listed in section 6.1.3 apply.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.1.3c\tSBA Certificate profile",
                            "text_content": "Clause 6.1.3c profiles the certificates to be used for 5GC Service Based Architecture (SBA).\nDifferent TLS entity certificate profile requirements may be applied to intra-domain and/or inter-domain SBA for NF producers, NF consumers and NRF instances, Service Communication Proxy (SCP) nodes, and Security Edge Protection Proxy (SEPP) nodes applicable to 3GPP 5GC roaming.\nA separate TLS entity certificate profile is also needed to cover the usage of the certificates issued by the InterconnectionCA(s) for inter-domain SBA context for TLS connections between SEPP nodes.\nFurthermore, separate TLS entity certificate profile requirements may be applied forService Communication Proxy (SCP) needed for 3GPP 5GC SBA Indirect Communication model architectural Options C and D.\nThe following additions and deviations to the common profiles shall hold for all SBA-related entities (NFs, SCPs, SEPPs):\n-\tSignature algorithm: RSAEncryption need not be supported.\n-\tECDSA is recommended for TLS entity certificates with 5GC Service Based Architecture (SBA).\nTLS certificates shall be directly signed by the CA in the operator domain that the entity belongs to.\nNOTE:\tRFC 6125 [52] describes guidelines and procedures for representing and verifying the identity of application service using X.509 PKIX certificates with TLS. It mandates use of subjectAltName entries (DNS-ID, SRV-ID, URI-ID, etc.) over the use of the subject field (CN-ID) where available. Furthermore, it is stated that a client does not seek a match for a reference identifier of CN-ID if the presented identifiers include a DNS-ID, SRV-ID, URI-ID, or any application-specific identifier types supported by the client. Additionally, CA-browser forum [59] has the following requirement on the CN-ID: if CN-ID is present, this field contains exactly one entry that is one of the values contained in the Certificate’s subjectAltName extension.\nIn addition to clause 6.1.1 and the provisions of RFC 5280 [14] the following table captures the certificate profile for NF:\nTable 6.1.3c.3-1: NF TLS Client and Server Certificate Profile\n\nWith (intra-domain) SBA, the following rules are applied:\n-\tsubjectAltName shall (in TLS client and server certificates) contain a URI-ID with the URI for the NF Instance ID as an URN; this URI-ID shall contain the nfInstanceID of the Network Function instance using the format of the NFInstanceId as described in clause 5.3.2 of TS 29.571 [57].\nNOTE 1:\tAccording to clause 5.3.2 of TS 29.571 [57] \"The format of the NF Instance ID shall be a Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122 [x]\".The URN formed using the UUID is the string \"urn:uuid:\" followed by a hexadecimal representation of the UUID. According to IETF RFC 4122 [x], in a version 4 UUID, the 13th hex digit is '0100' i.e., '4' and the 17th hex digit is '10xx' i.e., in the range '8'-'b'. For example, \"urn:uuid: c84792af-f99f-4eca-a17c-ed0c9699e225\" is the string representation of the NF Instance ID \" c84792af-f99f-4eca-a17c-ed0c9699e225\" as a URN.\nNOTE 1a:\tWithout URI for the NF Instance ID in subjectAltName in the TLS client and/or server certificates, the identity of the NF instance can not be securely validated when using the NF instance certificate by the receiving peer.\n-\tsubjectAltName should (in TLS server certificates) contain URI-ID with the HTTPS URI(s) for the apiRoot of a Network Function producer instance for the NF service API(s) that it provides; using wildcard URIs should be avoided;.\n-\tsubjectAltName should (in TLS server certificates) contain DNS-ID with the FQDN(s) (host DNS name) of the NF service callback URI(s) that a Network Function consumer instance provides; the rules for using wildcard certificates in DNS-ID are described in RFC 6125 [51].\n-\tsubjectAltName should (in TLS client certificates) or shall (for TLS server certificates) contain a DNS-ID with the FQDN (host DNS name) for the Network Function instance, for example, using the instructions for Network Function (host DNS) names in FQDN format as used for Network Function producers in NFProfile and/or in NFService profile according to clause 6.1.6.2 in TS 29.510 [56], and in general as described in clause 28.3 of TS 23.003 [55] (regardless if DNS is available or not); for AMF, this is the AMF Name as described in clause 28.3.2.5 of TS 23.003 [55]; for NRF, this is the NRF FQDN as described in clause 28.3.2.3.2 of TS 23.003 [55]; the rules for using wildcard certificates in DNS-ID are defined in RFC 6125 [51].\nNOTE 2:\tRFC 9113 [50] mandates using the Server Name Indication (SNI) extension to TLS with HTTP/2. RFC 6066 [51], which is applicable to TLS 1.2, defines that currently only server names supported in SNI extension to TLS are DNS hostnames where \"HostName\" contains the fully qualified DNS hostname (FQDN) of the TLS server. RFC 6066 [51] also defines that literal IPv4 and IPv6 addresses are not permitted in \"HostName\". In practice, this means that at least one subjectAltName attribute with FQDN is to be included in server-side TLS end-entity certificates.\n-\tnfTypes shall (in TLS client and server certificates) contain NF type for the Network Function instance formatted according to RFC 9310 [61] using the Enumerated NF Type format according to clause 6.1.6.3.3 of TS 29.510 [56].\nNOTE 3:\tVoid.\n-\tsubjectAltName shall not contain only IP address in TLS server certificates.\nNOTE 4:\tVoid\nTLS certificates shall be directly signed by the CA in the operator domain that the SCP entity belongs to.\nThe same requirements to the NF certificate profile as listed in clause 6.1.3c.3 apply, except for the following requirements:\n-\tThe following requirement is not applicable: \"subjectAltName should (in TLS server certificates) contain URI-ID with the HTTPS URI(s) for the apiRoot of a Network Function producer instance for the NF service API(s) that it provides; using wildcard URIs should be avoided\";\n-\tThe following requirement is not applicable: \"subjectAltName should (in TLS server certificates) contain DNS-ID with the FQDN(s) (host DNS name) of the NF service callback URI(s) that a Network Function consumer instance provides; the rules for using wildcard certificates in DNS-ID are described in RFC 6125 [51]\".\nThe TLS certificate requirements on the SEPP depend on whether the certificate is used in intra-domain or inter-domain cases.\nSEPP intra-domain certificate profile requirements are applied for SEPP when connecting to other NFs/SCPs/SEPPs in the same operator domain. For example, it is applied for SEPP when providing the Nsepp_Telescopic_FQDN_Mapping service to the NFs/SEPPs in the same operator domain.\nSEPP inter-domain certificate profile requirements are applied for SEPP when connecting to SEPPs in other operator domains.\nTLS certificates used between a SEPP and other NFs/SCPs/SEPPs in the same operator domain shall be directly signed by the root CA or an intermediate CA whose certificate has a valid certificate chain up to this root CA in the operator domain that the SEPP entity belongs to.\nThe NF certificate profile requirements in clause 6.1.3c.2 and 6.1.3c.3 apply for SEPP intra-domain certificate profiles.\nThe SEPP inter-domain certificate is used when a SEPP interconnects to other SEPPs in the different network domain, e.g., a PLMN or a SNPN.\nIn general, the same requirements to the NF certificate profile as listed in clause 6.1.3c.2 and 6.1.3c.3 apply for SEPP inter-domain certificate profiles, except for the the contents of the Subject DN field as well as the subjectAltName field.\nFor inter-PLMN domain N32 certificates, the contents of the Subject DN field as well as the subjectAltName field are specified in GSMA FS.34 [60].\nFor inter-SNPN domain N32 certificates, the SEPP certificates shall include all PLMN IDs and Network identifiers (NIDs) identify the SNPN in SAN fields as DNS name for where it runs the N32 connection, and the subjectAltName field SHALL be structured as\n<SEPP-id>.sepp. 5gc.nid<NID>.mnc<MNC>.mcc<MCC>.3gppnetwork.org\nwhere SEPP-id is the SEPP ID as specified in the TS 33.501 [62], and NID is the Network Identifier as specified in the TS 23.003 [55].\nNOTE: The FQDN Format for inter-SNPN routing is specified in the clause 28.18 of TS 23.003 [55].\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 6.1.3c.3-1: NF TLS Client and Server Certificate Profile",
                                    "table number": 1,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.1.4\tSEG CA certificate profile",
                            "text_content": "In addition to clause 6.1.1, the following requirements apply:\n-\tSubject name is the same as the issuer name in the SEG certificate;\n-\tIssuer name depends on the usage of the certificates issued by the SEG CA:\n-\tif used for interconnections between security domains with different root CAs the issuer name is the same as the subject name in the Interconnection CA certificate;\n-\tif used for connections with elements having the same root CA certificate installed as used in the domain the SEG CA is located in, the issuer name is the subject name of either this root CA or an intermediate CA whose certificate has a valid certificate chain up to this root CA;\n-\tExtensions:\n-\tOptionally non critical authority key identifier;\n-\tOptionally non critical subject key identifier;\n-\tMandatory critical key usage: At least keyCertSign and cRLSign, should be asserted;\n-\tMandatory critical basic constraints:  CA=True, path length 0.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.1.4a\tTLS client/server CA certificate profile",
                            "text_content": "In addition to clause 6.1.1, the following requirements apply:\n-\tSubject name is the same as the issuer name in the TLS entity certificate;\n-\tIssuer name depends on the usage of the certificates issued by the TLS client/server CA:\n-\tif used for interconnections between security domains with different root CAs the issuer name is the same as the subject name in the Interconnection CA certificate;\n-\tif used for connections with elements having the same root CA certificate installed as used in the domain the TLS client/server CA is located in, the issuer name is the subject name of either this root CA or an intermediate CA whose certificate has a valid certificate chain up to this root CA;\n-\tif used for TLS clients with certificates not issued by an operator CA, the issuer name is the subject name of either a root CA trusted by the operator or an intermediate CA whose certificate has a valid certificate chain up to a root CA trusted by the operator;\n-\tExtensions:\n-\tOptionally non critical authority key identifier;\n-\tOptionally non critical subject key identifier;\n-\tMandatory critical key usage: At least keyCertSign and cRLSign, should be asserted;\n-\tMandatory critical basic constraints:  CA=True, path length 0.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.1.4b\t certificate profile",
                            "text_content": "The same requirements as listed in section 6.1.4 apply except that there is no restriction in the issuer name.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.1a\tCRL profile",
                    "description": "",
                    "summary": "",
                    "text_content": "-\tVersion 2 CRL according to RFC5280 [14].\n-\tHash algorithm for use before signing CRL: SHA-256 shall be supported SHA-384 should be supported, MD5 MD2, and SHA-1 shall not be supported.\nNOTE:\tVoid.\n-\tSignature algorithm: RSAEncryption and ecdsa shall be supported. RSAEncryption is not recommended as it uses PKCS#1v1.5 padding.\n-\tParameters: For ecdsa, secp256r1 shall be supported, secp384r1 should be supported.\n-\tECDSA is recommended for newly created CRLs.\n-\tThe security level of the public key used to sign the CRL shall be at least the same as the public keys used to sign the revoked certificates.\n-\tFor RSA: The key length shall be at least 2048-bit. A key length of at least 4096-bit shall be supported. Key lengths of less than 2048-bit shall not be supported. PKCS#1v1.5 padding and key lengths less than 3072-bits should not be used in certificates that expire after 2030.\n-\tFor ECDSA: Except curve25519, ed25519, and W-25519, elliptic curve groups of less than 256 bits shall not be supported. A key length of at least 384-bit shall be supported.\nNOTE 1:\tIn practice, certificates often have a long lifetime, for example about ten years. The use of RSA with PKCS#1v1.5 padding and key lengths less than 3072-bits is planned to be prohibited by several organisations no later than 2030.\nCRL retrieval with LDAPv3 [5] shall be supported as the primary method. HTTP may be used for checking the revocation status of TLS and NE certificates.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "6.1b\tOCSP profile",
                    "description": "",
                    "summary": "",
                    "text_content": "OCSP is protocol for obtaining the revocation status of an X.509 certificate. It can be used in addition to or instead of CRL. With OCSP stapling, a OSCP response is transported together with the certificate in the security protocol and can therefore be used also by offline nodes. The following requirements apply:\n-\tVersion 1 OCSP according to RFC6960 [47].\n-\tHash algorithm for use before signing OCSP response: SHA-256 and SHA-384 shall be supported, MD5 MD2, and SHA-1 shall not be supported.\n-\tSignature algorithm: RSAEncryption and ecdsa shall be supported. RSAEncryption is not recommended as it uses PKCS#1v1.5 padding.\n-\tParameters: For ecdsa, secp256r1 and secp384r1 shall be supported.\n-\tECDSA is recommended for newly created OCSP servers.\n-\tThe security level of the public key used to sign OCSP shall be at least the same as the public keys used to sign the certificates.\n-\tFor RSA: The key length shall be at least 2048-bit. A key length of at least 4096-bit shall be supported. Key lengths of less than 2048-bit shall not be supported. PKCS#1v1.5 padding and key lengths less than 3072-bits should not be used in certificates that expire after 2030.\n-\tFor ECDSA: Except curve25519, ed25519, and W-25519, elliptic curve groups of less than 256 bits shall not be supported. A key length of at least 384-bit shall be supported.\nNOTE 1:\tIn practice, certificates often have a long lifetime, for example about ten years. The use of RSA with PKCS#1v1.5 padding and key lengths less than 3072-bits is planned to be prohibited by several organisations no later than 2030.\nOCSP over HTTP shall be supported as the primary transport mechanism.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "6.2\tIKE negotiation and profiling",
                    "description": "",
                    "summary": "",
                    "text_content": "For certificate based establishment of IPsec SAs between NDS/IP elements, the IKE profile in this clause shall be used.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.2.1\tVoid",
                            "text_content": "",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.1b\tIKEv2 profile",
                            "text_content": "The following requirements on certificate based IKEv2 authentication in addition to those specified in NDS/IP [1] shall be applied:\nFor the IKE_INIT_SA and IKE_AUTH exchanges:\n-\tFollowing algorithms shall be supported:\n-\tAuthentication: Method 1 - RSA Digital Signature [42];\n-\tImplementations shall support signatures that use SHA-256, should support signatures that use SHA-384, and shall not support signatures that use SHA-1. Implementations should use SHA-256 as the default hash function when generating signatures.\n-\tUsage of Method 1 is not recommended as it uses PKCS#1v1.5 padding.\n-\tHash Algorithm Notification [43]\n-\tImplementations shall support SHA2-256, should support SHA2-384, and shall not support SHA1.\n-\tAuthentication: Method 14 - Digital Signature [43].\n-\tImplementations shall support ecdsa-with-sha256 and should support ecdsa-with-sha384, and should support RSASSA-PSS with SHA-256. Implementations shall not support sha1WithRSAEncryption, dsa-with-sha1, ecdsa-with-sha1, RSASSA-PSS with Empty Parameters, and RSASSA-PSS with Default Parameters.\n-\tThe identity of the CERT payload (including the end entity certificate) shall be used for policy checks;\n-\tInitiating/responding end entities are required to send certificate requests in the IKE_INIT_SA exchange for the responder and in the IKE_AUTH exchange for the initiator;\n-\tCross-certificates shall not be sent by the peer end entity as they are pre-configured in the end entity;\n-\tThe certificates in the certificate payload shall be encoded as type 4 (X.509 Certificate – Signature);\n-\tAn end entity shall rekey the IKE SA when any used end entity certificate expires.\nNOTE 2:\tDepending on the availability of DNS between peer end entities, the following rule is applied:\n-\tsubjectAltName and IKEv2 policy should both contain IP address (in case DNS is not available);\n-\tsubjectAltName and IKEv2 policy should both contain FQDN (in case DNS is available).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.2\tPotential interoperability issues",
                            "text_content": "Some PKI-capable VPN gateways do not support fragmentation of IKE packets, which becomes an issue when more than one certificate is sent in the certificate payloads, forcing IKE packet fragmentation. This means that direct cross-certification or manually importing the peer CA certificate to the local SEG and trusting it is preferable to bridge CA systems. When IKE is run over pure IPv6 the typical MTU sizes do not increase and long packets still have to be fragmented (allowed for end UDP hosts even for IPv6, see Path MTU Discovery for IPv6 – RFC 8201 [48), so this is a potential interoperability issue.\nCertificate encoding with PKCS#7 is supported by some PKI-capable VPN gateways, but it shall not be used.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.2a\tTLS profiling",
                    "description": "",
                    "summary": "",
                    "text_content": "For 3GPP uses of TLS for inter-operator security, the TLS profile in this clause shall be used.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.2a.1\tTLS profile",
                            "text_content": "The following requirements are mandatory:\n-\tThe TLS server shall always send its own end entity certificate in the ServerCertificate message;\n-\tThe TLS client shall send its own end entity certificate in the Certificate message if requested by the TLS server;\n-\tCross-certificates shall not be sent by the TLS entities in the TLS handshake as they are available locally to the TLS entities.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2a.2\tPotential interoperability issues",
                            "text_content": "No general interoperability issues are identified.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.3\tPath validation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.3.1\tPath validation profiling",
                            "text_content": "-\tValidity of certificates received from the peer end entity shall be verified by CRLs or OCSP responses retrieved via the mechanisms specified in section 6.1.1, based on the CRL Distribution Point or Authority Information Access extensions in the certificates.\n-\tValidity of certificates received from the TLS entity shall be verified by CRLs or OCSP responses retrieved via the mechanisms specified in section 6.1.1, based on the CRL Distribution Point or Authority Information Access extensions in the certificates.\n-\tAny NE, SEG or TLS entity shall not validate received certificates from a peer entity whose validity time has expired, but end the path validation with a negative result.\n-\tAny NE, SEG shall not validate received certificates from a peer entity whose CRL distribution point field is empty, but end the path validation with a negative result.\n-\tCertificate validity calculation results shall not be cached in a SEGs or NEs for longer than the lifetime enforced by the end entity.\n-\tCertificate validity calculation results shall not be cached in TLS entities for longer than the TLS connection lifetime.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "7\tDetailed description of architecture and mechanisms",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "7.1\tRepositories",
                    "description": "",
                    "summary": "",
                    "text_content": "During secure connection establishment, each NE, SEG or TLS entity  has to verify the validity of its peer's certificate according to clause  5.2.2. Any certificate could be invalid because it was revoked (and replaced by a new one) or a NE, SEG, TLS entity or operator has been deregistered.\nConsider secure connection establishment between PeerA in network A and PeerB in network B.\nPeerB has to verify that:\na)\tthe cross-certificate of the PeerA's CAA is still valid;\nb)\tthe certificate of PeerA is still valid,\nand be able to:\nc)\tfetch the cross-certificate of PeerA CAA (if not found in PeerA 's cache or local store).\nPeerA performs the same checks from its own perspective.\nCheck a) can be performed by querying the local CRL or OCSP server. For check b), a CRL or OCSP server of the PeerA's CA shall be queried. At this point of time, the secure connection is not yet available, therefore the public CRL or OCSP server of the PeerA's CA shall be accessible without relying on a secure connection.\nFigure 4 and Figure 4a illustrate the repositories and the above-mentioned steps a) – c). The local Certificate Repository (CR) contains cross-certificates for SEG CAs and possibly cross-certificates for TLS CAs if these are not locally stored in the TLS entities. Local CRLs contains   and   cross-certificate revocations, and the public CRL or OCSP server contain revocations of SEG, TLS entity,  , and  certificates, and can be accessed by other operators.\nAn operator's internal repository may contain the revocations of NE and  if not contained in the Public CRL or OCSP repository.\nFigure 4 illustrates the repositories for NDS/IP to support the Za interface, which is a key component in the 5G network. The figure shows the various components involved in the communication process, including the NDS/IP, which is responsible for routing and forwarding data packets, and the IP, which is the transport layer protocol used for data transmission. The repositories are essential for ensuring the efficient and reliable communication of data between the NDS/IP and the IP layer.\nFigure 4: Repositories for NDS/IP to support Za interface\nFigure 5 illustrates the repositories for TLS case, highlighting the various components involved in the encryption process. Key components include the client, server, and server-side encryption, as well as the TLS protocol itself. The diagram illustrates the flow of data between the client and server, ensuring secure communication.\nFigure 5: Repositories for TLS case\nFigure 6 illustrates the repositories for NDS/IP to support the Zb interface, which is a crucial component of the 5G network. The figure shows the various components and their connections, including the NDS/IP, which is responsible for managing the network's data and signaling, and the IP, which is responsible for routing and forwarding data packets. The figure also highlights the importance of these components in ensuring the efficient and reliable operation of the 5G network.\nFigure 6: Repositories for NDS/IP to support Zb interface\nIf the SEG CA,  or Interconnection CA are combined then the public and local repositories of the CA may be implemented as separate databases or as a single database which is accessible via two different interfaces. Access to the \"public\" CRL or OCSP server is public with respect to the interconnecting transport network (e.g. GRX). The public CRL should be adequately protected (e.g by a firewall) and the owner of the public CRL or OCSP may limit access to it according to his interconnect agreements. Access to a public CRL or OCSP server database does not need to be secured.\nNOTE 1:\tFirst it is not necessary to secure access to the CRL database or OCSP as the retrieved CRL or OCSP response is integrity protected and contains no confidential information. Secondly access via an unprotected interface is anyhow necessary in case no currently valid security association is available to access the public CRL database or OCSP server.\nSEGs shall use LDAP to access the CRL and cross-certificate repositories. TLS entities shall use LDAP or HTTP to access the CRL repositories. TLS entities may use LDAP to access the cross-certificate repositories, if the cross certificates are not stored locally in the TLS entity. NE's may use LDAP or HTTP to access the CRL repositories. OCSP servers shall always be accessed via HTTP.\nNOTE 2:\tInterfaces a) d c) for locating the data used to establish secure communications between operators belong to the scope of NDS/AF (in addition to public b) interface) as the purpose is to guartee the interoperability between different SEGs, TLS entities d repository implementations. The possible migration to the cross-certification with a Bridge CA would also require these interfaces to be specified.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.2\tLife cycle management",
                    "description": "",
                    "summary": "",
                    "text_content": "Certificate Management Protocol v2 (CMPv2) [4] shall be the supported protocol to provide certificate lifecycle management capabilities for SEGs. All SEGs and SEG CAs shall support initial enrolment by the SEG to the SEG CA via CMPv2, i.e. receiving a certificate from the SEG CA, and updating the key of the certificate via CMPv2 before the certificate expires.\nCertificate Management Protocol v2 (CMPv2) [4] should be the supported protocol to provide certificate lifecycle management capabilities for TLS entities. All TLS entities and TLS CAs should support initial enrolment by the TLS entity to the TLS CA via CMPv2, i.e. receiving a certificate from the TLS CA, and updating the key of the certificate via CMPv2 before the certificate expires.\nCertificate Management Protocol v2 (CMPv2) [4] shall be the supported protocol to provide certificate lifecycle management capabilities for NEs. All NEs and NE CAs shall support initial enrolment by the NE to the NE CA via CMPv2, i.e. receiving a certificate from the NE CA, and updating the key of the certificate via CMPv2 before the certificate expires.\nEnrolling a certificate to a SEG, NE or TLS entity is an operation that may be done more often than inter-operator cross-certifications, thus more automation could be required by the operator than is possible with a PKCS#10 approach. However, also manual SEG and NE certificate installation using PKCS#10 formats shall be supported. It should be also noted that the lifetime of a SEG CA cross-certificate is considerably longer than the lifetime of a SEG certificate.\nNOTE:\tCMPv2 is preferred to CMPv1 (specified in obsoleted RFC 2510), because of the interoperability issues with CMPv1.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.3\tCross-certification",
                    "description": "",
                    "summary": "",
                    "text_content": "Both operators use the following procedure to create a SEG CA or  cross-certificate:\n1.\tThe SEG CA or  creates a PKCS#10 certificate request, and sends it to the other operator;\n2.\tThe Interconnection CA receives a similar request from the other operator;\n3.\tThe Interconnection CA accepts the request and creates a new cross-certificate;\n4.\tThe SEG CA cross-certificate is stored once into the local CR of the Interconnection CA and LDAP is used to fetch cross-certificates. The TLS CA cross-certificate may be stored once into the local CR of the Interconnection CA and LDAP is used to fetch cross-certificates. Alternatively the TLS CA cross certificate may be locally stored in the TLS entities.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.4\tRevoking a SEG/TLS CA cross-certificate",
                    "description": "",
                    "summary": "",
                    "text_content": "The following procedure is used to revoke a SEG CA cross-certificate:\n1.\tThe cross-certificate is added into the Interconnection CA's CRL or OCSP server;\n2.\tThe cross-certificate is removed from the Interconnection CA's CR.\nThe following procedure is used to revoke a TLS CA cross-certificate:\n1.\tThe cross-certificate is added into the Interconnection CA's CRL or OCSP server;\n2.\tIf the TLS CA cross certificates are stored in the Interconnection CA's CR, then the cross-certificate is removed.\n3. \tIf the TLS CA cross-certificates are stored locally in the TLS entities, then the locally stored cross-certificates are deleted in the TLS entities.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.5\tEstablishing secure connections between NDS/IP end entities using IKE on the Za interface",
                    "description": "",
                    "summary": "",
                    "text_content": "Certificate based authentication during the IKEv2 IKE_INIT_SA/IKE_AUTH exchanges is shown in figure 4 above. The SEGa uses the following procedure to authenticate SEGb:\n1.\tSEGa requests SEGb's certificate using the CERTREQ payload;\n2.\tSEGa receives SEGb's certificate inside the CERT payload;\n3.\tSEGa authenticates SEGb (verifies signatures);\n4.\tSEGa performs a revocation check with CRL or OCSP to verify the status of SEGb's certificate. If the locally cached CRL has expired, SEGa fetches a CRL from the (public) CRL database of SEC CAb before using CRL.\n5.\tSEGa uses either the locally cached cross-certificate or fetches the cross-certificate from the (local) Interconnection CAa CR to verify SEGb's certificate;\n6.\tSEGa performs a revocation check with CRL or OCSP to verify the status of the SEG CA cross-certificate. If the locally cached CRL has expired, SEGa fetches a CRL from the (local) Interconnection CAa CRL database before using CRL;\n7.\tSEG A verifies the cross-certificate for Operator B's  using Operator A's Interconnection CA's certificate. SEGa verifies the status of the Interconnection CAa certificate if the Interconnection CAa is not a top-level CA, otherwise Interconnection CAa is implicitly trusted;\nNOTE:\tIf the local  public key is securely installed on every SEG within an operator's domain, then a cross-certificate does not need to be checked when SEGa and SEGb belong to the same operator's domain.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.5a\tEstablishing secure connections using TLS",
                    "description": "",
                    "summary": "",
                    "text_content": "The procedure for establishing secure connections using TLS is specified in detail in clause 5.2.2.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.5b\tEstablishing secure connections between NDS/IP entities on the Zb interface",
                    "description": "",
                    "summary": "",
                    "text_content": "The procedure for establishing secure connections using NDS/IP on the Zb interface is specified in detail in clause 5.2.2.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.6\tCRL management",
                    "description": "",
                    "summary": "",
                    "text_content": "NDS/AF compliant SEGs and NEs shall not send an IKEv2 CERTREQ where the Certificate Type is \"Certificate Revocation List (CRL)\". Receiving NEs and SEGs may ignore this request as section 6.1.3 specifies that CRLs shall be retrieved via a CRL distribution point.\nThe CRL issuer (which is in most cases the CA) shall only issue full CRLs. The use of delta CRLs is not allowed because of possible interoperability problems and because in the NDS/AF environment the full CRL is not expected to grow too large. The full CRL shall only contain revoked certificates applicable for use within NDS/AF. The CRL issuer shall issue a CRL also in cases that there are no revoked certificates. A SEG, NE or TLS entity is not obliged to query for a CRL via the CRL Distribution Point if a cached one is still available and valid. If no valid cached CRL is available, the NE, SEG or TLS entity shall fetch a new CRL. If no valid CRL can be fetched, the NE, SEG or TLS entity shall treat this as an error and cancel tunnel establishment.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "8\tBackward compatibility for NDS/IP NE's and SEGs",
            "description": "NDS/IP describes an authentication framework whereby the initial IKEv2 authentication is based on the Pre-shared Secret Key (PSK) authentication method. NDS/AF describes an optional authentication framework which enables NDS/IP end entities (NEs and SEGs) to perform the initial IKEv2 authentication based on signatures. An NDS/AF compliant end entity shall also contain NDS/IP functionality. However, an NDS/IP compliant end entity need not contain NDS/AF functionality unless specifically mandated by TS 33.210[1] or any other 3GPP specification.\nDevice-specific management has to be used to reconfigure an end entity such that NDS/AF functionality will be used at the IKE initiator side for the initial IKE authentication (IKEv2 IKE_INIT_SA/IKE_AUTH exchange). The transition towards NDS/AF-based authentication may be done on an end entity by end entity basis. Before the first NDS/AF end entity is taken into use it shall be assured that all needed NDS/AF functionality like CRs, CRL databases are available and working. The setting up of a NDS/AF-based IPsec tunnel can be tested in parallel to the protection of existing traffic using the PSK authentication method.\nA smooth migration may be done in the following way:\n-\ta NDS/AF end entity shall provide several algorithm proposal's during IKE initial authentication, some based on  signature authentication, others based on the PSK authentication;\n-\tthe responding IKE peer will select PSK authentication method if it does not support signature authentication methods, but it may select a signature authentication method if it complies with NDS/AF.\n-\tthe IKE responder policy shall be configured such that the signature authentication methods shall take precedence over the PSK authentication method to ensure that it is used as soon as the IKE initiator proposes a signature authentication method.\nIn case of migration on the Za-interface between two operators:\nIf the SEGs of both operators support NDS/AF-based authentication then both SEG settings may be changed. The pre-shared secrets may then be removed from the SEGs and the IKE initiator shall only use the RSA signature authentication method. However, this removal of PSK is not essential as it may be used as a fallback mechanism. Some care has to be taken that the policy between SEGs of different operators be coordinated otherwise this may result in failed tunnel set up. This would be the case if the initiating IKE peer only uses the RSA signature authentication method and the responding IKE peer only accepts the PSK authentication method. Furthermore, if the PSK is kept as a fallback mechanism after the RSA signature authentication method is introduced, then fallback to PSK should only be allowed if the operator makes a policy change in the SEGs to allow PSK to be used. The operator may temporarily allow fallback to PSK if, for example, the SEGs are unable to verify the necessary certificates because of problems with the PKI. If PSK is kept as a fallback then it may be necessary to renew the PSK periodically for security reasons, or if PSK compromise is suspected.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "9\tCertificate enrolment for base stations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "9.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The clause specifies certificate enrolment mechanisms for backhaul security. The decision on whether or not to apply the mechanisms is left to other 3GPP specifications.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "9.2\tArchitecture",
                    "description": "",
                    "summary": "",
                    "text_content": "Figure 7 shows the general deployment architecture for certificate enrolment of a base station at an operator PKI.\n\nFigure 7: Overview of the security architecture\nThe base station is pre-provisioned with a public-private key pair by the vendor, and has the vendor-signed certificate of its public key pre-installed.\nAs RA/CA, an operator may deploy:\n-\teither a stand-alone CA implementing a CMPv2 server,\n-\tor, a CA having delegated certain tasks to an RA, which is in this case operating the CMPv2 server.\nOn initial contact to the operator network the base station establishes a communication channel to the RA/CA of the operator. Using CMPv2 [4] a request for a certificate is sent to the RA/CA. The network authenticates the messages from the base station based on the vendor-signed certificate of the base station and the vendor root certificate pre-installed in the network. The base station shall check the integrity protection on the messages from the RA/CA based on the operator root certificate provisioned in the base station. In a response message the base station receives the operator-signed certificate. During the execution of the CMPv2 protocol the base station has to successfully provide a Proof of Possession of the private key associated to the public key to be certified.\nThe operator root certificate may be provisioned in the base station prior to or during the CMPv2 protocol run. The protection of the operator root certificate during provisioning may be decided by operator security policy. If an operator root certificate provisioned prior to the CMPv2 protocol run is available the base station shall use it. Otherwise, the base station shall use the operator root certificate provisioned during the CMPv2 run. If no operator root certificate is provisioned at all then the base station shall abort the procedure.\nAfter enrolment has been performed, the base station can use the operator-signed certificate to authenticate itself to the SEG of the operator, which is pre-installed with the operator root certificate. The base station then authenticates the SEG using the operator root certificate.\nNOTE:\tThe authentication towards the SEG is part of the normal usage of IPsec-based backhaul security according to TS 33.210 [1].\nIf at later stage of base station deployment the operator wants to renew the base station certificate, the same procedure will be executed with the old operator-signed certificate of the base station taking the place of the vendor-signed certificate in the initial enrolment.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "9.3\tSecurity Mechanisms",
                    "description": "",
                    "summary": "",
                    "text_content": "The enrolment of base stations shall use the CMPv2 protocol as specified in RFC 4210 [4] and RFC 4211 [19]. The proof-of-possession methods as given by [4] and [19] shall be used.\nThe profiling of CMPv2 for the purpose of base station enrolment is given in subclause 9.5 of the present document.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "9.4\tCertificate Profiles",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "9.4.1\tGeneral",
                            "text_content": "All certificates used during the enrolment process of base stations shall follow the requirements given in clause 6 of the present document. Profiling and exceptions are specified in the following subclauses.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.4.2\tVendor  Certificate",
                            "text_content": "The root certificate of the vendor root CA shall follow the requirements given in subclause 6.1.2 for interconnection CA certificate profiles, with the following exceptions:\n-\tthe vendor shall support distribution of certificate revocation information. The interface to provide revocation data is out of scope of the present document.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.4.3\tVendor CA Certificate",
                            "text_content": "If the vendor does not sign the base station certificate by its vendor root CA, the certificate of the CA signing the base station certificates and of any intermediate vendor CA shall follow the requirements given in subclause 6.1.4 for  certificate profiles, with the following exceptions:\n-\tthe issuer name shall be the name of any vendor CA, given that the resulting chain of certificates starting with the base station certificates leads to the vendor root CA;\n-\tthe path length shall be greater than 0 for the certificate of an intermediate CA not directly signing the vendor base station certificates;\n-\tthe CRL distribution point extension in the certificate shall be optional;\n-\tthe provisions on distribution of certificate revocation information given in subclause 9.4.2 shall apply.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.4.4\tVendor Base Station Certificate",
                            "text_content": "The base station certificate signed by a vendor CA shall follow the requirements given in subclause 6.1.3b for NE certificate profiles, with the following exceptions:\n-\tthe issuer name is the name of the vendor CA signing the base station certificate;\n-\tthe subject name shall be a globally unique fully qualified domain name (FQDN) given by the vendor. The exact definition of this FQDN is left to the vendor, given that the vendor ensures global uniqueness. The format of the subject name shall follow subclause 6.1.1 using the variant with an o attribute and a cn attribute, where the o attribute shall contain the vendor name, and the cn attribute shall contain the FQDN.\n-\tthe subjectAltName with type dNSName shall contain the same FQDN as the subject field;\nNOTE 1:\tAvailability of DNS is not required for the FQDN in the certificate.\nNOTE 2:\tAn example for the vendor base station FQDN is <serialnumber>.<vendor>.com. Note that all labels comply with the requirements for labels in FQDNs (cf. RFC 1035 [25]). The representation in the subject field would be \"o=<vendor name>, cn=<serialnumber>.<vendor>.com\".\n-\tthe provisions on the CRL distribution point extension in the certificate and on distribution of certificate revocation information given in subclause 9.4.3 shall apply.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.4.5\tOperator  Certificate",
                            "text_content": "The root certificate of the operator root CA shall follow the requirements given in subclause 6.1.2 for interconnection CA certificate profiles.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.4.6\tOperator RA/CA Certificate",
                            "text_content": "If operating a standalone CA, the operator may deploy separate private keys for signing certificates and for signing the CMP messages or he may use one single private key for both purposes. In consequence the CA may have two or one certificate(s) being actively utilized in this transaction.\nThe operator may utilize a CA for signing certificates and delegate operation of the CMPv2 server to an RA. If RA and CA are different entities, the private keys as well as the subject names of the certificates used by the CA for signing base station certificates and by the RA for signing CMP messages are different.\nThe CA certificate used for signing certificates shall follow the requirements given in subclause 6.1.4 for  certificate profiles, with the following exception:\n-\tthe issuer name shall be the name of any operator CA, given that the resulting chain of certificates starting with the CA certificate leads to the operator root CA.\nThe RA/CA certificate used for signing CMP messages shall follow the requirements given in subclause 6.1.3 for SEG certificate profiles, with the following exceptions:\n-\tthe subject name shall be the same name as used in the \"sender\" field of the CMPv2 messages;\n-\tthe issuer name shall be the name of any operator CA, given that the resulting chain of certificates starting with the RA/CA certificate leads to the operator root CA.\nIf the operator deploys one single private key for signing of the base station certificates and for signing of the CMP messages, for the single RA/CA certificate the same requirements as above for the CA certificate used for signing certificates apply with the following addition:\n-\tin addition to the key usage extensions specified in subclause 6.1.4, mandatory critical key usage extension bit digitalSignature shall be set.\nNOTE:\tAccording to common security practices, the usage of separate private keys and certificates for signing of the base station certificates and for signing of the CMP messages is recommended.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.4.7\tIntermediate Operator CA Certificate",
                            "text_content": "If the operator does not sign the RA/CA certificate by its operator root CA and if the RA/CA certificate(s) are not directly signed by the operator root CA, the certificate of any intermediate operator CA shall follow the requirements given in subclause 6.1.4 for  certificate profiles, with the following exceptions:\n-\tthe issuer name shall be the name of any operator CA, given that the resulting chain of certificates starting with the RA/CA certificates leads to the operator root CA;\n-\tthe path length shall be greater than 0.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.4.8\tOperator Base Station Certificate",
                            "text_content": "The base station certificate signed by the operator RA/CA shall follow the requirements given in subclause 6.1.3b for NE certificate profiles.\nOther documents may specify different base station certificate profiles according to their deployment scenario.\nNOTE:\tThe intended usage of the base station certificate may have requirements different from the usage of NE certificates as specified in the present document on NDS/AF. Thus the exact profile may depend on other documents specifying the intended deployment scenario.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "9.5\tCMPv2 Profiling",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "9.5.1\tGeneral Requirements",
                            "text_content": "The following requirements shall apply to CMPv2 usage end-to-end between base station and RA/CA:\n-\tThis CMPv2 profile shall only include certificate request and key update functions. Revocation processing and PKCS#10 requests shall not be part of this CMPv2 profile.\n-\tFor PKI Message Protection, this CMP profile shall only use an asymmetric algorithm. PasswordBasedMac is not used in the scope of the present document.\n-\tThe base station shall be pre-provisioned with a private/public key pair (vendor key pair) and with the related vendor base station certificate signed by a vendor CA.\n-\tIf there is a certificate chain from the base station certificate up to the vendor root CA, also the intermediate certificates shall be pre-provisioned to the base station.\n-\tThe base station may be pre-provisioned with the operator root CA certificate.\n-\tIf the base station is not pre-provisioned with the operator root CA certificate, then the base station shall take the operator root certificate from the certificates received in the initialization response. The selection shall be based on checking which root certificate can be used to validate the received base station certificate.\nNOTE 1:\tCertificate renewal for operator root certificates is not in scope of this clause on base station enrolment. Thus it is assumed that the base station always has a valid operator root certificate available for validation of key update responses.\n-\tThe RA/CA shall authenticate initialization requests based on signatures which are validated against the vendor root CA.\n-\tThe RA/CA shall authenticate key update requests based on signatures which are validated against the operator root CA.\n-\tThe RA/CA shall be configured with the root certificate of the vendor and with the root certificate of the operator.\n-\tThe RA/CA shall be configured with a RA/CA certificate which is signed either by the operator root CA or by an intermediate CA under the operator root CA.\n-\tIf the RA/CA uses different private keys to sign the generated certificates and the CMPv2 messages, the RA/CA shall be configured with the two related certificates, i.e. the RA/CA certificate for signing signatures and the RA/CA certificate for signing CMP messages.\n-\tIf the RA/CA certificate or certificates (two in case separate private keys are used for signing of certificates and CMP messages) are not signed directly by the operator root CA, also the certificates of the intermediate CAs shall be configured into the RA/CA.\n-\tThe hash algorithms used before generating signatures in the protection field of PKIMessage and for proof-of-possession shall be the same as the hash algorithms specified in subclause 6.1.1 for certificate signatures. The signature algorithms shall be the same as that used in the related certificate profile.\nThe certificate profiles are specified in subclause 9.4.\nNOTE 2:\tThese certificate profiles implicitly specify which algorithms are to be used for the different signatures for proof-of-possession and PKIMessage signing specified in the following subclauses.\nNOTE 3:\tPolicies within RA/CA governing the generation and issuing of certificates are not in scope of the present document and left to operator decision.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.5.2\tProfile for the PKIMessage",
                            "text_content": "The following profile shall be applied to the PKIMessage as specified in [4]:\n-\tThe support and usage of the optional protection field of type PKIProtection is required by this profile. The message-specific private key to be used in the base station is specified in the subclause 9.5.4 in the profiling of the single PKI message bodies for requests sent by the base station. For the RA/CA the RA/CA private key shall be used, or the separate RA/CA private key for signing CMP messages, if base station certificates and CMPv2 messages are signed by different private keys.\n-\tThe support of the optional extraCerts field is required by this profile. The certificates within this field may be ordered in any order. The message-specific content of this field is specified in the subclause 9.5.4 in the profiling of the single PKI message bodies.\n-\tAll CMPv2 messages used within this profile shall consist of exactly one PKIMessage, i.e. the size of the sequence for PKIMessages shall be 1 in all cases.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.5.3\tProfile for the PKIHeader Field",
                            "text_content": "The following profile shall be applied to the PKIHeader field as specified in [4]:\n-\tThe sender and recipient fields shall contain the identities of the base station and the RA/CA. These identities shall be identical to the subject name present in the certificate for the public key whose related private key is used to sign the PKIMessage.\nNOTE:\tThe subject name of RA/CA needs to be available before the CMPv2 run. The base station can obtain this subject name of RA/CA before the CMPv2 run via e.g., Initial IP Autoconfiguration procedure specified in TS 32.508[32] and TS 32.509[33].\n-\tAs the field “protection” of PKIMessage is mandatory, also the field “protectionAlg” of PKIHeader is mandatory. The protectionAlg shall be of type MSG_SIG_ALG. The signature algorithm shall be based upon the algorithm contained in the algorithm field of the SubjectPublicKeyInfo field of the signer’s certificate (belonging to the base station or the RA/CA). The hash algorithm used before signing the PKIMessage shall follow the same specification as given for usage before certificate signing in clause 6.1.1 of the present document.\n-\tThe usage of the transactionID field is mandatory. The recommended procedures for handling of the transactionID given in [4] shall be followed. The base station shall set this field to a random number that is at least 8 bytes long for the first message and use the same random number in any subsequent message in the transaction.\n-\tThe usage of the senderNonce and the recipNonce fields is mandatory. The length of the fields as recommended in [4] shall be used. The recipNonce in the very first message in the transaction should be set to 0 by the sender and shall be disregarded by the recipient of the message.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "9.5.4\tProfile for the PKIBody Field",
                            "text_content": "The base station certificate enrolment shall support the following CMPv2 PKI message bodies:\n-\tInitialization Request (ir)\n-\tInitialization Response (ip)\n-\tKey Update Request (kur)\n-\tKey Update Response (kup)\n-\tConfirmation (pkiconf)\n-\tCertificate confirm (certconf)\nProfiles for the single message bodies above are given in the subclauses below. If no specific profile is given, the provisions of [4] and [19] apply.\nThe Initialization Request as specified in IETF RFC 4210 [4] shall contain exactly one CertReqMessages as specified in IETF RFC 4210 [4] and IETF RFC 4211 [19], i.e. the size of the sequence for CertReqMessages shall be 1 in all cases.\nThe following profile shall be applied to the CertReqMessage field and its sub-fields:\n-\tThe subject field of the CertTemplate shall contain the suggested name of the base station if the base station has knowledge of it. Otherwise it shall be omitted.\n-\tThe publicKey field of the CertTemplate shall be mandatory and shall contain the public key of the base station to be certified by the RA/CA. The private/public key pair may be pre-provisioned to the base station, or generated inside the base station for the CMPv2 protocol run. The format of this field shall follow IETF RFC 5280 [14].\nNOTE 1:\tIETF RFC 3280 as referenced by IETF RFC 4211 [19] for the format of the publicKey field is obsolete. The present document generally references the follow-up IETF RFC 5280 [14].\n-\tThe CertReqMessage shall contain a POP field of type ProofOfPossession. The POP field shall contain a signature field of type POPOSigningKey. The algorithmIdentifier field of the POPOSigningKey field shall contain the signing algorithm which is used by the base station to produce the Proof-of-Possession value, i.e. the signature within POPOSigningKey field.\n-\tIf the poposkInput field of type POPOSigningKeyInput within POPOSigningKey field is used, the sender field within POPOSigningKeyInput shall be mandatory and shall contain the identity of the base station as given by the vendor of the base station and contained in the vendor-provided base station certificate.\nNOTE 2:\tAccording to IETF RFC 4211 [19], the poposkInput field is mandatory if either the subject field or the publicKey field of the CertTemplate field is omitted.\nNOTE 3:\tAccording to IETF RFC 4211 [19], the sender field of POPOSigningKeyInput is used only if an authenticated identity has been established by the sender. The present document assumes that the sender (i.e. base station) has a valid pre-provisioned vendor-signed certificate and therefore the sender’s identity is considered authenticated and established.\nThe PKIMessage sent by the base station shall be signed by the vendor provided private key.\nThe extraCerts field of the PKIMessage carrying the initialization request shall be mandatory and shall contain the base station certificate provided by the vendor. If the base station certificate is not signed by the vendor root CA, also the intermediate certificates for the chain up to the vendor root certificate shall be included in the extraCerts field.\nThe Initialization Response as specified in [4] shall contain exactly one generated base station certificate, i.e. the size of the sequence for CertResponse shall be 1 in all cases.\nThe following profile shall be applied to the CertRepMessage field and its sub-fields:\n-\tThe generated certificate shall be transferred to the base station in the certifiedKeyPair field of the CertResponse field. The transfer shall not be encrypted (i.e. the certificate field in CertorEncCert shall be mandatory).\nThe extraCerts field of the PKIMessage carrying the initialization response shall be mandatory and shall contain the operator root certificate and the RA/CA certificate (or certificates if separate private keys are used for signing of certificates and CMP messages). If the RA/CA certificate(s) are not signed by the operator root CA, also the intermediate certificates for the chain(s) up to the operator root certificate shall be included in the extraCerts field.\nThe structure and content of these messages is identical to initialization requests and responses, thus the profiling given in the previous subclauses for Initialization Request and Initialization Response apply equally, with the following exceptions:\n-\tThe PKIMessage sent by the base station shall be signed with the private key which is related to the last received operator provided base station certificate. The extraCertsField shall be mandatory and shall contain the base station certificate related to the private key used for signing the PKIMessage. Any intermediate CA certificates shall also be included, if the base station certificate is not signed directly by a root CA.\n-\tThe PKIMessage carrying the key update response should not contain the operator root certificate in the extraCerts field.\nInitialization responses and key update responses shall always be followed by a Certificate Confirm request and Confirmation response message exchange.\nThe PKIMessage sent by the base station shall be signed by the same private key which was used in the preceding initialization request or key update request.\nThe extraCerts field of the PKIMessage carrying the Certificate Confirm request and Confirmation response shall be omitted.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "9.6\tCMPv2 Transport",
                    "description": "",
                    "summary": "",
                    "text_content": "Transport of CMPv2 messages between end entities (network elements) and RA/CA shall be done using HTTP-based protocol as specified in  IETF RFC 6712 [18] , with the exception that support for TLS is not mandated.\nSupport is mandatory for communication initiated by the end entities where every CMP request triggers a CMP response message from the CA or RA. Support for RA/CA initiated HTTP requests (i.e. announcements) is not mandatory.\nNOTE:\tCMP provides built-in integrity protection and authentication. For optional usage of HTTP over TLS (HTTPS) according to RFC 2818 [20] or virtual private networks see  IETF RFC 6712 [18].\n\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "10\tCertificate Management for 5GC NFs",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "10.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause specifies the following certificate management procedures in SBA for 5GC NFs:\n-\tSet up of initial trust between NF and operator CA/RA.\n- \tCertificate enrolment and renewal for 5GC NFs.\n-\tValidation of usage of X.509 certificates in SBA.\n-\tCertification revocation procedures.\nThe validation of the trust chain of CA hierarchy is required, ensuring the legitimacy and credibility of the CA. The solutions to establish the trust chain of CA hierarchy are left to implementation.\nOther mechanisms and use cases related to certificate management for 5GC NFs are described in informative annex I and left to implementation.\nNOTE: This clause does not consider infrastructure deployment specifics (e.g., virtualization, cloud, etc.)\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "10.2\tSet up of initial trust",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.2.1\tGeneral",
                            "text_content": "This clause describes the architecture and the procedures for the set up of the initial trust between the operator CA/RA and the NF or the end entity acting on behalf of the NF for the certificate enrolment.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.2.2\tArchitecture",
                            "text_content": "The protection of the NF certificate enrolment procedure has the prerequisite to build initial trust between the 5GC NF and the operator CA/RA.\nOAM facilitates the initial trust establishment between NF and operator CA/RA.\nFigure 10.2.2-1 depicts the general schema to set up initial trust between 5GC NF and operator CA/RA.\nThe figure depicts a simplified initial trust general schema for a 5G network, illustrating the key components such as base stations (gNB), user equipment (UE), and scatterers. The diagram highlights beamforming techniques to mitigate interference, emphasizing the importance of network architecture in ensuring reliable communication.\nFigure 10.2.2-1: Initial trust general schema\nThe assumption is that the OAM system is trusted for the operator CA/RA, i.e., the trust between the OAM system and the operator CA/RA shall have been preestablished.\nThe OAM system of the 5GC NF, which instantiates the NF, shall provide it with the initial trust to be used during the 5GC NF operator certificate enrolment procedure, as part of the initial configuration of the NF.\nThree options are described below on how to set up the initial trust. The initial trust can be implemented by 1) OAM issued certificates, 2) an Initial Authentication Key (IAK), or 3) OAM issued signature of certain NF profile parameters, at least including the NF instance ID. The initial trust shall be implemented by one of these mechanisms. The requirements are the following:\n1. The deployment of the initial trust as OAM certificate requires the configuration of a local CA used for 5GC NFs within SBA domain (specifically within the same security trust domain of the NF managed by the OAM system), and the configuration of the root CA public certificate of the local CA as trust anchor in the operator CA/RA.\n2. The deployment of the initial trust as IAK requires the distribution of such key out-of-band between the operator CA/RA and the NF via OAM system. This initial credential is used as initial trust by the operator CA/RA to authenticate the NF. The management aspects of IAK are left to implementation (e.g., provisioning, one time use, etc.).\n3. The deployment of the signature of certain NF profile selected parameters requires the pre-configuration of such signature out-of-band in the NF. The signature is used by the operator CA/RA to authenticate the NF. The selection of the parameters considered in the signature is left to implementation.\nNOTE 1: When the pre-configured signature option is used, the signature can be carried in the regToken control field. The regInfo field may indicate that the certificate request message carries a trusted entity’s signature for certain NF profile parameters.\nNOTE 2: If the initial trust is established by certificate, care needs to be taken to avoid the misuse of such certificate (e.g., by revoking the certificate, limiting the validity, etc.).\nThe operator CA/RA shall be able to verify that the NF Instance Id in the certificate enrolment request belongs to the NF instance requesting the certificate.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.2.3\tProcedure",
                            "text_content": "Figure 10.2.3-1 depicts the procedure for the set-up of initial trust in 5GC NFs.\nThe figure depicts a procedure for setting up initial trust in a network. It shows a step-by-step guide on how to establish a secure connection between two devices, ensuring that the data transmitted is encrypted and protected from unauthorized access.\nFigure 10.2.3-1: Procedure for set up of initial trust\nPrerequisites of the procedure:\n-\tIf the initial trust has been established by initial digital certificate or OAM signature, the public root certificate of the OAM local CA or the OAM certificate shall be configured as trust anchor for the verification of the initial trust in the operator CA/RA.\n-\tIf the initial trust has been established by IAK, the key shall have been securely distributed to the NF by OAM.\n-\tAll other necessary parameters to enable the communication with operator CA/RA such as the address shall have been configured by OAM.\n1. The OAM system shall configure the initial trust used for the enrolment of the operator certificate in the 5GC NF. If the initial trust is established by an initial certificate during or after the NF initialization, the local CA in the OAM system should issue such initial certificate to the NF as part of its configuration. This certificate shall be configured with the NF Instance Id in SubjectAltName field. The fetching procedure of this certificate by the NF is left to implementation.\n2. The 5GC NF generates the private-public key pair and the request of an EE operator certificate to the operator CA/RA.  The certificate enrollment request shall include the initial trust (initial OAM issued certificate, signature of NF profile parameters, or IAK) fetched in step 1 and the NF Instance Id in SubjectAltName field of the certTemplate. The NF shall sign the request with its private key and includes the digital signature in the request.\nIf the initial trust is established by an initial certificate, the request shall include the certificate chain of local CA.\nIf the initial trust is established by IAK, the Operator CA/RA shall validate certificate enrollment request using the IAK.\nIf the initial trust is established by a signature of NF profile parameters, the operator CA/RA shall verify the signature in the certificate enrollment request .\nNOTE: Some 5GC NF implementations may include separate certificate management function(s) acting on behalf of the NF towards the CA/RA. The requirements of this procedure are applicable to those functions.\n3. Certificate enrolment request is sent to the operator CA/RA.\n4. The operator CA/RA shall verify the initial trust in the request from the NF and the identity of the NF (NF Instance Id). If verified, the operator CA/RA shall generate the EE operator certificate for the NF. Specifically, by checking the digital signature on the certificate enrolment request against the trust anchor configured in step 1, and the proof of possession of the private key for the requested operator certificate. It shall verify as well that the NF Instance Id in the SubjectAltName field of the certTemplate for the Certificate Enrolment Request corresponds to the NF Instance Id of the initial OAM issued certificate, or the NF instance ID signed by the OAM issued signature. If those verifications are successful, the operator CA/RA shall generate an EE certificate for the 5GC NF.\n5. The operator CA/RA shall include the EE certificate for the requestor NF in certificate enrolment response.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.3\tCertificate enrolment and renewal for 5GC NFs",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause describes the protocols and corresponding procedures for certificate enrolment and renewal for 5G Core Network Functions based on CMP protocol.\nNOTE:\tAt the time of writing IETF is working in a new version 3 of CMP protocol. The profiling of CMP for 5G Core Network Functions in 10.3.1 might be updated accordingly if required.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.3.1\tCMPv2 Profiling",
                            "text_content": "The following CMPv2 procedures are specified for 5GC NFs:\n-\tCertificate Enrolment.\n-\tCertificate Renewal.\nThe following requirements shall apply to CMPv2 usage in Service Based Architecture:\n-\tThis CMPv2 profile shall only include certificate request and key update functions. Revocation processing, Cross-Certification and PKCS#10 requests shall not be part of this CMPv2 profile.\n-\tFor PKI Message integrity protection, this CMP profile shall only use asymmetric algorithms, or alternatively use shared secret information established via out-of-band means as defined in RFC 4210 [10].\nIf shared secret information is used, it is recommended to use individual one-time secrets. Shared secrets for all NFs shall not be used.\n-\tThe NF may be pre-provisioned with the operator root CA certificate.\n-\tIf the NF is not pre-provisioned with the operator root CA certificate, then the NF shall take the operator root certificate from the certificates received in the initialization response. The selection shall be based on checking which root certificate can be used to validate the received NF certificate.\nNOTE 1:\tCertificate renewal for operator root certificates is not in scope of this clause. Thus, it is assumed that the NF always has a valid operator root certificate available for validation of key update responses.\n-\tThe RA/CA shall support the authentication of initialization requests (ir) based on the verification of out-of-band distributed Initial Authentication Key (IAK) and reference value (mandatory scheme in RFC 4210 [10]).\n-\tThe RA/CA shall authenticate key update requests based on signatures which are validated against the operator root CA.\n-\tThe RA/CA shall be configured with the SBA root certificate of the operator.\n-\tThe RA/CA shall be configured with a RA/CA certificate which is signed either by the operator root CA or by an intermediate CA under the operator root CA.\n-\tIf the RA/CA uses different private keys to sign the generated certificates and the CMPv2 messages, the RA/CA shall be configured with the two related certificates, i.e., the RA/CA certificate for signing signatures and the RA/CA certificate for signing CMP messages.\n-\tIf the RA/CA certificate or certificates (two in case separate private keys are used for signing of certificates and CMP messages) are not signed directly by the operator root CA, also the certificates of the intermediate CAs shall be configured into the RA/CA.\n-\tThe hash algorithms used before generating signatures in the protection field of PKIMessage and for proof-of-possession shall be the same as the hash algorithms specified in subclause 6.1.1 for certificate signatures. The signature algorithms shall be the same as that used in the related certificate profile.\nThe certificate profiles are specified in subclause 6.1.3c.\nNOTE 2:\tThese certificate profiles implicitly specify which algorithms are to be used for the different signatures for proof-of-possession and PKIMessage signing specified in the following subclauses.\nNOTE 3:\tPolicies within RA/CA governing the generation and issuing of certificates are not in scope of the present document and left to operator decision.\nThe following profile is applied to the PKIMessage as specified in IETF RFC 4210 [4]:\n-\tThe support and usage of the optional protection field of type PKIProtection is required by this profile. The message-specific private key to be used in the NF is specified in the subclause 10.3.1.4 in the profiling of the single PKI message bodies for requests sent by the NF. For the RA/CA the RA/CA private key shall be used, or the separate RA/CA private key for signing CMP messages, if NF certificates and CMPv2 messages are signed by different private keys.\n-\tThe support of the optional extraCerts field is required by this profile. The certificates within this field may be ordered in any order. The message-specific content of this field is specified in the subclause 10.3.1.4 in the profiling of the single PKI message bodies.\n-\tAll CMPv2 messages used within this profile shall consist of exactly one PKIMessage, i.e., the size of the sequence for PKIMessages shall be 1 in all cases.\nThe following profile is applied to the PKIHeader field as specified in IETF RFC 4210 [4]:\n-\tThe sender field shall contain the identity of the NF as EE. This identity shall be identical to the subject name of the NF instance present in the certificate for the public key whose related private key is used to sign the PKIMessage.\n-\tThe recipient field shall contain the identity of the RA/CA.\nNOTE:\tThe subject name of RA/CA needs to be available before the CMPv2 run.\n-\tAs the field “protection” of PKIMessage is mandatory, also the field “protectionAlg” of PKIHeader is mandatory. The protectionAlg shall be of type MSG_SIG_ALG. The signature algorithm shall be based upon the algorithm contained in the algorithm field of the SubjectPublicKeyInfo field of the signer’s certificate (belonging to the NF or the RA/CA). The hash algorithm used before signing the PKIMessage shall follow the same specification as given for usage before certificate signing in clause 6.1.1 of the present document.\n-\tThe usage of the transactionID field is mandatory. The recommended procedures for handling of the transactionID given in [4] shall be followed. The NF shall set this field to a random number that is at least 8 bytes long for the first message and use the same random number in any subsequent message in the transaction.\n-\tThe usage of the senderNonce and the recipNonce fields is mandatory. The length of the fields as recommended in [4] shall be used. The recipNonce in the very first message in the transaction should be set to 0 by the sender and shall be disregarded by the recipient of the message.\nThe NF Instance certificate enrolment shall support the following CMPv2 PKI message bodies:\n-\tInitialization Request (ir).\n-\tInitialization Response (ip).\n-\tCertification Request (cr).\n- \tCertification Response (cp).\n-\tKey Update Request (kur).\n-\tKey Update Response (kup).\n-\tConfirmation (pkiconf).\n-\tCertificate confirm (certconf).\nProfiles for the single message bodies above are given in the subclauses below. If no specific profile is given, the provisions of IETF RFC 4210 [4] and IETF RFC 4211 [19] apply.\nThe Initialization Request as specified in IETF RFC 4210 [4] shall contain exactly one CertReqMessages as specified in IETF RFC 4210 [4] and IETF RFC 4211 [19], i.e., the size of the sequence for CertReqMessages shall be 1 in all cases.\nThe following profile shall be applied to the CertReqMessage field and its sub-fields:\n-\tThe subjectAltName field of the CertTemplate contains the nfInstanceID of the NF.\n-\tThe publicKey field of the CertTemplate is mandatory and shall contain the public key of the NF to be certified by the RA/CA. The private/public key pair may be pre-provisioned to the NF, or generated inside the NF, or generated by a certificate management NF acting on behalf of the NF, for the CMPv2 protocol run. The format of this field shall follow IETF RFC 5280 [14].\n-\tThe CertReqMessage shall contain a POP field of type ProofOfPossession. The POP field shall contain a signature field of type POPOSigningKey. The algorithmIdentifier field of the POPOSigningKey field shall contain the signing algorithm which is used by the NF to produce the Proof-of-Possession value, i.e., the signature within POPOSigningKey field.\n-\tIf the poposkInput field of type POPOSigningKeyInput within POPOSigningKey field is used, the sender field within POPOSigningKeyInput shall be mandatory and shall contain the identity of the NF Instance (“nfInstanceID”).\nNOTE 1:\tAccording to IETF RFC 4211 [19], the poposkInput field is mandatory if either the subject field or the publicKey field of the CertTemplate field is omitted.\nNOTE 2:\tAccording to IETF RFC 4211 [19], the sender field of POPOSigningKeyInput is used only if an authenticated identity has been established by the sender.\nThe PKIMessage sent by the NF is signed by the generated or provided private key.\nThe Initialization Response as specified in RFC 4210 [4] shall contain exactly one generated NF certificate, i.e., the size of the sequence for CertResponse shall be 1 in all cases.\nThe following profile shall be applied to the CertRepMessage field and its sub-fields:\n-\tThe generated certificate shall be transferred to the NF in the certifiedKeyPair field of the CertResponse field. The transfer shall not be encrypted (i.e., the certificate field in CertorEncCert is mandatory).\nThe extraCerts field of the PKIMessage carrying the initialization response shall be mandatory and shall contain the operator root certificate (or ‘full chain’ if NF contacted to SubCA using CMPv2) and the RA/CA certificate (or certificates if separate private keys are used for signing of certificates and CMP messages). If the RA/CA certificate(s) are not signed by the operator root CA, also the intermediate certificates for the chain(s) up to the operator root certificate shall be included in the extraCerts field. If additional (self-signed) Root CA certificates are required, they shall be carried in the extraCerts field or caPubs field of the PKIMessage. Since extraCerts field is not under CMP message integrity protection, CMP over TLS should be used as a security transport mechanism. Since CMP already supports integrity protection for caPubs field, the use of security transport mechanisms is optional.\nThe Certification Request (cr) and Certification Response (cp) messages as specified in RFC 4210 [4] and RFC 4211 [19] are intended to be used when additional certificates with specific purpose are required by the NF.\nThe structure and content of these messages is identical to initialization requests and responses, thus the profiling given in the previous subclauses for Initialization Request and Initialization Response shall equally apply, with the following exceptions:\n-\tThe PKIMessage sent by the NF shall be signed with the private key which is related to the last received operator provided NF certificate. The extraCertsField is mandatory and shall contain the NF certificate related to the private key used for signing the PKIMessage. Any intermediate CA certificates shall also be included if the NF certificate is not signed directly by a root CA.\n-\tThe PKIMessage carrying the certification response should not contain the operator root certificate in the extraCerts field.\nThe structure and content of these messages is identical to initialization requests and responses, thus the profiling given in the previous subclauses for Initialization Request and Initialization Response apply equally, with the following exceptions:\n-\tThe PKIMessage sent by the NF shall be signed with the private key which is related to the last received operator provided NF certificate. The extraCertsField is mandatory and shall contain the NF certificate related to the private key used for signing the PKIMessage. Any intermediate CA certificates shall also be included, if the NF certificate is not signed directly by a root CA.\n-\tThe PKIMessage carrying the key update response should not contain the operator root certificate in the extraCerts field.\nInitialization responses and key update responses shall always be followed by a Certificate Confirm request and Confirmation response message exchange.\nThe PKIMessage sent by the NF shall be signed by the same private key which was used in the preceding initialization request or key update request.\nThe extraCerts field of the PKIMessage carrying the Certificate Confirm request and Confirmation response shall be omitted.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.2\tCMPv2 transport",
                            "text_content": "Transport of CMPv2 messages between end entities (network elements) and RA/CA shall be done using HTTP-based protocol as specified in IETF RFC 6712 [18], with the exception that support for TLS is not mandated.\nSupport is mandatory for communication initiated by the end entities where every CMP request triggers a CMP response message from the CA or RA. Support for RA/CA initiated HTTP requests (i.e., announcements) is not mandatory.\nNOTE 1:\tCMP provides built-in integrity protection and authentication. For optional usage of HTTP over TLS (HTTPS) according to RFC 9110 or virtual private networks see IETF RFC 6712 [18].\nNOTE 2:\tIf CMP over TLS is implemented, the certificates used in this TLS communication are to be provided offline.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.3\tTrusted Network Function instances identifiers",
                            "text_content": "Operator RA/CA should be able to verify that the nfinstanceID in the certificate signing request (‘ir’ and ‘cr’ messages in CMP protocol) belongs to the NF instance requesting the certificate.\nDuring the set up of initial trust between NF and operator RA/CA, the operator RA/CA gets to know the NF identity (nfInstanceID), that can be verified at the certificate enrolment and renewal procedures. Note that the nfInstanceID is included in Subject Alt Name field as per the SBA certificate profile in 6.1.3c.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.4\tValidation of usage of X.509 certificate",
                    "description": "",
                    "summary": "",
                    "text_content": "The 5G Core NFs in SBA might need to support multiple operator certificates for different purposes, such as TLS authentication, JSON signing and JSON encryption (e.g., for signing access tokens for service access authorization, signing CCA tokens, etc.).\nThe Extended Key Usage (EKU) extension of the X.509 certificate as defined in IETF RFC 5280 [14] and IETF draft-ietf-lamps-nf-eku-01 [63] can be used to indicate the purpose of the X.509 certificates used in SBA. Accordingly, the CA is expected to be configured with policies to validate the purpose of the certificate and add it to the issued certificate, thus the usage of the certificate can be further verified in corresponding procedures (e.g., TLS authentication).\nNOTE: RFC 5280 [14] specifies several extended key purpose identifiers (KeyPurposeIds) for X.509 certificates, but there are not extended key purpose identifiers explicitly assigned for JSON Web Signature (JWS) and JSON Web Encryption, used in 5GC. IETF draft-ietf-lamps-nf-eku-01 [63] defines extended key purpose identifiers for JWS, JWE. This is work in progress in IETF at the time of writing, therefore the procedure of validation of usage of X.509 certificate is currently applicable only to TLS authentication.\nIf the initial trust is set up by initial certificate and the NF communicates with the operator CA directly, the initial certificate may also carry the Extended Key Usage extension. In that case, during the set up of initial trust procedure described in clause 10.2.3, the extension in the initial certificate is used to indicate the purpose of the end entity certificate that the initial certificate can be used to request from the operator CA/RA. The operator CA/RA verifies the Extended Key Usage extension carried in the certTemplate of the certificate enrolment request corresponds to the Extended Key Usage extension of the initial OAM issued certificate before generating the final certificate for the 5GC NF.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "10.5\tCertificates revocation procedures",
                    "description": "",
                    "summary": "",
                    "text_content": "The possible certificate revocation procedures are profiled in clauses 6.1a and 6.1b of the present document.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "10.6\tCertificate lifecycle management",
                    "description": "",
                    "summary": "",
                    "text_content": "In the implementation of a certificate lifecycle management framework, the NF lifecycle can be considered.\nFor example, when the certificate of an NF producer instance has been revoked without the knowledge of the NRF, the NRF might return that instance to the NF consumer during the discovery procedure, leading to unnecessary signalling due to the use of non-valid certificates. In that case, during the NF discovery procedure, the NRF may check that the potential producers, to be included in the response, do have valid certificates. How such a check is performed is left to implementation. For example, it can be based on locally stored information or by querying other network entities such as OCSP/CRL servers.\n\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "B.1\tIntroduction",
            "description": "In order to document the decision for the \"simple trust model\", which requires manual cross-certification, this section discusses technical advantages and disadvantages of two basic approaches to providing inter-operator trust for purposes of roaming traffic protection, namely cross-certification and a Bridge CA. The Bridge CA is an extension of the cross-certification approach, and identified as one of the recommendable solutions for providing inter-operator trust in NDS/AF feasibility study (TR 33.810). Taking into account the current state of PKI software and the general need for simple solutions when there is a choice, the cross-certification without a Bridge CA was chosen for the NDS/AF TS. This Annex discusses the background motivation for such direction.\nThe direct cross-certification without Bridge CA model is associated strongly with the current practice in the Internet IPsec world, where each IPsec connection is configured with a list of trusted CAs, and anyone with a certificate that has a trust path that can be followed up to such trusted CA (trust anchor) is allowed access. In this model, cross-certification is done at the time the roaming agreement is made. This is called the \"simple trust model.\"\nThe Bridge CA model assumes that all operators wishing to establish a roaming agreement with other operators will first get certified by the Bridge CA for purposes of identification by other operators. This is a necessary preliminary step. Next, when the roaming agreement is done, the operators will configure their IPsec tunnels, with information about which one of the identifiable operators (who have a certificate issued by the Bridge CA) can use that tunnel. This is called the \"extended trust model\", or \"separated trust and access control.\"\nThis Annex does not discuss the benefits of certificates vs. Pre-Shared Keys. The benefit of cross-certification vs. the explicit listing of roaming peer CAs includes the easier evolution path to a possible eventual  model.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "B.2\tRequirements for trust model in NDS/AF",
            "description": "The following is a list of requirements for the trust model for NDS/AF:\nA.\t Simplicity and ease of deployment. PKI brings many benefits when a large number of operators need to tunnel traffic in a mesh configuration, but its adoption should not be hindered by an unnecessarily complex technical solution. The required technical and legal operations necessary for exchanging traffic with another operator should be as easy and straightforward as possible;\nB.\tCompatibility with existing standards. Unless there are explicit requirements why existing PKI standards should be extended to accommodate 3GPP environment, the 3GPP specifications should be accommodated to the existing standards. This allows best choice of equipment for operators and allows interoperability with non-3GPP environments;\nC.\tUsable by both GRX and non-GRX operators. Both operators making use of GRX providers and those without (using leased lines or even the public Internet), should be able to make use of NDS/AF measures to exchange traffic securely.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "B.3\tCross-certification approaches",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "B.3.1\tManual Cross-certification",
                    "description": "",
                    "summary": "",
                    "text_content": "The trust model of manual cross-certification is characterized by the clause: \"Trust nobody unless explicitly allowed\". Issuing a certificate for the authority to be trusted creates the allowances. The manual cross-certification is easy to understand. Also the security of this depends only on the decisions done locally.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.3.2\tCross-certification with a Bridge CA",
                    "description": "",
                    "summary": "",
                    "text_content": "The trust model of bridge-CA can be characterized by the clauses:\n-\t\"Trust everybody that the Bridge-CA trusts unless explicitly denied\". Explicit denials are handled by writing the restrictions (in the form of name constraints) to the certificate issued to the bridge.\n-\t\"Trust everybody listed in the certificate which I issued to the bridge\". Explicit allowances are listed in the certificate issued to the bridge (in the form of name constraints).\nName constraint is a rarely used extension for X.509 certificates. In essence it is a clause that says who to trust or who not to trust based on names on certificates. The fact that they are relative rarely used and the fact that there is so little official documentation about them is a risk. Name constraints also require that there is some organization doing registration of names in order to avoid name collisions.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "B.4\tIssues with the Bridge CA approach",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "B.4.1\tNeed for nameConstraint support in certificates or strong legal bindings and auditing",
                    "description": "",
                    "summary": "",
                    "text_content": "If no precautions are taken, it is possible that an operator (M) whose SEG CA has been signed by the Bridge CA (= certified by the Bridge), creates certificates that resemble another operator's (A) certificates, letting M access to operator (B)'s network, even without authorization.\nLet's say operator B has the following configuration for access to her subnetwork reserved for handling roaming traffic:\n-\tLocal-Subnetwork = some ipv6 subnetwork address;\n-\tTrustedCA's = BridgeCA;\n-\tAllowedCertificateSubject = O=Operator A or O=Operator C or O=Operator D.\nNOTE:\tThe IP addresses of the remote SEGs are not limited, as authentication is done based on certificates, and all trusted operators are allowed similar access. If different foreign operators would require to access different subnetworks, there would be several configuration blocks like the above, with the IP addresses appropriately specified.\nSuch \"AllowedCertificateSubject\" feature (the term name is imaginary) is widely supported by PKI-capable IPsec devices.\nIf Operator M used certificates of the following form for her certificates, she would not be allowed in:\n-\tSubject: CN=SEG 1, O=Operator M;\n-\tSigner: CN=SEG CA, O=Operator M.\nHowever, she can fabricate certificates of the following form:\n-\tSubject: CN=SEG 1, O=Operator A;\n-\tSigner: CN=SEG CA, O=Operator M.\nUsing such certificates would allow full but illegitimate access to Operator B's network revealed for use by Operator A.\nNow, there are the following possibilities to circumvent the problem:\n1.\tchecking also the Signer name when authenticating foreign operators, either by a) a proprietary \"AllowedCertificateSigner\" property or b) support for nameConstraints in the Bridge CA certificate issued to operator M;\n2.\testablishing strong legal bindings and auditing that would discourage Operator M from such illegitimate fabrication of Operator A certificates.\nThe problem with solution 1.a is that such \"AllowedCertificateSigner\" is not commonly supported by current PKI end-entity products, being in conflict with requirement B.\nThe problem with solution 1.b is that such \"nameConstraints\" attribute in certificates is not commonly supported by current  or end-entity products, being in conflict with requirement B.\nThe problem with solution 2 is that first of all, an organization willing to run a Bridge CA has to be found before any pair of operators can exchange roaming traffic with NDS/AF mechanisms. Next, there shall be established paperwork and auditing procedures to make sure that the exploit described here can be detected. This is in conflict with requirement A. Also, the illegitimate act described could not be technically prevented beforehand.\nIf name constraints are used, every time a new roaming agreement is made, each operator shall update the certificate they issue for the Bridge, adding the new roaming partner's name into the certificate. From the point of view of one operator, the number of new certificate signing operations is the same whether a Bridge CA or a direct cross-certification model is in use.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.4.2\tPreventing name collisions",
                    "description": "",
                    "summary": "",
                    "text_content": "If name constraints are used to prevent the additional \"bureaucracy\" involved with the Bridge CA, the names written into the certificate need to be registered with a third party to prevent two operators accidentally or on purpose using the same name in their certificates. This is in conflict with requirement B.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.4.3\tTwo redundant steps required for establishing trust",
                    "description": "",
                    "summary": "",
                    "text_content": "As described in the introduction, with the \"extended trust model\", each operator shall first be certified by the bridge (authentication), and then as the second step, enumerate the trusted operators when configuring the IPsec tunnel (access control).\nFor the Bridge CA model to work, there is a need for organization that all the other parties involved can trust - and the trust shall be transitive! If you trust the bridge, you shall also trust the other organizations joining to the bridge via the cross-certification. If Operator A and the Bridge CA cross-certify with each other, Operator A will automatically trust every other certified operator to obey the rules. And this trust is not related to the roaming traffic tunnel; the tunnel has to be configured independently of the PKI.\nSo even if configuring new certificates in the SEGs is avoided when cross-certification is used, the roaming information shall be configured and maintained in the SEG some other way. And the hard part: How the trust provided by the PKI and the roaming agreements is combined, because clearly in this case PKI provided trust is not the same as roaming agreements.\nTwo steps would be needed:\n1.\tbuilding \"trust\" through  => authenticating the peer SEG;\n2.\tspecify in the tunnel configuration which peering SEGs can be trusted.\nIf the cross-certification is done without a Bridge CA, the steps can be combined into one. What is the additional value of the PKI provided trust (step 1), if the peering SEGs have to be restricted in any case?\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.4.4\tLong certificate chains connected with IKE implementation issues",
                    "description": "",
                    "summary": "",
                    "text_content": "If  is used, a SEG CA certificate has to be sent in the certificate payload in addition to the local end entity (SEG) certificate. This leads in Ethernet environments to the fragmentation of the IKE packet, which some current IKE implementations do not support. It is a problem in the implementation, not the protocol. Even in IPv6, the IKE UDP packets need to be fragmented, posing a potential interoperability problem. Clearly it is not a solution to use a different protocol, but instead the current implementations should be fixed. Still, taking into account requirement B, it is safer to avoid the problem altogether by not forcing the fragmentation of IKE packets by not using a Bridge CA.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.4.5\tLack of existing relevant  experiences",
                    "description": "",
                    "summary": "",
                    "text_content": "The Federal PKI in the  is an example deployment where a Bridge CA is used to connect together CAs of the various federal agencies. It seems to be however the only documented one of its kind, and is connected with very heavy policy documentation and obviously heavy auditing practices, even within one organization, the federal government. The bridge approach is warranted in the case, because they want to automatically check whether some entity has legal rights to sign some document. The number of entities doing cross-domain PKI validation can be several millions, and it is impossible for one validating entity to keep count of individual signers.\nIn 3G roaming, the situation is in many ways different. When a new operator is born, the other ones do not automatically want to exchange roaming traffic with the new one, but a legal agreement with that operator and a technical tunnel establishment shall be done. In Federal PKI, the situation is the opposite: nothing should need to be done and still be able to trust the other.\nIn the Federal PKI, the paperwork and processes make name constraints in certificates unnecessary, and IKE is supposedly not used together with the Bridge CA.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "B.5\tFeasibility of the direct cross-certification approach",
            "description": "This chapter discusses the direct cross-certification, i.e. manual cross-certification approach, where operators are doing the cross-certification operation only when agreeing to set up a tunnel with another operator. This tunnel setup is a legal and technical operation in any case, so it is feasible to do also the cross-certification at this time, removing the need for the initial step to cross-certify with the Bridge CA.\nThere is no technical difference regarding the feasibility of direct cross-certification or  in the context of GRX or non-GRX environment. GRX might be one possible choice for providing the Bridge CA services.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "B.5.1\tBenefits of direct cross-certification",
                    "description": "",
                    "summary": "",
                    "text_content": "The benefits of the direct cross-certification is that as a mechanism it is well known, supported widely by current PKI products and there even exists an evolution path to a Bridge CA solution if the products come to support it adequately, a Bridge CA is established, and the number of operators becomes so large to warrant the use of the Bridge CA technology.  uses the cross-certification mechanisms in any case.\nThe tunnel configuration would look like the following:\n-\tLocal-Subnetwork = some ipv6 subnetwork address;\n-\tTrustedCA's = LocalCA.\nThe information of which operator is allowed access is implicit in the direct cross-certifications that have been done by the LocalCA, thus authentication and access control are tightly connected. If different foreign operators need to access different subnetworks, there would be separate tunnel configurations with SEG IP address for each, including an \"AllowedCertificateSubject\" limitation. The \"AllowedCertificateSigner\" limitation is not needed as necessary in this model (compared to the bridge CA model), since the set of operators which can be authenticated are only the ones, that have previously been agreed to trust when doing the direct cross-certification. In the bridge CA case, the set of operators which can be authenticated includes all operators who have joined to the bridge.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.5.2\tMemory and processing power requirements",
                    "description": "",
                    "summary": "",
                    "text_content": "In case of direct cross-certification, each operator shall store the certificates issued for the other operators locally. They could be stored in the SEG devices, or then in a common repository.\nMemory and processing power requirement are not an issue.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.5.3\tShortcomings",
                    "description": "",
                    "summary": "",
                    "text_content": "As discussed in the previous section, the Bridge CA approach saves memory or storage space in SEGs, because all the other operators  certificates do not need to be stored with other operators. Just the Bridge CA certificate would be stored, and other certificates retrieved during IKE negotiation.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.5.4\tPossible evolution path to a Bridge CA",
                    "description": "",
                    "summary": "",
                    "text_content": "If needed, it is possible to take the Bridge CA into use gradually, given that the support by PKI products becomes reality. From one operator's point of view, the bridge CA would be like any other operator so far, and a cross-certification would be made, but additionally the name constraints in the certificate issued for the Bridge CA should be updated every time a new roaming agreement is made.\nIn order to document the decision for the protocol for SEGs to access CRL repositories, this section summarises technical advantages and disadvantages of the two candidates.\nLDAP\n+ implemented by all PKI products (unless purely manual)\n+ scalability\n+ flexibility (integration possibility to other systems, automatic public key retrieval possibility)\n- complexity\nHTTP\n+ simple\n- not supported by all PKI products (although widely supported)\nLDAP was chosen as the more future-proof protocol. Although more complex than HTTP, LDAP is well established amongst PKI vendors and operators.\nIn order to document the decision for storing the cross-certificates in Certificate Repository, fetching those with LDAP and caching them in SEGs, this section summarises technical advantages and disadvantages of the three alternatives.\nThe following table summarizes differences between alternatives:\nTable D.1\n\nAnalysis:\n-\tAlternative B) requires one additional LDAP query in every IKE Phase 1 negotiation and will introduce new error cases\n-\tLatency of LDAP: information from LDAP to local disk is cached and populating it takes some time, but in practice this time is not significant.\n-\tThe benefit of alternative B) and C) compared to alternative A) is easier management, that is, storing and removing the certificate in/from one single place only.\nConclusion: alternative C) is the most feasible choice, because it combines good points of alternatives A) and B).\nThe TLS protocol profiles are located in TS 33.210 [1].\n",
                    "tables": [
                        {
                            "description": "Table D.1",
                            "table number": 2,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "F.0\tGeneral",
            "description": "The purpose of this annex is to provide alternative guidelines for TLS certificate handling in case of the absence of the authentication framework for TLS certificates.\nWithin this Annex following abbreviations are used: CAA is the certification authority in A's network and CAB is the certification authority in B's network. CertA is the certificate of A and CertB is the certificate of  is the set of identifiers that A may use for identification towards B. TB is the set of peers trusted by B.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "F.1\tTLS certificate enrolment",
            "description": "Mutual authentication in TLS is achieved based on public key technology and certificates. Both TLS peers A and B need to contain a certificate store and there shall be at least one certification authority CA that can issue certificates within the security domains in with A and B are part of. CertA contains the set IA of A's identifiers. Each identifier is in the form of fully qualified domain name (FQDN). Similarly, B's certificate is CertB.\nThe certificates in the store of B define the group TB of peers trusted by B. There are several options for creation and enrolment of certificates, three of which are described below.\n1.\tIn one option there is a certification authority, CAB, only in the network of B. CAB issues a certificate CertB to B and a certificate CertA to A. The certificates are delivered from CAB to A and B in a secure way \"out of band\". Both A and B then add their peer into the group of their trusted peers by inserting that peer's certificate into the certificate store: A inserts CertB into A's certificate store and B inserts CertA into B's certificate store. This insertion is typically manual and the details depend on the implementation of the management interface to the certificate store.\n2.\tIn another option both A's and B's networks contain certification authorities, CAB and CAA, respectively. CAB issues a certificate CertB to B and CAA issues a certificate CertA to A. The certificates are delivered from CAB to A and from CAA to B in a secure way \"out of band\". Both A and B then add their peer into the group of their trusted peers by inserting that peer’s certificate into the certificate store: A inserts CertB into A's certificate store and B inserts CertA into B's certificate store.\n3.\tIn a third option the CA certificates of both sides are exchanged: the certificate of CAB is delivered to A and the certificate of CAA is delivered to B in a secure way \"out of band\"', inserted to the certificate store, and marked trusted. The validation of CertA and CertB, that are exchanged during TLS handshake, is based on the presence of the corresponding CA certificates in the certificate store.\nNOTE:\tIn options 1 and 2 the need for certification authority can be avoided if the peers generate self signed certificates and exchange them in a secure way, \"out of band\". Also, instead of certificates themselves, certificate fingerprints can be exchanged \"out of band\" in those options.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "F.2\tTLS Certificate revocation",
            "description": "In the absence of PKI-revocation interfaces, certificate revocation needs to be performed manually. The revocation operation involves the removal of A from the group TB of peers trusted by B. In the first two enrolment options described above the revocation happens by B removing the certificate of A, CertA, from its certificate store. This removal can be done manually. In the third option the certificate of A, CertA, is not in B's certificate store. For that reason B has to have a way to check the validity of CertA with the issuer of the certificate (also in the first two enrolment options the amount of manual maintenance operations will decrease if B can check the validity of CertA with the issuer of the certificate). This check may be done by using Online Certificate Status Protocol (OCSP) RFC 6960 [47 or by using Certificate Revocation Lists (CRLs) RFC 5280 [14] published by the issuer of CertA.\nThe purpose of this annex is to provide an overview how the initial enrolment of a base station may be executed.\nThe message flow for an initial enrolment of a base station to the RA/CA is shown in Figure 8 below. The text below the figure gives a description of this message flow. Precondition for this message flow is that the base station contains the vendor provided private/public key pair and is pre-provisioned with the related base station certificate signed by a vendor CA. If there is a certificate chain up to the vendor root CA, also the intermediate certificates are pre-provisioned to the base station. The RA/CA is configured with the root certificate of the vendor and its own certificate(s). The exchanged messages are protected by setting the PKIHeader fields \"protection\" and \"protectionAlg\". Example of protectionAlg is set to the value {1 2 840 11359 1 1 11} (sha256With RSAEncrypt) when RSA and SHA-256 is used.\nThe figure depicts an example message flow for initial base station enrolment in a 5G network. It illustrates the steps taken by the base station (gNB) to authenticate and enroll the user equipment (UE) into the network. The figure includes the gNB, UE, and other key components such as the network slicing, network slicing controller (NSC), and network slicing service (NSS). The message flow is depicted in a flowchart format, with arrows indicating the flow of data between the components. The figure is a visual representation of the complex process involved in initial base station enrolment, highlighting the importance of network slicing and the role of the NSS in managing the network.\nFigure 8: Example message flow for initial base station enrolment\n1.\tThe base station discovers the RA/CA address.\n2.\tThe base station generates the private/public key pair to be enrolled in the operator CA, if this is not pre-provisioned.\n3.\tThe base station generates the Initialization Request (ir). The CertReqMsg inside ir specifies the requested certificate. If the suggested identity is known to the base station, it includes this in the subject field. To provide proof of possession the base station generates the signature for the POPOSigningKey field of the CertReqMsg using the private key related to the public key to be certified by the RA/CA. The base station signs the ir using the vendor provided private key, and includes the digital signature in the PKIMessage. Its own vendor signed certificate and any intermediate certificates are included in the extraCerts field of the PKIMessage carrying the ir.\n4.\tThe base station sends the signed ir message to the RA/CA.\n5.\tThe RA/CA verifies the digital signature on the ir message against the vendor root certificate using the certificate(s) sent by the base station. The RA/CA also verifies the proof of the possession of the private key for the requested certificate.\n6.\tThe RA/CA generates the certificate for base station. If the suggested identity of the base station is not included in the ir message, the RA/CA determines the suggested identity of the base station, e.g. based on the vendor provided identity of the base station contained in the base station certificate.\nNOTE: The procedures for determination of the base station identity used by the operator are not in scope of the present document. According to [4], the RA/CA can replace a suggested identity sent by the base station with another identity based on local information.\n7.\tThe RA/CA generates an Initialization Response (ip) which includes the issued certificate and uses the same certReqId value as in the Initialization Request. The RA/CA signs the ip with the RA/CA private key (or the private key for signing CMP messages, if separate), and includes the signature, the RA/CA certificate(s) and the operator root certificate in the PKIMessage. The appropriate certificate chains for authenticating the RA/CA certificate(s) are included in the PKIMessage.\n8.\tThe RA/CA sends the signed ip to the base station.\n9.\tIf the operator root certificate is not pre-provisioned to the base station, the base station extracts the operator root certificate from the PKIMessage. The base station authenticates the PKIMessage using the RA/CA certificate and installs the base station certificate on success.\n10.\tThe base station creates and signs the CertificateConfirm (certconf) message. The CertficateConfirm message uses the same certReqId value as in the Initialization Request.\n11. The base station sends the PKIMessage that includes the signed CertificateConfirm to the RA/CA.\n12.\t The RA/CA authenticates the PKI Message that includes the CertificateConfirm.\n13.\tThe RA/CA creates and signs a Confirmation message (pkiconf).\n14.\tThe RA/CA sends the signed PKIMessage including the pkiconf message to the base station.\n15.\tThe base station authenticates the pkiconf message.\n3GPP TS 23.251 [31] defines two basic models for network sharing, namely the Gateway Core Network (GWCN) configuration and the Multi-Operator Core Network (MOCN) configuration. 3GPP TS 23.251 [31] does not guide on SEG placement in the architecture. In some LTE RAN sharing deployments according to the MOCN configuration, the eNB may need to connect not only to SEGs deployed by the hosting operator but also to SEGs deployed by participating operators. These SEGs are equipped with certificates issued by the RAs/CAs of the operators to which they belong.\nThe shared eNB is provisioned with the root certificate of the hosting operator’s CA and an eNB certificate issued by the hosting operator’s CA after the successful certificate enrolment procedure specified in clause 9 of the present document has been performed successfully. An IPsec security association between the eNB and the SEG of hosting operator can be set up and a link with an OAM entity can then be established. It is assumed that the shared eNB is managed by a single O&M entity controlled by the hosting operator.\nThe issue addressed in this Annex is when an IPsec security association between the eNB and the SEG of a participating operator is wanted. This cannot succeed because neither the shared eNB nor the SEG of the participating operator can verify the certificate held by the other entity unless additional steps are taken. Two solutions can be used to solve this issue.\nSolution 1\nThe shared eNB can be provisioned with the root certificates of the participating operators’ CAs by the OAM entity managing the eNB. Consequently the eNB can verify the certificates of the SEGs of the participating operators.\nThe SEGs of participating operators can be provisioned with the root certificate of the hosting operator’s CA so that the SEGs of participating operators can verify the shared eNB certificate issued by the hosting operator. Consequently the shared eNB and the SEGs of the participating operators can set up IPsec security associations between them.\nSolution 2\nThe shared eNB can be provisioned with the necessary participating operators’ RA/CA information (e.g., address of the participating operators’ RAs/CAs, root certificates of the participating operators’ RAs/CAs, etc) by the OAM entity managing the eNB . The shared eNB can then perform the certificate enrolment procedure specified in clause 9 with every participating operator RA/CA. The shared eNB can get the root certificates of the participating operators’ CA and the eNB certificate issued by the participating operators’ RA/CA. Consequently the shared eNB and the SEGs of the participating operators can set up IPsec security associations between them.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "I.1\tIntroduction",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause provides guidance to consider in the deployment of 5GC certificate management procedures that have been left to implementation.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "I.2\tNF Certificate Updates",
                    "description": "",
                    "summary": "",
                    "text_content": "The normal procedure of update and renewal of 5GC NF certificates is managed by CMP protocol as described in clause X.3.1.\nNevertheless, the certificate management framework can be severely impacted by special critical circumstances, which can derive in simultaneous updates of vast number of certificates, causing a potential partial or complete disruption of the service. For example, a compromised security algorithm, the disclosure of broken cryptographic primitives, the revocation of CA root certificates or multiple certificates with same expiration data, are some of the special circumstances triggering the certificate update procedure.\nThis clause lists a few practical recommendations to be considered in NF certificate update procedure with the aim of mitigating potential issues or disruptions due to outages or overload situations. These recommendations can be deployed and implemented via internal configuration, operator policies and other mechanisms and functionalities in the operator PKI infrastructure, OAM systems, orchestration systems, etc.\n-\tThe NF certificate updates can be configured in the operator PKI, and consequently the procedure can be initiated in advance before the certificate expiration time. For example, making use of different time interval/periodicity based on the NF type when configuring certificate update policies. Observe that the NF type is included in the certificates as per the profile in clause 6.1.3c and hence can be checked there while configuring such policies.\n-\tThe operator PKI does not have to update the certificates with the same or similar expiration time simultaneously. Furthermore, the certificate update policies can take into consideration the expiration time and the triggers of the procedure being configured in advance. Certificate updates policies can be configured, for example in the operator PKI, to create different batches of certificates to be updated sequentially or with certain prioritization criteria.\n-\tCertificate expiry related alarms reported by network management systems, operator CA announcements for certificate revocations (e.g., via CRL, OCSP, etc.), and any other type of certificate related event, can be monitored with the purpose of mitigating the risk of service unavailability due to above mentioned special circumstances.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "I.3\tCertificate Management for Network Slicing",
                    "description": "",
                    "summary": "",
                    "text_content": "The certificate management framework in 5G Core might need to work with certificates that belong to different domains, such as customer 3rd party slices, possibly with different requirements in terms of certificate lifecycles, CA(s) security policies potentially managed by administrators of multiple stakeholders (e.g., 5G Core operator, network slice customers/tenants) etc.\nNetwork slice customers being offered certain slices can require performing management and operation tasks for the certificates of slice-specific NFs over operator’s CA, or even to use their own CA and certificate management procedures for all or part of the slice-specific NFs. In this case, operator and slice customer may need to agree on mechanisms to establish the trust between operator and customer domain and automate certification lifecycle management across operator CAs/RAs and third parties CAs specific for slice(s).\nTrust relationship and secure communication between the different entities involved in the network slicing certificate management, i.e., NF management functions (OAM), operator RA/CA and CAs (root CAs, or sub-CAs) specific for slice(s), may need to be established. Operator and slice customer may need to support capabilities to allocate a root CA/sub-CA to sign slice specific certificate for a NF, and may need to be able to manage such slice-specific certificates within the slicing orchestration framework to align with the network slice lifecycle.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "I.4\tKey Management",
                    "description": "",
                    "summary": "",
                    "text_content": "Service Based Architecture (SBA) is likely to be deployed in an all-software multivendor environment. It is imperative that the underlying virtualized infrastructure hosting SBA NF is secured for confidentiality, integrity, and replay protection between authenticated endpoints.\nAlso, the security of the certificate management relies on robust secure key management. It includes confidentiality and integrity of the private key while at rest. All the life cycle stages of the cryptographic key, such as key generation and key rotation, need to follow secure practices.\n\n\n",
                    "tables": [
                        {
                            "description": "",
                            "table number": 3,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "",
                            "table number": 4,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        }
    ]
}
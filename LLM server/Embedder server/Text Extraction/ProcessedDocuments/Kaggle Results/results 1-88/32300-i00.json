{
    "document_name": "32300-i00.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Specification has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "Introduction",
            "description": "Configuration Management (CM), in general, provides the operator with the ability to assure correct and effective operation of the 3GPP network as it evolves. CM actions have the objective to control and monitor the actual configuration on the Network Elements (NEs) and Network Resources (NRs), and they may be initiated by the operator or by functions in the Operations Systems () or NEs.\nCM actions may be requested as part of an implementation programme (e.g. additions and deletions), as part of an optimisation programme (e.g. modifications), and to maintain the overall Quality of Service (QoS). The CM actions are initiated either as single actions on single NEs of the 3GPP network, or as part of a complex procedure involving actions on many resources/objects in one or several NEs.\nBackground\nTraditionally, multiple name conventions have been used by different vendors' NEs, or even within the same vendor, to name network resources. The following problems have thus arisen:\n-\tDifferent classes of NE have used different name conventions. Network Management applications, when interfacing with these NEs, have been required to understand multiple name conventions to manage the NEs.\n-\tNetwork management applications (e.g. Fault Management application), when interfacing with other applications (e.g. Configuration Management application, trouble ticket system) have been required to understand multiple name conventions.\n-\tWhen a customer purchased multiple classes of NEs from the same or different vendors, the customer was confronted with multiple name conventions.\n-\tWithout a name convention, it is difficult to integrate 3GPP conformant vendors' resource name space (see subclause 3.1.5 for definition of name space) into the customer's  name space.\nBenefits\nThe benefits of using the subject name convention to name 3GPP network resources for network management purposes are as follows:\n-\tA resource name is guaranteed to be unambiguous in that it refers to, at most, one network resource. Unambiguous naming of managed network resources is necessary for interoperability among managing applications and systems.\n-\tThe resource name syntax is specified such that management applications can be designed with assurance that its name-parsing algorithm needs not be modified in the future. We can derive this benefit only if the subject name convention is widely accepted.\nThe root and upper portions of the name hierarchy are based on name infrastructure of Domain Name System (DNS) (see IETF RFC 2247 [5]). The subject name convention can naturally fit in DNS and can integrate well with other hierarchical naming systems, such as ITU-T Recommendation X.500 [2].\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document is valid for TSs using IRPs and SBMA.\nA more detailed background and introduction of the IRP concept is given in 3GPP TS 32.150 [16] and more detailed background for SBMA in 3GPP TS 28.533 [20].\nTo perform network management tasks, co-operating applications require identical interpretation of names assigned to network resources under management. Such names are required to be unambiguous as well. The present document recommends one name convention for network resources under management in the 3GPP context.\nTo facilitate integration of network management information obtained via multiple management interfaces based on different Solution Set technologies, identical network resource name semantics shall be conveyed in all management interfaces. The present document specifies one such name convention.\nThe present document also specifies an IOC/MOC name recommendation (see annex E) in order to avoid potential problems with valid characters in some programming languages.\nIn this document, the name convention and name recommendation (see annex E) are specified for MO instances whose MO class stereotype is IOC. These specifications are also for MO instances whose MO class stereotype is Support IOC (SupportIOC).\n\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\tVoid.\n[2]\tITU-T Recommendation X.500 (1993): \"Information technology - Open Systems Interconnection - The Directory: Overview of concepts, models and services\".\n[3]\tT. Howes, ISBN 1-57870-070-1: \"Understanding and Deploying LDAP Directory Services\".\n[4]\tIETF RFC 1737 (1994): \"Functional Requirements for Uniform Resource Names\".\n[5]\tIETF RFC 2247 (1998): \"Using Domains in LDAP/X.500 Distinguished Names\".\n[6]\tIETF RFC 1035 (1987): \"Domain names - implementation and specification\".\n[7]\tIETF RFC 2253 (1997): \"Lightweight Directory Access Protocol (v3): UTF-8 String Representation of Distinguished Names\".\n[8]\t3GPP TS 32.111-2: \"Telecommunication management; Fault Management; Part 2: Alarm Integration Reference Point (IRP): Information Service (IS)\".\n[9]\tVoid.\n[10]\tVoid.\n[11]\t3GPP TS 32.101: \"Telecommunication management; Principles and high level requirements\".\n[12]\t3GPP TS 32.102: \"Telecommunication management; Architecture\".\n[13]\tISO/IEC 14977: \"Information technology – Syntactic metalanguage – Extended BNF\".\n[14]\tISO/IEC 646: \"Information technology – ISO 7-bit coded character set for information interchange\".\n[15]\tISO/IEC 10646: \"Information technology – Universal multiple-octet Coded Character Set (UCS)\".\n[16]\t3GPP TS 32.150: \"Integration Reference Point (IRP) Concept and definitions\".\n[17]\t3GPP2 S.S0028-E \"OAM&P for cdma2000 (Overview, 3GPP R7 Delta Specification,  3GPP2 Network Resource Model IRP)\" .\n[18]\tMEF Technical Specification MEF 7.1, Phase 2 EMS-NMS Information Model, October 2009.\n[19]\tATM Forum, Technical Committee, Network Management, M4 Network View CMIP MIB Specification.\n[20]\t3GPP TS 32.103: \"Integration Reference Point (IRP) overview and usage guide\".\n[21]\t3GPP TS 28.533: \"Management and orchestration; Architecture framework\".\n[22]\t3GPP TS 28.622: \"Telecommunication management; Generic Network Resource Model (NRM) Integration Reference Point (IRP); Information Service (IS)\".\n[23]\t3GPP TS 32.156: \"Telecommunication management; Fixed Mobile Convergence (FMC) model repertoire\".\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tDefinitions",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "3.1.0\tGeneral",
                            "text_content": "For the purposes of the present document, for IRPs the terms and definitions given in 3GPP TS 32.101 [11] ,  3GPP TS 32.102 [12] and 3GPP TS 32.150 [16] apply. This subclause defines terms essential for understanding of name convention in the IRP context.\nFor SBMA the terms and definitions given in 3GPP TS 28.533 [20] apply.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "3.1.1\tVoid",
                            "text_content": "",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "3.1.2\tVoid",
                            "text_content": "",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "3.1.3\tManaged Object and Network Resource",
                            "text_content": "In the context of the present document, a Managed Object (MO) is a software object that encapsulates the manageable characteristics and behaviour of a particular network resource. Examples of network resource are switch, scanner for monitoring performance data, cell, site, transmission links, satellite, operator profile, etc. In the present document, MO sometimes is referred to as MO instance.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "3.1.4\tName",
                            "text_content": "In the context of the present document, a name is restricted to the identification of a MO, that is, a software object representing a real network resource.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "3.1.5\tName space",
                            "text_content": "A name space is a collection of names. This name convention uses a hierarchical containment structure, including its simplest form - the one-level, flat name space. This name convention does not support an arbitrarily connected name space, or graph structure, in which a named object can be both child and parent of another named object.\nFigure 1 shows some examples of supported and unsupported name spaces (this figure is from T. Howes, ISBN 1-57870-070-1 [3] and it provides useful information on name space design).\nFigure 1 illustrates the concept of supported and unsupported name spaces in a network, showcasing various scenarios where different namespaces are utilized. The figure presents a clear distinction between the two, emphasizing the importance of understanding and managing these spaces for efficient network operation.\nFigure 1: Examples of supported and unsupported name spaces\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "3.1.6\tGlobal Root and Local Root",
                            "text_content": "Names in name space are organised in hierarchy. An MO instance that contains another one is referred to as the superior (parent), whereas the contained MO instance is referred to as the subordinate (child).\nIn modern network management, it is expected that the  name space be partitioned for implementations in multiple managed system (see annex C for reasons of name space partitioning). The parent of all MO instances in a single managed system is called the Local Root. The ultimate parent of all MO instances of all managed systems is called the Global Root.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "3.1.7\tDistinguished Name and Relative Distinguished Name",
                            "text_content": "A Distinguished Name (DN) is used to uniquely identify a MO within a name space. A DN is built from a series of \"name components\", referred to as Relative Distinguished Names (RDNs). ITU-T Recommendation X.500 [2] defines the concepts of DN and RDN in detail, e.g., using ASN.1, in the following way:\nDistinguishedName ::= RDNSequence\nRDNSequence ::= SEQUENCE OF RelativeDistinguishedName\nRelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue\nAttributeTypeAndValue ::= SEQUENCE {type AttributeType, value AttributeValue}\n\nThe present document references this ASN.1 structure but it only uses single-valued (not multi-valued) RDN.\nFrom a DN of a MO, one can derive the DN of its containing MO, if any. This containment relation is the only relation carried by the DN. No other relation can be carried or implied by the DN.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "3.2\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the following abbreviations apply:\nASN.1\tAbstract Syntax Notation One\nCM\tConfiguration Management\nDC\tDomain Component\nDN\tDistinguished Name\nDNS\tDomain Name Service\nEBNF\tExtended Backus-Naur Form\nFM\tFault Management\nIETF\tInternet Engineering Task Force\nIOC\tInformation Object Class\nIRP\tIntegration Reference Point\nIS\tInformation Service\nLDN\tLocal Distinguished Name\nMO\tManaged Object\nMOC\tManaged Object Class\nMOI\tManaged Object Instance\nNE\tNetwork Element\nNF\tNetwork Function\nNR\tNetwork Resource\nNRM\tNetwork Resource Model\nPM\tPerformance Management\nQoS\tQuality of Service\nRDN\tRelative Distinguished Name\nSBMA\tService Based Management Architecture\nSS\tSolution Set\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "TS\tTechnical Specification4\tSystem overview",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tSystem context",
                    "description": "",
                    "summary": "",
                    "text_content": "Situations under which MO (representing network resource) names are used are as follows:\na)\tMO names cross various 3GPP management interfaces.\nEXAMPLE 1:\tIn the context of Alarm IRP 3GPP TS 32.111-2 [8], IRPAgent notifies IRPManager of the alarm condition of a network resource. The DN of the MO, representing alarmed network resource, encoded as specified in the present document, is carried in the Managed Object Instance parameter of the notification.\nEXAMPLE 2:\tIn the context of Generic Network Resources IRP: NRM, 3GPP TS 28.622 [21], MnS producer notifies MnS consumer of the creation of new object. The DN of the newly created object, encoded as specified in the present document, is carried in the notification.\nEXAMPLE 3:\tIn the context of Generic Network Resources IRP: NRM, 3GPP TS 28.622 [21], MnS consumer requests MnS producer to search for a particular object by specifying the start point of the search. The DN of the base object, upon which the search begins downward hierarchically, is carried in the request.\nb)\tCo-operating management applications need to exchange information that includes MO (representing network resource) names.\nEXAMPLE 4:\tA Fault Management (FM) application may request a trouble ticket system to open a new trouble ticket reporting the alarmed condition of a network resource by specifying, among other things, the MO name representing the alarmed network resource. The DN of the MO, encoded as specified in the present document, is included in the request.\nEXAMPLE 5:\tA Performance Management (PM) system that produces reports on performance of network resources. The DNs of the MOs, representing the reported network resources, encoded as specified in the present document, are printed on the report.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "5\tName Convention for Managed Objects",
            "description": "Network resources shall be named using the naming conventions in ITU-T Recommendation X.500 [2] with one restriction listed below. Central to the X.500 naming convention is the concept of the Distinguished Name (DN) (see subclause 3.1.7).\nThe restriction is that this name convention does not support multi-value RDN. Only single-value RDN is supported.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "6\tRepresentations of Distinguished Name (DN)",
            "description": "A DN can be encoded and represented in many ways. The present document specifies one representation. Future work on IRP specifications may require the definition(s) of other representation(s)..\nThe DN is encoded using the string representation.\nThe DN string representation encoding scheme:\n-\tshall be used for DNs exchanged through all SS technologies,\n-\tis in itself SS technology neutral, and\n-\tis subject to SS technology specific handling, such as escaping, if required by such a technology.\n\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "7\tString Representation of DN",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "7.A\tOverview",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause specifies the string representation of DN. This work is based on IETF RFC 2253 [7]. A DN string representation, using the string-encoding scheme specified in the present document, is also a valid DN string according to IETF RFC 2253 [7].\nThe string-encoding scheme specified in the present document imposes further restrictions as compared to IETF RFC 2253 [7]. The most important restrictions are:\n-\tMulti-valued RDN is not supported in the subject name convention.\n-\tThe asterisk character (see clause 7.2 bullet 3) is used to denote wildcard. The asterisk character shall not be used in DN .\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.B\tAllowed character sets",
                    "description": "",
                    "summary": "",
                    "text_content": "Subject to further restrictions described in the present document, the allowed characters for the string representation of DN are:\n-\tCharacters of ISO/IEC 646 [14] International Reference Version (IRV) coded character set, and\n-\tCharacters of standard coded character sets supporting and extending ISO/IEC 646 [14] IRV coded character set, i.e. ISO/IEC 10646 [15] coded character set.\nNOTE 1:\tISO/IEC 646 [14] IRV coded character set is the international equivalent to the ANSI X3.4 ASCII coded character set.\nNOTE 2:\tThe character set of ISO/IEC 646 [14] IRV corresponds to the subset of characters that range from U+0000 to U+007F in the character set of ISO/IEC 10646 [15].\nNOTE 3:\tThe ISO/IEC 646 [14] IRV characters specifically referenced in this specification are further identified using ISO/IEC 10646 [15] character short identifier notation form \"U+XXXX\".\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.1\tConverting DN from ASN.1 to String",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "7.1.0\tGeneral",
                            "text_content": "Subclause 7.1.1 defines the algorithm to convert an ASN.1 structured representation to one-string DN representation. Subclause 7.1.2 defines the algorithm to convert an ASN.1 structured representation to multi-string DN representation.\nCORBA SS uses one-string DN representation.  XML SS uses both one-string and multi-string DN representations.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "7.1.1\tRule for one-string DN",
                            "text_content": "If the RDNSequence is an empty sequence, the result is the empty or zero length string.\nOtherwise, the output consists of the string encoding of each RDN in the RDNSequence (according to subclause 7.1.1.2), starting with the first element of the sequence and moving forward toward the last element.\nThe encoding of adjacent RDNs are separated by a comma character (',', U+002C), to be consistent with IETF RFC 2253 [7].\nWhite spaces adjacent to the comma character shall be ignored.\nWhen converting from an RDN to a string, the output consists of the string encoding of the singleton AttributeTypeAndValue (according to subclause 7.1, i.e. \"Multi-valued RDN is not supported in the subject name convention.\").\nAlthough ITU-T Recommendation X.500 DN supports multi-valued RDN, this specification supports single-valued RDN only.\nThe AttributeTypeAndValue is encoded as the string representation of the AttributeType, followed by an equals sign character ('=', U+003D), followed by the string representation of the AttributeValue.\nAlthough ITU-T Recommendation X.500 ASN.1 AttributeValue and AttributeType support wide range of character representation, this specification supports a restrictive set of characters according to subclause 7.2.\nString representation of AttributeValue allows character escape mechanism such as the use of a reverse solidus character ('\\', U+005C) followed by two hexadecimal digits to replace a character in a string. String representation of AttributeType does not allow character escape mechanism.\nEXAMPLE:\t\"=Before\\0DAfter,O=Test,C=GB\". In this example, the reverse solidus character and the two hexadecimal digits form a single byte in the code of the escaped character. The reverse solidus character followed by \"0D\" indicates a carriage return character. See annex B for a rule for MO designers to avoid ambiguity concerning the AttributeType of a DN string.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "7.1.2\tRule for multi-string DN",
                            "text_content": "If the RDNSequence is an empty sequence, there is no equivalent multi-string DN output, i.e. there is no multi-string DN representation for empty RDNSequence sequence.\nOtherwise, the output consists of the string encoding of all RDNs in the RDNSequence (according to subclause 7.1.2.2).\nOne RDN encoding is within an NRM class associated XML element. A multiple RDNSequence would be converted into multiple RDN encodings, using multiple NRM class associated XML elements. They are arranged in a hierarchy in the XML document.  The outer NRM class associated XML element represents the first RDN in the RDNSequence.\nWhen converting from an RDN to a string, the output consists of the encoding of the singleton AttributeTypeAndValue (according to subclause 7.1, i.e. \"Multi-valued RDN is not supported in the subject name convention.\").\nAlthough ITU-T Recommendation X.500 DN supports multi-valued RDN, this specification supports single-valued RDN only.\nWithin an NRM class XML element, there is an element such as <element name=\"ManagedElement\"> and there is another element <attribute name=\"id\" type=\"string\" use=\"required\"/> which is inherited by using <extension base=\"xn:NrmClass\">.\nThe AttributeType and AttributeValue are mapped to the former and latter XML elements.  The AttributeType carries the IOC name while the AttributeValue carries the value of the IOC naming-attribute.\nAlthough ITU-T Recommendation X.500 ASN.1 AttributeValue and AttributeType support wide range of character representation, this specification supports a restrictive set of characters according to subclause 7.2.\nString representation of AttributeValue allows character escape mechanism (see 7.1.1.3).\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "7.2\tCharacter syntax",
                    "description": "",
                    "summary": "",
                    "text_content": "This subclause specifies the character syntax for AttributeType and AttributeValue (\"The ISO/IEC 646 [14] IRV characters specifically referenced in this specification are further identified using ISO/IEC 10646 [15] character short identifier notation form \"U+XXXX\"\", from note 3 subclause 7.B.).\nThey are:\n1.\tAny character except:\n-\tcomma character (',', U+002C),\n-\tequals sign character ('=', U+003D),\n-\tcarriage return character (U+000D),\n-\tline feed character (U+000A),\n-\tplus sign character ('+', U+002B),\n-\tless-than sign character ('<', U+003C),\n-\tgreater-than sign character ('>', U+003E),\n-\tnumber sign character ('#', U+0023),\n-\tsemicolon character (';', U+003B),\n-\treverse solidus character ('\\', U+005C),\n-\tquotation mark character ('\"', U+0022).\n2.\tThe full stop character ('.', U+002E). This character may be used in the AttributeValue whose AttributeType is \"DC\". An example is \"DC=marketing.CompanyXYZ.com\". This full stop character shall not be used in AttributeType.\n3.\tThe asterisk character ('*', U+002A) is reserved to denote wildcard.  Wildcard can be used as input to search or filter capabilities based on DN. For example, a client is not sure of the exact spelling of the AttributeValue (see clause 7.3), the client can use wildcard to represent one or more characters which are legal in that field. The asterisk character shall not be used in DN.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.3\tEBNF of DN String Representation",
                    "description": "",
                    "summary": "",
                    "text_content": "The formal definitions provided within this subclause consolidate several rules and concepts (null distinguished name, DN prefix, local DN, domain component type, class names starting with upper case characters, attribute names starting with lower case characters, classes with or without an \"Id\" naming attribute, attribute type and attribute value allowed characters, wildcard character).\nThe following is the EBNF for DN in string representation (Extended Backus-Naur Form; see ISO/IEC 14977 [13] for more information):\nDistinguishedName              =NullDN| RegularDN ;\n(*See size consideration in subclause  7.4 *)\n\nNullDN                         = ; (* empty string; null DN is specified in subclause 7.1.1 *)\n\nRegularDN                      =   DNPrefixPlusRDNSeparator  (* DN prefix and local DN *)\n                                 , LocalDN ;                 (* are defined in annex C *)\n\nDNPrefixPlusRDNSeparator       =   ( NullDNPrefix , NullRDNSeparator )\n                                 | ( DNPrefixWithDomainComponent , RDNSeparator )\n                                 | ( DNPrefixWithoutDomainComponent , RDNSeparator ) ;\n\nNullDNPrefix                   = ;  (* empty string *)\n\nNullRDNSeparator               = ;  (* empty string *)\n\nDNPrefixWithDomainComponent    =   DomainComponentRDN\n                                 , { RDNSeparator , DomainComponentRDN }\n                                 , { RDNSeparator , RegularRDN } ;\n\nDNPrefixWithoutDomainComponent =   RegularRDN\n                                 , { RDNSeparator , RegularRDN } ;\n\nLocalDN                        =   LocalRDN\n                                 , { RDNSeparator , LocalRDN } ;\n\nRDNSeparator                   =   [ RDNSeparatorWhiteSpace ]    (* use of optional white space  *)\n                                 , CommaChar                     (* is recommended to be avoided *)\n                                 , [ RDNSeparatorWhiteSpace ] ;\n\nRDNSeparatorWhiteSpace         =   [ CarriageReturnChar ]\n                                 , { SpaceChar } ;\n\nDomainComponentRDN             = DCAttributeTypeAndValue ;\n\nRegularRDN                     = RegularAttributeTypeAndValue ;\n\nLocalRDN                       = LocalDNAttributeTypeAndValue ;\n\nDCAttributeTypeAndValue        =   DCAttributeType\n                                 , AttributeTypeAndValueSeparator\n                                 , DCAttributeValue ;\n\nRegularAttributeTypeAndValue   =   RegularAttributeType\n                                 , AttributeTypeAndValueSeparator\n                                 , RegularAttributeValue ;\n\nLocalDNAttributeTypeAndValue   =   LocalDNAttributeType\n                                 , AttributeTypeAndValueSeparator\n                                 , RegularAttributeValue ;\n\nAttributeTypeAndValueSeparator = EqualsSignChar ;\n\nDCAttributeType                = \"DC\" ;  (* ISO/IEC 646 IRV U+0044/0043 Latin capital letters D&C *)\n\nDCAttributeValue               =   DCLabel                             (* this is specified *)\n                                 , { DCLabelSeparator , DCLabel } ;  (* in IETF RFC 1035  *)\n\nDCLabelSeparator               = FullStopChar ;  (* this is specified in IETF RFC 1035 *)\n\nDCLabel                        =   LetterChar                             (* this is specified *)\n                                 , [   { LetterDigitHyphenMinusChar }      (* in IETF RFC 1035  *)\n                                     , LetterDigitChar               ] ;\n\n\nRegularAttributeType           =   LetterChar                       (* this is specified *)\n                                 , { LetterDigitHyphenMinusChar } ;  (* in IETF RFC 2253  *)\n\nLocalDNAttributeType           =   NameOfClassWithIdAttribute        (* definition selected shall *)\n                                 | NamesOfClassAndNamingAttribute ;  (* be in accordance with the *)\n                                                                     (* rules defined in annex B  *)\nNameOfClassWithIdAttribute     = ClassName ;  (* see rules defined in annex B *)\n\nNamesOfClassAndNamingAttribute =   ClassName                      (* see rules defined in annex B *)\n                                 , ClassNamingAttributeSeparator\n                                 , NamingAttributeName ;\n\n\nClassNamingAttributeSeparator  = FullStopChar ;  (* see rules defined in annex B *)\n\nClassName                      =   CapitalLetterChar               (* see recommendation on       *)\n                                 , { LocalDNAttributeTypeChar } ;  (* characters for class names  *)\n                                                                   (* in annex E\n\nNamingAttributeName            =   SmallLetterChar\n                                 , { LocalDNAttributeTypeChar } ;\n\nRegularAttributeValue          =   ( AttributeValueChar – SpaceChar )          (* this is       *)\n                                 , [   { AttributeValueChar }                  (* specified in  *)\n                                     , ( AttributeValueChar – SpaceChar ) ] ;  (* IETF RFC 2253 *)\n\n\nLocalDNAttributeTypeChar       = DNChar – FullStopChar ;\n\nAttributeValueChar             = DNChar | EscapedCharSequence ;\n\nDNChar                         = DNCharUnrestricted - ReservedChar ;\n\nDNCharUnrestricted             =   ? Character of ISO/IEC 646 IRV ?\n                                 | ? Character of standard coded character set\n                                     supporting and extending ISO/IEC 646 IRV  ? ;\n\nEscapedCharSequence            =   ReverseSolidusChar          (* this is specified  *)\n                                 , 2 * HexadecimalDigitChar ;  (* in subclause 7.1.3 *)\n\nReservedChar                   =   Rfc2253ReservedChar | CarriageReturnChar | LineFeedChar\n                                 | AsteriskChar ;\n\nRfc2253ReservedChar            =   CommaChar | EqualsSignChar | PlusSignChar | LessThanSignChar\n                                 | GreaterThanSignChar | NumberSignChar | SemiColonChar\n                                 | ReverseSolidusChar | QuotationMarkChar ;\n\nLetterChar                     = CapitalLetterChar | SmallLetterChar ;\n\nLetterDigitChar                = LetterChar | DigitChar ;\n\nLetterDigitHyphenMinusChar      = LetterDigitChar | HyphenMinusChar ;\n\nHexadecimalDigitChar           = DigitChar | CapitalLetterAtoFChar | SmallLetterAtoFChar ;\n\nLineFeedChar                   = ? ISO/IEC 646 IRV U+000A character line feed ? ;\n\nCarriageReturnChar             = ? ISO/IEC 646 IRV U+000D character carriage return ? ;\n\nSpaceChar                      = ' ' ;  (* ISO/IEC 646 IRV U+0020 character space *)\n\nQuotationMarkChar              = '\"' ;  (* ISO/IEC 646 IRV U+0022 character quotation mark *)\n\nNumberSignChar                 = '#' ;  (* ISO/IEC 646 IRV U+0023 character number sign *)\n\nAsteriskChar                   = '*' ;  (* ISO/IEC 646 IRV U+002A character asterisk *)\n\nPlusSignChar                   = '+' ;  (* ISO/IEC 646 IRV U+002B character plus sign *)\n\nCommaChar                      = ',' ;  (* ISO/IEC 646 IRV U+002C character comma *)\n\nHyphenMinusChar                 = '-' ;  (* ISO/IEC 646 IRV U+002D character hyphen-minus *)\n\nFullStopChar                   = '.' ;  (* ISO/IEC 646 IRV U+002E character full stop *)\n\nDigitChar                      =   '0' | '1' | '2' | '3' | '4'    (* ISO/IEC 646 IRV U+0030-0039 *)\n                                 | '5' | '6' | '7' | '8' | '9' ;  (* digits 0 to 9               *)\n\nSemiColonChar                  = ';' ;  (* ISO/IEC 646 IRV U+003B character semicolon *)\n\nLessThanSignChar               = '<' ;  (* ISO/IEC 646 IRV U+003C character less-than sign *)\n\nEqualsSignChar                 = '=' ;  (* ISO/IEC 646 IRV U+003D character equals sign *)\n\nGreaterThanSignChar            = '>' ;  (* ISO/IEC 646 IRV U+003E character greater-than sign *)\n\nCapitalLetterAtoFChar          =   'A' | 'B' | 'C'    (* ISO/IEC 646 IRV U+0041-0046  *)\n                                 | 'D' | 'E' | 'F' ;  (* Latin capital letters A to F *)\n\nCapitalLetterChar              =   CapitalLetterAtoFChar | 'G' | 'H'    (* ISO/IEC 646 IRV *)\n                                 | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'    (* U+0041-005A     *)\n                                 | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T'    (* Latin capital   *)\n                                 | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' ;  (* letters A to Z  *)\n\nReverseSolidusChar             = '\\' ;  (* ISO/IEC 646 IRV U+005C character reverse solidus *)\n\nSmallLetterAtoFChar            =   'a' | 'b' | 'c'    (* ISO/IEC 646 IRV U+0061-0066 *)\n                                 | 'd' | 'e' | 'f' ;  (* Latin small letters a to f  *)\n\nSmallLetterChar                =   SmallLetterAtoFChar | 'g' | 'h'      (* ISO/IEC 646 IRV *)\n                                 | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'    (* U+0061-007A     *)\n                                 | 'o' | 'p' | 'q' | 'r' | 's' | 't'    (* Latin small     *)\n                                 | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' ;  (* letters a to z  *)\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.4\tMaximum size of DN string",
                    "description": "",
                    "summary": "",
                    "text_content": "The maximum length of a DN string, including RDN separators and including white spaces, shall not exceed 400 bytes (8-bit). This is a constraint for IRP specifications, but not specifications using SBMA.\nNOTE:\tThe use of long DNs should be avoided.\nThe above constraint is applicable to the DN string (captured in the value of parameter of operation defined by Interface IRPs) whose classes are defined in NRM IRPs not listed in TS 32.103 [20] clause B.1, i.e. the constraint is applicable only to TSs that do not support Converged management features.\nThe above constraint is applicable to the DN string, captured in the value of attribute of IOC defined by NRM IRPs that are not listed in TS 32.103 [20] clause B.1 i.e. the constraint is applicable only to TSs that do not support Converged management features.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "8\tExamples of DN in string representation",
            "description": "This subclause gives a few examples of DN written in the string representation specified in the present document.\nEXAMPLE 1:\t\"DC=com,DC==marketing,IRPAgent=ATMPVCBilling, Log=19990101131000,AccountingRecord=100098\". In this example, the name space aligns with DNS. The AttributeType of the top three RDN are \"DC\". Concatenation of the corresponding AttributeValues produces the DNS registered name, i.e. \"marketing.CompanyXYZ.com\". The top RDN is the Global Root because DNS defines \"DC=com\" as the root of its name space. That top RDN is the Local Root as well.\nEXAMPLE 2:\t\"DC=marketing.CompanyXYZ.com,IRPAgent=ATMPVCBilling, Log=19990101131000,AccountingRecord=100098\". In this example, the name space aligns with DNS as well. Instead of using three RDNs to represent the DNS registered name, this example chooses to use one RDN. The top RDN is the Global Root (and Local Root as well).\nEXAMPLE 3:\t\"SubNetwork=ABCNetwork,SubNetwork=TN2,MSCFunction=B5C0100\". In this example, the name space designer chooses not to name its objects under the DNS nor X.500 scheme. The name space designer chooses to use \"SubNetwork=ABCNetwork\" as the Local Root of its name space (by looking at the DN string, it is not possible to say if the Local Root is the Global Root). DNs in this name space will start with that string as their Local Root.\nEXAMPLE 4:\tThe following example illustrates the use of the comma character as separator for RDNs. It also illustrates the use of space and full stop characters as part of the legal character syntax for RDNs: \"=John T. Mills, O=Cyber System Consulting\"\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "9\tUsage Scenario",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "9.1\tDN prefix usage",
                    "description": "",
                    "summary": "",
                    "text_content": "This subclause presents recommended steps designer uses to partition the  name space while building an Alarm IRP compliant NE (the Alarm IRP Agent).\n1.\tThe NE designer specifies the NRM (e.g. 3GPP TS 32.622 [9]) for the NE. Suppose the NRM is a two level hierarchy with 3 classes like:\nNode\n|----- Port\n|----- CrossConnect\n\n2.\tThe NE designer, based on the NRM and other design choices, decides that there are 7 instances within the NE that can report alarms, such as\nPort=1, Port=2, Port=3, Port=4, Port=5, CrossConnect=1, Node=1.\n\n3.\tThe NE designer decides on the DN prefix (see annex C) and configures its system accordingly. Since NE designer will not know the customer's name space in advance, he would normally configure the DN prefix to reflect his test environment. The DN prefix can be configured to \"Network=test\". The Global Root is \"Network=test\". The Local Root is \"Node=1\". It should be noted that the NE should not hard code the DN prefix but should treat DN prefix as a system configuration parameter, settable.\nEXAMPLE 1:\tAt system start-up time.\n4.\tWhen constructing the alarm record (in coding phase), NE designer shall concatenate the name of the alarmed instance with the DN prefix to form the DN of his test environment. The resultant DN (e.g. \"Network=test,Node=1,Port=3\") will be placed in the Managed Object Instance (MOI) field of the alarm record.\n5.\tThe NE is sold to a customer. The customer administrator knows his  name space, the topology of his network and where the NE will be deployed. Based on the information, he configures the DN prefix of the NE.\nEXAMPLE 2:\tThe customer administrator can configure it to:\n\"DC=marketing.CompanyXYZ.com,Net=DS3BackBone,Station=TMR\"\nThe Global Root in this case is \"DC=marketing.CompanyXYZ.com\".\n6.\tAt run time, whenever NE is reporting an alarm on Port=3 via the IRP, the following string will be in the MOI field of the alarm record:\n\"DC=marketing.CompanyXYZ.com,Net=DS3BackBone,Station=TMR,Node=1,Port=3\"\nNOTE:\tThis annex is normative for users of string representation.\nAttributeType of RDN is mapped into string for use in the DN string representation. This annex specifies the mapping.\nThe AttributeType shall include all MO classes defined in the 3GPP Network Resource Model (NRM)specifications such as the 3GPP TS 28.622 [21].\nIt can also include classes defined by other domain specific NRMs such as [17], [18] and [19].  Such inclusion is necessary where 3GPP-defined mobile access network is part of a Fixed Mobile Convergence network management environment.\nThere is one AttributeType that is not defined in NRM of 3GPP TS 28.622 [21] or other domain specific NRMs as listed in the Introduction clause. This special AttributeType is used to denote the domain component of the DNS. The following partial DN string representations are examples to illustrate the valid use of \"DC\" strings for the three DNS domain components of \"marketing.CompanyXYZ.com\":\n-\t\"DC=com.CompanyXYZ.marketing,…\"\n-\t\"DC=com,DC==marketing,…\"\n-\t\"DC=com,DC=CompanyXYZ.marketing,…\"\n-\t\"DC=com.CompanyXYZ,DC=marketing,…\"\n\nTable A.1: Example of RDN AttributeType Strings\n\nNOTE:\tThis annex is normative for users of one string representation.\nThis annex discusses the two possible interpretations for the AttributeType of the DN string and establishes a rule for MO designers to avoid ambiguity concerning their usage.\nIt also gives a rule for designing MO classes such that one DN string, regardless of the SS technology used, will result in a unique reference to the corresponding network resource.\nFirst interpretation\nITU-T Recommendation X.500 [2] uses the AttributeType (defined for use as the first component of the AttributeTypeAndValue of a RDN, see subclause 3.1.6) to identify one attribute of the subject MO for naming purpose. This AttributeType is called the naming attribute to distinguish itself from other attributes that may be present in the MO.\nSuppose the following is the MO class definition in pseudo notation and this MO class is inherited from root.\nClass Bsc {\nAttribute id;\nAttribute ..}\n\nSuppose further that the naming attribute is id.\nIf this (first) interpretation is used for constructing the DN string, then the DN will be \"…,id=123\". MO class name cannot be derived from the DN string. The value of the AttributeValue contains the value of the naming attribute.\nSecond interpretation\nGenerally, this interpretation shall be preferred to the first interpretation.\nThe AttributeType (defined for use as the first component of the AttributeTypeAndValue of a RDN) is used to identify the MO class. Using this interpretation for constructing the DN string, the DN will be \"…,Bsc=123\". \nThe name of the naming attribute cannot be derived from the DN string. \nThe value of the AttributeValue contains the value of the naming attribute.\nRule\nGiven the two interpretations, a DN reader cannot know how to interpret the AttributeType, i.e. if the AttributeType identifies class or naming attribute. To avoid ambiguity, the following rules shall apply:\n-\tIf the IS name of the IOC naming attribute is \"id\", ignoring case of “id”, then the DN shall use \"…,Yyy=123,…\" where \"Yyy\" is the IS name of the IOC, preserving case of \"Yyy\".\nEXAMPLE 1:\tIf \"Bsc\" is the IS name of the IOC and if the IS name of its naming attribute is \"id” then the DN shall be \"…,Bsc=123,…\".\n-\tIf the IS name of the IOC naming attribute is not the concatenation of the IS name of the IOC and \"Id\", ignoring case for both, and if the IS name of the IOC naming attribute is not  \"id\", ignoring case of \"id\", then the DN shall use \"…,Yyy.zzz=123,…\" where \"Yyy\" is the IS name of the IOC and \"zzz\" is the IS name of the IOC naming attribute, preserving case for both.\nEXAMPLE 2:\tIf \"Bsc\" is the IS name of the IOC and if the IS name of its naming attribute is \"serialNumber\", then the DN shall be \"…,Bsc.serialNumber=123,…\".\n-\tIf the IS name of the IOC naming attribute is the concatenation of the IS name of the IOC and \"Id\", ignoring case for both, then the DN shall use \"…,Xxx=123,…\" where \"Xxx\" is the IS name of the IOC, preserving case.\nEXAMPLE 3:\tIf \"Bsc\" is the IS name of the IOC and if the IS name of its naming attribute is \"bscId\", then the DN shall be \"…,Bsc=123,…\".\nIn addition, the DCattributeValue of DN string is case insensitive. For example, the following three DN strings are considered identical.\n-\t\"DC=marketing.CompanyXYZ.com,Net=DS3BackBone,Station=TMR\"\n-\t\"DC=MARKETING.COMPANYXYZ.com,Net=DS3BackBone,Station=TMR \"\n-\t\"DC=MARKETING.CompanyXYZ.com,Net=DS3BackBone,Station=TMR \"\n\nA Distinguished Name (DN) is used to uniquely identify a MO within a name space. A DN is built from a series of \"name components\", referred to as Relative Distinguished Names (RDNs).\nDNs within a name space are arranged in hierarchy similar to concepts of naming files in UNIX file system. A file name, in the context of a local subdirectory, contains the path (series of subdirectory names) of the file starting from the local subdirectory. The same file, in the global context, contains the path of the file starting from the root directory. Similar concept applies to naming MOs. From a particular (local) context, the name of a MO is the Local Distinguished Name (LDN). From a global context, the name of the same MO is the DN. LDN is a proper subset of DN. In the context of a particular local context, a DN prefix is defined such that all LDNs in that particular context, if attached behind the DN prefix of that context, will yield the DNs of the MOs.\nThe concepts of DN Prefix and LDN support the partitioning of large name space into smaller ones for efficient name space implementation. DN design, the subject of the present document, does not depend on these concepts. There exist other concepts that support partitioning of large name space as well. Although these concepts are independent from DN design, their use is wide spread and this annex illustrates their use in partitioning large name space.\nIn modern network management, it is expected that the  name space be partitioned for implementations in multiple hosts. The following are reasons for the partitioning.\n-\tThe  name space can be large (e.g. containing millions of objects). Partition of a large name space facilitates name space management.\nEXAMPLE 1:\tIt may be easier to manage two name spaces of 1 million objects each than to manage one name space with two million objects.\n-\tSeparate management systems manage sub-set of the  name space relevant to their own local environment.\nEXAMPLE 2:\tOne NE manages a name space (subset of the  name space) containing names of its MOs representing its own network resources. Another NE manages another sub-set, etc.\n-\tFor reasons such as security, replication, back-up policy and performance, sub-sets of the  name space are managed by separate systems.\nEXAMPLE 3:\tOperation and Marketing departments may want to manage their name spaces using their respective management policies. Partitioning of  name space according to departmental jurisdiction may facilitate deployment of independent management policies.\nSuppose the  name space is organized hierarchically and is partitioned into 4 sub-sets as shown in figure C.1.\nFigure C.1 illustrates the hierarchical partitioning of the network's name space, highlighting the distinct zones for control, user, and management functions. The figure showcases the separation of responsibilities, ensuring efficient resource allocation and network management. The visual representation emphasizes the modularity of the network architecture, enabling scalability and ease of maintenance.\nFigure C.1: Name space partitions\nNS (name space)-A contains 5 objects. DN prefix is NULL. The Global Root and Local Root of NS-A is \"DC=com.CompanyXYZ.marketing\" (see the Note below). DN of top object is \"DC=com.CompanyXYZ.marketing\". RDNs of the other four objects are, from bottom left to bottom right, \"A=1\", \"A=7\", \"A=3\" and \"A=9\". DNs of the same four objects are \"DC=com.CompanyXYZ.marketing,A=1\", \"DC=com.CompanyXYZ.marketing,A=7\", \"DC=com.CompanyXYZ.marketing,A=3\" and \"DC=com.CompanyXYZ.marketing,A=9\". The second and fourth objects are reference objects to MOs in NS-B.\nNS-B contains two branches. They have the same DN prefix that is \"DC=com.CompanyXYZ.marketing\". The Global Root is \"DC=com.CompanyXYZ.marketing\".\nThe Local Root and RDN of top object of the right branch is \"A=9\". Its DN is \"DC=com.CompanyXYZ.marketing,A=9\". RDNs of other objects are shown in figure C.1.\nDN of the bottom object is \"DC=com.CompanyXYZ.marketing,A=9,F=1,G=1,H=2\". This object refers to object of another name space called NS-D.\nThe Local Root and RDN of the top object of the left branch is \"A=7\". Its DN is \"DC=com.CompanyXYZ.marketing,A=7\". RDNs of other objects are shown in figure C.1.\nDN of the bottom object is \"DC=com.CompanyXYZ.marketing,A=7,X=1,Y=1\". This object refers to object of another name space called NS-C.\nNS-C contains a branch of 4 objects. Its DN prefix is \"DC=com.CompanyXYZ.marketing,A=7,X=1\". The Local Root an RDN of the top object is \"Y=1\".\nNS-D contains a branch of 5 objects. Its DN prefix is \"DC=com.CompanyXYZ.marketing,A=9,F=1,G=1\". The Local Root and RDN of the top object is \"H=2\".\nIn figure C.1, the bottom object of NS-B right branch has the following names:\n-\tDN is \"DC=com.CompanyXYZ.marketing,A=9,F=1,G=1,H=2\".\n-\tLDN is \"A=9,F=1,G=1,H=2\".\n-\tRDN is \"H=2\".\nWith this example, we can see that DN of an object is a series of RDNs spanning the global name space. LDN of an object is a series of RDNs spanning the local name space where the subject MO resides.\nThe concatenation of the LDN with DN prefix of that (partitioned) name space shall produce the DN of the global name space.\nNOTE:\tUse of \"DC\" in \"DC=com.CompanyXYZ.marketing\" is an attempt to align the RDN with DNS name associated with the named organisation. The \"DC\" stands for Domain Component and is an attribute name defined by IETF for use in directory work. Annex A specifies other valid ways to align RDN with DNS as well. Equally valid, the example can choose to align the RDN with the X.500 convention. In such case, the subject string can be \"O=com,O=CompanyXYZ,OU=marketing\" where O and OU are X.500 standard attributes denoting organisation and organization unit respectively. The alignment choice belongs to the name space designer of each operator. The choice will be reflected in the value of the DN prefix, probably a product configuration parameter. See clause 7 for more information.\nThis annex provides a very simplified summary of EBNF, and does not modify in any way the reference text in ISO/IEC 14977: \"Information technology – Syntactic metalanguage – Extended BNF\" [13].\nISO/IEC 14977 [13] specification also provides far greater coverage supported by numerous examples which are not included within this annex.\nThe EBNF metalanguage is useful for defining rigorous syntax notations and is a notation for defining syntax rules.\nThe language uses sequences of formal definitions.\nDefinitions may have several layers of definition. The definitions which are refined are termed as \"non terminal symbols\".\nA term which cannot be defined at a lower level of detail is known as a \"terminal symbol\". I.e. the \"terminal symbols\" cannot be further decomposed.\nThe language permits sentences to be constructed.\nThe sentences consist of a non terminal, or a terminal symbol, followed by an equality symbol, followed by a formal definition of the symbol.\nEach sentence terminates with the semicolon ';' terminal symbol.\nIdeally the definitions are read from the top across to the right hand side of the page and downwards.\nA definition commences with an identifier (of the thing being defined) followed by an equality sign.\nThe thing is defined by the symbols and identifiers to the right hand side of the equality symbol, up to the next semicolon ';'.\nThere is a natural breaking down of definitions, by other definitions until a point is reached that a terminal symbol is reached – which cannot be further defined (e.g. the leaves of definition hierarchy).\nThere are terminal symbols which permit optional choice, sequence, exclusion, comments to be included in the sentence.\nThe set of terminal symbols as defined in table 1 of ISO/IEC 14977 [13] are below.\nThe normal character representing each operator of Extended BNF and its implied precedence is (highest precedence at the top):\n'*'\trepetition-symbol\n'-'\texcept-symbol\n','\tconcatenate-symbol\n'|'\tdefinition-separator-symbol\n'='\tdefining-symbol\n';'\tterminator-symbol\nThe normal precedence is over-ridden by the following pairs of terminal symbols:\n\"'\"\t\tfirst-quote-symbol\t\t\tfirst-quote-symbol\t\t\t\"'\"\n'\"'\t\tsecond-quote-symbol\t\tsecond-quote-symbol\t\t'\"'\n\"(*\"\tstart-comment-symbol\t\tend-comment-symbol\t\t\"*)\"\n'('\t\tstart-group-symbol\t\t\tend-group-symbol\t\t\t')'\n'['\t\tstart-option-symbol\t\t\tend-option-symbol\t\t\t']'\n'{'\t\tstart-repeat-symbol\t\t\tend-repeat-symbol\t\t\t'}'\n'?'\t\tspecial-sequence-symbol\tspecial-sequence-symbol\t'?'\nExamples:\nletter    =   \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\"\n            | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" ;\nvowel     = \"A\" | \"E\" | \"I\" | \"O\" | \"U\" ;  (* a subset of letters *)\nconsonant = letter – vowel ;  (* the set of letters except vowels *)\n\n\n",
                    "tables": [
                        {
                            "description": "Table A.1: Example of RDN AttributeType Strings",
                            "table number": 1,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "",
                            "table number": 2,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "",
                            "table number": 3,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        }
    ]
}
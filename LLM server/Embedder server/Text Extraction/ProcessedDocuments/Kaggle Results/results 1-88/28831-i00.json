{
    "document_name": "28831-i00.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Report has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\nIn the present document, modal verbs have the following meanings:\nshall\t\tindicates a mandatory requirement to do something\nshall not\tindicates an interdiction (prohibition) to do something\nThe constructions \"shall\" and \"shall not\" are confined to the context of normative provisions, and do not appear in Technical Reports.\nThe constructions \"must\" and \"must not\" are not used as substitutes for \"shall\" and \"shall not\". Their use is avoided insofar as possible, and they are not used in a normative context except in a direct citation from an external, referenced, non-3GPP document, or so as to maintain continuity of style when extending or modifying the provisions of such a referenced document.\nshould\t\tindicates a recommendation to do something\nshould not\tindicates a recommendation not to do something\nmay\t\tindicates permission to do something\nneed not\tindicates permission not to do something\nThe construction \"may not\" is ambiguous and is not used in normative elements. The unambiguous constructions \"might not\" or \"shall not\" are used instead, depending upon the meaning intended.\ncan\t\tindicates that something is possible\ncannot\t\tindicates that something is impossible\nThe constructions \"can\" and \"cannot\" are not substitutes for \"may\" and \"need not\".\nwill\t\tindicates that something is certain or expected to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nwill not\t\tindicates that something is certain or expected not to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nmight\tindicates a likelihood that something will happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nmight not\tindicates a likelihood that something will not happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nIn addition:\nis\t(or any other verb in the indicative mood) indicates a statement of fact\nis not\t(or any other negative verb in the indicative mood) indicates a statement of fact\nThe constructions \"is\" and \"is not\" do not indicate requirements.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document …\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[2]\tXML Path Language (XPath), Version 1.0, W3C Recommendation 16 November 1999 (Status updated October 2016), (https://www.w3.org/TR/1999/REC-xpath-19991116/)\n[3]\tXML Path Language (XPath) 2.0, W3C Recommendation 14 December 2010 (Link errors corrected 3 January 2011; Status updated October 2016), (https://www.w3.org/TR/xpath20/)\n[4]\tXML Path Language (XPath) 3.1, W3C Recommendation 21 March 2017 ()\n[5]\tIETF RFC 6901: \"JavaScript Object Notation (JSON) Pointer\".\n[6]\tIETF Internet-Draft: \"JSONPath: Query expressions for JSON\"; draft-ietf-jsonpath-base-05; April 2022 ().\n[7]\tXML Information Set (Second Edition), W3C Recommendation 4 February 2004 ()\n[8]\tXQuery and XPath Data Model 3.1, W3C Recommendation 21 March 2017 ()\n[9]\tIETF RFC 7950: \"The YANG 1.1 Data Modeling Language\"\n[10]\tXForms 2.0 (https://www.w3.org/community/xformsusers/wiki/XForms_2.0)\n[11]\t3GPP TS 32.158: \"Management and orchestration; Design rules for REpresentational State Transfer (REST) Solution Sets (SS)\"\n[12]\tIETF RFC 787: \"Problem Details for HTTP APIs.\"\n[13]\t3GPP TS 28.537: “Management and orchestration; Management capabilities”.\n[14]\t3GPP TS 28.662: \"Telecommunication management; Generic Radio Access Network (RAN) Network Resource Model (NRM) Integration Reference Point (IRP); Information Service (IS) \".\n[15]\t3GPP TS 28.533: “Management and orchestration; Architecture framework”.\n[16]\tRFC8525: YANG Library\n[17]\t3GPP TS 32.160: “Management and orchestration; Management service template”.\n[18]\tIETF RFC 7950: “The YANG 1.1 Data Modeling Language, August 2016”.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions of terms, symbols and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tTerms",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the terms given in TR 21.905 [1] and the following apply. A term defined in the present document takes precedence over the definition of the same term, if any, in TR 21.905 [1].\nexample: text used to clarify abstract rules by applying them literally.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tSymbols",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the following symbols apply:\n<symbol>\t<Explanation>\n\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.3\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in TR 21.905 [1] and the following apply. An abbreviation defined in the present document takes precedence over the definition of the same abbreviation, if any, in TR 21.905 [1].\n<ABBREVIATION>\t<Expansion>\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tIssues",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tVoid",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.2\tKey issue #2: Targeted notification subscriptions",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.2.1\tIssue description",
                            "text_content": "SA5 is moving to a fully model driven approach. In this architecture all aspects that are managed are represented in the information model. It is possible to observe all changes in the network by observing the changes in the information model. Note the information model covers all fragments: configuration management, alarm management and performance management.\nMany MnS consumers are not interested in all changes in the network. For that reason, it is important that MnS consumers can subscribe to specific portions of the information model only. These portions may be described in terms of object instances, attributes or attribute fields.\nThe currently specified \"NtfScubscriptionControl\" does not allow to scope subscriptions with that granularity. Some enhancements seem to be required to \"NtfScubscriptionControl\". This clause analyses the current situation and proposes a solution.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.2\tCurrent situation",
                            "text_content": "For scoping managed objects, the attribute \"scope\" is provided in \"NtfSubscriptionControl\". It has two attribute fields: \"scopeType\" and \"scopeLevel\". This scoping mechanism works only on the hierarchical levels of the information model. For example, you can select the level below \"SubNetwork\".\nTypically, instances of more than one object class can be located on a level. For example, below \"SubNetwork\" there can be instances of \"ManagedElement\", \"PerfMetricJob\", \"TraceJob\" and \"AlarmList\". It is not possible to scope only instances of one or more specific object classes with the current scoping mechanism.\nTo reduce the scoped set of object instances to those with a specific object class, the \"notificationFilter\" attribute can be used. The IS level parameters \"objectClass\" and \"objectInstance\" are typically mapped to one stage 3 parameter (\"href\") only. There is no dedicated parameter for the \"objectClass\" in stage 3. Filtering out notifications related to certain object classes involves therefore the application of string functions on \"href\".\nThe described mechanism applies to CM notifications and non-CM notifications such as alarm notifications.\nNote on all examples:\nThe following examples are for the RESTful HTTP-based solution only. For this solution the \"notificationFilter\" format is XPath 1.0 in Rel-17. In addition, the JSON instance document sent over the wire is expressed in XML. A <notification> element is added as root element to produce a valid XML document, a necessary manipulation not described yet in Rel-17.\nExample 1 (alarm notifications):\nAssume the NRM specified in TS 28.622 is supported on a MnS producer. A subscription scoping (with \"scopeType\" and \"scopeLevel\") the level below \"SubNetwork\" has been created. No notification filter is specified. The subscription is for alarm notifications only. On the level below \"SubNetwork\" there are instances of \"ManagedElement\", \"PerfMetricJob\" and \"NtfSubscriptionControl\".\nThe described subscription forwards alarm notifications related to all manged object classes. For example, all following notifications are forwarded:\n<notification>\n<href>example.com/SubNetwork=SN1/ManagedElement=ME1</href>\n...\n</notification>\n\n<notification>\n<href>example.com/SubNetwork=SN1/ManagedElement=ME2</href>\n...\n</notification>\n\n<notification>\n<href>example.com/SubNetwork=SN1/PerfMetricJob=PMJ1</href>\n...\n</notification>\n\n<notification>\n<href>example.com/SubNetwork=SN1/NtfSubscriptionControl=NSC1</href>\n...\n</notification>\n\nThe following notification is not related to the set of scoped objects and hence not forwarded:\n<notification>\n<href>example.com/SubNetwork=SN1/ManagedElement=ME1/XyzFunction=XYZF1</href>\n...\n</notification>\n\nThe subscription shall be modified now to include only \"ManagedElement\" objects. This is realized with an appropriate XPath expression as value of \"notificationFilter\". Possible XPath expressions include:\n\nXPath expression 1:\nThe following XPath expression returns the \"notification\" node since the string \"ManagedElement\" is contained in the \"href\" value.\n\"/notification[contains(href,\"ManagedElement\")]\"\n\nXPath expression 2:\nThe following expression checks for the presence of \"ManagedElement\" after \"example.com/SubNetwork=SN1\".\n\"/notification[starts-with\\\n(substring-after(path,\"example.com/SubNetwork=SN1/\"),\\\n\"ManagedElement\")]\"\n\nExample 2 (alarm notifications):\nAssume again the NRM specified in TS 28.622 is supported on a MnS producer. \"PerfMetricJob\" instances have been created below \"SubNetwork\" and below some \"ManagedElement\" instances. A MnS consumer wishes to create a subscription related to all \"PerfMetricJob\" instances.\nThe notification scope needs to include the complete object tree starting at \"SubNetwork\". In case a \"PerfMetricJob\" instance is always a leaf object, then checking for the presence of the sub-string \"PerfMetricJob\" in \"href\" does the job. In case a \"PerfMetricJob\" instance is not always a leaf object, then it is necessary to check, if the last path segment of \"href\" identifies a \"PerfMetricJob\". A simple test on if the \"href\" value includes the sub-string \"PerfMetricJob\" is not sufficient. There is no obvious Xpath expression to solve this problem, at least not with XPath1.0.\n\nExample 3 (\"notifyMOICreation\", \"notifyMOIDeletion\", \"notifyMOIAttributeValueChanges\")\nThe created, dfeleted or updated objerct is specified with the \"href\" parameter of the notification header. For that reason the same considerations as for alarm notifications apply.\n\nExample 3 (\"notifyMOIChanges\")\nThe objects are identifierd with both the \"href\" and \"path\" parameter. Filtering on these parameters to reduce the scoped set of objects to the sub-set of interest is not a feasible solution.\n\nThe scoping mechanism allows to select a set of objects. This is good enough for notification types related to the complete object, such as alarm notifications, or when a MnS consumer is interested in receiving attribute value change notifications for all attributes of an object. It is not possible to target specific attributes of an object only using the scoping mechanism. When a MnS consumer is interested only in value changes of one or more specific attributes of an object, then the MnS consumer needs to configure into the subscription an appropriate notification filter.\nNote the following examples are for the RESTful HTTP-based solution only.\nExample 1 (\"notifyMOIAttributeValueChanges\"):\nAssume a subscription for \"notifyMOIAttributeValueChanges\" includes the instance of \"XyzFunction\" identified by \"XYZF1\". A notification reporting the value change of \"attrA\" and \"attrB\" looks like\n<notification>\n<href>example.com/SubNetwork=SN1/ManagedElement=ME1/XyzFunction=XYZF1</href>\n...\n<attributeListValueChanges>\n<attrA>123</attrA>\n<attrB>abc</attrA>\n</attributeListValueChanges>\n<attributeListValueChanges>\n<attrA>456</attrA>\n<attrB>def</attrA>\n</attributeListValueChanges>\n</notification>\n\nIf a MnS consumer is interested only in value changes of \"attrA\", then he needs to specify a notification filter testing on the presence of \"attrA\", for example:\n\"/notification/attributeListValueChanges[attrA]\"\n\nNote that the complete notification including also \"attrB\" is forwarded in case the test evaluates to true. The \"attrB\" cannot be removed from the notification. With filtering either the complete notification is forwarded, or the complete notification is not forwarded.\nNote also that for \"notifyMOIChanges\" the situation is more complicated. Changes of multiple managed object instances can be reported using a single \"notifyMOIChanges\" notification. Even worse, the object instance in the notification header may not even be an instance that has changed, but only a common ancestor of the instances that have changed. This means that not only the \"href\" property of the notification header needs to be checked but also the \"path\" properties of the notification body.\nIt is currently not possible to specify a conditional scope. A conditional scope could be based for example on the presence of an attribute or on an attribute with a specific value. Note that scoping based on object classes can be considered as conditional scope.\nFor example, a MnS consumer might be interested only in changes of \"AlarmInformation\" instances (reported with alarm notifications) with a perceived severity equal to \"CRITICAL\".\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.3\tAnalysis",
                            "text_content": "Scoping capabilities are currently limited.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.4\tPotential requirements",
                            "text_content": "Potential requirements to address the issues identified above are\n[Req-1] A subscription shall enable to select a single object instance.\n[Req-2] A subscription should enable to select a complete subtree of objects starting at a specified base object.\n[Reg-3] A subscription shouldenable to select the objects on a specified level below a specified base object.\n[Req-4] A subscription shouldenable to select the objects starting at a specified base object down to and including a specified level below the base object.\n[Req-5] A subscription shouldenable to select multiple object instances based on object instance identifiers.\n[Req-6] A subscription shouldenable to select multiple object instances based on object classes.\n[Req-7] A subscription shouldenable to select multiple object instances based on filter conditions.\n\nThe following potential additional requirements apply for subscriptions to CM notifications:\n[Req-8] A subscription shouldenable to select attributes within selected object instances.\n[Req-9] A subscription shouldenable to select attribute fields within selected object instances.\n[Req-10] A subscription shouldenable to select attribute elements within selected object instances.\n[Req-11] A subscription shouldenable to select attributes, attribute fields and attribute elements based on filter conditions.\nNote only [Req-1] is mandatory. All other requirements are optional. This allows for implementations of different complexity that are tailored for different deployment needs.\nThe MnS consumer should be able to get the information which exact subscription capabilities are supported by a MnS producer, or more specifically by \"NtfSubscriptionControl\". This may require the introduction of capability identifiers that can be retrieved by MnS consumers.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.5\tPotential solutions",
                            "text_content": "Solutions to the potential requirements in clause 4.2.4 need to be able to conditionally select nodes in node trees.\nNote: The NRM is a node tree. Node types are objects and attributes. The tree is defined by the name-containment relationships.\nThe target is to use an existing notation as solution, ideally without any modifications. The following notations are analyzed for use with JSON defined NRMs:\nXPath 1.0 [2]\nXPath 2.0 [3]\nXPath 3.1 [4]\nJSON Pointer [5]\nJSONPath [6]\nThe following notations are analyzed for use with YANG defined NRMs:\nXPath 1.0 [2]\nXPath 2.0 [3]\nXPath 3.1 [4]\nAll notations listed above are quite powerful. Only a subset is required to support the potential requirements documented in clause 4.2.4. This subset is identified in the following clauses.\nEditor's note: It is ffs if a stage 2 definition is required, that is more detailed than the requirements, and from which the subset can be identified in a direct mapping.\nEditor's note: XPath does not work on XML. Instead, it works on an own data model defined in XPath 1.0 [2], clause 5. This clause also describes the mapping of an XML document to the XPath model. The mapping of a JSON document to the XPath model is ffs. Alternatively, some mapping between a JSON document to a XML document needs to be looked at.\nXPath 1.0 [2] has been designed primarily to select one or more nodes of an XML document. However, XPath is a notatition that is not tied to XML and \"operates on the abstract, logical structure of an XML document or JSON object, rather than its surface syntax.\", as clarified in XML Path Language (XPath) 3.1 [4], clause 1. This is because an XPath expression operates on documents with an own XPath specific data model, and not on the XML or JSON surface syntax. This data model is specified in XPath 1.0 [2], clause 5. Note the data model for XPath 2.0 [3] and XPath 3.1 [4] is described in XQuery and XPath Data Model 3.1 [8].\nSince an XPath expression works on an own data model, it is necessary to translate XML of JSON input documents into that data model.\nFor XML this translation is clearly defined by W3C. It is a two-step process. The mapping from the information in an XML document to the XML Information Set is described in XML Information Set [7]. The mapping from the XML Information Set to the XPath data model is described in XPath 1.0 [2], annex B. The mapping from YANG to XML is defined in RFC 7950 [9].\nHowever, W3C did not define a clear mapping of a JSON document into the XPath data model, see the following clause for more details.\nXPath models an XML or JSON document as a tree of nodes. NRM objects and NRM attributes are both mapped to a specific node type of the XPath data model, the element node. XPath 1.0 does hence not distinguish between element nodes representing NRM objects and element nodes representing NRM attributes.\nFurthermore, XPath 1.0 does not distinguish between child element nodes that represent NRM attributes and those child nodes (at the same level in the the tree hierarchy) that represent name contained objects.\nThese two observations have some important implications when using XPath 1.0 for selecting NRM objects:\nThe first implication is that it is not possible to select all NRM attributes of an NRM object unless some measures are taken. Assume the XPath expression \"SubNetwork/*\", it selects all attributes of SubNetwork, but also the name contained objects. Fortunately, the attributes are embedded in an \"attributes\" container in the YANG and JSON defined NRMs. Therefore, it is easy to construct an XPath expression selecting all attributes of an object. The XPath expression is \"SubNetwork/attributes\" (when the \"attributes\" element node and the attribute element nodes are selected) or \"SubNetwork/attributes/*\" (when only the attribute element nodes are selected).\nThe second implication is that when selecting the child objects of an object, for example with the XPath expression \"SubNetwork/ManagedElement\", which selects all \"ManagedElement\" childs of \"SubNetwork\", then also the objects name contained by the \"ManagedElement\" childs are selected, and so forth. In other words, the child axis works based on element nodes and not on NRM objects as desired. XPath 1.0 does not offer any solution for this problem. Only the attributes container may be used again to select only the attributes of the \"ManagedElement\" childs, the XPath expression to select the \"ManagedElement\" childs is hence \"SubNetwork/ManagedElement/attributes\".\nNote XPath 1.0 is verbose and does not allow for compact expressions in many cases. For example, to select a subset of all attributes of an object, each attribute needs to be selected individually with the complete location path:\n/SubNetwork/attributes/attrA | /SubNetwork/attributes/attrB\nAnd when multiple objects shall be selected based on object instance names, then the complete location path and predicate needs to be repeated for each instance\n//*[objectInstance=\"DN1\"]/attributes | //*[objectInstance= \"DN2\"]/attributes\nAn XPath expression is evaluated within a context. The context consists of:\na node (the context node)\na pair of non-zero positive integers (the context position and the context size)\na set of variable bindings\na function library\nthe set of namespace declarations in scope for the expression\nThe context needs to be clearly defined.\n\nXPath expression examples (assuming the presence of an \"attributes\" container in the info model):\nSelect the specified base object\n/*/attributes\nSelect all objects in the tree starting at the specified base object:\n//attributes\nSelect all objects on a specific level below a specified base object, in this case the second level below the base object:\n/*/*/*/attributes\nSelect the objects starting from a specified base object down to and including the objects on a specific level below the base object:\n/*/attributes | /*/*/attributes | /*/*/*/attributes\nSelect objects based on their object instance identifiers in the tree starting at the base object:\n//*[objectInstance=\"DN1\"]/attributes | //*[objectInstance= \"DN2\"]/attributes\nSelect objects based on their object class\n/SubNetwork/attributes\n/SubNetwork[id=\"SN1\"]/ManagedElement/attributes\n//*[objectClass=\"NtfSubscriptionControl\"]/attributes\nSelect specific attributes and attribute fields:\n<objectSelector>/attrA | <objectSelector>/attrB/subAttrB1\n<objectSelector>/attributes/attrA | <objectSelector>attributes/attrB/subAttrB1\nSelect objects and attributes based on predicates (conditions):\n<objectSelector>[<predicate>]\n<objectSelector>/attributes<attributesSelector>[<predicate>]\nAs stated in the previous clause W3C did not provide a real mapping from JSON to the XPath data model. It is possible though to use a mapping from JSON to XML defined in XForms2.0 [10], clause 5.2.2. The resulting XML document can then be mapped to the XPath data model.\nNote, XForms2.0 is a W3C draft from 2010 and not a W3C standard. The produced XML document contains in XML attributes information about the original JSON data taypes. JSON arrays are mapped in a very specific way to XML (see example below). These mapping rules preserve all information for mapping the XML document again back to the original JSON document.\nFor example, the JSON snippet\n\"load\": [0.31, 0.33, 0.32]\nis mapped according to XForms2.0 to\n<load type=\"array\">\n<_ type=\"number\">0.31</_>\n<_ type=\"number\">0.33</_>\n<_ type=\"number\">0.32</_>\n</load>\nOther best practices propose to map the JSON snippet as follows:\n<load>0.31</load>\n<load>0.33</load>\n<load>0.32</load>\n\nThere is hence not one and only one standard specifying the mapping from a JSON document to an XML document. One could argue that the XML document is anyway a conceptual document only that is not visible on the wire and used only internally in the MnS producer helping to apply the XPath expression to a JSON document. However, the exact way how JSON is mapped to XML has implications on the XPath expression to select nodes.\nFor example, when the first mapping method is used, the XPath expression snippet to select the first array item is\n/load/_[1]\nWhen the second mapping method is used, the XPath expression snippet is\n/load/[1]\nFor a really interoperable solution, the MnS consumer needs to know the exact way the MnS producer maps JSON to XML. This means in turn, that the mapping method needs to be standardized by SA5.\nA second option is to provide a mapping from the information elements in a JSON document to the XPath data model directly without an XML mapping in-between. Such a mapping is not provided at all by W3C.\nThe XPath data model has seven types of nodes: root nodes, element nodes, text nodes, attribute nodes, namespace nodes, processing instruction nodes, comment nodes. Each node has multiple properties.\nHere after, a proposal to directly map a JSON document to the XPath data model:\nThe JSON document is mapped to the root node.\nThe name of a name/value pair is mapped to an element node. The element node coming from the name is a child of the root node. Vice versa, the root node is the parent of the element node coming from the name.\nThe value of a name/value pair is mapped to a text node if the value is a string, a number, or one of the tree literal names: false, true, null. The element node coming from the name is the parent of the text node coming from the value. Vice versa, the text node coming from the value is the child of the element node coming from the name.\nThe value of a name/value pair is mapped to one or more element nodes if the value is an object. There is one element node for each name/value pair contained in the object. The names of the element nodes are equal to the names of the name/value pairs the element nodes are coming from. The element node coming from the name is the parent of the element nodes coming from the value. Vice versa, the element nodes coming from the value are the children of the element node coming from the name.\nThe value of a name/value pair is mapped to one or more element nodes if the value is an array. There is one element node for each array item contained in the array. The names of the element nodes are all identical and equal to the name of the name/value pair they are coming from. The element node coming from the name is the parent of the element nodes coming from the value. Vice versa, the element nodes coming from the value are the children of the element node coming from the name.\nWe can conclude that only root nodes, element nodes and text nodes are used. Attribute nodes, namespace nodes, processing instruction nodes, and comment nodes are not used.\nAs to node properties, only name, children and parent are used.\nIn case XPath is chosen as node selection language, then it is necessary to specify in normative fashion either the JSON to XML mapping, or the JSON to XPath data model mapping.\nNow we will look at if due to some inherent properties of JSON all XPath concepts are applicable, when the original document from which nodes are selected, is a JSON document.\nA JSON object is an unordered collection of zero or more name/value pairs. This is why the concept of document order (clause 5 of XPath 1.0 [2]) is not applicable when an XPath expression is applied to an XPath data model that was generated from a JSON document. This has the following implications:\nThe following axes cannot be used: following, following-sibling, preceding, preceding-sibling.\nThe following functions cannot be used: position, local-name, namespace-uri, name.\nJSON does not have a namespace concept. This is why XPath concepts related to name spaces are not applicable. This has the following implications:\nThe following axes cannot be used: namespace\nThe following functions cannot be used: local-name, namespace-uri, name\nJSON does not have a concept similar to XML attributes. This is why XPath concepts related to attributes are not applicable. This has the following implications:\nThe following axes cannot be used: attribute\nOut of the seven node types specified in XPath 1.0 [2] only the root node, element node and text node are used. The attribute nodes, namespace nodes, processing instruction nodes and comment nodes are not used.\nThe name of the root element node is the class name of the base object. The base object is the node that contains the \"NtfSubscriptionControl\" instance (that in turn has an attribute whose value is the XPath expression).\nNote that the root element node (document element) is not the same as the root node. The root element node is the mapping of the top-level name/value pair in the JSON document, whereas the root node is the (conceptual) parent of that object. The root node is the mapping of the JSON document.\nWhen the value of the top-level name/value pair is an array, which is always the case for JSON defined NRMs in SA5, this array can contain only one item, which is the base object, in the special context of notification subscription. Considerations on how to handle the case where a top-level array can contain multiple items are hence not required.\nFor example, assume the information model is described by annex A.1 in TS 32.158 [11]. Further assume that the \"ManagedElement\" with the id \"ME1\" contains a \"NtfSubscriptionControl\" instance for which a node selection XPath expression shall be constructed. The base object is the \"ManagedElement\" with the id \"ME1\". The JSON document, to which the XPath expression is applied to, is as follows:\nor\nSince a well formed XML document has one and only one root elemet the first alternative is preferred. It contains the key \"ManagedElement\" that maps to the name of the XML root element. The XPath expression to identify the base object only is then\n/MangedElement/attributes\nor\n/*/attributes\nThe mapping from YANG to XML is defined in RFC 7950 [9]. No special considerations are required.\nXPath 2.0 [3] introduces sequence expressions which help to render Xpath expressions more compact. For example, multiple attributes of an object can be selected by\n/SubNetwork/(attrA, attrB)\nand multiple objects based on instance names with\n//*[objectInstance=(\"DN1\", \"DN2\")]/attributes\nOther concepts added in XPath 2.0 like quantified expressiuons provide no obvious value for the use cases analysed.\nEditor's note: The content of this clause is work in progress and subject to change.\nAn XPath expression matches the production \"Expr\" defined in XPath 1.0 [2], clause 3.1. However, the general expression is much too generic for selecting nodes of an input document. For example, it allows also expressions like\n(5, 256)[2]\nwhich selects the second item in the sequence (5, 256), hence 256. This expression does not work at all on an input document. Even if \"5\" and \"256\" is replaced by some XPath expression evaluating to numbers, the expression cannot be used for selecting nodes.\nThis is why only one or more XPath profiles are needed.\nTwo XPath profiles are proposed:\nBasic profile: Supporting limited features allowing XPath to browse the document from one element node to another. The XPath EBNF is detailed in annex A.1. In this profile a location path is defined as an absolute location path. An absolute location path consists of a sequence of one or more location steps separated by / and preceded by /. The location steps in an absolute location path are composed together from left to right. Each step-in turn selects a set of nodes relative to a context node. Note that a / by itself selects the root node of the document. The basic profile supports a predicate that filters on the \"id\".\nExample: /SubNetwork[id=\"SN1\"]/ManagedElement[id=\"ME2\"]/attributes\n\nA location step is composed of\nan axis specifier, which specifies the tree relationship between the nodes selected by the step and the context node\na node name which specifies the node name of the node selected by the location step. The node name can be a wildcard \"*\".\n\nThe axis specifier includes two axes:\nChild: axis containing the children of the context node\nExample (unabbreviated syntax): /child::SubNetwork/child::*\nExample (abbreviated syntax): /SubNetwork/*\nDescendant: axis containing the descendants of the context node; a descendant is a child or a child of a child and so on\nExample: /SubNetwork/descendant::*\nThe predicate\nis an equality expression with the \"=\" operator, the relative location path \"id\" on the left side and a literal string on the right side.\n\nNote that the axis specifier \"child::\" can be omitted from a location step, because child is the default axis. For example, a location path /SubNetwork/ManagedElement is short for /child::SubNetwork/child::ManagedElement.\n\nRegarding the asterisk character \"*\", it is reserved to denote a wildcard when used in the location path. It selects all element children of the context node. In the the EBNF notation, the character \"*\" mentions repetition symbol (it can be also represented inside curly brackets followed by the \"*\").\n\nAdvanced profile: supporting more advanced features like the usage of the predicates. The XPath EBNF is detailed in annex A.2.  In this profile, a relative location path is added as a second option to the location path. A relative location path consists of a sequence of one or more location steps separated by / and it does not need to start from the root node as the absolute path.\nExample: / / attributes\nIn this profile, in addition to the axis specifier and Node Name (same as the basic profile), a more sophisticated predicate option is added to the location step. The predicate uses arbitrary expressions to further refine the set of nodes selected by the step. Predicates are defined by an expression (PredicateExpr) always embedded in square brackets. A PredicateExpr can be as follows:\nAn EqualityExpr: expression evaluated by comparing the objects that result from evaluating the two operands. On the right side, the operand is a literal string object and on the left side a PathExpr is introduced as an operand. The PathExpr might be a location path returning an object having one of the following types: node-set, boolean, number or string.\nIf the PathExpr object is a node-set, then each node in the node-set is compared to the literal string defined in the right side. Note that a node in the node-set might have one/many descendants nodes. And in such a case the comparison expression is evaluated to \"false\". This kind of comparison is accepted by Xpath (correct syntax); and it returns an empty result. Unfortunately, in the EBNF the PathExpr can not be constrained to avoid such a comparison (See more details on handling comparison based on the node-set in clause 3.4 [2]).\nExamples: /SubNetwork/ManagedElement[id=\"ME1\"]\n\nInEqualityExpr: expression defining a comparison of a PathExpr object to a given number. Here again, the same problem related to node-set comparison as discussed above is true. Note that here object to be compared is converted to a number as if by applying the number function (more details in clause 3.5 [2]).\nExample: //attributes/ThresholdLevels[level>1]\nA functionCall: evaluated by using the Function Name to identify a function in XPath function librairy. Each function in the function library is specified using a function prototype, which gives the return type, the name of the function, and the type of the arguments (more details in Clause 4[2]).\nExamples:\n/SubNetwork/ManagedElement[starts-with(id,\"ME2\")]\n/SubNetwork/ManagedElement[contains(id,\"ME\")]\n\nThe rest of the grammar introduced in the EBNF defines additional rules for the lexical structure (Literal, Number and  Name structure). Note also that some functions are excluded since they are not useful for this profile.\nConcepts added in XPath 3.1 [4] provide no obvious value for the use cases analysed.\nEditor's note: Functions to deal with JSON arrays and maps may need further analysis.\nJSON Pointer [5] defines a string syntax for identifying a specific value within a JSON document. A JSON Pointer expression points to one and only one value. Items of an array are identified based on their index and not key.\nThese properties do not make JSON Pointer a good candidate for selecting multiple nodes.\nJSONPath [6] is still a draft RFC. Its intention is to be a powerful JSON Pointer.\n\nExample JSONPath expressions\nSelect a subtree starting from the base object\n$\nSelect all objects with a specific class\n$..*[?(@.objectClass==\"ManagedElement\")]\nSelect all objects based on their DN\n$..*[?(@.objectInstance==\"DN1\" || @.objectInstance== \"DN2\")]\nSelect specified attributes and attribute fields:\n$.SubNetwork[?(@.id==\"SN1\")].attributes.userLabel\n$.SubNetwork[?(@.id==\"SN1\")].attributes.plmnId.mcc\n$.SubNetwork[?(@.id==\"SN1\")].attributes[userLabel,userDefinedNetworkType]\n$.SubNetwork[?(@.id==\"SN1\")].attributes[userLabel,plmnId.mcc], does not work\nSelect an array element\n$.SubNetwork[?(@.id==\"SN1\")].ThresholdMonitor[?(@.id==\"TM1\")].attributes.thresholdLevels[?(@.level==1)]\n\nConditional read: return attributes container only when a condition is met,\nin this case \"userLabel\" is equal to \"Berlin NW\"\n$.SubNetwork[?(@.id==\"SN1\")][?(@.userLabel==\"Berlin NW\")]\nin this case we walk down one level for a test\n$.SubNetwork[?(@.id==\"SN1\")][?(@.plmnId.mcc==456)], does not work\nin this case an absolute path is used, that is outside of the current object\n$.SubNetwork[?(@.id==\"SN1\")].attributes[?($.SubNetwork[?(@.id==\"SN1\")].ThresholdMonitor[?(@.id==\"TM1\")].attributes.metric==\"Metric1\")], does not work\nTest on the presence of an attribute\n$.SubNetwork[?(@.id==\"SN1\")][?(@.userLabel)]\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "For example, assume the information model is described by annex A.1 in TS 32.158 [11]. Further assume that the \"ManagedElement\" with the id \"ME1\" contains a \"NtfSubscriptionControl\" instance for which a node selection XPath expression shall be constructed. The base object is the \"ManagedElement\" with the id \"ME1\". The JSON document, to which the XPath expression is applied to, is as follows:",
                                    "table number": 3,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "or",
                                    "table number": 4,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "4.2.6\tCR proposal",
                            "text_content": "It is proposed to add the following clause to TS 32.158.\n****** BEGIN *********************************************************************************\nDefinitions (to be placed in definitions clause)\nJSON document: A JSON document contains JSON text. A JSON text is a serialized JSON value. A JSON value is an object, array, number, or string, or one of the following three literal names: false, null, true.\nX\tJPath\nX.1\tIntroduction\nInformation can be represented in a structured way using markup languages. Well-known and widely used markup languages are for example XML and JSON.\nIt is required for numerous purposes to identify distinct portions of XML or JSON documents. For XML, XPath has been designed for that purpose. XPath is very powerful and includes capabilities for conditional node selection with predicates. XPath expressions can select one or more portions of an XML document.\nJSON Pointer serves a similar purpose. However, its capabilities are limited when compared to XPath. JSON Pointer expressions can identify only one portion of a JSON document. The idea of introducing conditions into the information selection process is not supported.\nThis calls for a notation applicable to JSON documents with more advanced features than JSON Pointer. This notation is called JPath. It is inspired by and based on XPath.\nEven though XPath was originally designed to select one or more nodes of an XML document, XPath expressions operate on documents based on a conceptual data model, the XPath data model. A mapping from the XML Information Set to the XPath data model is provided in Annex B of XPath 1.0 [15].\nThe main purpose of the JPath specification is to provide a mapping from a JSON document to the XPath data model. With this in place XPath expressions are (indirectly) applicable to JSON.\nThis specification will also introduce a few profiles for XPath. These profiles are designed to provide the functionality required for network and service management.\nClause X.2 provides a short review of the XPath data model. Clause X.3 defines the mapping of a JSON document to the XPath data model, and clause X.4 introduces a few XPath profiles. Annex A demonstrates to use of JPath for network management tasks.\nReaders should be familiar with XPath 1.0 [15].\nX.2\tXPath data model\nThe XPath data model is described in clause 5 of W3C Xpath1.0 specification [15]. It is a conceptual model without formal notation.\nThe model consists of nodes with relationships between them. There are seven types of nodes defined: root node, element node, text node, attribute node, namespace node, processing instruction node, comment node.\nNote that the data model for XPath 2.0 [xx] and XPath 3.1 [xy] is described in XQuery and in XPath Data Model 3.1 [15] and which is out of scope of this specification.\nX.3\tMapping of JSON to the XPath data model\nX.3.1\t\tSupported JSON documents.\nOnly documents whose value is a JSON object are supported. Multiple name/value pairs are allowed.\nX.3.2\t\tMapping of the JSON document\nA JSON document is mapped to the root node. The root node has no name.\nEditor's note: Discuss mapping of the \"top-level\" JSON value.\nEdito's note: Discuss mapping of numbers and strings.\nX.3.3\t\tMapping of the name of name/value pairs\nIf the value of the name/value pair is a string, a number, one of the tree literal names, or a JSON object, then the name of the name/value pair is mapped to one element node. The name of the element node is equal to the name of the name/value pair.\nIf the value of the name/value pair is a JSON array, then the name of the name/value pair is mapped to a specific number of element nodes. The names of these element nodes are all identical to the name of the name/value pair. The number of element nodes depends on the data types of the array items and is determined as follows:\n-\tFor each array item there is an element node if the array item is a scalar or a JSON object.\n-\tIf the array item is an array itself, then there is an element node for each array item of the subordinate array.\nX.3.4\t\tMapping of the value of name/value pairs\nX.3.4.1\tMapping of scalar values\nA scalar value is a string, a number, or one of the tree literal names. These values are mapped to text nodes.\nA text node coming from the value of a mapped name/value pair is the child of the element node coming from the name of the mapped name/value pair. Vice versa, the element node coming from the name of the mapped name/value pair is the parent of the text node coming from the value of the mapped name/value pair.\nExample:\n\nX.3.4.2\tMapping of a JSON object\nA JSON object consists of unordered name/value pairs. These name/value pairs are mapped as described in this clause. The element nodes coming from the name/value pairs of a JSON object shall be considered as an unordered list of element nodes.\nAn element node coming from the name/value pair of a JSON object is a child of the element node coming from the name of the name/value pair, whose value is the JSON object. Vice versa, the element node coming from the name of the name/value pair, whose value is a JSON object, is the parent of the element nodes coming from the name/value pairs of the JSON object.\nExample:\n\nX.3.4.3\tMapping of a JSON array\nA JSON array consists of ordered array items. Each array item can be a string, a number, one of the tree literal names, a JSON object, or a JSON array. The array items are mapped as described in this clause. The element nodes coming from the array items shall be ordered in the same way as the array items.\nAn element node coming from an array item of a JSON array is a child of the element node coming from the name of the name/value pair, whose value is the JSON array. Vice versa, the element node coming from the name of the name/value pair, whose value is a JSON array, is the parent of the element nodes coming from the array items of the JSON array.\nExample:\n\n\n\nX.3.5\t\tXPath data model concepts required by JSON\nA JSON document is mapped to root nodes, element nodes and text nodes. Attribute nodes, namespace nodes, processing instruction nodes and comment nodes have no equivalent in JSON.\nThe concept of document order is applicable only for arrays.\nEditor's note: It is ffs how the concept of document order for arrays can be applied.\nThe concept of variables is not used.\nX.3.6\t\tAdditional considerations for JSON definitions of a NRM\nWhen working with the JSON definitions of a NRM the following statements are always true:\n-\tThe items of an array have the same type.\n-\tArray items can be only scalars or JSON objects.\nEditor's note: Explain concept of Accessible tree of an NRM\nEditor's note: Explain that difference between object and attributes disappears in JSON.\nX.4\tJPath expressions\nX.4.1\t\tIntroduction\nJPath uses the same syntax, the same concepts and the same definitions as XPath. JPath expressions are a subset of XPath expressions. All subsets support only the abbreviated syntax. The output of a JPath expression is always a node set.\nDifferent subsets are defined in the following clauses. All subsets have the same allowed location path expression. Subsets differ in the capabilities of the predicate. A subset is also called JPath profile.\nX.4.1\t\tEvaluation context\nJPath expressions are evaluated in a context, that is a subset of the XPath evaluation context. The JPath context includes\n-\ta node (the context node)\n-\ta pair of non-zero positive integers (the context position and the context size)\n-\ta function library\nX.4.3\t\tThe location path\nA JPath expression is an absolute location path. An absolute location path consists of \"/\", optionally followed by a relative location path. A \"/\" by itself selects the root node of the document.\nAbsoluteLocationPath ::= '/' RelativeLocationPath\nA relative location path consists of a sequence of one or more location steps separated by \"/\".\nRelativeLocationPath ::= Step | RelativeLocationPath '/' Step\nOnly the child axis is supported. The child axis is the default axis and omitted in the abbreviated syntax of a location step. The location step contains only a node test and an optional predicate.\nStep ::= NodeTest Predicate?\nThe node test is a name test. The asterisk \"*\" is supported and selects all element children of the context node.\nNodeTest ::= NameTest\nNameTest ::= '*' | QName\nThe \"QName\" is either a class name, the string \"attributes\", an attribute name, or an attribute field name.\nEditor's note: EBNF for QName tbd.\nThe predicate is an expression encapsulated in rectangular brackets.\nPredicate ::= '[' PredicateExpr ']'\n\nThe capabilities of the predicate expression differ for the different JPath profiles.\nEditor's note: Add XPath 2.0 capability to select multiple nodes with a sequence, e.g. \"…/(a,b)\".\nX.4.4\t\tJPath basic\ntbd\nX.4.5\t\tJPath advanced\ntbd\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Example:",
                                    "table number": 5,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Example:",
                                    "table number": 6,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Example:",
                                    "table number": 7,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "",
                                    "table number": 8,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "",
                                    "table number": 9,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "4.2.7\tConclusion",
                            "text_content": "It is recommended to define a mapping from a JSON document to the XPath data model and to identify a basic and advanced subset of XPath expressions working on that model.\nThis allows to apply a certain subset of XPath expressions safely to JSON documents.\nIt is also recommended to use the mechanism not only for targeted notification subscriptions, but also whenever it is required to identify, when being located on some object or attribute, other attributes in other objects.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.3\tIssue #3: Definition of createMOI",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.3.1\tIssue description",
                            "text_content": "The operation \"createMOI\" in TS 28.532 is underspecified and needs to be improved in many aspects.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.2\tAnalysis",
                            "text_content": "The following points need to be clarified in the definition of \"createMOI\":\n-\tClarify that the name of the new object is assigned by the MnS consumer.\n-\tClarify that the MnS consumer does not need to provide in the creation request values for all attributes defined for the object class.\n-\tClarify that depending on the object class some attribute values have to be provided in the creation request.\n-\tClarify the MnS producer may provide values for attributes, for which no value is provided in the request.\n-\tClarify the operation is synchronous.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.3\tCR proposal",
                            "text_content": "The existing clause 11.1.1.1 in TS 28.532 shall be replaced as follows:\n****** BEGIN *********************************************************************************\n11.1.1.1\tcreateMOI operation\n11.1.1.1.1\tDescription\nThis operation is invoked by MnS consumers to request a MnS producer to create a (single) managed object instance on the MnS producer.\nThe \"managedObjectClass\" parameter in the request specifies the class name and the \"managedObjectInstance\" parameter the instance name of the object to be created. Both parameters shall be included in the request.\nThe MnS consumer shall generate the instance name by first assigning a value to the naming attribute of the new instance, and then constructing a DN according to TS 32.300 [25].\nThe MnS consumer shall provide in \"attributeListIn\" none, some or all values for the attributes specified by the managed object class definition of the class to be created. The MnS producer shall not update attribute values or remove attribute values, that are provided in the request, before creating the object and returning the \"createMOI\" response.\nThe properties of an attribute determine if attribute values shall, shall not or may be provided in the \"createMOI\" request. If no value is provided and a default value is specified for the attribute, the MnS producer shall set the attribute value to the default value. For further information on attribute properties and their impact on the presence or absence of attribute values in object creation requests and MnS producer behaviour, see TS 32.156 [x], clause 5.2.1 and annex B.\nWhen the MnS producer assigns  values, that are not known to the MnS consumer, to one or more attributes for which no value is included in the \"createMOI\" request, the MnS producer shall include \"attributeListOut\" in the \"createMOI\" response, otherwise \"attributeListOut\" may be omitted.\nIn case of a successful operation, the object shall be created immediately upon reception of the \"createMOI\" request, and the \"createMOI\" response shall be returned immediately after the creation of the object. The MnS producer shall not wait with the creation of the object or returning the response until some other potentially long-lasting process or activity, that might be triggered by the reception of the request or the creation of the object, has completed.\nOnly objects, whose parent exists, can be created (directly under that parent). The MnS producer shall consider an attempt to create an object whose parent object does not exist as an error.\nNote, stage 3 protocols represent missing values for attributes, that are defined by the object class, in the \"createMOI\" request in different ways. For some protocols just the attribute name may be present, without an attribute value. For other protocols, the complete attribute name/value pair may be absent.\nSome stage 3 protocols do not support returning \"attributeListOut\". In this case, the MnS producer shall not modify the attribute list provided in the request before creating the object. If required by TS 32.156 [x], clause 5.2.1 and annex B, the MnS producer shall assign default values to attributes only after returning the \"createMOI\" response. Attribute value change notifications may be used to notify MnS consumers about the changes. Only default values, that have a specific definitive value may be assigned upon object creation. This is because the MnS consumer knows the MnS producer will assign this value when required according to TS 32.156 [x], clause 5.2.1 and annex B. Default values that are determined by the MnS producer based on standardized or proprietary selection methods are typically not known to MnS consumers.\n11.1.1.1.2\tInput parameters\n\n11.1.1.1.3\tOutput parameters\n\n****** END ***********************************************************************************\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "11.1.1.1.2\tInput parameters",
                                    "table number": 10,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "11.1.1.1.3\tOutput parameters",
                                    "table number": 11,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "4.3.4\tConclusion",
                            "text_content": "It is recommended to update the definition of the operation \"createMOI\" in clause 11.1.1.1 of TS 28.532 as defined in clause 4.3.3 of the present document.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.4\tIssue #4: Definition of modifyMOIAttributes",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.4.1\tIssue description",
                            "text_content": "The operation \"modifyMOIAttributes\" in TS 28.532 is underspecified and needs to be improved in many aspects.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.2\tAnalysis",
                            "text_content": "",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.3\tCR proposal",
                            "text_content": "As a solution for the issue, the existing clause 11.1.1.3 in TS 28.532 could be replaced as follows:\n****** BEGIN *********************************************************************************\n11.1.1.3\tmodifyMOIAttributes operation\n11.1.1.3.1\tDefinition\nThis operation is invoked by MnS consumers to request a MnS producer to modify one or more attributes of one or more manged objects on that MnS producer.\nThe type of modifications, that can be performed, depend on the attribute multiplicity.\nWith the \"multiplicity: 1\", the following modifications are possible:\n-\tReplacement of an attribute value or attribute field value.\nWith the \"multiplicity: 0..1\", the following modifications are possible:\n-\tReplacement of an attribute value or attribute field value, applicable to attributes or attribute fields that do have a value when performing the operation.\n-\tAddition of an attribute value or attribute field value, applicable to attributes or attribute fields that do not have a value when performing the operation.\n-\tRemoval of an attribute value or attribute field value, applicable to attributes or attribute fields that do have a value when performing the operation.\nWith the \"multiplicity: 1..n\", the following modifications are possible:\n-\tReplacement of an existing attribute element or existing attribute field element.\n-\tAddition of a new attribute element or attribute field element.\n-\tRemoval of an attribute element or attribute field element, applicable to attribute or attribute fields that do have at least two elements.\nWith the \"multiplicity: 0..n\", the following modifications are possible:\n-\tReplacement of an existing attribute element or existing attribute field element.\n-\tAddition of an attribute element or attribute field element.\n-\tRemoval of an attribute element or attribute field element, applicable to attribute or attribute fields that do have at least one element.\nThe selection of the objects to be modified is achieved with the parameters \"baseObjectInstance\", \"scopeType\", \"scopeLevel\" and \"filter\". If no \"scopeType\" is specified, the value defaults to \"BASE_ONLY\". Also, when no scoping is supported by the MnS producer, the value in \"baseObjectInstance\" identifies the object to be modified.\nA protocol may choose to split the selection of objects with scoping and filtering and the modification of the attributes of the selected objects into different operations.\nThe modifications to be applied to the selected objects are described in the \"modifications\" parameter. This is a multi-valued parameter. Each value is a structure composed of the \"modifyOperator\", the \"nodeIdentifier\" and the \"nodeValue\". The values of \"modificationList\" are ordered and shall be applied in the sequence as they occur in the list.\nThe parameter \"nodeIdentifier\" is used to identify the attributes or attribute fields to which modifications shall be applied. For simple attributes this can be just the attribute name. For structured attributes, however, attribute fields need to be identified. Different attribute fields pertaining to the same attribute may have the same name. For that reason, unambiguous identification of attribute fields is not possible with their names only. The identification needs to be based e.g. on global or local identifiers, or on the specification of a path allowing to navigate to the attribute field. Details are protocol specific.\nFor the modification of multi-valued attributes or multi-valued attribute fields two cases are distinguished:\n-\tAll values (elements) are considered as a single value. Elements cannot be addressed individually. If replaced, all existing elements are replaced with the new elements received in the modification request. If deleted, all existing elements are deleted. Addition of new elements to existing elements is not possible.\n-\tEach element can be addressed individually. Single elements can be added, replaced, and deleted.\nThe first case does not need any further considerations. The second case requires the identification of attribute elements and attribute field elements in the modification request, when replacing and deleting elements in ordered and unordered lists, and when adding elements to ordered lists. Details are not defined at stage 2. They are protocol specific and include identification by the element value, identification by a positional index or identification by an auxiliary key added at stage 3. Note that the concept of element keys is not defined at stage 2. Identification of elements may be provided also by the \"nodeIdentifier\" parameter.\nThe \"modifyOperator\" parameter specifies the modification to be applied to the value of the attribute or attribute field, or the attribute element or attribute field element identified by the \"nodeIdentifier\". The parameter can have the values \"replace\", \"add\", \"remove\" or \"setToDefault\":\n-\tFor \"replace\", the \"nodeValue\" specifies the attribute value, attribute field value, attribute element or attribute field element that shall replace the existing value.\n-\tFor \"add\", the \"nodeValue\" specifies the attribute value or attribute field value to be added to an attribute or attribute field without value, or the new attribute element or attribute field element to be added to a multi-valued attribute.\n-\tFor \"remove\", the \"nodeValue\" is absent when an attribute value or attribute field value is removed. When an attribute element or attribute field element is removed, \"nodeValue\" may carry the element to be removed, depending on how on protocol level attribute elements and attribute field elements are identified.\n-\tFor \"setToDefault\", the \"nodeValue\" is absent.\nAttributes and attribute fields without value can be represented in different protocol specific ways, for example by an attribute name without attribute value, by an absent attribute name/value pair, or by a specific attribute value (such as \"null\" or \"nil\").\nThe \"modifyMOIAttributes\" operation allows to modify one or more attributes in one or more objects. When not all attribute modifications can be applied successfully, the MnS producer has different options how to proceed. He may not perform any of the modifications and roll back to the state at the reception of the modification request. He may apply the changes that can be applied, so that some of the requested modifications are applied and some are not applied. He may stop processing the modification request when the first error occurs. The stage 2 definition of this operation does not include any provisions on how to proceed in case an error occurs. These provisions are left to stage 3.\nWhen attribute properties as defined in clause 5.2.1 of TS 32.156 [?] are used, then a MnS consumer should take into account the properties \"type\", \"allowedValues\", \"multiplicity\", \"isOrdered\", \"isUnique\", \"isNullable\" and \"passedById\" when constructing the attribute modification request. If ignored, the MnS producer shall reject the request and generate an error response.\nFurthermore, when attribute properties are used, then a MnS consumer can modify an attribute with \"modifyMOIAttributes\" only if \"isInvariant: False\" and \"isWritble: True\". Any permission to modify attributes as determined by these attribute properties may be overridden by access control.\n11.1.1.3.2\tInput parameters\n\n11.1.1.3.3\tOutput parameters\n\n****** END ***********************************************************************************\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "11.1.1.3.2\tInput parameters",
                                    "table number": 12,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "11.1.1.3.3\tOutput parameters",
                                    "table number": 13,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "4.4.4\tConclusion",
                            "text_content": "It is recommended to update the definition of the operation \"modifyMOIAttributes\" in clause 11.1.1.3 of TS 28.532 as defined in clause 4.4.3 of the present document.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.5\tIssue #5: HTTP error response format",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.5.1\tIssue description",
                            "text_content": "When a MnS producer cannot fulfil a HTTP request, the MnS producer should provide in the error response detailed information about what exactly failed and for what reason. Ideally the error response body returned is standardized.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.5.2\tAnalysis",
                            "text_content": "The error response of CRUD operations is currently defined as\nErrorResponse:\ndescription: >-\nDefault schema for the response message body in case the request\nis not successful.\ntype: object\nproperties:\nerror:\ntype: object\nproperties:\nerrorInfo:\ntype: string\nThe error response is a JSON object with a single property \"errorInfo\" that is of type string. Vendors can provide error information in \"errorInfo\" and extend the object with addition properties. The standard provides hence just a container for vendor specific error information. Error details cannot be provided in a standardized way. An error response format should be standardized.\nIETF RFC 7807 [12] provides an example how the issue has been approached in the industry.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.5.3\tCR proposal",
                            "text_content": "The following clause shall be added to TS 32.158.\n****** BEGIN *********************************************************************************\nX\t\tError responses\nEditor's note: Interaction with access control is to be studied.\nX.1\tHTTP error codes\nIn case of an error on the MnS Producer an error response status code of the classes 4xx (Client Error) or 5xx (Server Error) is returned to the MnS Consumer in the response status line. A complete list of error status codes is maintained by IANA.\nTable X.1-1 and Table X.1-2 list the status codes that shall be supported by MnS Producer and MnS Consumer implementations compliant to this specification.\nTable X.1-1: Supported 4xx client error status codes\n\nTable X.1-2: Supported 5xx server error status codes\nA MnS Producer may use other error response codes as well. However, there is no guarantee that a MnS Consumer understands the semantics beyond what is specified in clause 6 of IETF RFC 7231 [2]: \"A client MUST understand the class of any status code, as indicated by the first digit, and treat an unrecognized status code as being equivalent to the x00 status code of that class\".\nX.2\tError response body\nX.2.1\tOverview\nHTTP status codes provide high level error information. This is often not sufficient, for example in situations where the MnS Producer wants to convey error information to aid the MnS Consumer in generating a valid request. In these cases, the MnS Producer needs to include an error response body in the response.\nThe error response body specified in the present document is derived from IETF RFC 7807 [??], clause 3.1. The following definitions are re-used and shall be supported:\n-\tThe \"status\" property contains the status code for the error..\n-\tThe \"type\" property provides high level error information.\n-\tThe \"title\" provides a short, human-readable summary of the problem type. It shall not change from occurrence to occurrence of the problem.\nThe \"details\" and \"instance\" properties defined in IETF RFC 7807 [??] are not re-used. Potential support is outside of the provisions of the present document.\nThe three re-used properties are extended with the following property that shall be supported.\n-\tThe \"reason\" (string) property\" provides more details on the error conditions than \"type\".\nThe \"status\", \"type\", \"title\" and \"reason\" property are applicable to all HTTP methods and request media types. In addition, the following method specific properties are defined:\n-\tThe \"badQueryParams\" property provides information about bad query parameters in GET requests.\n-\tThe \"badOp\" property specifies the operation in JSON Patch and 3GPP JSON Patch requests, that cannot be satisfied.\n-\tThe \"badAttributes\" property provides information about bad attributes in PUT, POST, JSON Merge Patch and 3GPP JSON Merge Patch requests.\n-\tThe \"badObjects\" property provides information about bad objects in 3GPP JSON Merge Patch requests.\nAn error response provides details on one or more problems in the request. Each problem is described by a subset of the seven properties specified above. Each problem is related to a specific problem type that is identified by the value of the \"type\" property.\nA single request may have more than one problem. This situation may occur for example when a GET request has multiple query parameters, or when a PATCH request contains multiple operations to be applied to the information model on the MnS Producer.\nThe MnS Producer shall include at least details on one problem in the error response. A MnS Consumer cannot assume that the returned list of problems is exhaustive and includes all problems in the request. A MnS producer may stop processing the request upon detection of the first problem and return an error response.\nIf all problems have the same error status code, that code shall be used in the status line of the error response. The \"status\" property of each problem description may repeat that code. However, if the problems have different error codes, the \"207 Multi-Status\" (IETF RFC4918 [???]) code shall be used in the response status line. The \"status\" property related to each problem shall contain the specific status code.\nThe concrete format of the error response body depends on the request. The media type for all error response formats is \"application/vnd.3gpp.error+json\". The following clauses provide the details.\nX.2.2\tError response format for GET requests\nFor a successful GET request all query parameters in the request need to be understood, accepted and satisfied by the MnS Producer. In case one or more bad query parameters are present in the request an error response shall be returned.\nThe error response is a JSON array of JSON objects with \"status\", \"type\", \"title\", \"reason\", and \"badQueryParams\" properties. The \"type\" property shall be present. The \"status\" property shall be present under the conditions specifed in clause X.2.1. The \"title\", \"reason\" and \"badQueryParams\" properties may be present.\nThe MnS Producer shall include at least one bad query parameter in the \"badQueryParams\" property. A MnS Consumer cannot assume that the returned list of bad query parameters includes all bad parameters in the request. A MnS producer may stop processing the request upon detection of the first bad query parameter and return an error response.\n\nX.2.3\tError response format for PUT, POST and DELETE requests\nThe error response is a JSON array of JSON objects with \"status\", \"type\", \"title\", and \"reason\" properties. The \"type\" property shall be present. The \"status\", \"title\" and \"reason\" properties may be present.\n\nX.2.4\tError response format for JSON Patch and 3GPP JSON Patch requests\nFor a successful JSON Patch or 3GPP JSON Patch request all operations in the patch request need to be understood, accepted, and satisfied by the MnS Producer. In case one or more operations in the request cannot be applied, no operation shall be applied, and an error response shall be returned. JSON Patch and 3GPP JSON Patch are atomic, as described in clause 6.3.1.\nThe error response is a JSON array of JSON objects with \"badOp\", \"status\", \"type\", \"title\" and \"reason\" properties. The \"badOp\" and \"type\" properties shall be present. The \"status\" property shall be present only under the conditions specified in clause X.2.1.\nEach object provides information about one bad patch operation.  The patch operation, that cannot be satisfied, is identified with \"badOp\", whose value is a JSON Pointer identifying the object with the bad patch operation in the request. Successful patch operations are not included in the response. The order of the operations in the response shall be the same as in the request.\nThe MnS Producer shall include at least one bad operation in the error response. A MnS Consumer cannot assume that the returned list of bad operations includes all bad operations in the request. A MnS Producer may stop processing the request upon detection of the first bad operation and return an error response.\n\nX.2.5\tError response format for JSON and 3GPP JSON Merge Patch requests\nLike JSON Patch and 3GPP JSON Patch, JSON and 3GPP JSON Merge Patch are atomic.\nThe error response is a JSON array of JSON objects with \"status\", \"type\", \"title\", \"reason\", \"badAttributes\", and \"badObjects\" properties. The \"type\" property shall be present. The \"status\" property shall be present only under the conditions specified in clause X.2.1. The \"badObjects\" property is applicable only for 3GPP JSON Merge Patch.\nThe path to the bad attributes or bad objects is a relative URI and constructed according to the rules defined in clause 6.4.3 for the \"path\" property of 3GPP JSON Patch.\nThe MnS Producer shall include at least one bad attribute in the \"badAttributes\" property, or one bad object in the \"badObjects\" property. A MnS Consumer cannot assume that the returned list of bad attributes or objects includes all bad attributes or objects in the request. A MnS producer may stop processing the request upon detection of the first bad attribute or object and return an error response.\n\nX.3\tThe \"type\" property\nThe \"type\" property provides high level error information allowing to complement HTTP 4xx and 5xx error codes in case this is necessary or desired. It provides more details on the nature of the problem than the HTTP error codes. Problem types are specified for the following error response codes.\n-\t400 Bad Request\n-\t403 Forbidden\n-\t422 Unprocessable Content\n-\t500 Internal Server Error\n-\t503 Service Unavailable\nNote that some error codes convey already all information that can be conveyed. For example, the 404 Not Found status code indicates that the target resource does not exist or has no current representation. It is hard to see which information should be added to make the error response more helpful for the MnS Consumer.\nThe \"type\" property is an enumeration of string values. A MnS Producer should use the following values in error situations. Other values may be used as well if deemed more appropriate for specific errors.\n-\tVALIDATION_ERROR (HTTP error code: 400 Bad Request): The request message does not validate and cannot be processed. Validation refers to two aspects: Validation of the received request message against the JSON schema definition of the request message, and validation of the information model state after applying the requested changes against the JSON schema definition of the information model, for example, if a new instance of a certain object class is allowed to be contained under the class of the specified parent object. The \"reason\" property may be present and specify more detailed error information.\n-\tREQUEST_OBJECT_TREE_MISMATCH (HTTP error code: 422 Unprocessable Entity): The request message is well formed and understood but cannot be completed due to the current state of the object tree on the MnS Producer. For example, this reason is used when an object is requested to be created below a parent object that does not exist. The \"reason\" property may be present and specify more detailed error information.\n-\tIE_NOT_FOUND (related error code: 400 Bad Request): The information element (object, attribute, attribute field, attribute element) requested to be modified does not exist. The \"reason\" property may specify more detailed error information. The \"reason\" property may be present and specify more detailed error information.\n-\tMODIFICATION_NOT_ALLOWED (HTTP error code: 403 Forbidden): The requested modification is understood but not allowed. The \"reason\" property may be present and specify more detailed error information.\n-\tRETRIEVAL_NOT_ALLOWED (HTTP error code: 403 Forbidden): The retrieval of the specified information is not allowed. The \"reason\" property may be present and specify more detailed error information.\n-\tSERVER_LIMITATION (HTTP error code: 500 Internal Server Error): The request is correct and understood by the MnS Producer, but the MnS Producer cannot satisfy the request due to server limitations. The \"reason\" property may be present and specify more detailed error information.\n-\tSERVICE_DISABLED (HTTP error code: 503 Service Unavailable): The MnS Producer has disabled itself and is currently unable or unwilling to handle the request. This condition may occur, for example, in overload situations. The \"reason\" property shall be absent.\n-\tAPPLICATION_LAYER_ERROR (HTTP error code: 500 Internal Server Error): The request is correct and understood by the MnS Producer, but the MnS Producer cannot satisfy the request due to application layer issues. The \"reason\" property may be present and specify more detailed error information.\nX.4\tThe \"reason\" property\nX.4.1\tOverview\nThe \"reason\" property provides more details on the error conditions than the \"type\" property. For client-side errors, these reasons may provide hints to the MnS Consumer on how to generate a request without errors. For server-side errors, they may help the MnS Consumer to generate requests that may be satisfied by the MnS Producer.\nWhen multiple reasons apply, the most fundamental reason shall be put in the \"reasons\" property. For example, when a MnS Consumer attempts to replace an invariant attribute, and - in addition - the attribute value is invalid, then only the information that the attribute is invariant shall be contained in the \"reason\" property.\nThe \"reason\" property may be omitted when the MnS Producer does not want to disclose details on the error to the MnS Consumer.\nDetailed error reasons are specified by the \"reason\" property for the following error codes:\n-\t400 Bad Request\n-\t403 Forbidden\n-\t422 Unprocessable Entity\n-\t500 Internal Server Error\n\nError reasons depend on the HTTP method and on if attributes or objects are manipulated. The following clauses specify the details.\n\nX.4.2\tError reasons for GETValid values for the \"reason\" property for an error response related to HTTP GET are:\n-\tRESPONSE_TOO_LARGE (related type: SERVER_LIMITATION, 500 Internal Server Error): The content requested to be returned exceeds the response body size limit of the MnS Producer.\n-\tNO_DATA_ACCESS (related type: SERVER_LIMITATION, 500 Internal Server Error): The request is correct and understood by the MnS Producer, but the MnS Producer cannot access the requested data.\n-\tQUERY_MALFORMED (related type: VALIDATION_ERROR, 400 Bad Request): The syntax of the query component is malformed. The \"badQueryParams\" property shall be absent.\n-\tQUERY_PARAM_NAMES_INVALID (related type: VALIDATION_ERROR, 400 Bad Request): One or more query parameter names are invalid. The \"badQueryParams\" property shall indicate the names of the invalid parameters.\n-\tQUERY_PARAM_VALUES_INVALID (related type: VALIDATION_ERROR, 400 Bad Request): One or more query parameters have an invalid value. The \"badQueryParams\" property shall indicate the names of the parameters with invalid value.\n-\tQUERY_PARAMS_MISSING (related type: VALIDATION_ERROR, 400 Bad Request): One or more query parameters, that shall be present in the request or that shall be present in case another parameter is present, are missing in the query component. The \"badQueryParams\" property shall indicate the names of the missing parameters.\n-\tQUERY_PARAMS_INCONSISTENT (related type: VALIDATION_ERROR, 400 Bad Request): Query parameters with mutual dependency constraints do not respect these constraints. The \"badQueryParams\" property shall indicate the names of the parameters not respecting the dependency constraints.\n-\tATTRIBUTES_NOT_READABLE (related type: RETRIEVAL_NOT_ALLOWED ,403 Forbidden): One or more attributes or attribute fields identified by the query parameters are not readable, according to the attribute property \"isReadable\". The \"badQueryParams\" property shall indicate the names of the parameters identifying attributes that are not readable.\n-\tQUERY_PARAMS_TOO_COMPLEX (related type: SERVER_LIMITATION, 500 Internal Server Error): The query parameters and their values are valid but one or more of them cannot be processed as requested because complexity limits of the MnS Producer are reached, for example, a filter expression is syntactically correct but cannot be evaluated and yields no results since the expression is longer or more complex than the MnS producer can or is willing to process. The \"badQueryParams\" property shall indicate the names of the parameters that cannot be processed.\nThe list of valid values is not exhaustive. Other values may be used as well. The name style of these enumeration literals shall follow clause 5.3.5.3 of TS 32.156 [?].\nNote that is not an error when query parameters do not identify any resource or attribute to be returned.\nNote that the following query parameters are currently specified in the present document: \"scopeType\", \"scopeLevel\", \"filter\", \"attributes\", and \"fields\".\nExample:\nFor the following request\nthe error response may look like\nWhen the sub-errors have a different HTTP error code, \"207 Multi-Status\" is used in the response status line. The \"status\" property is present for each sub-error and specifies the status code for this sub-error.\n\nX.4.3\tError reasons for attribute manipulations\nX.4.3.1\tJSON Patch and 3GPP JSON Patch\nThis clause specifies reasons for errors that may occur when attempting to manipulate attributes of existing resources with JSON Patch and 3GPP JSON Patch. JSON Patch and 3GPP JSON Patch are used for partial resource updates.\nThis specification defines the following error reasons for use with JSON Patch and 3GPP JSON Patch:\n-\tNEW_ATTRIBUTE_VALUE_INVALID (related type: VALIDATION_ERROR, 400 Bad Request): The attribute, attribute field or attribute element, as specified in the \"path\" property, cannot be added, or its value cannot be replaced, as requested, because the value, as specified in the \"value\" property, is invalid. Valid values are determined by the attribute properties \"type\", \"allowedValues\", \"multiplicity\", \"isOrdered\", \"isUnique\", and \"isNullable\".\n-\tNEW_ATTRIBUTE_NAME_INVALID (related type: VALIDATION_ERROR, 400 Bad Request): The attribute or attribute field cannot be added as requested, because its name, as specified in the \"path\" property, is invalid.\n-\tNEW_ATTRIBUTE_PARENT_NOT_FOUND (related type: REQUEST_OBJECTS_MISMATCH, 422 Unprocessable Entity): The attribute or attribute field cannot be added as requested, because its parent, as specified in the \"path\" property, does not exist.\n-\tATTRIBUTE_NOT_FOUND (related type: IE_NOT_FOUND, 400 Bad Request): The attribute or attribute field cannot be removed, moved, copied, or is value cannot be replaced, as requested, because the \"path\" or \"from\" property identifies an attribute or attribute field, that does not exist.\n-\tATTRIBUTE_ELEMENT_NOT_FOUND (related type: IE_NOT_FOUND, 400 Bad Request): The attribute element cannot be replaced, removed, moved, or copied, because the \"path\" or \"from\" property identifies an attribute element, that does not exist.\n-\tATTRIBUTE_INDEX_BAD (related type: IE_NOT_FOUND, 400 Bad Request): The attribute element cannot be added at the specified array location as requested, because the array element index specified in the \"path\" property is greater than the number of elements in the array.\n-\tFINAL_MV_ATTRIBUTE_VALUE_INVALID (related type: REQUEST_OBJECTS_MISMATCH, 422 Unprocessable Entity): The attribute element, as specified in the \"value\" property cannot be added to or removed from the multi-valued attribute as requested, because this would result in an invalid value, according to the attribute properties \"multiplicity\" or \"isUnique\". The attribute element itself is valid.\n-\tATTRIBUTE_NOT_WRITABLE (related type: MODIFICATION_NOT_ALLOWED, 403 Forbidden): The attribute or attribute field cannot be added, removed, or moved, or its value cannot be replaced, as requested, because the attribute or attribute field is not writable by MnS Consumers, according to the attribute property \"isWritable\".\n-\tATTRIBUTE_INVARIANT (related type: MODIFICATION_NOT_ALLOWED, 403 Forbidden): The attribute or attribute field cannot be added, removed, or moved, or its value cannot be replaced, as requested, because the attribute or attribute field is invariant, according to the attribute property \"isInvariant\".\n-\tOP_UNKNOWN (related type: VALIDATION_ERROR, 400 Bad Request): The patch operation specified by the \"op\" property is not known by the MnS producer. This situation may occur, for example, when a patch operation is not supported or wrongly spelled.\nThe list of error reasons is not exhaustive. Other values may be defined and used as well. The name style of these enumeration literals shall follow clause 5.3.5.3 of TS 32.156 [?].\nX.4.3.2\tJSON Merge Patch, 3GPP JSON Merge Patch and PUT\nThis clause specifies reasons for errors that may occur when attempting to manipulate attributes of existing resources with JSON Merge Patch, 3GPP JSON Merge Patch and PUT. JSON Merge Patch and 3GPP Merge JSON Patch are used for partial resource updates. PUT is used for complete resource updates.\nThe following error reasons are defined for use with JSON Merge Patch, 3GPP JSON Merge Patch, and PUT:\n-\tNEW_ATTRIBUTE_VALUE_INVALID (related type: VALIDATION_ERROR, 400 Bad Request): One or more attributes or attribute fields cannot be added, or their values cannot be replaced, as requested, because the received value is invalid. Valid values are determined by the attribute properties \"type\", \"allowedValues\", \"multiplicity\", \"isOrdered\", \"isUnique\", and \"isNullable\". The \"badAttributes\" property provides the path to these attributes and attribute fields.\n-\tNEW_ATTRIBUTE_NAME_INVALID (related type: VALIDATION_ERROR, 400 Bad Request): One or more attributes or attribute fields cannot be added as requested, because the received attribute or attribute field name is invalid. The \"badAttributes\" property provides the path to these attributes and attribute fields.\n-\tATTRIBUTE_NOT_WRITABLE (related type: MODIFICATION_NOT_ALLOWED, 403 Forbidden): One or more attributes or attribute fields cannot be added or removed, or their values cannot be replaced, as requested, because the attributes or attribute fields are not writable by MnS Consumers, according to the attribute property \"isWritable\". The \"badAttributes\" property provides the path to these attributes and attribute fields.\n-\tATTRIBUTE_INVARIANT (related type: MODIFICATION_NOT_ALLOWED, 403 Forbidden): One or more attributes or attribute fields cannot be added or removed, or their values cannot be replaced, as requested, because the attributes or attribute fields are invariant, according to the attribute property \"isInvariant\". The \"badAttributes\" property provides the path to these attributes and attribute fields.\nThe following additional error reasons are defined for use with JSON Merge Patch and 3GPP JSON Merge Patch:\n-\tATTRIBUTE_NOT_FOUND (related type: IE_NOT_FOUND, 400 Bad Request): One or more attribute or attribute fields cannot be removed as requested, because they do not exist. The \"badAttributes\" property provides the path to these attributes and attribute fields.\nThe list of error reasons is not exhaustive. Other values may be defined and used as well. The name style of these enumeration literals shall follow clause 5.3.5.3 of TS 32.156 [?].\nX.4.3.3\tExamples\nJSON Patch example 1 (\"add\"):\nIn the first example an attribute field is requested to be added.\nWhen \"attrA\" is invariant, the error response might look like.\nOther responses may look as below. Note that information not essential for illustrating the examples is left out (referred to as \"...\")\nwhen \"attrB\" is not known or supported.\nwhen the value \"def\" for \"attrB\" is invalid, for example when \"attrB\" is of type \"number\".\nwhen \"attrB\" is not writable by MnS Consumers.\nwhen \"attrB\" is invariant and cannot be added after object creation time anymore.\n\"reason\": [\"ATTRIBUTE_NOT_FOUND\"],\nnot applicable\nwhen \"attrA\" does not exist\n\"reason\": [\"FINAL_MV_ATTRIBUTE_VALUE_INVALID\"],\nnot applicable.\nwhen \"add\" is not supported.\nJSON Patch example 2 (\"remove\"):\nIn the next example an attribute field is requested to be removed.\nError responses may look like:\nwhen \"attrB\" is not writable by MnS Consumers.\nwhen \"attrB\" is invariant and cannot be removed after object creation time.\nwhen \"attrA/attrB\" does not exist.\nwhen \"remove\" is not supported.\nJSON Patch example 3 (\"replace\"):\nIn the next example the current value of an attribute field is requested to be replaced by a new value.\nError responses may look like:\nwhen \"replace\" is not supported.\n\"reason\": \"NEW_ATTRIBUTE_NAME_INVALID\"\nnot applicable.\n\"reason\": \"NEW_ATTRIBUTE_PARENT_NOT_FOUND \"\nnot applicable.\nwhen the value \"def\" for \"attrB\" is invalid, for example when \"attrB\" is of type \"number\".\n\"reason\": [\"FINAL_ATTRIBUTE_VALUE_INVALID\"],\nnot applicable.\nwhen \"attrB\" is not writable by MnS Consumers.\nwhen \"attrB\" is invariant, and its value cannot be replaced after object creation time.\nwhen \"attrA/attrB\" does not exist.\nwhen \"attrA\" does not exist.\nwhen the operation \"add\" is not supported.\nJSON Merge Patch example 1:\nAssume a resource where the attributes \"attrA\" and \"attrB\" exist. The following message requests to replace the current value of \"attrB\" with \"def\".\nWhen \"attrB\" is invariant the MnS Producer might respond as follows.\n\nX.4.4\tError reasons for object manipulations\nThe following reasons are defined for errors that may occur when attempting to create objects with PUT, POST. 3GPP JSON Merge Patch and 3GPP JSON Patch, or when attempting to delete objects with DELETE, 3GPP JSON Merge Patch and 3GPP JSON Patch:\n-\tOBJECT_CREATION_NOT_ALLOWED (related type: MODIFICATION_NOT_ALLOWED, 403 Forbidden): One or more objects cannot be created as requested because objects of this class cannot be created by MnS Consumers.\n-\tOBJECT_DELETION_NOT_ALLOWED (related type: MODIFICATION_NOT_ALLOWED, 403 Forbidden): One or more objects cannot be deleted as requested, because objects of this class cannot be deleted by MnS Consumers.\n-\tNEW_OBJECT_CLASS_NAME_INVALID (related type: VALIDATION_ERROR, 400 Bad Request): One or more objects cannot be created as requested, because the receive object class name is unknown to the MnS Producer.\n-\tNEW_OBJECT_REPRESENTATION_INVALID (related type: VALIDATION_ERROR, 400 Bad Request): One or more objects cannot be created as requested, because the received object representation does not validate.\n-\tNEW_OBJECT_CONTAINMENT_INVALID (related type: VALIDATION_ERROR, 400 Bad Request): One or more objects cannot be created under the specified parent as requested, because this containment is not allowed.\n-\tNEW_OBJECTS_ID_EXISTS (related type: REQUEST_OBJECTS_MISMATCH, 422 Unprocessable Content): One or more objects cannot be created as requested, because the received \"id\" exists already under the specified parent.\n-\tNEW_OBJECTS_PARENT_NOT_FOUND (related type: REQUEST_OBJECTS_MISMATCH, 422 Unprocessable Content): One or more objects cannot be created as requested, because their specified parents do not exist.\n-\tNEW_OBJECT_ATTRIBUTE_VALUE_MISSING (related type: VALIDATION_ERROR, 400 Bad Request): One or more objects cannot be created as requested, because attribute or attribute field values, that shall be provided in the creation request, are not provided.\n-\tOBJECTS_CARDINALITY_INVALID (related type: REQUEST_OBJECTS_MISMATCH, 422 Unprocessable Content): One or more objects cannot be created or deleted as requested, because this would result in violating cardinality constraints.\n-\tOBJECT_NOT_A_LEAF (related type: REQUEST_OBJECTS_MISMATCH, 422 Unprocessable Content): One or more objects cannot be deleted as requested, because they are not leaf objects.\n-\tOBJECT_NOT_FOUND (related type: IE_NOT_FOUND, 400 Bad Request): One or more objects cannot be deleted as requested, because they do not exist.\n-\tOP_UNKNOWN (related type: VALIDATION_ERROR, 400 Bad Request): The patch operation specified by the \"op\" property is not known by the MnS Producer. This situation may occur, for example, when a patch operation is not supported or wrongly spelled.\nThe list of error reasons is not exhaustive. Other values may be defined and used as well. The name style of these enumeration literals shall follow clause 5.3.5.3 of TS 32.156 [?].\nThe error reason \"NEW_OBJECT_REPRESENTATION_INVALID\" provides no information on why the representation of the resource requested to be created is invalid. A MnS Producer may decide to provide more details by specifying the error reasons related to attributes defined in clause X.4.3.2 instead of the general reason \"NEW_OBJECT_REPRESENTATION_INVALID\". The attributes or attribute fields with problems are specified by the \"badAttributes\" property.\n\nPUT example:\nIn this example a MnS Producer requests the creation of a resource using PUT.\nWhen the resource representation provided in the request is invalid the MnS Producer may send the following error response.\nThe MnS Producer may also choose to provide information on why the resource representation is invalid. For example, when an attribute name or attribute field name is invalid, the MnS Producer may return the following error response.\nIt is possible that the request fails for multiple reasons. For example, the object representation might be invalid, and the \"id\" of the resource requested to be created does already exist.\n\n3GPP JSON Patch example:\nAssume the following patch is applied to an object tree, that has one \"SubNetwork\" instance only. The first operation requests to create a \"ManagedElement\". This operation is successful. The second operation requests to create a \"HuhuFunction\" object under the new object. The \"HuhuFunction\" is not known to the MnS Producer. This operation fails. The third operation fails as well, since it requests to create a new object under an object that does not exist.\nThe error response may look like:\n\n3GPP JSON Merge Patch example:\nAssume the \"ManagedElement\" with the identifier \"ME3\" does not exist. Then the following message requests to create two new objects under a non-existent object. This request cannot be satisfied.\nThe error message may look like:\n\nX.4.5\tError reasons for application layer errors\nError reasons for the error type \"APPLICATION_LAYER_ERROR\" are very dependent on the specific application. Therefore, it is almost impossible to define application layer error reasons that are applicable to more than one application.\nThis specification defines the following values for the \"reason\" property:\n-\tRESOURCE_LOCKED (related type: RETRIEVAL_NOT_ALLOWED ,403 Forbidden): The resource was locked by administrative action and cannot be accessed.\n-\tSERVICE_LOCKED (HTTP error code: 503 Service Unavailable): The MnS Producer has been locked by administrative action and is currently unable to handle the request. This condition may occur, for example, due to scheduled maintenance. The \"reason\" property shall be absent.\nEditor's note: When other values for \"reason\" are used they should follow a certain pattern (capital letters only, short, …). This aspect should be clarified here or by referencing to some general rules for string enums somewhere else.\nIn the following example a MnS Consumer requests the creation of a \"PerfMetricJob\" instance indicating that \"metric1\" and \"metric2\" shall be collected for \"obj1\" and \"obj2\" with a granularity period if 5min.\nWhen the requested granularity period is not supported, the \"PerfMetricJob\" instance is not created. The MnS Producer might answer with the following error response.\n\nX.4.6\tSecurity considerations\nWhen the MnS Consumer is not trustworthy or the MnS Producer does not want to disclose error details, just the \"type\" property may be included in the error response. The response body may be omitted also completely, and just the error status code be returned in the response status line.\n****** END ************************************************************************************\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table X.1-1: Supported 4xx client error status codes",
                                    "table number": 14,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table X.1-2: Supported 5xx server error status codes",
                                    "table number": 15,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The MnS Producer shall include at least one bad query parameter in the \"badQueryParams\" property. A MnS Consumer cannot assume that the returned list of bad query parameters includes all bad parameters in the request. A MnS producer may stop processing the request upon detection of the first bad query parameter and return an error response.",
                                    "table number": 16,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The error response is a JSON array of JSON objects with \"status\", \"type\", \"title\", and \"reason\" properties. The \"type\" property shall be present. The \"status\", \"title\" and \"reason\" properties may be present.",
                                    "table number": 17,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The MnS Producer shall include at least one bad operation in the error response. A MnS Consumer cannot assume that the returned list of bad operations includes all bad operations in the request. A MnS Producer may stop processing the request upon detection of the first bad operation and return an error response.",
                                    "table number": 18,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The MnS Producer shall include at least one bad attribute in the \"badAttributes\" property, or one bad object in the \"badObjects\" property. A MnS Consumer cannot assume that the returned list of bad attributes or objects includes all bad attributes or objects in the request. A MnS producer may stop processing the request upon detection of the first bad attribute or object and return an error response.",
                                    "table number": 19,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "For the following request",
                                    "table number": 20,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "the error response may look like",
                                    "table number": 21,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "When the sub-errors have a different HTTP error code, \"207 Multi-Status\" is used in the response status line. The \"status\" property is present for each sub-error and specifies the status code for this sub-error.",
                                    "table number": 22,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In the first example an attribute field is requested to be added.",
                                    "table number": 23,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "When \"attrA\" is invariant, the error response might look like.",
                                    "table number": 24,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Other responses may look as below. Note that information not essential for illustrating the examples is left out (referred to as \"...\")",
                                    "table number": 25,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when \"attrB\" is not known or supported.",
                                    "table number": 26,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when the value \"def\" for \"attrB\" is invalid, for example when \"attrB\" is of type \"number\".",
                                    "table number": 27,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when \"attrB\" is not writable by MnS Consumers.",
                                    "table number": 28,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "not applicable",
                                    "table number": 29,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "not applicable.",
                                    "table number": 30,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In the next example an attribute field is requested to be removed.",
                                    "table number": 31,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Error responses may look like:",
                                    "table number": 32,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when \"attrB\" is not writable by MnS Consumers.",
                                    "table number": 33,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when \"attrB\" is invariant and cannot be removed after object creation time.",
                                    "table number": 34,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when \"attrA/attrB\" does not exist.",
                                    "table number": 35,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In the next example the current value of an attribute field is requested to be replaced by a new value.",
                                    "table number": 36,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Error responses may look like:",
                                    "table number": 37,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "not applicable.",
                                    "table number": 38,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "not applicable.",
                                    "table number": 39,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when \"attrB\" is not writable by MnS Consumers.",
                                    "table number": 40,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when \"attrB\" is invariant, and its value cannot be replaced after object creation time.",
                                    "table number": 41,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when \"attrA/attrB\" does not exist.",
                                    "table number": 42,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "when \"attrA\" does not exist.",
                                    "table number": 43,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Assume a resource where the attributes \"attrA\" and \"attrB\" exist. The following message requests to replace the current value of \"attrB\" with \"def\".",
                                    "table number": 44,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "When \"attrB\" is invariant the MnS Producer might respond as follows.",
                                    "table number": 45,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In this example a MnS Producer requests the creation of a resource using PUT.",
                                    "table number": 46,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "When the resource representation provided in the request is invalid the MnS Producer may send the following error response.",
                                    "table number": 47,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The MnS Producer may also choose to provide information on why the resource representation is invalid. For example, when an attribute name or attribute field name is invalid, the MnS Producer may return the following error response.",
                                    "table number": 48,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "It is possible that the request fails for multiple reasons. For example, the object representation might be invalid, and the \"id\" of the resource requested to be created does already exist.",
                                    "table number": 49,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Assume the following patch is applied to an object tree, that has one \"SubNetwork\" instance only. The first operation requests to create a \"ManagedElement\". This operation is successful. The second operation requests to create a \"HuhuFunction\" object under the new object. The \"HuhuFunction\" is not known to the MnS Producer. This operation fails. The third operation fails as well, since it requests to create a new object under an object that does not exist.",
                                    "table number": 50,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The error response may look like:",
                                    "table number": 51,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Assume the \"ManagedElement\" with the identifier \"ME3\" does not exist. Then the following message requests to create two new objects under a non-existent object. This request cannot be satisfied.",
                                    "table number": 52,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The error message may look like:",
                                    "table number": 53,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In the following example a MnS Consumer requests the creation of a \"PerfMetricJob\" instance indicating that \"metric1\" and \"metric2\" shall be collected for \"obj1\" and \"obj2\" with a granularity period if 5min.",
                                    "table number": 54,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "When the requested granularity period is not supported, the \"PerfMetricJob\" instance is not created. The MnS Producer might answer with the following error response.",
                                    "table number": 55,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                },
                {
                    "title": "4.6\tIssue#6: Operation for multiple MOI updates (stage 2)",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.6.1\tIssue description",
                            "text_content": "The stage 2 definitions of the Provisioning MnS contain only specific operations for creation of new objects, and the deletion or manipulation of (existing) objects:\n-\tThe operation \"createMOI\" for requesting the creation of one object.\n-\tThe operation \"deleteMOI\" for requesting the deletion of one object, or of multiple objects identified by scoping and filtering.\n-\tThe operation \"modifyMOIAttributes\" for requesting the replacement of attribute values of one object, or of multiple objects identified by scoping and filtering.\nStage 2 does not include an operation allowing to create, delete and manipulate multiple objects using a single request. Note that stage 3 includes capabilities to create, delete and manipulate multiple objects using a single request for both HTTP/JSON and NETCONF/YANG solutions already.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.6.2\tAnalysis",
                            "text_content": "The definitions at stage 2 do not reflect the situation at stage 3. This is misleading to readers not concerned with stage 3. They may be left with the impression that the Provisioning MnS offers only limited capabilities. At stage 2 there should be an operation for creating, deleting, and manipulating multiple objects using a single request, too.\nNote that no stage 3 changes are targeted by the issue in this clause.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.6.3\tCR proposal",
                            "text_content": "As a solution for the issue, the following clause could be added to TS 28.532.\n****** BEGIN *********************************************************************************\n11.1.1.4a\tchangeMOIs operation\n11.1.1.4a.1\tDefinition\nThis operation is invoked by MnS consumers to request a MnS producer to create, delete, and update multiple objects using a single request. The request contains an ordered set of sub-operations. Each sub-operation creates an object, deletes an object, or updates attribute or attribute field values. Sub-operations should be executed in the order they appear in the request.\nThe \"baseObjectInstance\" parameter is common for all sub-operations and identifies the root of the object tree where changes can be made. Each sub-operation is defined by the \"path\", \"modifyOperator\" and \"nodeValue\" parameters. The \"path\" parameter specifies the offset from the root object to the target object, the target attribute or the target attribute field of the sub-operation. The \"modifyOperator\" specifies the operation to be applied. Valid values are \"replace\", \"add\", remove, and for attributes and attributes fields also the value \"setToDefault\". The \"replace\" operator is not applicable when \"path\" identifies an object.\nThe \"nodeValue\" provides the value for the sub-operation. The parameter shall be absent for \"remove\" operations.\nFor operations on attribute values or attribute field values the same provisions as in clause 11.1.1.3 apply.\nWhen adding (creating) objects, the \"nodeValue\" contains the object representation.\nNote that the parameters introduced and used in this clause just serve the purpose of explaining the functionality. Specific stage 3 solutions may implement the functionality in very different ways.\n11.1.1.4a.2\t\tInput parameters\n\n11.1.1.4a.3\t\tOutput parameters\n\n****** END *************************************************************************************\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "11.1.1.4a.2\t\tInput parameters",
                                    "table number": 56,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "11.1.1.4a.3\t\tOutput parameters",
                                    "table number": 57,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "4.6.4\tConclusion",
                            "text_content": "It is recommended to add the operation \"changeMOIs\" as defined in clause 4.6.3 of the present document to clause 11.1.1 of TS 28.532. This requires as well the update of some mapping tables in clause 12.1 of TS 28.532, but no change of the real stage 3 functionality.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.7\tIssue#7: Advertising communication options (REST SS)",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.7.1\tIssue description",
                            "text_content": "TS 32.158 describes no mechanism allowing to advertise the communication options a resource supports. Communication options include supported HTTP methods, supported patch formats, and supported query parameters.\nThis issue applies only the HTTP/JSON solution.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.7.2\tAnalysis",
                            "text_content": "The OPTIONS method defined in IETF RFC 7231 [x], and the \"Accept-Patch\" header defined in IETF RFC 5789 [x] can be used to advertise the supported HTTP methods and the supported patch formats.\nFor advertising supported query parameters there is no method standardized yet, nor in 3GPP or other standard bodies. It is proposed to introduce the new header \"Accept-Get\" for that purpose.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.7.3\tCR proposal",
                            "text_content": "The following clause shall be added to TS 32.158 [x].\n\n****** BEGIN *********************************************************************************\n6.6\tAdvertising communication options\n6.6.1\tThe HTTP OPTIONS method\nThe OPTIONS method is used to request communication options that are supported for the target resource identified in the OPTIONS request. A MnS Consumer can specify the target resource with a URI to refer to a specific resource on a MnS Producer, or with an asterisk (\"*\") to refer to a MnS Producer in general.\nThe target resource must exist for an OPTIONS request to be successful, otherwise a \"404 Not Found\" error response shall be returned. The target URI in the OPTIONS request shall identify the URI subsequently used for sending requests. Note that this is normally not the canonical URI, as described in clause 4.4.4.\nThe OPTIONS method shall be supported for all resources.\nEditor's note: What is returned when the target resource is \"*\" is ffs.\n6.6.2\tAdvertising supported HTTP request methods\nThe \"Allow\" response header (IETF RFC 7231 [2], clause 7.4.1) allows a MnS Producer to specify a comma-separated list of HTTP request methods supported for a resource.\nThe MnS Producer shall include an \"Allow\" response header (IETF RFC 7231 [2], clause 7.4.1) in the response to an OPTIONS request.\nNote that, according to IETF RFC 7231 [2], clause 7.4.1, the \"Allow\" header shall be included as well in a \"405 Method Not Allowed\" response.\nFor example, to find out which request methods are supported by a specific \"SubNetwork\" instance a MnS Consumer may send the following request.\nThe \"Allow\" header in the answer indicates the supported request methods.\n\n6.6.3\tAdvertising supported patch request formats\nThe \"Accept-Patch\" response header (IETF RFC 5789 [11], clause 3.1) allows a MnS Producer to specify patch document formats accepted for a resource supporting the PATCH request method. The accepted patch formats are identified using their media types, followed by one or more optional parameters. Media types are separated by a comma.\nResources that support PATCH shall include the \"Accept-Patch\" header in the OPTIONS response.\nA server receiving a PATCH request with an unsupported media type in the message body shall reply with a \"415 Unsupported Media Type\" response and include an \"Accept-Patch\" header referencing one or more supported patch document formats. Note that when the PATCH method is not supported, a \"405 Method Not Allowed\" error response shall be returned.\nThe patch formats that may be supported according to this specification are listed in Table 6.6.3-1.\nTable 6.6.3-1: Media types for patch document formats\nThe following example demonstrates the use of the \"Accept-Patch\" header in an OPTIONS response. Assume that the target resource supports, besides other methods, the PATCH method.\nThe \"Allow\" header in the answer indicates the supported request methods. The \"Accept-Patch\" header lists the patch formats supported for the target resource.\nIn the next example the MnS Consumer sends a patch format, that is not accepted by the MnS Producer.\nThe error response indicates that the media type in the request is not supported and suggests to use another one.\n\n6.6.4\tAdvertising supported query parameters\nThis specification introduces the new \"Accept-Get\"response header. It is used by MnS Producers to specify the query parameters supported by the GET method on a specific resource. It is a comma-separated list of query parameter names.\nResources that support GET shall include the \"Accept-Get\" header in the OPTIONS response.\nA server receiving a GET request with unsupported query parameters in the query component of the URI shall reply with a \"400 Bad Request\" response and include an \"Accept-Get\" header referencing all supported query parameters. Note that when the GET method is not supported, a \"405 Method Not Allowed\" error response shall be returned.\nThis specification defines the query parameters listed in Table 6.6.4-1.\nTable 6.6.4-1: Query parameter names\nThe following example demonstrates the use of the \"Accept-Get\" header in an OPTIONS response.\nThe response includes an \"Accept-Get\" header with the supported query parameter names.\n\n****** END *************************************************************************************\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "For example, to find out which request methods are supported by a specific \"SubNetwork\" instance a MnS Consumer may send the following request.",
                                    "table number": 58,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The \"Allow\" header in the answer indicates the supported request methods.",
                                    "table number": 59,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.6.3-1: Media types for patch document formats",
                                    "table number": 60,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The following example demonstrates the use of the \"Accept-Patch\" header in an OPTIONS response. Assume that the target resource supports, besides other methods, the PATCH method.",
                                    "table number": 61,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The \"Allow\" header in the answer indicates the supported request methods. The \"Accept-Patch\" header lists the patch formats supported for the target resource.",
                                    "table number": 62,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In the next example the MnS Consumer sends a patch format, that is not accepted by the MnS Producer.",
                                    "table number": 63,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The error response indicates that the media type in the request is not supported and suggests to use another one.",
                                    "table number": 64,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.6.4-1: Query parameter names",
                                    "table number": 65,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The following example demonstrates the use of the \"Accept-Get\" header in an OPTIONS response.",
                                    "table number": 66,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The response includes an \"Accept-Get\" header with the supported query parameter names.",
                                    "table number": 67,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "4.7.4\tConclusion",
                            "text_content": "It is recommended to add to TS 32.158 the methods for advertising supported communication options, that are described in the CR proposal in clause 4.7.3 of the present document.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.8\tIssue #8: Logging",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.8.1\tIssue description",
                            "text_content": "Logging is a crucial functionality of the OAM systems. It assists in several functionalities e.g troubleshooting. The functionality of logging is available in IRP framework in TS 32.332. However, the SBMA lacks the ability of Logging.\nThe SBMA (service based management architecture) principle call for a management system where the MnS (management services) are defined for all management tasks e.g provisioning, performance assurance.  The authorized consumer can access the MnSes as per their requirements. The current SBMA framework do not provide any mechanism to control and produce the logs for consumed management services.\nThe logging in IRP framework is restricted to only to logging of notifications. However, logging of Management Service require logging of all Component A, B and C i.e what operation and notifications were accessed, what were the related MIBs and what PM/KPI data was collected.\nThe MnS can be accessed from within the management system and from outside the management system. The logging may support both the scenarios.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.8.2\tAnalysis",
                            "text_content": "The logging mechanism for SBMA framework need to be defined.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.8.3\tPotential Requirements",
                            "text_content": "The 3GPP Management System shall have the capability to enable logging including recording of the operations invoked.\nThe 3GPP Management System shall have the capability to enable logging including recording of the notifications produced.\nThe 3GPP Management System shall have the capability to enable logging including recording of the MIBs accessed.\nThe 3GPP Management System shall have the capability to enable logging including recording of the performance measurements reporting. This implies logging the measurement job contents, but excludes logging the individual measurement results.\nThe 3GPP Management System shall have the capability to enable logging including recording of the KPIs produced. This implies logging the KPI generated, but excludes logging the individual KPI results.\nThe 3GPP Management System shall provide a way for the consumer to retrieve the logs.\nThe 3GPP Management System shall have the capability to manage log overflow situation.\nThe 3GPP Management System shall include a timestamp for each log record.\nThe 3GPP Management System shall include the user/consumer identity for each log record.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.8.4\tPotential Solutions",
                            "text_content": "The potential solutions are left for the normative phase of the work.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.8.5\tCR proposal",
                            "text_content": "The concrete CR is left for the normative phase of the work.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.9\tIssue#9: Harmonized approach for node selection",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.9.1\tIssue Description",
                            "text_content": "Nodes (objects, attributes, attribute fields, attribute elements) need to be selected by a MnS Consumer in many situations.\nThe following examples show where nodes are selected with attributes of managed objects.\n-\tIn subscriptions to alarm notifications a MnS Consumer needs to specify the objects from which he wants to get alarm notifications (using the \"scope\" attribute of \"NtfSubscriptionControl\").\n-\tIn subscriptions to CM notifications a MnS Consumer needs to specify the nodes from which he wants to get CM notifications (using the \"scope\" attribute of \"NtfSubscriptionControl\").\n-\tWhen requesting measurement collection, a MnS consumer needs to specify the measured objects (using the \"objectInstances\" and \"rootObjectInstances\" attributes of \"PerfMetricJob\").\n-\tWhen requesting threshold monitoring, a MnS consumer needs to specify the monitored objects (using the \"objectInstances\" and \"rootObjectInstances\" attributes of \"ThresholdMonitor\").\nThe following examples show where nodes are selected in operations:\n-\tIn read requests a MnS Consumer needs to specify the nodes to be returned.\nNote that with NETCONF/YANG nodes are specified in the get-config operation using subtree filtering or using an XPath expression that yields a node set as output. In the HTTP/JSON solution a query parameter is defined for GET, that uses the old ITU-T defined scope mechanism for node selection, that is less powerful than XPath expressions for node selection. The node set selected by scoping can be further refined by the \"filter\" query parameter. This parameter uses an XPath expression.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.9.2\tAnalysis",
                            "text_content": "NETCONF/YANG supports already XPath (besides subtree filtering) for selecting nodes to be returned in get-config. No action is required.\nHTTP/JSON uses scoping and filtering for node selection. Filtering cannot be used without scoping. It would be possible to select with scoping a complete subtree and filter an that subtree, but the scope could be also omitted in that case. The subtree is already defined by the target URI. For that reason, it should be possible to use the \"filter\" query parameter also without the \"scope\" query parameter.\nAt stage 2, the definition of the operation \"getMOIAttributes\" may be updated as well to include the possibility to achieve node selection based on some node selection expression only.\nAs described in the previous clause, node selection with NRM attributes is achieved based on different mechanisms.\nAt stage 2 node selection could be aligned by introducing a common node selection mechanism based on some node selection notation. This node selection mechanism could be described at stage 2 only in a generic way, like the \"filter\" parameter in clause 11.1 of TS 32.532. The notation is stage 3 specific:\n-\tFor NETCONF/YANG XPath can be used.\n-\tFor HTTP/JSON XPath can be used.\nXPath profiles may be defined.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.9.3\tPotential requirements",
                            "text_content": "[Req-1] The read operation shall support node selection based on some node selection notation.\n[Req-2] The 3GPP management system shall support one harmonized method for node selection with NRM attributes, that is based on a node selection notation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.9.4\tPotential solution",
                            "text_content": "Enhancements at stage 2 for read operations:\nClarify that a node selection mechanism based on some node selection notation is optionally supported.\nEnhancements at stage 3 for read operations:\nNETCONF/YANG: Clarify that the NETCONF XPath capability is optionally supported.\nHTTP/JSON: Clarify that the \"filter\" query parameter can be used optionally without the \"scope\" query parameter for node selection.\nEnhancements at stage 2 for NRM attributes selecting nodes:\nClarify that node selection may optionally use some node selection notation.\nEnhancements at stage 3 for NRM attributes selecting nodes:\nClarify that an optional stage 3 solution for the node selection notation is Xpath for NETCONF/YANG and HTTP/JSON.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.9.5\tConclusion",
                            "text_content": "It is recommended to implement the enhancements described in clause 4.X.4 in TS 32.532, 28.622/3, and potentially also in other specifications where functionality to select nodes is specified.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.10\tIssue#10: OAS definition versioning (HTTP/JSON only)",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.10.1\tIssue Description",
                            "text_content": "The version of an OAS definition is currently identical to the version of the TS where the OAS definition is documented. For example, the OAS definition \"TS28532_ProvMnS.yaml\" in TS 32.532 V17.5.0 has the version string \"v1750\".\nOAS is the abbreviation for OpenAPI Specification.\nNote that a MnS is composed of MnS component type A, and MnS component type B or MnS component type C. Each component may have one or more OAS definition modules.\nFor example, a MnS might be composed of the following modules\n-\tTS28532_ProvMnS.yaml\n-\tTS28623_GenericNRM.yaml\n-\tTS28623_ComDefs.yaml\n-\tTS28.541_NrNRM.yaml\nAll these modules have independent and potentially different OAS definition versions. The issue in this clause is about versioning of all OAS definition modules.\nNote also that the OAS definition version is currently used in different places:\n-\tEach OAS definition has an \"info\" property in its header, where the version of the module is documented.\n-\tIt is used in the target URI\n-\t{scheme}://{URI-DN-prefix}/{root}/{MnSName}/{MnSVersion}/{URI-LDN}\n-\t{scheme}://{authority}/{root}/{MnSName}/{MnSVersion}/{MnSResourcePath}\n-\tThe OAS definition version used in the target URI is also included as an attribute in \"MnsInfo\".\nThe version used in the target URI is for the usual MnS, based on CRUD operations and a NRM, the version of the module \"TS28532_ProvMnS.yaml\", that contains the OAS definition of the CRUD operations and imports the OAS definition of the NRM.\nFor legacy MnS like the Fault Supervision MnS it is the version of the module \"TS28532_FaultMnS.yaml\".\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.10.2\tAnalysis",
                            "text_content": "The version of the OAS definition is incremented not only when the OAS definition is updated, but also when other changes to the TS are applied that have no impact on the OAS definition. This leads to a situation where the same OAS definition may have multiple version numbers. This in turn would require the introduction of a register where the information about which version numbers are identifying the same OAS definition is maintained.\nA more practical solution seems to be to decouple the TS version number and OAS definition version number and to allow them to evolve independently.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.10.3\tPotential requirements",
                            "text_content": "Potential requirements to address the issue of this clause are:\n[Req-1] The numbering scheme of OAS definition shall be independent from the TS numbering scheme documenting the OAS definition.\n[Req-2] The numbering scheme of OAS definition shall be based on rules for incrementing the version number that take backwards compatibility and interoperability considerations into account.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.10.4\tPotential solutions",
                            "text_content": "The OAS definition version should be determined based on rules for incrementing the version number. These rules should take backwards compatibility and interoperability considerations into account.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.10.5\tCR proposal",
                            "text_content": "The concrete CR is left for the normative phase of the work.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.10.6\tConclusion",
                            "text_content": "It is recommended to start normative work for this issue and develop rules for OAS definition versioning.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.11\tIssue #11: Advertising NRM properties by MnS producer",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.11.1\tIssue description",
                            "text_content": "SA5 Provisioning MnS defines NRMs with IOCs with attributes along with attribute properties and Provisioning APIs for CRUD operations. Different MnS producers may support different NRMs, for example there might be one MnS producer that is dedicated for configuration management while an another MnS producer that is dedicated for performance management. Hence the NRM properties supported by each MnS producers in a multi-vendor environment could be different, and the MnS producer implementing an NRM might support all or only a subset of the attributes for the IOCs defined in SA5. A mechanism for the MnS consumer to be aware of such the NRM properties of the MnS producer is necessary.\nThis key issue is to study the current situation and propose solution to provide a mechanism for the MnS producer to advertise the following NRM properties to the MnS consumers.\n-\tAdvertise the list of IOCs supported by the MnS producer.\n-\tAdvertise the attributes of each IOC that is supported by the MnS Producer.\nThe following aspects of an MnS producer NRM properties are analysed as part of this key issue:\n-  A MnS producer might not support an IOC since the underlying functionality is not supported. For example, a MnS producer that does not have the capability to support performance metrics collection and reporting would not support PerfMetricJob IOC (defined in clause 4.3.31 of TS 28.622[14]).\nNote: This key issue analyses advertising the list of IOCs supported by the MnS producer. This key issue does not address a MnS producer advertising the list of instantiated MOIs.\n- A MnS producer might not support all attributes (i.e., the attributes with the support qualifier defined as optional or conditional mandatory or conditional optional) of an IOC.\nThis clause analyses the current situation and proposes a solution where the NRM properties related schema may be advertised by MnS producer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.11.2\tCurrent situation",
                            "text_content": "Discovery of Management Services use cases and procedures are defined in clause 5 of TS 28.537[13]. It has been defined that MnS producers need to register themselves with their management capabilities in the 3GPP management system. The data describing a MnS producer, and their capabilities is called MnS information or MnS profile.\nThe related NRMs MnSRegistry and MnsInfo is defined in clause 4.3.42 and 4.3.41 of TS 28.622[14] respectively. MnSInfo hold the information related to the MnS label (attribute mnsLabel), type (attribute mnsType), version (attribute mnsVersion), address (attribute mnsAddress) and scope (attribute mnsScope).\nThe MnS producer profile is defined in clause 4.2.4 of TS 28.533[15]. This is described as follows:\n-- Start of quote from TS 28.533[15] clause 4.2.4:\n“\n4.2.4\tMnS producer profile\nA MnS producer is described by a set of meta data called MnS producer profile. The profile holds information about the supported MnS components and their version numbers. This may include also information about support of optional features. For example, a read operation on a complete subtree of managed object instances may support applying filters on the scoped set of objects as optional feature. In this case the MnS profile should include the information if filtering is supported.\n”\n-- End of quote from TS 28.533[15] clause 4.2.4 --\nThese existing mechanisms however do not define the mechanism for the MnS consumer to be aware of the MnS producer NRM properties described in clause 4.x.1, and hence a mechanism to advertise this needs to be studied and specified.\nFurther, any MnS producer using YANG-Netconf solution set are required to use the YANG Library (ietf-yang-library defined in reference [16]) to advertise supported IOCs, attributes and constrains to the MnS consumers.\nHowever, any MnS producer based on OpenAPI solution set does not advertise the supported IOCs, attributes and constrains to the MnS consumers. The MnS consumers may expect that the complete NRM defined in SA5 is supported by every MnS producer. There is no mechanism currently defined where the MnS consumer can get this information. Hence, a mechanism to advertise such NRM properties in OpenAPI needs to be studied and specified.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.11.3\tAnalysis",
                            "text_content": "",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.11.4\tPotential requirements",
                            "text_content": "Potential requirements to address the issue are:\n[Req-1] MnS producer shall be able to advertise supported IOCs to the MnS consumers.\n[Req-2] MnS producer shall be able to advertise supported attributes for the supported IOCs to the MnS consumers.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.11.5\tPotential solution",
                            "text_content": "4.11.5.1\tIntroduction\nSolution for potential requirements in clause 4.11.4 needs the MnS producer to advertise the following NRM properties to the MnS consumers:\n-\tlist of IOCs supported by the MnS producer.\n-\tlist of supported attributes of each IOC that is supported by the MnS Producer.\nThe MnS producer may advertise the address (URL) from where the MnS consumer can retrieve the advertised NRM properties for each MnS that the producer supports.\n4.11.5.2\tExtension to MnSInfo with address information to retreive NRM properties\nMnSInfo IOC (defined in TS 28.622 clause 4.3.42) represents an available Management Service (MnS) and provides the data required to support its discovery. This IOC has information is used by the consumer to discover the producers of specific Management Services and to derive the addresses of the Management Service.\nThis potential solution proposes to enhance MnSInfo with a new mnsAddressForNrmProperties attribute. Attribute mnsAddressForNrmProperties is used to provide addressing information for the NRM properties schema of the Management Service producer.\nFollowing table describe the description of mnsAddressForNrmProperties attribute proposed for MnSInfo IOC.\n\n\n4.11.5.3\tMnS Producer based on OpenAPI solution set\nThis clause proposes a mechanism for MnS producer, based on OpenAPI solution set, to advertise the supported NRM properties to the MnS consumer.\nThe MnS producer advertises the schema, with the OpenAPI description in the YAML file format, that it supports, along with the information related to the corresponding 3GPP defined standard schema. The schema advertised by the MnS producer contains the IOCs and attributes supported. The MnS consumer(s) requiring this information can query this schema from the URL (in MnSInfo attribute mnsAddressForNrmProperties) to retrieve the information about the NRM properties supported by the MnS producer.\nThis potential solution does not propose the schema advertised by the MnS producer to advertise the information related to supported cardinality, name-containment, and vendor extensions.\n4.11.5.4\tMnS Producer based on YANG-Netconf solution set\nClause 6.2.1.5 of TS 32.160 [17] specifies that the MnS producer using YANG-Netconf solution set uses YANG version 1.1. YANG 1.1 (RFC7950 [18]) requires support for YANG Library (ietf-yang-library defined in RFC8525 [16]). Hence the MnS producer using YANG-Netconf solution set is required to advertise supported IOCs, attributes and constrains or deviations, from the 3GPP defined standard NRM schema, to the MnS consumers using the YANG Library (ietf-yang-library defined in RFC8525 [16]).\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Following table describe the description of mnsAddressForNrmProperties attribute proposed for MnSInfo IOC.",
                                    "table number": 68,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "",
                                    "table number": 69,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "4.11.6\tCR proposal",
                            "text_content": "The concrete CR is left for the normative phase of the work.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.11.7\tConclusion",
                            "text_content": "It is recommended to implement the enhancements described in clause 4.11.5 in TS 28.622, 28.623, and potentially also in other specifications where templates related to YANG SS and OpenAPI SS definitions are defined.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.12\tIssue #12: Multiple alarms subscription mechanism",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.12.1\tIssue description",
                            "text_content": "As per the existing mechanism, a consumer can subscribe to receive a newly raised alarm as part of \"notifyNewAlarm\" notification using two alternate mechanism a) using subscribe operation defined in clause 11.2.1.1.1 of TS 28.532 b) using \"NtfSubscriptionControl\" defined in clause 4.3.22 of TS 28.622.\nIt is confusing for the industry to have alternate subscription mechanism to get the same notification. It also entails burden on the implementers when they are asked to support both the mechanism.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.12.2\tAnalysis",
                            "text_content": "The subscribe/notify mechanism defined in 28.532 is not needed.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.12.3\tPotential Requirements",
                            "text_content": "The 3GPP Management System shall have a single mechanism to subscribe for the alarms and get notifications accordingly.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.12.2\tPotential Solutions",
                            "text_content": "Deprecate or remove (make it Void.) clause 11.2.1.1.1 of TS 28.532 defining operation subscribe. (Make it Void.)\nDeprecate or remove (make it Void.) clause 11.2.1.1.2 of TS 28.532 defining operation unsubscribe. (Make it Void.)\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.12.3\tChange Request proposal",
                            "text_content": "The concrete change request is left for the normative phase of the work.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.13\tIssue #13: Partial success for update operations (HTTP/JSON only)",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.13.1\tIssue description",
                            "text_content": "TS 32.158 describes numerous HTTP methods for manipulating attributes and objects (CRUD operations). All these methods share a common property: they are atomic. This means that the update request is either satisfied in its entirety or not at all. Partial success is not supported.\nThis issue refers only to the HTTP/JSON solution. For NETCONF the error-option parameter allows to request partial success modes, though most implementations support only the rollack-on-error behavior.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.13.2\tAnalysis",
                            "text_content": "Partial success of update operations is currently not supported for HTTP/JSON, though stage 2 definitions in TS 28.532 require that. Partial success means that some updates in the request are satisfied, and some are not satisfied.\nProcessing on the MnS producer may follow three modes:\n-\tatomic: When no error occurs, all modifications are applied. When an error occurs, no modification is applied. In case some modifications were already applied when an error is encountered, the configuration needs to be rolled back to the state prevailing before processing of the request started.\n-\tstop-on-error: Processing of the request stops when the first error is encountered. The first modification resulting in an error and all remaining modifications are not applied. All other modifications are applied\n-\tbest effort: The complete request is processed until the end. Modifications, that can be applied, are applied. Modifications, that cannot be applied, are not applied.\nFor the stop-on-error no use cases are seen.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.13.3\tPotential requirements",
                            "text_content": "Potential requirements to address the issue of this clause are:\n[Reg-1] The MnS producer shall support atomic mode and should support best-effort mode of processing.\n[Reg-2] A MnS consumer shall be able to indicate to a MnS producer if the update request shall be processed in atomic or best effort mode. If the requested mode is not supported, the MnS producer shall return an error response. If the same operation is used for atomic and best effort mode and no mode is indicated in the request, the default shall be atomic handling.\n[Reg-3] The response to update requests processed in best effort mode shall include detailed information on which parts of the update request failed and which parts succeeded.\n[Req-4] The configuration after processing the update request shall be valid according to the NRM model and related constraints in both atomic and best effort mode.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.13.4\tPotential solutions",
                            "text_content": "HTTP Patch is defined by IETF as atomic method. It is recommended not to change this basic property. The same is true for HTTP Put. Operations for attribute and object manipulations supporting a best effort mode could be implemented with HTTP Post. The request body specifying the requested attribute and object manipulations could be inspired by or fully aligned to JSON Patch.\nThe error response format specified in clause 4.5 for atomic operations allows to report problem details for each sub-operation that failed. It is at the MnS producer discretion to report all failed sub-operations or only one failed sub-operation. For the best effort mode, the MnS producer needs to include all failed sub-operations in the error response. If a suboperation is not included, that indicates it was successful.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.13.5\tCR proposal",
                            "text_content": "The concrete CR is left for the normative phase of the work.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.13.6\tConclusion",
                            "text_content": "It is recommended to start normative work for this issue and to add support for partial success to the UPDATE operations of the HTTP/JSON solution.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "5\tRecommendations and conclusions",
            "description": "Conclusions are given for each issue above.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "A.1\tEBNF for basic XPath profile",
            "description": "LocationPath\t\t\t\t::= AbsoluteLocationPath\nAbsoluteLocationPath\t::= Step\n| AbsoluteLocationPath '/' Step\nStep\t\t\t\t\t\t\t\t::= AxisSpecifier NodeName Predicate*\nAxisSpecifier\t\t\t\t::= AxisName '::'\n|\nAxisName\t\t\t\t\t\t::= 'descendant'\n| 'child'NodeName\t\t\t\t\t\t::= '*'\n| Name\nPredicate\t\t\t\t\t\t::= '[' 'id' '=' Literal ']'\nLiteral\t\t\t\t\t\t\t::= '\"' [^\"]* '\"'\n| \"'\" [^']* \"'\"Name\t\t\t\t\t\t\t::= NameStartChar (NameChar)*\nNameChar\t\t\t\t\t\t::= NameStartChar | \"-\" | \".\" | [0-9]\nNameStartChar \t\t\t\t::= [A-Z] | \"_\" | [a-z]\n\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "A.2\tEBNF for advanced XPath profile",
            "description": "LocationPath\t\t\t\t::= RelativeLocationPath\n| AbsoluteLocationPath\nAbsoluteLocationPath\t::= '/' RelativeLocationPath?\n| '//' RelativeLocationPath\nRelativeLocationPath\t::= Step\n| RelativeLocationPath '/' Step\n| RelativeLocationPath '//' Step\nStep\t\t\t\t\t\t\t\t::= AxisSpecifier NodeName Predicate*\nAxisSpecifier\t\t\t\t::= AxisName '::'\n|\nAxisName\t\t\t\t\t\t::= | 'descendant'\n| 'child'\nNodeName\t\t\t\t\t\t::= '*'\n| Name\nPredicate\t\t\t\t\t\t::= '[' PredicateExpr ']'\nPredicateExpr \t\t\t\t::= EqualityExpr\n| InEqualityExpr\n| PathExpr\nEqualityExpr\t\t\t\t::= PathExpr '=' Literal\nInEqualityExpr\t\t\t\t::= PathExpr '<' Number\n| PathExpr '>' Number\n| PathExpr '<=' Number\n| PathExpr '>=' Number\nPathExpr\t\t\t\t\t\t::= LocationPath\n| FunctionCall\nFunctionCall\t\t\t\t::= FunctionName '(' ( Argument ( ',' Argument )* )? ')'\nArgument \t\t\t\t\t\t::= EqualityExpr\n| InEqualityExpr\n| PathExpr\n| Number\n| Literal\nLiteral\t\t\t\t\t\t\t::= '\"' [^\"]* '\"'\n| \"'\" [^']* \"'\"\nNumber\t\t\t\t\t\t\t::= Digits ('.' Digits?)?\n| '.' Digits\nDigits\t\t\t\t\t\t\t::= [0-9]+\nFunctionExcluded\t\t\t::=  'position()'\n| 'last()'\n| 'comment'\n| 'processing-instruction'\n| 'node'\nFunctionName\t\t\t\t::= Name - FunctionExcluded\nName    \t\t\t\t\t::= NameStartChar (NameChar)*\nNameChar \t\t\t\t\t\t::= NameStartChar | \"-\" | \".\" | [0-9]\nNameStartChar \t\t\t\t::= [A-Z] | \"_\" | [a-z]\n\n\n\n",
            "summary": "",
            "tables": [
                {
                    "description": "",
                    "table number": 70,
                    "summary": "",
                    "name": ""
                }
            ],
            "figures_meta_data": [],
            "subsections": []
        }
    ]
}
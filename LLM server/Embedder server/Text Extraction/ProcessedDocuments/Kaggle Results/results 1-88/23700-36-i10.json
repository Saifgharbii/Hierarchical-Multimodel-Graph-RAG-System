{
    "document_name": "23700-36-i10.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Report has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\nIn the present document, modal verbs have the following meanings:\nshall\t\tindicates a mandatory requirement to do something\nshall not\tindicates an interdiction (prohibition) to do something\nThe constructions \"shall\" and \"shall not\" are confined to the context of normative provisions, and do not appear in Technical Reports.\nThe constructions \"must\" and \"must not\" are not used as substitutes for \"shall\" and \"shall not\". Their use is avoided insofar as possible, and they are not used in a normative context except in a direct citation from an external, referenced, non-3GPP document, or so as to maintain continuity of style when extending or modifying the provisions of such a referenced document.\nshould\t\tindicates a recommendation to do something\nshould not\tindicates a recommendation not to do something\nmay\t\tindicates permission to do something\nneed not\tindicates permission not to do something\nThe construction \"may not\" is ambiguous and is not used in normative elements. The unambiguous constructions \"might not\" or \"shall not\" are used instead, depending upon the meaning intended.\ncan\t\tindicates that something is possible\ncannot\t\tindicates that something is impossible\nThe constructions \"can\" and \"cannot\" are not substitutes for \"may\" and \"need not\".\nwill\t\tindicates that something is certain or expected to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nwill not\t\tindicates that something is certain or expected not to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nmight\tindicates a likelihood that something will happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nmight not\tindicates a likelihood that something will not happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nIn addition:\nis\t(or any other verb in the indicative mood) indicates a statement of fact\nis not\t(or any other negative verb in the indicative mood) indicates a statement of fact\nThe constructions \"is\" and \"is not\" do not indicate requirements.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "Introduction",
            "description": "Data analytics is a useful tool for the operator to help optimizing the service offering by predicting events related to the network or slice or UE conditions. 3GPP introduced data analytics function (NWDAF) [2] to support network data analytics services in 5G Core network, and management data analytics service (MDAS) [3] to provide data analytics at the OAM.\nConsidering vertical-specific applications and edge applications as the major consumers of 3GPP-provided data analytics services, the application enablement layer can play role on the exposure of data analytics services from different 3GPP domains to the vertical/ASP in a unified manner; and on defining, at an overarching layer, value-add application data analytics services which cover stats/predictions for the end-to-end application service.\nThis technical report identifies the key issues and corresponding application architecture and related solutions with recommendations for the normative work.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document is a technical report which identifies the application enabling layer platform architecture, capabilities, and services to support data analytics enablement at the application layer.\nThe aspects of the study include the investigation of application data analytics services to optimize the application service operation, edge/cloud analytics enablement, data collection aspects per identified application data analytics service, coordination of data collection from multiple sources and unified exposure of data analytics to the vertical/ASP. This study will also identify potential enhancements to existing enablement layer entities (SEAL, eEDGEAPP, vertical specific enablers) to consume application data analytics enablement services.\nThe study takes into consideration the work done for data analytics in 3GPP TS 23.288 [2] and 3GPP TS 28.104 [3] and other related work outside 3GPP.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[2]\t3GPP TS 23.288: \"Architecture enhancements for 5G System (5GS) to support network data analytics services\".\n[3]\t3GPP TS 28.104: \"Management and orchestration; Management Data Analytics\".\n[4]\t3GPP TS 23.501: \"System Architecture for the 5G System; Stage 2\".\n[5]\t\t3GPP TS 23.434: \"Service Enabler Architecture Layer for Verticals (SEAL); Functional architecture and information flows\".\n[6]\t3GPP TS 23.558: \"Architecture for enabling Edge Applications\".\n[7]\t3GPP TS 26.531: \"Data Collection and Reporting; General Description and Architecture\"\n[8]\t3GPP TR 23.700-96: \"Study on 5G-enabled fused location service capability exposure\"\n[9]\t3GPP TS 23.222: \"Functional architecture and information flows to support Common API Framework for 3GPP Northbound APIs\"\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions of terms, symbols and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tTerms",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the terms given in 3GPP TR 21.905 [1] and the following apply. A term defined in the present document takes precedence over the definition of the same term, if any, in 3GPP TR 21.905 [1].\nexample: text used to clarify abstract rules by applying them literally.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tSymbols",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the following symbols apply:\n<symbol>\t<Explanation>\n\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.3\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in 3GPP TR 21.905 [1] and the following apply. An abbreviation defined in the present document takes precedence over the definition of the same abbreviation, if any, in 3GPP TR 21.905 [1].\nADAE\tApplication Data Analytics Enabler\nA-ADRF\tApplication layer - Analytical Data Repository Function\nA-DCCF\tApplication layer - Data Collection and Coordination Function\nADRF\tAnalytical Data Repository Function\nASP\tApplication Service Provider\nDCCF\tData Collection and Coordination Function\nMEP\tMulti-access Edge Platform\nMDAS\t\tManagement Domain Analytics Service\nNWDAF\tNetwork Data Analytics Function\nOAM\tOperation, Administration and Maintenance\nRNIS\tRadio Network Information Service\nSEAL\t\tService Enabler Architecture Layer\nSEALDD\tService Enabler Architecture Layer – Data Delivery\nVAL\tVertical Application Layer\n\n\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tKey issues",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tKey issue #1: Support for application performance analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "Data analytics related to the application end-to-end QoS and in particular statistics and predictions on the application server or application session performance and load can be useful for the application specific layer, so as to proactively identify potential adaptations of the application service and to trigger adaptations at the communication layer. One example is the utilization of analytics by the application specific layer e.g. for selecting the least loaded EAS for an application session, or for selecting the optimal PLMN for communicating the application service in a given area.\nThis key issue will study:\n-\twhether and how the application data analytics enablement service provides application QoS related analytics for the application session /service?\n-\twhether and how the application data analytics enablement service provides application QoS related analytics tailored for different communication means (e.g. different PLMNs, RATs, slices)?\n-\twhat data needs to be collected from 3GPP system and application specific layer for performing application QoS related analytics?\n-\thow to enable the exposure of application QoS related analytics to the vertical / ASP in a unified manner?\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.2\tKey issue #2: Support for edge analytics enablement",
                    "description": "",
                    "summary": "",
                    "text_content": "Edge deployments are vitally important for applications that require performance levels that cannot be met by existing cloud deployments. Edge data analytics may relate to stats/predictions on computational resources and expected/predicted load of the platform which hosts the edge applications and may be necessary to be exposed as a service to EAS (which can be either edge native applications or edge enhanced applications at a centralized cloud). Particularly, for edge native applications which need to be light designed and high portable, the use of edge analytics at the edge platform can help improving the application service operation.\nThe support for edge analytics at the enablement layer (related to the edge performance, failure, service availability), would be useful for the edge applications to allow for dynamically deciding to scale-in, scale-out, migrate from the edge to the cloud in heavy load situations, or migrate from the cloud to the edge to improve the quality of experience for the end user. Also, the need for edge application relocation between edge platforms could be supported by using analytics which can be leveraged by the EDGEAPP layer and could be exposed as a service to the application developer for supporting the edge service operation optimization.\nHence, in this key issue the following points shall be studied:\n-\tWhether and what edge data are needed to be collected by the application data analytics enablement server to allow for edge analytics enablement (related to the edge performance, failure, service availability)?\n-\tWhether and how the application data analytics enablement server (deployed in an edge or centralized data network) can be utilized by the corresponding Edge Enabler layer architecture (as specified in 3GPP TS 23.558 [6]) to optimize edge services?\n-\tWhether and how the analytics enablement layer needs to align with the EDGEAPP layer for allowing the edge services to utilize edge analytics enablement service to optimize their operation (e.g. triggering pro-active ACR based on edge analytics)?\n-\tWhether and how the application data analytics enablement server needs to align with ETSI MEC system to utilize MEC services?\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.3\tKey issue #3: Support for data collection for application layer analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "For deriving application layer analytics, the data collection may be provided by different sources (e.g. vertical-specific server, application of the UE, EAS, 3rd party server, SEAL/SEALDD) and it needs to be identified how these data can be collected to allow for stats/predictions by the analytics enablement layer.\nThe application data analytics enablement layer needs to be capable of receiving data from different data producers and prepare the data to be used for deriving analytics. Such data can be measurements or analytics from the 5GS (5GC, OAM), the applications of the VAL UEs, other application enablers etc.\nFor example, for application QoS related analytics, such data can be potentially derived by the OAM, monitoring of network QoS by 5GC, subscribing and receiving QoS and network analytics from NWDAF, performance data from the application server, QoS data from enabler layer client-server sessions, etc. The consumer of the ADAE service may not be aware of the data that need to be collected from different sources, however the ADAE needs to be capable of selecting the optimal sources to collect data, subscribe to different data producers and also retrieve supplementary data samples based on the data producers' availability and load.\nHence, this key issue will discuss the following open issues:\n-\tHow to enable the collection and preparation of data at the application data analytics enablement service for data analytics derivation, when the data to be collected target the same performance metrics and are originated from different sources (UE, networking layer, application specific layer, non-3gpp domains)?\n-\tWhether and how the application data analytics enablement layer needs to collect data from multiple sources, at the DN side or locally at the VAL UE side?\n-\tWhether and how to leverage the UE data collection support provided by the SA4 EVEX study?\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.4\tKey issue #4: Key Issue on interactions with SEAL services",
                    "description": "",
                    "summary": "",
                    "text_content": "SEAL is the service enabler architecture layer common to all vertical applications over 3GPP systems. It provides the functions like location management, group management, configuration management, identity management, key management, network resource management and network slice capability management as defined in 3GPP TS 23.434 [5].\nThis key issue will study:\n-\tthe applicability of the usage of SEAL services for application data analytics enablement services considering different deployment and business models\n-\twhether any enhancements are required at the SEAL services for exposing data to the application data analytics enablement service?\n-\twhether and how application data analytics at the application data analytics enablement service can be used to optimize SEAL service operation?\nNOTE:\tThis KI does not preclude the case where ADAE service is a SEAL service.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.5\tKey issue #5: Support for slice-related application data analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "Data analytics related to slicing are provided by the 5GS, from NWDAF (e.g. slice load analytics) and MDAS (e.g. NSI/NSSI performance analytics). The slice capability enablement layer (based on NSCALE) discusses enhancements to NSCE SEAL service (as specified in TS 23.434 [5]). According to Solution #5 of TR 23.700-99, the NSCE server is expected to consume 5GS services related to analytics (from MDAS, NWDAF) and to re-expose them to the VAL server (slice customer).\nIf further analytics is required on top of the consumed analytics services (MDAS/NWDAF), the ADAES can be utilized by NSCE service to perform further analytics related to applications for certain slice / NSI. Such analytics service is not overlapping with NWDAF/MDAS services since it will provide at application layer data analytics (per session or VAL server) which are bound to a given slice or NSI (e.g. per VAL session performance statistics when using slice #1).\nThis key issue will investigate:\n-\twhat is the possible interaction between NSCE service and ADAES, for providing application layer analytics bound to a slice or an NSI?\n-\twhether and what data need to be collected by NSCE layer for supporting per slice or NSI app layer analytics?\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.6\tKey issue #6: Support for slice configuration recommendation enablement",
                    "description": "",
                    "summary": "",
                    "text_content": "Slice data analysis can analyze the slice usage pattern based on the collected network slice performance and analytics, and provide analysis-based slice management suggestions, such as the slice scale in and scale out, which can be exposed to VAL or provided to NSCE as a service. One example is, to support the application layer automatic network slice lifecycle management, in which the NSCE server is supposed to send out some management recommendation based on the collected network slice performance analytics from the 5GC, OAM and the application layer. The recommendation is usually an empirical value given by experienced network operations, ADAES can help to output the recommendation according to the analysis based on historical network slice status and network performance.\nHence, in this key issue the following points shall be studied:\n-\tHow ADEAS supports the slice configuration recommendation based on the slice related information from NSCE.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.7\tKey issue #7: Support for location accuracy analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "\nAccording to SA1 TS 22.261 (6.27) and TS 22.104, positioning services aim to support verticals and applications with positioning accuracies better than 10 meters, thus more accurate than the ones of TS 22.071 for LCS. High accuracy positioning is characterized by ambitious system requirements for positioning accuracy in many verticals and applications, including regulatory needs. For example, on the factory floor, it is important to locate assets and moving objects such as forklifts, or parts to be assembled. Similar needs exist in transportation and logistics, for example rail, road and use of UAVs. In some road user cases, UE's supporting V2X application(s) are also applicable to such needs. In cases such as guided vehicles (e.g. industry, UAVs) and positioning of objects involved in safety-related functions, availability needs to be very high. In SA1, different service levels are mapped to different positioning performance attributes including vertical and horizontal accuracies. Such accuracies (e.g. cm-level, dm-level, meter-level) may depend on the positioning methods which are used, the LCS producers, as well as the UE mobility and the environment.\n\nWhen the VAL consumer requests a positioning service, the accuracy is calculated at the entity which produces a location estimate and whether the accuracy can be maintained along an application session (for a given time/area) is challenging to answer at the time of the request/subscription. In this scenario, there needs to be a translation of the per UE location report accuracy to an expected /predictive location accuracy derivation for the application requiring positioning services. Such location accuracy analytics and in particular the sustainability of vertical and horizontal accuracy per VAL application (e.g. group of field devices in industrial use cases) based on per UE reported location accuracies could be needed to make sure that LMS will meet the VAL customer location reporting requirements for a given time/area of location request validity. Such information will help deciding from application side whether for a particular service (e.g. process automation, AR in factories) adaptation of the application behavior if the accuracy cannot be maintained e.g. programs the IIOT devices to maintain a bigger distance etc.\nThis key issue aims to investigate:\n-\twhether and how ADAES needs to be enhanced to perform analytics on vertical and horizontal accuracy for positioning services requested by a VAL customer?\n-\twhat criteria need to be considered (e.g. environment, UE mobility, service type, positioning method, fusion) and what data are needed to be collected from 5GS (e.g. NWDAF, LMF) and VAL side for performing location accuracy analytics for the VAL application?\n-\twhat enhancements are needed in SEAL LMS to support location accuracy analytics/data per VAL application?\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.8\tKey issue #8: Support for service API capability analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "The service APIs (assuming also EAS provided APIs, enablement service APIs and OAM API), cannot be assumed uniformly available and offering the same service level across the entire network. For CIoT service, 3GPP SA2 has already defined a NEF monitoring service to allow the AF to monitor the API availability and service level (e.g. via invoking a Nnef_APISupportCapability API as part of the Monitoring Event in TS 23.522) for the target API. However, this doesn't provide analytics on NEF/SCEF APIs and doesn't support all ranges of service APIs (produced or offered at the platform) and focuses on the CIoT scenarios. Furthermore, CAPIF supports the monitoring of service API invocations and can provide API monitoring via the Availability of service APIs event notification or Service Discover Response as specified in TS 23.222.\nService API analytics (such as the statistics on the successful/failed API invocation or predicted API availability for a given deployment) can be a tool to be used by the API provider (ASP, ECSP, MNO) to help optimizing the API usage by enabling him to trigger API related actions like API mashups, API rate limitations/throttling events, or pro-actively detecting API termination point changes which may affect service performance. Such service could be also useful for the API invoker to allow for early notification on expected API unavailabilities.\nOne example for such API analytics can be the statistics or prediction of NEF API or SEAL API invocation request failure probability, or the predicted number of API invocations for a particular EDN area and time of day or even the number of unauthorized API invocation requests. Such analytics can be matched to different APIs and API operations and can be used as a service for example to help the service API invoker to identify what is the best time and means to perform a request e.g. so as to avoid possible failure due to high number of invocations expected for this service API.\nThis key issue will investigate:\n-\twhether and how the application data analytics enablement service needs to provide data analytics for service APIs?\n-\twhat data / API logs and from which entities need to be collected for performing service API analytics?\n-\twhat enhancements are needed in CAPIF (CCF, API management function) for supporting service API analytics?\nNOTE: Data/analytics related to MNO provided APIs are only possible if ADAES is deployed by the MNO. For ADAES outside MNO domain, this key issue covers only non-MNO provided APIs.\n\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "5\tArchitecture aspects",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "5.1\tArchitecture related requirements",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.1.1\tDescription",
                            "text_content": "This subclause specifies the general and ADAE internal requirements for application data analytics enablement layer functional architecture.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.2\tGeneral Requirements",
                            "text_content": "[AR-5.1.2-a] The ADAE client and the ADAE server shall support one or more VAL applications.\n[AR-5.1.2-b] Supported ADAE capabilities may be offered as APIs to the VAL applications.\n[AR-5.1.2-c]\tThe ADAE shall support interaction with 3GPP network system to consume network data analytics services.\n[AR-5.1.2-d] The ADAE client shall be capable to communicate with one or more ADAE servers of the same ADAE service provider.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.1.3\tADAE internal architecture requirements",
                            "text_content": "[AR-5.1.3-a] The ADAE layer shall be able to provide a data collection coordination functionality to enable the collection from diverse data sources (OAM, 5GC, UE) per application data analytics event type.\n[AR-5.1.3-b] The ADAE layer shall include a data analytics repository function to store application data analytics.\n[AR-5.1.3-c] The data collection coordination and repository capabilities may be offered as APIs to ADAE server.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.2\t\tADAE capability related requirements",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.2.1\tApplication performance analytics requirements",
                            "text_content": "This subclause specifies the requirements for application performance analytics capability.\n[AR-5.2.1.2-a] The ADAE server shall be capable of providing data analytics for the VAL server performance.\n[AR-5.2.1.2-b] The ADAE server shall be capable of providing data analytics for the VAL application sessions (for both Uu-based and PC5-based sessions).\n[AR-5.2.1.2-c] The ADAE server shall be able to collect application performance measurements and analytics from one or more ADAE clients.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.2\tEdge load analytics requirements",
                            "text_content": "This subclause specifies the requirements for edge load analytics capability.\n[AR-5.2.2.2-a] The ADAE server shall be capable of collecting edge data from one or more edge platforms\n[AR-5.2.2.2-b] The ADAE server shall enable the exposure of edge data analytics to the VAL applications\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.2.3\tSlice related application data analytics requirements",
                            "text_content": "This subclause specifies the requirements for slice related application data analytics capability.\n[AR-5.2.3.2-a] The ADAE server shall be capable of providing data analytics for the VAL server or VAL session performance for a requested slice or slice instance.\n[AR-5.2.3.2-b] The ADAE server shall be able to collect slice related measurements and analytics from one or more 3GPP network system domains (OAM, 5GC).\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.3\tFunctional Architecture",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.3.1\tGeneral",
                            "text_content": "This clause provides the overall functional architecture description, which includes the on-network and off-network functional models.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.3.2\tOn-network Functional Architecture",
                            "text_content": "For the on-network functional architecture, both service-based representation and reference point representation are provided.\nFigure 5.3.2-1 depicts the application data analytics enablement architecture in the non-roaming case, using the reference point representation showing how various entities interact with each other.\nFigure 5.3.2-1 illustrates the architecture for application data analytics enablement, focusing on reference points representation. The figure showcases a layered structure, starting with the application layer, followed by the data layer, and finally the presentation layer. Key components include the data source, data transformation, data storage, data access, and data presentation. The figure emphasizes the importance of seamless data flow and efficient data management in enabling advanced analytics applications.\nFigure 5.3.2-1: Architecture for application data analytics enablement – reference points representation\nThe application data analytics enablement client communicates with the application data analytics enablement server over the ADAE-UU reference point. The application data analytics enablement client provides the support for application data analytics enablement functions to the VAL client(s) over ADAE-C reference point. The VAL server(s) communicates with the application data analytics enablement server over the ADAE-S reference point. The application data analytics enablement server, acting as AF, may communicate with the 5G Core Network functions (over N33 reference point to NEF and N6 reference point to UPF) and OAM (over ADAE-OAM interface).\nFigure 5.3.2-2 exhibits the service-based interfaces for providing and consuming application data analytics enablement services. The application data analytics enablement server could provide service to VAL server and ADAE client through interface SAdaee.\nFigure 5.3.2 - 2 illustrates the architecture for application data analytics enablement, represented as a service-based model. The figure showcases the integration of various components, including data sources, data processing units, and analytics services, which work in tandem to provide a comprehensive data analytics solution. The visual representation emphasizes the importance of interconnecting these elements to ensure efficient data flow and processing, ultimately enhancing the overall functionality and performance of the system.\nFigure 5.3.2-2: Architecture for application data analytics enablement – Service based representation\nFigure 5.3.2-3 illustrates the service-based representation for utilization of the 5GS network services based on the 5GS SBA specified in 3GPP TS 23.501 [4].\nFigure 5.3.2-3 illustrates the architecture for enabling application data analytics utilizing the 5GS network services based on the 5GS Service Based Architecture (SBA). The figure showcases the integration of the 5GS network with external services and data sources, highlighting the role of the 5GS SBA in facilitating service composition and orchestration. The figure emphasizes the importance of service-centric design in managing network resources and ensuring efficient data processing. Key components include the 5GS network, external services, and data sources, all interconnected through the 5GS SBA. The figure also highlights the use of APIs and microservices for service interaction, emphasizing the need for a flexible and scalable architecture.\nFigure 5.3.2-3: Architecture for application data analytics enablement utilizing the 5GS network services based on the 5GS SBA – Service based representation\nThe application data analytics enablement server can be deployed as a SEAL server; hence enhancements to SEAL architecture (as specified in TS 23.434 [5]) are needed to incorporate the ADAE service. Figure 5.3.2-4 illustrates the service-based representation including ADAE server as part of the SEAL framework.\nFigure 5.3.2 - 4 illustrates the SEAL (Service-Based Interface for Access and Edge Layer) functional model, which is a key component in telecommunication networks. The figure represents the model using service-based interfaces and includes the ADAE (Access and Edge Layer) function. This functional model is essential for managing and controlling network resources, ensuring efficient communication between different network layers. The figure highlights the importance of service-based interfaces in enabling seamless communication and collaboration between various network components, ultimately improving overall network performance and reliability.\nFigure 5.3.2-4: SEAL functional model representation using service-based interfaces and including ADAE function\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.3.3\tOff-network Functional Architecture",
                            "text_content": "Figure 5.3.3-1 illustrates the generic off-network functional model for ADAE.\nFigure 5.3.3-1 presents a generic off-network functional model, illustrating the various components involved in a communication system. The figure showcases the transmitter, which generates the signal, and the receiver, which processes the received signal. In between, there are multiple elements such as the antenna, which facilitates the transmission of the signal, and the cable, which carries the signal from one component to another. The figure also highlights the importance of signal processing, which involves the use of filters and amplifiers to enhance the quality of the signal. Additionally, the figure emphasizes the role of the network infrastructure, including the use of repeaters and routers to extend the reach of the signal. Overall, the figure provides a comprehensive overview of the various components and processes involved in a communication system, highlighting the importance of each element in ensuring effective communication.\nFigure 5.3.3-1: Generic off-network functional model\nIn the vertical application layer, the VAL client of UE1 communicates with VAL client of UE2 over VAL-PC5 reference point. An application data analytics enablement client of UE1 interacts with the corresponding application data analytics enablement client of UE2 over ADAE-PC5 reference points. The UE1, if connected to the network via Uu reference point, can also act as a UE-to-network relay, to enable UE2 to access the VAL server(s) over the VAL-UU reference point.\nIf the ADAE server is deployed as SEAL server, the off network functional architecture is similar to SEAL off-network architecture (as specified in TS 23.434 [5]).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "5.3.4\tADAE internal architecture based on 3GPP data analytics framework",
                            "text_content": "In 3GPP SA2 (TS 23.288 [2]), the following entities have been defined as part of the data analytics framework:\n-\tNWDAF provides network data analytics services at the 5GC\n-\tDCCF coordinates the collection and distribution of data requested by NF/AF consumers. Data Collection Coordination is supported by a DCCF. Data Consumers can send requests for data to the DCCF rather than directly to the NF/AF Data Source.\n-\tADRF stores historical data and/or analytics, i.e., data and/or analytics related to past time period that has been obtained by the consumer. After the consumer obtains data and/or analytics, consumer may store historical data and/or analytics in an ADRF. Whether the consumer directly contacts the ADRF or goes via the DCCF or via the Messaging Framework is based on configuration.\n\nADAE server can reuse the existing 3GPP data analytics framework for the data collection coordination, delivery and storage as provided by DCCF and ADRF functionalities. As illustrated in Figure 5.3.4-1, A-DCCF and A-ADRF can be defined as functionalities within the internal ADAE architecture and can offer similar functionality as proposed in 5GC but at application layer.\nFigure 5.3.4-1 illustrates the generic functional model for ADAE when re-using the existing data analytics model.\nFigure 5.3.4-1 presents a generic functional model based on a network data analytics model, illustrating the integration of various components such as network functions virtualization (NFV), software-defined networking (SDN), and cloud computing. The figure showcases how these technologies work together to enhance network performance, manage resources efficiently, and enable real-time analytics for improved decision-making. Key elements include virtualized network functions, programmable switches, and data analytics platforms, all contributing to a dynamic and adaptable network infrastructure.\nFigure 5.3.4-1: Generic functional model based on network data analytics model\nIn this model, an Application layer - Data Collection and Coordination Function (A-DCCF) is used to fetch data or put data into an Application level entity (e.g. A-ADRF, Data Source). Such A-DCCF coordinates the collection and distribution of data requested by ADAE server (over ADCCF-1, ADAE-X). ADAE server can also directly interact with the Data Sources via ADAE-Y.\nAlso, Application layer – Analytics and Data Repository Function (A-ADRF) can be used to store historical data and/or analytics, i.e. data and/or analytics related to past time period that has been obtained by the ADAE server (via AADRF-1) or other NFs/NWDAF. ADAE server can also fetch historical data from ADRF. Whether the ADAE server directly contacts the ADRF or goes via the A-DCCF is based on configuration.\nData Sources can be 5GS data sources (5GC, OAM) or enablement layer data sources (SEAL, EEL) or external data sources at the DN side (VAL server/EAS) and VAL UEs.  A-DCCF and A-ADRF can be used only for interacting with certain data sources (e.g. 5GC, OAM) based on configuration, and can be hidden from the VAL layer.\nNOTE:\tIf the Data Source is the VAL UE, then the data collection mechanism shall reuse the SA4 mechanism based on EVEX study (TS 26.531 [7]).\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "6\tSolutions",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "6.1\tMapping of solutions to key issues",
                    "description": "",
                    "summary": "",
                    "text_content": "Table 7.1-1: Mapping of solutions to key issues\n\n",
                    "tables": [
                        {
                            "description": "Table 7.1-1: Mapping of solutions to key issues",
                            "table number": 3,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "6.2\tSolution #1: Support for application performance analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.2.1\tSolution description",
                            "text_content": "This solution addresses Key Issue #1.\nThis solution introduces application layer analytics to provide insight on the operation and performance of an application (VAL server or EAS, application session) and in particular statistics or prediction on parameters related to e.g. VAL server number of connections for a given time and area, VAL server rate of connection requests, connection probability failure rates, RTT and deviations for a VAL server or VAL UE session, packet loss rates etc.\nIn this solution, two procedures are described in more detail:\n-\tone procedure for VAL server related analytics where an example in provided for VAL server performance,\n-\tone procedure for VAL session/UE related analytics.\nFigure 6.2.1.1-1 illustrates the procedure where the VAL server performance analytics are performed based on data collected from the ongoing VAL sessions as well as data from the DN (VAL server, DN database or networking stack at DN).\nPre-conditions:\n1.\tADAEC is connected to ADAES\nFigure 6.2.1.1 -1 illustrates the support for the Advanced Encryption Standard (AES) in the context of the Virtualized Local Area Network (VAL) server performance analytics. The figure showcases the integration of the AES algorithm within the VAL server, emphasizing its role in enhancing data security and privacy. Key components include the VAL server, the AES encryption module, and the data flow between the two. The figure highlights the efficiency and effectiveness of the AES algorithm in protecting sensitive data transmitted over the VAL network.\nFigure 6.2.1.1-1: ADAES support for VAL server performance analytics\n1.\tThe consumer of the ADAES analytics service sends a subscription request to ADAES and provides the analytics event ID e.g. \"VAL perf prediction\", the target VAL server ID, the time validity and area of the request, the required confidence level, whether offline and/or online analytics are needed etc.\n2.\tThe ADAES sends a subscription response as an ACK to the consumer.\n3.\tThe ADAES maps the analytics event ID to a list of data collection event identifiers, and optionally a list of data producer IDs. Such mapping may be preconfigured by OAM or may be configured at ADAES based on the analytics event type / vertical type.\n4.\tThe ADAES sends a subscription request to the Data Producers (at the DN side or UE side) with the respective Data Collection Event ID and the requirement for data collection. This message includes the Data Collection event ID and/or the analytics event ID, the target VAL server ID, the ADAES ID, the time validity and area of interest, the required confidence level etc.\n5.\tThe Data Producer(s) sends a subscription response as an ACK to the ADAES.\nNOTE:\tThe ADAES acting as AF may also subscribe to NEF/SMF/PCF/NWDAF to monitor network/UE situation or network data analytics required for the application data analytics event.\n6.\tThe ADAES based on subscription, may receive offline stats/data on the VAL server performance based on the analytics/data collection event ID. Such offline data can be average/peak throughput, average/maximum e2e delay, jitter, av. PER, availability, VAL server load, number of failed transactions, and can be for a given area and time of the day (based on the time/area of the request). Th edge / cloud DB depending on the deployment can be also part of ADRF (for MNO-deployed ADAES).\nA session starts between the VAL server #1 and a UE (this could happen for more than one UEs)\n7.\tThe Data Producer starts collecting/listening to real-time networking or application data (from networking start at DN or VAL server itself). Such data can be the RTT, the PER, throughput etc.\n8a.\tThe Data Producer sends the real-time data to the ADAES, where the data correspond to the data collection ID or the analytics event ID for which the ADAES subscribed.\n8b.\tThe ADAES may receive also data (periodically or if a threshold is reached based on configuration) from the application of the UE within the ongoing session (via ADAEC). Such data can be about the RTT, average/peak throughput, jitter, QoE measurements (MOS, stalling events, stalling ratios, etc), QoS profile load, VAL server load, etc.\n9.\tWhen the VAL UE session with VAL server finishes, the ADAEC notifies the ADAEC of the completion of the reporting.\n10.\tThe ADAES abstracts or correlates the data based on the analytics event and the data collection configuration. Such correlation can be filtering of data for the same metrics but with different granularities or be combining/aggregating the data of segments of the end-to-end path (end to end is between VAL client and server). The outcome is an abstracted/correlated/filtered set of data.\n11.\tThe ADAES derives application layer analytics on VAL server #1 performance, based on the analytics ID and type of request. Such analytics can be stats or prediction for a given area/time and based on the event type for a given network configuration.\n12.\tThe ADAES sends the analytics to the consumer, where these analytics include the VAL server 1 predicted or statistic performance for a given area and time horizon, including also the confidence level, whether offline/online analytics were used.\nFigure 6.2.1.2-1 illustrates the procedure where the VAL session performance analytics are performed based on data collected from the ongoing VAL sessions.\nPre-conditions:\n1.\tADAEC is connected to ADAES\n\nFigure 6.2.1.2 -1 illustrates the support for the Advanced Encryption Standard (AES) in the context of the Voice over IP (VoIP) session performance analytics. The figure showcases the integration of the AES algorithm within the Voice over IP Low-latency Abstraction and Encapsulation (VAL) framework. The VAL system is designed to enhance the performance of VoIP sessions by reducing latency and improving the overall quality of service. The figure highlights the role of the AES algorithm in securing the data transmission between the various components of the VAL system, ensuring confidentiality and integrity of the VoIP communication. The use of AES in the VAL system is crucial for maintaining the security and reliability of the VoIP services, especially in the context of the increasing reliance on cloud-based communication solutions.\nFigure 6.2.1.2-1: ADAES support for VAL session performance analytics\n1.\tThe consumer of the ADAES analytics service sends a subscription request to ADAES and provides the analytics event ID e.g. \"VAL UE perf prediction\", the target VAL UE ID, VAL server ID/VAL application ID, the time validity and area of the request, the required confidence level, exposure level for providing UE analytics. If the consumer is the VAL server, the VAL server can provide to ADAEC application data related to the UE expected route/trajectory and VAL application traffic schedule / expected session time.\n2.\tThe ADAES sends a subscription response as an ACK to the consumer.\n3.\tThe ADAES selects the corresponding ADAEC of the VAL UE for which the local analytics need to be performed.\n4a.\tThe ADAES sends a subscription request to the ADAEC with the analytics event ID and the configuration of the reporting required (e.g. periodic, based on threshold or event)\n4b.\tThe ADAEC sends a subscription response to ADAES\n5.\tThe ADAEC maps the analytics event ID to a list of data collection event identifiers or data collected IDs at the VAL UE or other UEs within the service and in proximity (in group-based communications)\n6.\tThe ADAEC subscribes to the VAL clients and/or requests UE local data based on the respective Data Collection Event ID (or the analytics event ID if they already know the mapping). This data may come from the PDU layer of the UE (via listening the traffic), or via VAL client of one or more UEs (if an application consists of a group of UEs).\nA session starts between the VAL UE #1 and a VAL server.\n7.\tThe ADAEC (after being aware from the VAL client that the session started) sends a notification to ADAES that a session started, and it could be possible to provide real-time data analytics for VAL UE performance in the target area.\n8.\tThe ADAEC starts collecting data from the corresponding VAL UE(s) based on subscription. Such data can be about the RTT, throughput, jitter, QoE measurements, QoS profile load, etc.  It can be also possible that VAL client provides to ADAEC application data related to the UE expected route/trajectory and VAL application traffic schedule / expected session time.\n9.\tThe ADAEC filters or correlates the data based on the analytics event and the data collection configuration.\n10.\tWhen the VAL UE session finishes, the ADAEC (optionally) derives VAL session analytics to ADAES on VAL UE #1 performance, based on the analytics ID and type of request. Such analytics (if performed at the ADAEC can be stats or predictions on the RTT or RTT deviation, average/peak throughput, av. jitter, QoE measurements (MOS, stalling events, buffer related events), QoS profile load, VAL application traffic load etc. In case of prediction, a confidence level shall be also present and a time horizon for the predicted parameters.\n11.\tThe ADAEC sends the data of step 8 or the analytics of step 9 (if ADAEC performs analytics) to the ADAES.\n12.\tThe ADAES derives application layer analytics on VAL session performance (based on the data or analytics received by the ADAEC), based on the analytics ID and type of request. Such analytics can be stats or prediction for a given area/time and based on the event type for a given network configuration. Such analytics (if no analytics is performed at ADAEC) at ADAES can be stats or predictions on the RTT or RTT deviation, average/peak throughput, av. jitter, QoE measurements, QoS profile load, VAL application traffic load etc. In case of prediction, a confidence level shall be also present and a time horizon for the predicted parameters.\n13.\tThe ADAES sends the analytics to the consumer, where these analytics include the VAL UE 1 session predicted performance for a given area and time horizon, including also the confidence level, whether offline/online analytics were used.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.2\tCorresponding Analytics API",
                            "text_content": "This subclause provides a summary on the corresponding Analytics API for solution #1.\n\nFor VAL server performance analytics, this includes:\n\n-\tInputs: per VAL server performance measurements (application QoS measurements such as latency, channel losses, data rate, jitter), historical data/stats for VAL server performance, network/KPI monitoring from 5GS\n-\tList of Data Sources\n-\tData Source #1 information: VAL UE #1 (or more VAL UEs having a session with VAL server #1), VAL Server #1\n-\tData required from Data Source #1: application QoS measurements\n-\tData Source #2 information: OAM\n-\tData required from Data Source #1: PM data\n-\tData Source #3 information: 5GC\n-\tData required from Data Source #3: service experience analytics, network and QoS monitoring\n-\tOutput: Predicted application QoS metrics per VAL server, Statistics on VAL server application QoS/performance metrics\n\nFor VAL session performance analytics, this includes:\n\n-\tInputs: per VAL session performance measurements (application QoS measurements such as latency, channel losses, data rate, jitter)\n-\tList of Data Sources:\n-\tData Source information: VAL UE #1, VAL Server #1\n-\tData required from Data Source: application QoS measurements\n-\tOutput: Predicted application QoS metrics per VAL session\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.3\tSolution evaluation",
                            "text_content": "This solution addresses Key Issue #1 and introduces application layer analytics to predict the performance of a VAL server or an application session between a VAL UE and a VAL server. Such solution enables the VAL layer to get statistics or predictions for expected deviations of application performance metrics (e.g. RTT) based on data collected from the ADAE clients, as well as from 5GS. This solution is complementary to Solution #4 which covers only the VAL UE-to-UE sessions. Also, this Solution doesn't overlap with Solution #2 which provides a generic mechanism for data analytics enablement (and could be re-used).\nThis solution is technically viable and doesn't introduce any impact on 5GS.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.3\tSolution #2: Data Analytics Enablement",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.3.1\tSolution description",
                            "text_content": "The following solution corresponds to the key issue #1, 2, 3, 4 on support for application performance analytics, data collection, edge analytics enablement, and interaction with SEAL service.\nADAE supporting application and service enablement layer analytics collects application or service enablement layer related information from the vertical application layer, service enablement layer, 5GC, and/or OAM to perform data analytics and to provide statistics or predictions.\nThe solution addresses the following aspects:\n-\tEnablement of data analytics services by the ADAES layer, by addressing the types of interactions possible between ADAES and other service layer entities.\n-\tDescription of how higher-level data analytic requests can be provided to the ADAES layer, and on how analytics requests are translated into generic data collection tasks.\n-\tDescription of the information flows for generic data analytics and data collection.\nA data source profile is proposed for a data source which describes capabilities related to data generation, data availability and pre-processing, as shown in table 6.3.1.3-1.\nA data analytics request from a requesting server/client to ADAE provides criteria for the data source profile elements to indicate the applicable data sources. The data analytics request also includes criteria for determining the information applicable for collection via the data collection procedure. The data analytics request also includes task processing requirements and operations used to determine the necessary level of processing by the ADAE, as shown in table 6.3.1.3-2\nA data collection request from ADAE to a source provides information about the original data source and the data required, as shown in table 6.3.1.3-4.\nNOTE 1:\tData collection tasks may be performed by ADAE using available dedicated functionality, e.g. Application Data Collection and Coordination Function deployed by MNO at the service layer.\nNOTE 2:\tFurther definition of the data processing operations will be provided in the normative phase, including stage 3.\nInteraction between ADAE and the vertical application layer can be done over ADAE-S or ADAE-C reference points.\nIf ADAE is implemented in the SEAL layer, then:\n-\tinteraction between ADAE server and application enabler servers can be done over SEAL-S (e.g. for EES see TS 23.558 Figure A.4.1-1, for VAE Server see TS 23.286 Figure 6.2-2). Interactions between ADAE client and the corresponding application enabler client can be done over SEAL-C.\n-\tinteraction between ADAE server and SEAL server could be done over SEAL-X (TS 23.434 Figure 6.2-3),\nPre-conditions:\n1.\tADAE is provisioned with data source profiles (Table 6.3.1.3-1) for data sources in the vertical application layer, application/service enablement layer (e.g., SEAL server/client, EES/EEC, CAPIF entities), core network (e.g., OAM, DCCF, NWDAF), etc. Alternatively, ADAE may perform a discovery for the data source profiles of data sources of interest.\nFigure 6.3 illustrates a server-side initiated generic data analytics request, where a client sends a request to a server for data processing. The figure depicts the communication flow, showing the client initiating the request, the server receiving and processing the data, and the final output returned to the client. Key components include the client, server, and data processing pipeline, which are essential for efficient data analytics operations.\nFigure 6.3.1.2.1-1: Server-side initiated generic data analytics request\n1.\tThe requesting server sends a data analytics request to the serving ADAE server to initiate data analytics, using either a one-time request or a subscription request. The request may specify the type of data analytics and the requirements/ preferences of the required analytics as defined in Table 6.3.1.3-2.\n2.\tIf the request is authorized, the ADAE server may determine which input data should be collected and the input data sources based on the request and local policies.\n3.\tBased on the determination in step 2, the ADAE server may collect input data from various sources by performing data collection procedure, as described in clause 6.3.1.2.3.\nNOTE 1:\tA data repository may be assumed to be available to the ADAE server for corresponding data storage tasks, as described in clause 6.3.1.2.3. The repository functionality may be provided e.g. by a SEALDD storage server, or an Application – Analytics and Data Repository Function deployed by MNO at the service enablement layer.\nDepending on the type of data source, this step can be performed with several alternatives as follows:\n(a) from other servers:\n3a.\tIf the requested analytics requires server-side input data, the ADAE server may collect input data from the server-side entities such as vertical application servers (and EAS, if the target application is an edge application) via ADAE-S reference point.\nNOTE 2:\tIn this alternative, the ADAE server may also collect input data from SEAL server(s)and application/service enabler server(s) (e.g. EES, VAE-S).\n(b) from ADAE clients:\n3b1.\tIf the requested analytics requires client-side input data, the ADAE server performs the data collection procedure with the corresponding ADAE client as source. The request specifies what input data is required from the client-side.\nNOTE 3:\tIn this alternative, the ADAE client may also collect input data from SEAL client and application/service enabler clients(s) (e.g. EEC, VAE-C) , or other ADAE clients (via ADAE-PC5).\n(c) from other functions external to the service enablement layer (e.g. NWDAF, OAM):\n3c.\tThe ADAE server performs the data collection procedure with other analytics functions in the system, such as NWDAF or OAM, as sources. For example, the ADAE server may collect input data from 5GC via monitoring events or via interactions with NWDAF, receive input data from OAM system, receive analytics result from NWDAF by subscription, etc.\n4. If the step 1 request requires data collection without higher-level analytics, ADAE sends a data analytics response (collected data) to the requester with the collected data or the location where the collected data is stored, as defined in Table 6.3.1.3-5.\n5.\tIf the step 1 request includes analytics tasks to be performed, and based on the collected input data, the ADAE server derives the analytics result. The ADAE server performs the analytics operations provided in the data analytics request in step 1. The result of the analytics task on the collected data can be optionally stored in the repositories available, such as a SEALDD storage server, Application-ADRF, etc.\n6.\tFollowing an analytics task, the ADAE server may perform or trigger other analytics actions (using requests to the corresponding entities) based on the analytics result, before providing a final response to the requestor.\n7.\tThe ADAE server provides the requested data analytics task outputs to the requestor, using either a response or a notification message, depending on the service used in step 1.\nPre-conditions:\n1.\tADAE is provisioned with data source profiles (Table 6.3.1.3-1) for data sources in the vertical application layer, service enablement layer (e.g., SEAL server/client, EES/EEC, CAPIF entities), core network (e.g., OAM, DCCF, NWDAF), etc. Alternatively, ADAE may perform a discovery for the data source profiles of data sources of interest.\nFigure 6.3.1.2.2 - 1: This diagram illustrates a client-side initiated generic data analytics procedure, where data is processed and analyzed at the client's end before being sent to the server. The figure shows the data flow from the client device, through the processing stages, and finally to the server for storage or further analysis. Key components include the client device, processing units, and the server. This approach can improve efficiency and reduce network load by offloading some processing tasks from the server to the client.\nFigure 6.3.1.2.2-1: Client-side initiated generic data analytics procedure\n1.\tThe requesting client sends a data analytics request to the serving ADAE client to initiate data analytics, using either a one-time request or a subscription request. The request may specify the type of data analytics and the requirements/ preferences of the required analytics, as defined in Table 6.3.1.3-2.\n2.\tIf the request is authorized, the ADAE client determines which input data should be collected and where to collect the input data based on the request.\n3.\tBased on the determination in step 2, if client-side input data is required, the ADAE client may collect input data from the client-side entities such as vertical application clients (via ADAE-C) and other ADAE clients (via ADAE-PC5) by performing data collection procedure, as described in clause 6.3.1.2.3.\nNOTE 1:\tIn this step, the ADAE client may also collect input data from SEAL client and application/service enabler clients(s) (e.g. EEC, VAE-C).\n4.\tThe ADAE client sends the data analytics request to the ADAE server, as defined in Table 6.3.1.3-2. If client-side input data has been collected by the ADAE client, the collected client-side input data or the location of the data will also be sent to the ADAE server.\n5.\tThe ADAE server may determine which input data should be collected and the input data sources, based on the request from the ADAE client and/or local policies\n6.\tBased on the request in step 4 and/or the determination in step 5, the ADAE server may collect input data from various sources by performing data collection procedure, as described in clause 6.3.1.2.3.\nNOTE 2: A data repository may be assumed to be available to the ADAE server for corresponding data storage tasks, as described in clause 6.3.1.2.3. The repository functionality may be provided e.g. by a SEALDD storage server, or an Application – Analytics and Data Repository Function deployed by MNO at the service enablement layer.\nDepending on the type of data source, this step can be performed with several alternatives as follows:\n(a) from other servers:\n6a.\tThe ADAE server collects input data from server-side entities such as vertical application servers (and EAS, if the target application is an edge application) via ADAE-S reference point.\nNOTE 3:\tIn this alternative, the ADAE server may also collect input data from SEAL server(s) and application/service enabler server(s) (e.g. EES, VAE-S).\n(b) from other functions external to the service enablement layer (e.g. NWDAF, OAM):\n6b.\tThe ADAE server may collect input data and/or request for analytics service from other analytics functions in the system.\n7.\tIf the step 1 request requires data collection without higher-level analytics, ADAE server sends a data analytics response (collected data) to the requester with the collected data or the location where the collected data is stored, as defined in Table 6.3.1.3-3.\n8.\tIf the step 1 request includes analytics tasks to be performed, and based on the collected input data, the ADAE server derives the analytics result. The ADAE server performs the analytics operations provided in the data analytics request in step 4. The result of the analytics task on the collected data can be optionally stored in the repositories available, such as a SEALDD storage server, Application-ADRF, etc.\n9.\tFollowing an analytics task, the ADAE server sends a data analytics response (or a notification)  to the ADAE client with the analytics result or the location where the resulting data is stored, as defined in Table 6.3.1.3-3.\n10. Following an analytics task, the ADAE server or client may perform or trigger other analytics actions (using requests to the corresponding entities) based on the result, before providing a final response to the requestor.\n11.\tThe ADAE client provides the requested data analytics task outputs to the requestor, using either a response or a notification message, depending on the service used in step 1.\nFigure 6.3.1.2.3-1 describes a generic data collection procedure, i.e,. using abstract data sources.\nPrecondition: ADAE is provisioned with data source profiles (Table 6.3.1.3-1) for data sources in the vertical application layer, service enablement layer (e.g., SEAL server/client, EES/EEC, CAPIF entities), core network (e.g., OAM, DCCF, NWDAF), etc. Alternatively, ADAE may perform a discovery for the data source profiles of data sources of interest.\n\nFigure 6.3.1.2.3-1 presents a generic data collection procedure, illustrating the steps involved in gathering information from various sources. The figure outlines the process, starting with the initiation of the data collection request, followed by the selection of appropriate data sources. The data is then collected, processed, and stored for further analysis. The figure emphasizes the importance of a systematic approach to ensure accurate and comprehensive data collection.\nFigure 6.3.1.2.3-1: Generic data collection procedure\n\n1.\tADAE determines data collection sources and processing operations based on the requirements in the data analytics request. For example, ADAE may determine whether data should be collected from the application layer, the service enablement layer, the core network, or whether a data processing task should be performed using data from multiple layers/sources.\n2.\tADAE may collect existing data that can meet or partially meet the requirements of the data analytics request from sources with the \"Data source role\" IE set as \"repository\" in the data source profile (e.g., SEALDD storage server, Application-ADRF). The request and response for data collection are defined in 6.3.1.3-4 and 6.3.1.3-5.\nNOTE 1: ADAE data collection requests/responses may be realized via subscriptions/notifications.\n3.\tADAE collects data from other identified data sources. The request and response for data collection from a data source are defined in 6.3.1.3-4 and 6.3.1.3-5.\n4.\tADAE performs data processing operations as determined in step 1 and/or required by policies. For example, data samples that target the same performance metrics but originate from different sources may be normalized and validated. Such processing may remove samples that are inconsistent across different sources and keep samples that achieve consensus across all sources.\n5.\tThe collected (and optionally processed) data can be optionally stored in available repositories, such as a SEALDD storage server, Application-ADRF, etc.\nThe data source profile includes information about the data generation/production capability of the data source to support data collection for data analytics service and the availability/accessibility of the generated/produced data, as defined in Table 6.3.1.3-1.\nTable 6.3.1.3-1: Data source profile\n\nTable 6.3.1.3-2 describes information elements in the data analytics task request from the requester to ADAE or from ADAE client to ADAE server.\nTable 6.3.1.3-2: Data analytics request\n\nTable 6.3.1.3-3 describes information elements in the data analytics response from ADAE to the requester.\nTable 6.3.1.3-3: Data analytics response\n\nTable 6.3.1.3-4 describes information elements in the data collection request from ADAE to a data source.\nTable 6.3.1.3-4: Data collection request\n\nTable 6.3.1.3-5 describes information elements in the data collection response from the data source to ADAE.\nTable 6.3.1.3-5: Data collection response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 6.3.1.3-1: Data source profile",
                                    "table number": 4,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.3.1.3-2: Data analytics request",
                                    "table number": 5,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.3.1.3-3: Data analytics response",
                                    "table number": 6,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.3.1.3-4: Data collection request",
                                    "table number": 7,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.3.1.3-5: Data collection response",
                                    "table number": 8,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.3.2\tEvaluation",
                            "text_content": "The solution addresses Key Issue #1, 2, 3, 4 on support for data collection for application and provides generic procedures and APIs to support different types of data analytics (e.g., application performance analytics, edge analytics, etc.).\nThe solution defines generic procedures for application data analytics enablement service enablement, including interactions with other service enablement layer entities (e.g., SEAL, EEL) or the core network. The solution also enables ADAES to select data sources and to collect data for the analytics services provided. The solution specifies the API for requesting application data analytics enablement service and for enabling the collection and preparation of data that are originated from different sources.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.4\tSolution #3: Support for edge load analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.4.1\tSolution description",
                            "text_content": "This solution addresses Key Issue #2.\nThis solution introduces edge load analytics to provide insight on the operation and performance of an EDN and in particular statistics or prediction on parameters related to:\n-\tthe EAS / EES load for one or more EAS/EES\n-\tedge platform load parameters, which include the aggregated load per EDN or per DNAI due to the edge support services and e.g., load level of edge computational resources.\nSuch analytics can improve edge support services by allowing the pro-active edge service operation changes to deal with possible edge overload scenarios. For example, this can trigger EAS migration to a different EDN / central DN, or pro-active EAS reselection for a target UE or group of UEs.\nFigure 6.4.1-1 illustrates the procedure where the edge analytics are performed based on data collected from the EDN (EAS and/or EES, edge database or networking stack at EDN side).\nPre-conditions:\n1.\tADAES has discovered the APIs to access the edge services at EDN.\nFigure 6.4.1 -1 illustrates the support for edge analytics in the context of the Advanced Encryption Standard (AES) with Adaptive Bitrate (ABR) for video streaming. The figure depicts the process of data encryption and decryption at the edge of the network, ensuring secure transmission and efficient use of bandwidth. The figure highlights the role of the Content Delivery Network (CDN) in caching and delivering video content to users, while the ABR algorithm dynamically adjusts video quality based on network conditions. The figure also shows how the use of AES-based encryption at the edge can help prevent unauthorized access and improve overall streaming performance.\nFigure 6.4.1-1: ADAES support for edge analytics\n1.\tThe consumer of the ADAES analytics service sends a subscription request to ADAES and provides the analytics event ID e.g. edge performance prediction or stats, the DNN / DNAI, the time validity and area of the request, the required confidence level, whether offline and/or online analytics are needed etc.\n2.\tThe ADAES sends a subscription response as an ACK to the consumer.\n3.\tThe ADAES maps the analytics event ID to a list of data collection event identifiers, and optionally a list of data producer IDs. Such mapping may be preconfigured by OAM or may be configured at ADAES based on the analytics event ID. Such Data Producers can be EASs onboarded to EDN, EESs, SEALDD server, MEP services (e.g. RNIS).\n4.\tThe ADAES sends a subscription request to the Data Producers (EASs onboarded to EDN, EESs, SEALDD server, RNIS, N6 endpoint at EDN, NWDAF, OAM) with the respective Data Collection Event ID and the requirement for data collection. This message includes the Data Collection event ID and/or the analytics event ID, the ADAES ID, the time validity and area of the request, the required confidence level etc.\n5.\tThe Data Producer(s) sends a subscription response as an ACK to the ADAES.\n6.\tThe ADAES based on subscription, may receive offline stats/data on the edge DN load based on the analytics/data collection event ID from the data producer or from A-ADRF (see clause 5.3.4). Such offline data can be per EDN or per DNAI or per EAS/EES load statistics and edge computational resource utilization stats for a given time and area of interest. One example can be the load in terms of number of EAS or EES connections for a given area or time window, or the average edge computational resource usage or usage ratio based on the EDN total resource availability, EDN overload/high load indication events, probability of EAS/EES unavailability due to high load, etc.\n7.\tThe Data Producers at the edge start collecting data. Such data can be measurements or analytics based on the data source/producer, as follows:\n-\tfrom OAM or EAS/ASP (for EAS load info): Per EAS/EES computational resource load, number of connections per EES/EAS\n-\tfrom SEALDD server / N6 endpoint: N6 load / SEALDD server load\n-\tfrom 5GC / NWDAF: DN performance analytics\n-\tfrom OAM / MDAS: UPF load analytics (per DNAI)\n-\tfrom MEC platform services (e.g., RNIS): per cell radio conditions / load for all cells within EDN coverage\nNOTE: How the ADAES obtains the EAS load information from EAS/ASP is up to implementation.\n8.\tThe Data Producer send the data to the ADAES (based on step 7 measurements or analytics), where the data correspond to the data collection ID or the analytics event ID for which the ADAES subscribed. Such data can be provided one time or periodically or based on a threshold (e.g., load >X%).\n9.\tThe ADAES derives edge analytics on EDN / DNAI load or per EES/EAS load, based on the analytics ID and type of request. The analytics are derived based on the performance analytics received per DN or load analytics per DNAI/UPF; as well as considering measurements on the computational or RAN resource load or number of connections for the EES/EASs which are active at the EDN. Such analytics can be stats or prediction for a given area/time and based on the event type for a given network configuration. Such analytics can be for example a predicted load indication for the EDN or for an EES or EAS (e.g. 50% load or medium /high load), a predictive load in terms of number of EAS or EES connections for a given area or time window, or the predicted computational resource usage or usage ratio based on the EDN total resource availability, EDN overload/high load indication events, probability of EAS/EES unavailability due to high load.\n10.\tThe ADAES sends the edge analytics to the consumer, based on the request and the derived analytics in step 9. Such analytics indicate a prediction of the EDN load considering inputs from both 5GS as well as from edge platform services. Such prediction can also be in form of a recommendation for triggering an EAS relocation to a different platform.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.2\tCorresponding Analytics API",
                            "text_content": "This subclause provides a summary on the corresponding Analytics API for solution #3.\n-\tInputs: edge platform load data, EAS/EES load data, DN performance data, UPF load analytics.\n-\tList of Data Sources\n-\tData Source #1 information: OAM / MDAS\n-\tData required from Data Source #1: UPF load analytics\n-\tData Source #2 information: 5GC / NWDAF\n-\tData required from Data Source #2: DN performance analytics\n-\tData Source #3 information: SEALDD server\n-\tData required from Data Source #3: N6 load measurements, SEALDD computational resource load\n-\tData Source #4 information: EES\n-\tData required from Data Source #4: EES computational resource load or number of connections of EES\n-\tData Source #5 information: EAS\n-\tData required from Data Source #5: EAS computational resource load or number of connections of EAS\n-\tData Source #6 information: RNIS\n-\tData required from Data Source #6: per cell average radio conditions and resource utilization (for all cells within edge coverage)\n-\tOutput: stats or predictions on the EDN load conditions, EES or EAS load stats/predictions, recommendation for EAS relocation trigger (due to expected high load or edge resources).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.3\tSolution evaluation",
                            "text_content": "This solution addresses Key Issue #2 and introduces edge data analytics to predict the load of an edge platform or an edge service. Such analytics can improve edge support services by allowing the pro-active edge service operation changes to deal with possible edge overload scenarios.\nThis solution is feasible and doesn't introduce any dependency to 3GPP network systems. For the interaction to 5GC, ADAE server acts as AF, whereas for the interaction to OAM, ADAE server can be seen as a trusted 3rd party MDA service consumer (for consuming UPF load analytics). For the data collection related to ETSI MEC service like RNIS, this is only possible if the EDN has deployed such service, and any interaction between ADAE server and RNIS can be either up to ECSP implementation or by re-using EDGE-3 interface (RNIS acting as EAS).\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.5\tSolution #4: Support for performance analytics for UE-to-UE sessions",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.5.1\tSolution description",
                            "text_content": "This solution addresses Key Issue #1.\nThis solution introduces application layer analytics to predict the performance of an application session among two or more VAL UEs within a service or group. Such prediction relates to application QoS attributes prediction for a given time horizon and area. This can be requested by the VAL server during the session, or the VAL server can subscribe to receive predicted application QoS downgrade indication for an ongoing session. Such analytics will help improving the application service experience and allow the VAL layer to pro-actively adapt to predicted application QoS changes.\nFigure 6.5.1-1 illustrates the procedure where the VAL session performance analytics are performed based on data collected from the ongoing VAL sessions.\nPre-conditions:\n1.\tADAECs are connected to ADAES\n\nFigure 6 illustrates the utilization of Adaptive Differential Amplitude Error (ADAES) support for enhancing Voice over LTE (VoLTE) session performance analytics. The figure showcases the integration of ADAES within the Voice over IP (VoIP) and LTE networks, emphasizing its role in improving call quality and reliability. Key components include the Voice Application Layer (VAL) and the various network elements that contribute to the overall performance. The figure highlights the effectiveness of ADAES in mitigating amplitude errors, thereby ensuring a seamless and high-quality communication experience for users.\nFigure 6.5.1-1: ADAES support for VAL session performance analytics\n1. The consumer of the ADAES analytics service sends a subscription request to ADAES and provides the analytics event ID e.g. \"VAL UE to UE session prediction\", the target VAL UE ID or group of UE IDs, the VAL session / service ID, the time validity and area of the request, the required confidence level, exposure level for providing UE to UE analytics. Such request can also include whether the analytics notification shall be periodic or based on an expected application QoS change (in that case also the thresholds can be provided at the request)\n2.\tThe ADAES sends a subscription response as an ACK to the consumer.\n3.\tThe ADAES selects the corresponding ADAEC #1 of the VAL UE 1 where the session performance analytics need to be performed. Such UE can be for example a capable and authorized UE from the involved VAL UEs within the service or group, e.g. a group lead.\n4a.\tThe ADAES sends a subscription request to the ADAEC #1 with the analytics event ID and the configuration of the reporting required (e.g., periodic, based on threshold or event). Such request also includes the application QoS attributes to be analyzed (latency, jitter, PER,..)\n4b.\tThe ADAEC #1 sends a subscription response to ADAES\nA session starts between the VAL UE #1 and a VAL UE #2 (or more VAL UEs).\n5.\tThe ADAEC #1 (after being aware from the VAL client that the session started) sends a notification to ADAES that a session started, and it could be possible to provide real-time data analytics for VAL UE to UE session performance in the target area.\n6.\tThe ADAEC #1 starts collecting data from the corresponding VAL UE(s) based on subscription. Such data can be about the latency, throughput, jitter, QoE measurements, PQI load, etc.  The data can be collected by ADAEC #1 from other ADAECs via ADAE-C interface, or from the VAL clients (VAL client to VAL client interaction is out of scope).\n7.\tThe ADAEC either detects or predicts an application QoS change (depending on the authorization of ADAEC to perform analytics). Such change can be for example an application QoS downgrade related to the UE-to-UE session latency, or the PER/channel losses higher than a predefined threshold, for a given time horizon with a certain confidence level.\n8.\tThe ADAEC sends the data or the analytics (depending on whether ADAEC provides a prediction) to the ADAES.\n9.\tThe ADAES based on the received notification, confirms/verifies the analytics received or provides analytics (in case that data were reported) for the UE-to-UE session. Such analytics can be about predicting the application QoS change for the UE-to-UE session.\n13.\tThe ADAES sends the analytics to the consumer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.5.2\tCorresponding Analytics API",
                            "text_content": "This subclause provides a summary on the corresponding Analytics API for solution #x\n\n-\tInputs: per UE-to-UE session performance measurements (application QoS measurements such as latency, channel losses, data rate, jitter)\n-\tList of Data Sources\n-\tData Source information: VAL UE #1, VAL UE #2\n-\tData required from Data Source: application QoS measurements\n-\tOutput: Predicted application QoS metric change (downgrade or upgrade)\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.5.3\tSolution evaluation",
                            "text_content": "This solution addresses Key Issue #1 and introduces application layer analytics to predict the performance of an application session among two or more VAL UEs. Such solution enables the VAL layer to pro-actively adapt to predicted application QoS changes for VAL UE-to-UE sessions.\nThis solution is technically viable and doesn't introduce any impact on 5GS.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.6\tSolution #5: Service experience to support application performance analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.6.1\tSolution description",
                            "text_content": "This solution addresses the open issues stated in Key Issue #1, specifically on what data to be collected. This solution supplements the existing solution #1 in clause 6.2 with service experience information.\nIn some scenarios, where data from Application servers (like VAL server) is not available (overload or any other reasons) or doesn't show the quality of service experience at the UE side, the ADAE server may need to rely on alternate information sources like the application clients (like VAL clients) that provide the visibility on application service status. ADAE server can use this information from the clients alone, for the predictions and share with the consumer of the analytics. This solution supports a mechanism for the ADAE client to send service experience report to the ADAE server. ADAE server upon receiving the service experience information from the UE side entities can use it for predictions of application performance analytics. The service experience information from VAL client may include end-to-end response time, connection bandwidth, request rate, VAL server availability, etc.\nThis solution describes three procedures in more detail:\n-\tPull service experience information\n-\tPush service experience information\n-\tService experience information based on triggers configured by ADAE server at ADAE client.\nFigure 6.6.1.1-1 illustrates the procedure where the ADAE server pulls the service experience information from the ADAE client.\nFigure 6 illustrates the process of extracting service experience information from the user equipment (UE) in a network. The figure depicts the interaction between the network elements, including the home agent (HA), home subscriber server (HSS), and the user plane function (UPF), which work together to gather data on the user's experience with the service. This information is crucial for network operators to optimize their services and ensure a high-quality experience for their customers. The figure highlights the role of the UPF, which is responsible for forwarding user traffic and collecting feedback, and the HSS, which stores user profiles and manages authentication. The home agent acts as a coordinator between the UPF and the HSS, ensuring that the correct information is gathered and transmitted.\nFigure 6.6.1.1-1: Pull service experience informtion from UE\nThe procedure can be initiated by the ADAE server upon receiving a service experience from an ADAE client, to fetch service experience information other ADAE clients or upon receiving VAL server performance analytics request from application service provider (application server) or any other event that requires the ADAE server to determine the service experience data.\n1. The ADAE server sends Pull service experience request to the ADAE client. The request contains identity of the specific VAL server and VAL service ID, for which the service experience report is required, as mentioned in Table 6.6.1.1-1.\nTable 6.6.1.1-1: Pull service experience information request\n\n2. Upon receiving the Pull service experience request from the ADAE server, the ADAE client may take user consent to send the report if the user consent is not available already.\n3. The ADAE client sends the Pull service experience response to the ADAE server. The response contains service experience report, as specified in Table 6.6.1.1-2. The ADAE client receives the service experience related information from the VAL client.\nTable 6.6.1.1-2: Pull service experience information request response\n\n4. The ADAE server uses the service experience report for derivation of VAL server performance analytics.\nFigure 6.6.1.2-1 illustrates the procedure where the ADAE client pushes the service experience information to the ADAE server.\nFigure 6 illustrates the push service experience information flow from the user equipment (UE) to the network. The figure depicts the various components involved, including the UE, network servers, and databases. The flow of information is depicted through arrows, indicating the direction of data transmission. The figure emphasizes the importance of real-time data exchange between the UE and the network to ensure a seamless and efficient user experience.\nFigure 6.6.1.2-1: Push service experience informtion from UE\nThe ADAE client determines the service experience information based on information received from the VAL client. The service experience information includes application specific performance measurements like end-to-end response time, connection bandwidth, request rate, server availability time, etc. On request VAL client or any other trigger conditions, the ADAE client sends the service experience report about a VAL server to the ADAE server.\n1. The ADAE client sends Push service experience request to the ADAE server. The request contains service experience report about a VAL server and includes the information elements as specified in Table 6.6.1.2-1.\nTable 6.6.1.2-1: Push service experience information request\n\n2.\tUpon receiving the Push service experience request from the ADAE client, the ADAE server uses the service experience report for derivation of VAL server performance analytics.\n3.\tThe ADAE server sends Push service experience response to the ADAE client.\nThe ADAE server may take further actions based on the analysis of the report as shared by the ADAE client. A service experience information from certain UEs, can trigger the ADAE server to fetch further service experience information other UEs. Use the service experience information report from other UEs, to determine/predict analytics.\n-\tIf most of the UE side entities report a similar service experience, then it could be the application server problem across globally.\n-\tIf only some UEs report a bad service experience, the problem could be localized among a group of UEs.\n-\tIf the bad service experience from only a UE, the problem is localized to the UE.\nFigure 6.6.1.3-1 illustrates procedure for the ADAE server to configure triggers to the ADAE client to send the service experience report. The procedure can be initiated by the ADAE server upon receiving VAL server performance analytics request from application service provider (application server).\nFigure 6.1.3-1: Configure service experience report trigger\n\nThis figure illustrates the process of configuring a service experience report trigger in a telecommunication system. The figure shows a flowchart with various steps, including setting the trigger threshold, selecting the service experience report type, and defining the reporting frequency. The flowchart also includes decision-making points, such as whether to report the trigger or not, and the actions to be taken based on the trigger condition. The figure is essential for network administrators to ensure that service experience reports are configured correctly and that the telecommunication system can effectively monitor and report on service quality.\nFigure 6.6.1.3-1: Configure service experience report trigger\n\n1.\tThe ADAE server sends Configure service experience report trigger request to the ADAE client. The request contains identity of the specific VAL server(s) for which the service experience report is required. The request includes the information elements as specified in Table 6.6.1.3-1.\n\nTable 6.6.1.3-1: Configure service experience report trigger request\n\n2.\tUpon receiving the Configure service experience report trigger request from the ADAE server, the ADAE client stores the triggering criteria for sending service experience report and may take user consent to send the report if the user consent is not available already.\n3.\tThe ADAE client sends the Configure service experience report trigger response to the ASM server, indicating the result of the request.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 6.6.1.1-1: Pull service experience information request",
                                    "table number": 9,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.6.1.1-2: Pull service experience information request response",
                                    "table number": 10,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.6.1.2-1: Push service experience information request",
                                    "table number": 11,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.6.1.3-1: Configure service experience report trigger request",
                                    "table number": 12,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.6.2\tSolution evaluation",
                            "text_content": "This solution addresses Key Issue #1 and the introduces a mechanism for the ADAE server to use the service experience information from the UE side entities via ADAE clients to determine the application performance analytics. The solution proposes three mechanisms, ADAE server pulls the service experience information from the ADAE, ADAE server pulls the service experience information from ADAE client based on certain triggers configured on the ADAE client by the ADAE server, and ADAE client pushes to ADAE server.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.7\tSolution #6: Support for slice related application data analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.7.1\tSolution description",
                            "text_content": "This solution addresses Key Issue #5.\nThis solution introduces application layer analytics to provide insight on the performance of the VAL applications when using a given network slice (from a list of subscribed slices for the VAL customer). Such solution provides an analytics service to a consumer who can be either the VAL server (for helping to identify what slice it will use for its applications) or for other consumers such as SEAL NSCE to support on providing analytics (since NSCE doesn't contain an analytics engine for providing analytics on top of NWDAF/MDAS).\nFigure 6.7.1-1 illustrates the procedure where the VAL server performance analytics are performed based on data collected from the ongoing VAL sessions as well as data from the DN (VAL server, DN database or networking stack at DN).\nPre-conditions:\n1.\tADAEC is connected to ADAES\nFigure 6, 7, and 1 illustrate the support for slice-related performance analytics in an ADAES framework. The figure showcases the integration of various components, including the network slicing manager, performance monitoring system, and analytics engine. The network slicing manager is responsible for managing and orchestrating network resources, while the performance monitoring system collects and analyzes data to identify performance issues. The analytics engine then processes this information to provide insights for optimization and troubleshooting. The figure highlights the importance of these components working together to ensure efficient and effective network performance management for slice-related services.\nFigure 6.7.1-1: ADAES support for slice-related performance analytics\n1.\tThe consumer of the ADAES analytics service sends a subscription request to ADAES and provides the analytics event ID e.g. \"slice perf prediction\", the target S-NSSAI, DNN, NSI ID, the time validity and area of the request, the required confidence level, whether offline and/or online analytics are needed etc.\n2.\tThe ADAES sends a subscription response as an ACK to the consumer.\n3.\tThe ADAES subscribes to the Data Sources with the respective Data Collection Event ID and the requirement for data collection related to the request slice(s). Such requests can be towards:\n-\tOAM for providing PM data related to the requested slice / NSI. Alternatively, if the interaction to OAM happens via NSCE layer, such subscription can be performed to NSCE (where ADAES is acting as VAL server).\n-\tNWDAF for providing slice related analytics for the given area and time horizon (indicated in step 1). Such analytics can be the slice load level related network data analytics, or the service experience related network data analytics for a given slice\n4.\tThe ADAES based on subscription, receives PM data notification from OAM or from NSCE (via OAM APIs or NSCE-S APIs)\n5.\tThe ADAES based on subscription, receives the requested NWDAF analytics outputs. Such analytics can be:\n-\tnetwork slice or NSI statistics or predictions (clause 6.3.3 of TS 23.288)\n-\tper slice instance service experience stats or predictions (clause 6.4.3 of TS 23.288)\n6.\tThe ADAES can also provide analytics on the VAL session performance based on Solution #1 procedure 6.1.2 and filters the analytics only for the sessions which are connected to that requested slice for the area of interest.\n7.\tThe ADAES abstracts or correlates the data/analytics from steps 4-6 and provides analytics on the slice or NSI performance for the the target VAL application/server. For example, such analytics can be about the min/average/max predicted RTT / end to end latency for the VAL application/server if this server uses a given slice/NSI (or for a list of given slices) within an area of interest.\n8.\tThe ADAES sends the analytics to the consumer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.7.2\tCorresponding Analytics API",
                            "text_content": "This subclause provides a summary on the corresponding Analytics API for solution #x\n\n-\tInputs: per slice measurements and analytics, application session performance analytics, historical data on slice information\n-\tList of Data Sources:\n-\tData Source #1 information: OAM or NSCE\n-\tData required from Data Source #1: PM data for a given NSI\n-\tData Source #2 information: NWDAF\n-\tData required from Data Source #2: slice load analytics for NSI/S-NSSAI, service experience for NSI/S-NSSAI\n-\tData Source #3 information: VAL UEs (based on Solution #1)\n-\tData required from Data Source #3: application QoS measurements for an application session connected to requested slice\n-\tOutput: Statistics or prediction for the VAL application QoS for one or more requested S-NSSAIs/NSIs\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.7.3\tSolution evaluation",
                            "text_content": "This solution introduces application layer analytics to provide insight on the performance of the VAL applications when using a given network slice (from a list of subscribed slices for the VAL customer). This solution is technically viable and does not have any dependency to other slice related analytics since it targets the application performance for a target slice or NSI and not the network slice related performance.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.8\tSolution #7: Slice configuration recommendation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.8.1\tSolution description",
                            "text_content": "This solution addresses Key Issue #6.\nThis solution provides a procedure for network slice configuration recommendation based on collected network slice performance and analytics and historical network slice status and network performance. The consumer can be either the VAL server or other consumers such as SEAL NSCE.\nFigure 6.8.1-1 illustrates the procedure for network slice configuration recommendation.\nPre-conditions:\n1.\tThe ADAES is registered and capable of interacting with 5GS to collected network slice data.\n2.\tThe ADAES is registered and capable of interacting with NSCE to collected network slice performance and analytic.\nFigure 6. 8.1-1 illustrates the support for network slice configuration recommendation using Adaptive Differential Evolutionary Algorithm for Security (ADAES). The figure showcases the process of optimizing network resources for different network slices, represented by the colored rectangles, by applying ADAES to find the optimal configuration. Key components include the network nodes, the network slice, and the optimization process. The figure highlights the efficiency and security benefits of ADAES in managing network resources for diverse applications.\"\nFigure 6.8.1-1: ADAES support for network slice configuration recommendation\n1.\tThe consumer of the ADAES sends a subscription request to ADAES and provides the target S-NSSAI, DNN, slice requirement, area of the interest, interest time period of the historical data (e.g. last year), the required confidence level, whether offline and/or online analytic are needed etc.\n2.\tThe ADAES sends a subscription response to the consumer.\n3.\tThe ADAES subscribes to the Data Sources with the respective Data Collection Event ID and the requirement for data collection related to the request slice(s). Such requests can be sent to SEAL NSCE, OAM, NWDAF or the combination of them.\n4.\tBased on subscription, the ADAES (acting as VAL server) may receive performance and analytics data from SEAL NSCE (e.g. QoE metrics, as defined in the TS 23.435 clause 9.4.2).\n5.\tBased on subscription, the ADAES may receive Network slice / NSI related performance data from OAM as defined in TS 28.552 [12].\n6.\tBased on subscription, the ADAES may receives Network slice related Observed Service experience statistics, Load level information of a Network Slice defined from NWDAF as defined in TS 23.288[18]\n7.\tIf the data is collected from multiple sources, the ADAES combines or correlates the data/analytics from steps 3-5, and stores the data into data repository if needed.\n8.\tCollect the historical data from data repository and analyze the network slice usage pattern. When the amount of stored historical data does not cover the required interest time period of the historical data, ADAES analyze the slice usage pattern based on the existing stored historical data.\n9.\tThe ADAES provides network slice configuration recommendation based on the slice requirement, slice performance and derived slice usage pattern from step 8.\n8.\tThe ADAES sends the network slice configuration recommendation to the consumer. The recommendation may be related to parameters in the slice serviceProfile if the consumer is the SEAL NSCE. Or the recommendation may be related to slice resource /functional configuration (e.g. slice capacity, coverage) if the consumer is the management system.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.8.2\tCorresponding Analytics API",
                            "text_content": "This subclause provides a summary on the corresponding Analytics API for solution #7\n\n-\tInputs: per slice measurements and analytics, historical data on slice information\n-\tList of Data Sources:\n-\tData Source #1 information: SEAL NSCE\n-\tData required from Data Source #1:  performance and analytics data for a given S-NSSAI\n-\tData Source #2 information: OAM\n-\tData required from Data Source #2: PM data for a given S-NSSAI\n-\tData Source #3 information: NWDAF\n-\tData required from Data Source #3: slice load analytics for S-NSSAI, service experience for S-NSSAI\n-\tData Source #4 information: A-ADRF\n-\tData required from Data Source #4: historical slice load analytics and service experience for S-NSSAI.\n-\tOutput: Statistics for the network slice configuration recommendation for one or more requested S-NSSAIs. The recommendation may be related to parameters in the slice serviceProfile per S-NSSAI if the consumer is the SEAL NSCE. Or the recommendation may be related to slice resource /functional configuration per S-NSSAI / NSI (e.g. slice capacity, coverage) if the consumer is the management system.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.8.3\tSolution evaluation",
                            "text_content": "This solution is technically viable and does not have any dependency to other slice related analytics since it targets the slice configuration recommendation for a target S-NSSAI.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.9\tSolution #8: support for location accuracy analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.9.1\tSolution description",
                            "text_content": "This solution addresses Key Issue #7.\nThis solution introduces application layer analytics to allow a VAL server to be notified based on analytics whether the accuracy of a location can be met for a given application and optionally for a given UE/group route. For example, a VAL server may request the ADAE server to provide analytics whether the accuracy of a location for the UEs within a VAL application is predicted to be sustainable or is expected to downgrade in a specific area or for an expected route from location A to location B.\nFigure 6.9.1-1 illustrates the procedure for location accuracy analytics enablement solution.\nPre-conditions:\n1.\tADAES is connected to A-ADRF\n2.\tADAES has discovered SEAL LMS or FLS\nFigure 6.9.1 -1 illustrates the location accuracy analytics procedure, which involves the use of various sensors and data sources to determine the precise location of a device or object. The figure shows a flowchart with different stages, including data collection, data processing, and location accuracy assessment. Key components include the data logger, GPS receiver, and location accuracy assessment tools. The figure highlights the importance of accurate location data in various applications, such as navigation, asset tracking, and emergency response.\nFigure 6.9.1 -1: Location accuracy analytics procedure\n1.\tThe VAL server makes a request to ADAE server for location accuracy prediction/stats, including an analytics event ID (e.g. \"location accuracy prediction\" or \"location accuracy sustainability\"), an analytics request type (if not identified specifically at the event ID) which can be the location accuracy prediction for a given location X and/or for a given UE/app. The request may include also the target area, a target VAL application, or a VAL UE, group of UEs or the VAL service, time of day, accuracy threshold and requirements. If the VAL UEs are provided by the VAL server, this request may also include the expected route or a set of waypoints for the UEs of the VAL application.\n2.\tThe ADAE server sends a subscription response as an ACK to the VAL server.\n3.\tThe ADAE server discovers and maps the Data Sources with the respective analytics event ID for collecting location data for the corresponding VAL UEs or VAL service or area.\n4a/4b.\tThe ADAE server subscribes for NWDAF UE mobility analytics per VAL UE (for all the VAL UEs) and gets notification on the per UE location/mobility analytics based on TS 23.288 clause 6.7.2. Such analytics may be requested for a list of waypoints per UE route (if indicated at step 1).\n5a/5b. The ADAE server requests and receives from SEAL LMS location reports for the respective VAL UEs or location reports from all VAL UEs within the requested area. Such request may also indicate the required location accuracy (requires enhancements to SEAL LMS procedures). In case where FLS is deployed, it can be also possible to request and receive fused location reports (combined location reports from 3gpp/n3gpp sources) if the ADAE server identifies that higher location accuracy is required.\n6.\tThe ADAE server may also request and receive location accuracy historical analytics /data from A-ADRF for the corresponding VAL UEs or VAL service area.\n7.\tThe ADAE server abstracts or correlates the data/analytics from steps 4-6 and provides analytics on the location accuracy for the the target VAL application. Depending on the event ID in step 1, the ADAE server can indicate whether the location accuracy is sustainable or is predicted to be downgraded or can be upgraded and become more granular (e.g. from meter to decimetre).\n8.\tThe ADAE server sends the analytics to the consumer.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.9.2\tCorresponding Analytics API",
                            "text_content": "This subclause provides a summary on the corresponding Analytics API for solution #8\n\n-\tInputs: per VAL UE or area location reports and UE mobility analytics\n-\tList of Data Sources:\n-\tData Source #1 information: NWDAF (Nnwdaf_AnalyticsInfo service via N33, as specified in TS 23.288 [2])\n-\tData required from Data Source #1: UE mobility analytics\n-\tData Source #2 information: SEAL LMS (SS_LocationMonitoring API, SS_LocationAreaMonitoring API as specified in TS 23.434 [5])\n-\tData required from Data Source #2: UE location reports and achieved accuracy, Location reports from all UEs within a given area\n-\tData Source #3 information: FLF\n-\tData required from Data Source #3: fused location reports per VAL UE (via FLS-2 as discussed in TR 23.700-96 [8])\n-\tData Source #4 information: A-ADRF\n-\tData required from Data Source #4: historical location accuracy statistics for target VAL service area or VAL UE\n-\tOutput: a predictive location accuracy sustainability or change indication, a predictive location accuracy sustainability or change indication for a route of the UE with the application.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.9.3\tSolution evaluation",
                            "text_content": "This solution addresses Key Issue #7 and introduces location accuracy analytics to predict possible downgrade of location accuracy for a given VAL application. Such solution enables the VAL layer to pro-actively adapt to predicted location accuracy changes for the VAL service (e.g. to change the distance between VAL UEs or trigger the change of VAL UE speed if location accuracy is changed).\nThis solution is technically viable and doesn't introduce any impact on 5GS. This solution requires enhancements to SEAL LMS and to FLS for reporting the accuracy as part of the location reporting.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.10\tSolution #9: support for service API analytics",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.10.1\tSolution description",
                            "text_content": "This solution addresses Key Issue #8.\nThis solution introduces service API analytics to allow a VAL server or any other consumer (e.g. API provider) to be notified on the predicted /statistic availability and service level for the requested service API analytics. Such analytics may allow the API provider to perform actions to avoid service API invocation failures or other actions like throttling/rate limitations. Also, such analytics will support the VAL server to identify if/when to perform an API invocation request based on the API expected status at the given area and time horizon.\nFigure 6.10.1-1 illustrates the procedure for service API analytics enablement solution.\nPre-conditions:\n1.\tADAES is registered to CCF\nFigure 6.10.1 illustrates the service API analytics procedure, which involves the extraction of data from various sources, such as user behavior and system performance metrics, to gain insights for improving service quality and user experience. The figure shows the process in three main steps: data collection, data processing, and data analysis. The data collection phase encompasses the use of APIs to gather information from different systems, while the data processing phase involves cleaning, transforming, and integrating the data. The final step, data analysis, utilizes advanced algorithms and machine learning techniques to identify patterns, trends, and anomalies, enabling the identification of areas for improvement and the development of targeted strategies for enhancing service offerings.\nFigure 6.10.1 -1: Service API analytics procedure\n\n1.\tThe subscribing entity (CAPIF entity, VAL server / API invoker, API provider) sends an event subscription request to the ADAE server to receive analytics for one or more service APIs. The event subscription request includes the information elements as specified in Table 6.10.1-1\nTable 6.10.1-1: Event subscription request\n\n2.\tUpon receiving the event subscription request from the subscribing entity, the ADAE server checks for the relevant authorization for the event subscription. If the authorization is successful, the ADAE server stores the subscription information.\n3.\tThe ADAE server sends an event subscription response indicating successful subscription\n4.\tUpon sending the subscription response, the ADAE server requests to collect API logs to be used to derive analytics and triggers API invocation log pull request towards the CAPIF core function. The API invocation log fetch request indicates the API (or list of APIs) for which logs are required. Based on the ADAE server deployment, this can be performed via CAPIF_Logging_API_Invocation API as specified in 3GPP TS 23.222 [9]. The message may include the IEs as specified in Table 6.10.1-2.\nTable 6.10.1-2: API invocation log fetch request\n\n5.\tThe CCF authorizes the request and fetches the API logs from the storage unit. CCF then sends the requested information to the ADAE server via a API invocation log fetch response message. The message may include the IEs as specified in Table 6.10.1.-3.\nTable 6.10.1-3: API invocation log fetch response\n\n6.\tThe ADAES may also request and receive service API historical analytics /data from A-ADRF for the corresponding service APIs.\n7.\tThe ADAE servers authorizes and anonymizes the API logs (if not performed by CCF) and abstracts based on exposure level. The exposure level can be known based on pre-configuration by the OAM or based on the subscription and type of invoker. The ADAE server then derives analytics on the target service API(s) based on the logs received from the CCF. Such analytics are predictions/stats for the API status based on the analytics event.\n8.\tThe ADAE server sends the analytics as event notifications to all the subscribing entities that have subscribed for the event matching the criteria. If a notification reception information is available as part of the subscribing entity event subscription, then the notification reception information is used by the ADAE server to send event notifications to the subscribing entity.\nThe notification includes the following parameters: the analytics event ID, the service API name and/or type, stats or predictions based on abstracted or anonymized API logs (for example number of failure API invocations, API availability, frequency and occurrence of API version changes, API location changes for the target API, API throttling events, number of API invocations for a given area and time, API load statistics for a given edge network, etc), the time and area where the reporting occurs and is valid.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 6.10.1-1: Event subscription request",
                                    "table number": 13,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.10.1-2: API invocation log fetch request",
                                    "table number": 14,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 6.10.1-3: API invocation log fetch response",
                                    "table number": 15,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.10.2\tCorresponding Analytics API",
                            "text_content": "This subclause provides a summary on the corresponding Analytics API for solution #9.\n\n-\tInputs: service API logs\n-\tList of Data Sources:\n-\tData Source #1 information: CAPIF CCF (via CAPIF_Logging_API_Invocation API)\n-\tData required from Data Source #1: Service API logs for requested APIs\n-\tData Source #2 information: A-ADRF\n-\tData required from Data Source #2: historical data / statistics on service API availability and service level\n-\tOutput: stats or predictions for service API(s). For example, the failure rate of API invocations, API predicted availability, frequency and occurrence of API version changes, API location changes for the target API, API throttling events, number of API invocations for a given area and time, API load statistics for a given edge data network (for edge provided service APIs).\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.10.3\tSolution evaluation",
                            "text_content": "This solution addresses Key Issue #8 and introduces service API analytics to provide stats or predict possible downgrade of performance and availability of a service API. This solution is technically viable and doesn't introduce any impact on 5GS.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "7\tDeployment scenarios",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "7.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause provides the different deployment models for ADAE services. There could be three deployment options:\n-\tADAES can be deployed at a centralized cloud platform, and collects data from multiple EDNs\n-\tADAES can be deployed at the edge platform\n-\tHierarchical ADAES deployment, where multiple ADAE services are deployed in edge or central clouds (e.g. in hierarchical arch). Such deployment allows for local-global analytics for system wide optimization\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.2\tDeployment model #1: Cloud-deployed ADAES",
                    "description": "",
                    "summary": "",
                    "text_content": "In this deployment, as shown in Figure 7.2-1, the ADAES is centrally located and can provide analytics services to the application and edge services (EAS/EES, VAL server, SEAL services).\nThe statistics/predictions that the ADAES provides are applicable to the ADAE server service area, which can be provided for the entire PLMN.\nFigure 7.2-1 illustrates the deployment of an Adaptive Differential Amplification and Equalization Scheme (ADAES) in a cloud environment. The figure showcases the various components involved, including the cloud infrastructure, edge servers, and the data transmission path. The cloud-based deployment allows for efficient resource allocation and real-time adjustments to the ADAES parameters, ensuring optimal performance in dynamic network conditions. The figure emphasizes the scalability and flexibility of cloud-based solutions in modern telecommunication networks.\nFigure 7.2-1 cloud deployed ADAES\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.3\tDeployment model #2 Edge-deployed ADAES",
                    "description": "",
                    "summary": "",
                    "text_content": "In this deployment, as shown in Figure 7.3-1, the ADAES is located at the EDN and provides analytics services to the EAS or other edge native applications at the edge platform. ADAES can be deployed by the ECSP or the MNO to provide analytics for the application or edge parameters.\nThe statistics/predictions that the edge deployed ADAES are applicable to the ADAE server service areas (as shown in the example in Fig 7.2-2), which are equivalent to the EDN service areas. Such analytics can be about the edge load or the EAS performance and can be provided to consumers within EDN.\nIn this deployment the interaction between edge deployed ADAES is possible for exchanging edge/application analytics for application mobility scenarios or for cases when ADAES #1 and #2 service areas have overlapping coverage.\n\nFigure 7.3-1 illustrates the deployment of an Adaptive Differential Amplification and Error Correction (ADAES) system at the network's edge. The figure showcases the integration of various components, including the edge node, the signal source, and the receiver, which work together to enhance signal quality and reliability. The use of adaptive techniques allows for real-time adjustments to the signal, ensuring optimal performance even in challenging environments. The figure highlights the importance of edge computing in modern telecommunications, where processing power and data storage are brought closer to the end-user, reducing latency and improving overall network efficiency.\nFigure 7.3-1 edge deployed ADAES\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.4\tDeployment model #3: Hierarchical ADAES deployment",
                    "description": "",
                    "summary": "",
                    "text_content": "In this deployment, multiple ADAESs can be located at different EDNs/DNs and can be deployed by the same ADAE provider.  Such hierarchical deployments allow the local – global analytics derivation (which may be needed for improving the analytics confidence level). The centrally deployed ADAES can also act as ADAE analytics aggregator entity and configures the edge deployed ADAES to derive analytics on different sub-areas.\nOne example is the use of analytics for the EDN#1 or EDN#2 load which will help predicting the VAL server performance at a centrally located ADAES. Such deployment is also applicable for ML-based analytics methods, like supervised learning, where the centrally located ADAES acts as ML model training entity, and the edge located ADAESs can act as ML model inference entities (using edge data to improve the prediction accuracy).\nThe statistics/predictions that the edge deployed ADAES correspond to the ADAE server service areas (as shown in the example in Fig 7.4-1), which is equivalent to the EDN service areas. The central ADAE server covers all PLMN area and is used to coordinate or jointly perform analytics with the distributed ADAES. Such analytics services can be provided to consumers at the central DN, like the VAL servers or SEAL services or even at the PLMN side (e.g. NWDAF consuming service experience analytics).\nFigure 7.4-1 illustrates the hierarchical deployment of Adaptive Differential Amplitude and Phase (ADAES) in a telecommunication network. The figure shows the system's structure, starting from the base station (BS) and extending to the user equipment (UE). The key components include the BS, eNodeB, and the UE, which are interconnected through various layers of the network. The figure highlights the importance of ADAES in improving signal quality and reliability, particularly in areas with high interference or signal attenuation. The use of adaptive techniques allows the system to dynamically adjust to changing conditions, ensuring optimal performance across the network.\nFigure 7.4-1 hierarchical deployment of ADAES\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "8\tOverall evaluation",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "8.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The following clauses contain an overall evaluation of the solutions presented in this technical report, their applicability to the identified key issues and possible dependencies to other groups. This clause also includes a summary of the inputs/outputs and corresponding analytics APIs to be considered for the normative phase.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "8.2\tSolution evaluations",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.2.1\tGeneral",
                            "text_content": "All the key issues and solutions specified in this technical report are listed in Table 8.2.1-1. This table includes the mapping of the key issues to the solutions and corresponding solution evaluations.\nTable 8.2.1-1 Key issue and solutions\n\nMore specifically,\n-\tFor Key issue #1 (Support for application performance analytics), Solution #1 and Solution #4 provide analytics capabilities for application performance targeting the UE-to-network and UE-to-UE sessions respectively.  Solution #2 provides a generic mechanism which can be used for data analytics enablement and can be adopted by Solutions #1 and #4; whereas Solution #5 provides methods for collecting/notifying service experience data from the UE and can be seen as further elaboration of the collection/notification means based on Solution #1. There is no identified conflict among the solutions, and the solutions can complement each other.\n-\tFor Key issue #2 (Support for edge analytics enablement), Solution #3 provides analytics functionality for edge load, whereas Solution #2 provides a generic mechanism which can be used for edge load analytics enablement and can be adopted by Solution #3 (whereas it is not mandatory). Solution #2 may require enhancements in eEDGEAPP to allow the collection of the EES load information.\n-\tFor Key issue #3 (Support for data collection for application layer analytics), Solution #2 provides a generic mechanism for data collection enablement to be used for ADAE analytics derivation.\n-\tFor Key issue #4 (Key Issue on interactions with SEAL services), solutions #2, #6, #7, #8  have interactions with other SEAL services. Solution #2 provides a generic mechanism for data collection enablement to be used for ADAE analytics derivation. Additionally, Solution #6 and #7 interact with SEAL NSCE server for analytics derivation. Finally Solution #8 collects location reports from SEAL LMS and may require location enhancements of SEAL LMS. There is no identified conflict among the solutions, and the solutions can complement each other.\n-\tFor Key issue #5 (Support for slice-related application data analytics), Solution #6 provides slice-related application analytics and is optionally interacting with SEAL NSCE service (no enhancements are needed at SEAL NSCE).\n-\tFor Key issue #6 (Support for slice configuration recommendation enablement), Solution #7 provides a support capability for slice configuration recommendation and is interacting with SEAL NSCE service (no enhancements are needed at SEAL NSCE).\n-\tFor Key issue #7 (support for location accuracy), Solution #8 provides location accuracy analytics functionality and is optionally interacting with SEAL LMS or FLF service (enhancements are needed at SEAL LMS if used as data source).\n-\tFor Key issue #8 (Support for service API capability analytics), Solution #9 provides a support capability for service API analytics.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.2.1-1 Key issue and solutions",
                                    "table number": 16,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.2.2\tADAE analytics services",
                            "text_content": "Table 8.2.2-1 provides an overview of the analytics services which are provided by ADAE layer, based on the individual solutions.\nTable 8.2.2-1 ADAE analytics services\n\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.2.2-1 ADAE analytics services",
                                    "table number": 17,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "9\tConclusions",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "9.1\tGeneral conclusions",
                    "description": "",
                    "summary": "",
                    "text_content": "This technical report fulfills the objectives of the study on application architecture for enabling application data analytics. The report includes the following:\n1.\tDefinition of terms and abbreviations used in the study (clause 3);\n2.\tKey issues identified by the study (clause 4);\n3.\tArchitectural requirements and detailed application architecture for enabling Application Data Analytics (clause 5);\n4.\tIndividual solutions addressing the key issues (clause 6);\n5.\tDeployment scenarios (clause 7); and\n6.\tOverall evaluations of all the solutions (clause 8);\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "9.2\tGeneral conclusions for normative work",
                    "description": "",
                    "summary": "",
                    "text_content": "For normative work in 3GPP Rel-18, it is recommended to define：\n1.\tTerms and abbreviations, the definition of terms and abbreviations captured in clause 3 will be reused.\n2.\tRequirements on ADAE, the architectural requirements identified in clause 4 will be used as baseline architectural requirements; such requirements include also per functionality-imposed requirements as well as requirements for the internal ADAE architecture.\n4.\tApplication architecture for enabling Application Data Analytics Enablement, the architectures as specified in clause 5.3 will be used as baseline architecture.\n5.\tDeployment scenarios will be considered as captured in clause. Additional deployment models and their implications on the solutions will be considered.\n6.  The definition of ADAE analytics services, data sources and corresponding APIs as captured in clause 8.2.2 based on the concluded solutions (see clause 9.3).\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "9.2\tConclusions of solutions",
                    "description": "",
                    "summary": "",
                    "text_content": "The study concludes with ADAE functionality, following solution considerations for the normative work:\n1.\tFollowing individual solutions, corresponding to the key issues, will be considered as candidate solutions:\na.\tfor Key issue #1 (Support for application performance analytics):\ni.\tSolution #1 (Support for application performance analytics)\nii.\tSolution #2 (Data Analytics Enablement)\niii.\tSolution #4 (Support for performance analytics for UE-to-UE sessions)\niv.\tSolution #5 (Service experience to support application performance analytics)\nb.\tfor Key issue #2 (Support for edge analytics enablement):\ni.\tSolution #2 (Data Analytics Enablement)\nii. \tSolution #3 (Support for edge load analytics)\nc.\tfor Key issue #3 (Support for data collection for application layer analytics):\ni.\tSolution #2 (Data Analytics Enablement)\nd.\tfor Key issue #4 (Key Issue on interactions with SEAL services):\ni.\tSolution #2 (Data Analytics Enablement)\ne.\tfor Key issue #5 (Support for slice-related application data analytics):\ni.\tSolution #6 (Support for slice related application data analytics)\nf.\tfor Key issue #6 (Support for slice configuration recommendation enablement):\ni.\tSolution #7 (Slice configuration recommendation)\ng.\tfor Key issue #7 (Support for location accuracy analytics):\ni.\tSolution #8 (Location accuracy analytics)\nh.\tfor Key issue #8 (Support for service API capability analytics):\ni.\tSolution #9 (Service API analytics)\n\n",
                    "tables": [
                        {
                            "description": "",
                            "table number": 18,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        }
    ]
}
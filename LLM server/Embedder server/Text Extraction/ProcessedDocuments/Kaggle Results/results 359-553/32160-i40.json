{
    "document_name": "32160-i40.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Specification has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\nIn the present document, certain modal verbs have the following meanings:\nshall\t\tindicates a mandatory requirement to do something\nshall not\tindicates an interdiction (prohibition) to do something\nThe constructions \"shall\" and \"shall not\" are confined to the context of normative provisions, and do not appear in Technical Reports.\nThe constructions \"must\" and \"must not\" are not used as substitutes for \"shall\" and \"shall not\". Their use is avoided insofar as possible, and they are not used in a normative context except in a direct citation from an external, referenced, non-3GPP document, or so as to maintain continuity of style when extending or modifying the provisions of such a referenced document.\nshould\t\tindicates a recommendation to do something\nshould not\tindicates a recommendation not to do something\nmay\t\tindicates permission to do something\nneed not\tindicates permission not to do something\nThe construction \"may not\" is ambiguous and is not used in normative elements. The unambiguous constructions \"might not\" or \"shall not\" are used instead, depending upon the meaning intended.\ncan\t\tindicates that something is possible\ncannot\t\tindicates that something is impossible\nThe constructions \"can\" and \"cannot\" shall not to be used as substitutes for \"may\" and \"need not\".\nwill\t\tindicates that something is certain or expected to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nwill not\t\tindicates that something is certain or expected not to happen as a result of action taken by an agency the behaviour of which is outside the scope of the present document\nmight\tindicates a likelihood that something will happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nmight not\tindicates a likelihood that something will not happen as a result of action taken by some agency the behaviour of which is outside the scope of the present document\nIn addition:\nis\t(or any other verb in the indicative mood) indicates a statement of fact\nis not\t(or any other negative verb in the indicative mood) indicates a statement of fact\nThe constructions \"is\" and \"is not\" do not indicate requirements.\n\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document contains the templates to be used for the production of Management service component specifications type A, type B and type C [2].\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[2]\t3GPP TS 28.533: \"Management and orchestration; Architecture framework\".\n[3]\t3GPP TS 32.156: \"Telecommunication management; Fixed Mobile Convergence (FMC) Model Repertoire\"\n[4]\tITU-T Recommendation M.3020 (07/2017): \"Management interface specification methodology\".\n[5]\t3GPP TR 21.801: \"Specification drafting rules\".\n[6]\t3GPP TS 28.622: \"Telecommunication management; Generic Network Resource Model (NRM) Integration Reference Point (IRP); Information Service (IS)\".\n[7]\t3GPP TS 28.541: \"Management and orchestration; 5G Network Resource Model (NRM); Stage 2 and stage 3\".\n[8]\t3GPP TS 32.302: \"Telecommunication management; Configuration Management (CM); Notification Integration Reference Point (IRP); Information Service (IS)\".\n[9]\t3GPP TS 32.300: \"Telecommunication management; Configuration Management (CM); Name convention for Managed Objects\".\n[10]\tITU-T Recommendation M.3020 (07/2011): \"Management interface specification methodology\" – Annex E \"Information type definitions – type repertoire\".\n[11]\tIETF RFC 8407: \"Guidelines for Authors and Reviewers of Documents Containing YANG Data Models, October 2018\".\n[12]\t3GPP TS 28.532: \" Management and orchestration; Generic management services\"\n[13]\tIETF RFC 8528: \"YANG Schema mount \"\n[14]\tOpenAPI: \"OpenAPI 3.0.0 Specification\", .\n[15]\tdraft-wright-json-schema-01 (October 2017): \"JSON Schema: A Media Type for Describing JSON Documents\".\n[16]\tdraft-wright-json-schema-validation-01 (October 2017: \"JSON Schema Validation: A Vocabulary for Structural Validation of JSON\".\n[17]\tdraft-wright-json-schema-hyperschema-01 (October 2017): \"JSON Hyper-Schema: A Vocabulary for Hypermedia Annotation of JSON.\n[18]\tIETF RFC 7950: \"The YANG 1.1 Data Modeling Language, August 2016\".\n[19]\t: \" YANG Library\".\n[20]\t3GPP TS 28.623: “Generic Network Resource Model (NRM)  Integration Reference Point (IRP); Solution Set (SS) definitions”\n\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions of terms, symbols and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tTerms",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the terms given in 3GPP TR 21.905 [1] and the following apply. A term defined in the present document takes precedence over the definition of the same term, if any, in 3GPP TR 21.905 [1].\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tSymbols",
                    "description": "",
                    "summary": "",
                    "text_content": "Void.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.3\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in 3GPP TR 21.905 [1] and the following apply. An abbreviation defined in the present document takes precedence over the definition of the same abbreviation, if any, in 3GPP TR 21.905 [1].\nC\tConditional\nCM\tConditional Mandatory\nCO\tConditional Optional\nM\tMandatory\nMnS\tManagement Service\nNRM\tNetwork Resource Model\nO\tOptional\n\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tManagement service template (stage 1)",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "This template shall be used for the production of all requirement specifications for management and orchestration of 3GPP networks.\nInstructions in italics below shall not be included in the requirements specifications.\nUsage of fonts shall be according to the 3GPP drafting rules in TR 21.801 [5] for a TS (with some basic examples given in the 3GPP TS template).\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "4.2\tTemplate for requirement specifications",
                    "description": "",
                    "summary": "",
                    "text_content": "\nX\t\tManagement capabilities\nX.a\t\t<Management capability name>\nThe management capability name above shall be replaced with the name of the management capability which is to be specified.\nX.a.1\t\tDescription\nFor production of the contents of this clause, describe general information about the management capability.\nX.a.2 \tUse cases\nX.a.2.b\t<XXX Use case> <label>\nFor production of the contents of this clause, describe the motivation for one or more of the requirements in R4.c (referring to the requirement label(s)). The use case should also be labelled. The use case is not to clarify how to use a certain feature, and detailed sequence diagrams are not needed for a use case. The use case is to describe what are the benefits of the capability, what it is good for. High level diagrams including sequence diagrams may still be included if needed in order to better describe the use cases and motivate the corresponding requirements.\nThe format of the use case label is UC-xx-yy, where xx represents the abbreviation of the management capability name, yy is the serial number under the corresponding management capability category.\nX.a.3\t\t Requirements\nFor production of the contents of this subclause, describe the management capability requirements which are exposed to the consumer. Each requirement shall have a requirement label.\nThe format of the requirement label is REQ-xx-yy-zz, where xx is a unique abbreviation of the service/function, yy is MC (Management Capability) and zz is the serial number under the corresponding management capability category.\nAll requirements shall be motivated by either a use case or a textual motivation (also figures are allowed).\n\n",
                    "tables": [
                        {
                            "description": "",
                            "table number": 1,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "5\tManagement service template (stage 2)",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "5.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "5.1.1\tGeneral",
                            "text_content": "The present document contains the templates to be used, for the production of all Management Service (MnS) specifications.\nClause 5.2 is applicable for specification of MnS component type B (NRM).\nClause 5.3 is applicable for specification of MnS component type A (operations and notifications) and type C (alarm and performance information).\nThe MnS template uses qualifiers M, O, CM, CO and C. The semantics of these qualifiers are defined in [3].\nThe MnS template uses type definition as one characteristic to describe class attributes and operation/notification parameters. The valid type definitions that can be used and their semantics are defined in [3].\nUsage of fonts for the specific cases of class/attribute names etc., in addition to the general font requirements in the 3GPP drafting rules in 3GPP TR 21.801 [5], shall be according to the following table.\nTable 5.1.1-1\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 5.1.1-1",
                                    "table number": 2,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "5.1.2\tManagement service components",
                            "text_content": "A management service combines elements of management service components type A, B and C [1].\nThe template for NRM, see clause 5.2, applies to the specification of management service component type B.\nThe template for the Management service operations and notifications, see clause 5.3, applies to the specification of type A and type C.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "5.2\tTemplate for NRM",
                    "description": "",
                    "summary": "",
                    "text_content": "\nW4\t\tModel\nW4.1 \tImported and associated information entities\nW4.1.1\tImported information entities and local labels\nThis clause identifies a list of information entities (e.g. information object class, datatype, interface, attribute) that have been defined in other specifications and that are imported in the present (target) specification. All imported entities shall be treated as if they are defined locally in the target specification. One usage of import is for inheritance purpose.\nEach element of this list is a pair (label reference, local label). The label reference contains the name of the original specification where the information entity is defined, the information entity type and its name. The local label contains the name of the information entity that appears in the target specification, and the entity name in the local label shall be kept identical to the name defined in the original specification. The local label may then be used throughout the target specification instead of that which appears in the label reference.\nThis information is provided in a table. An example of such a table is given here below:\n\nW4.1.2\tAssociated information entities and local labels\nThis clause identifies a list of information entities (e.g. information object class, interface, attribute) that have been defined in other specifications and that are associated with the information entities defined in the present (target) specification. For the associated information entity, only its properties (e.g., DN (see TS 32.156 [3]), attribute (see TS 32.156 [3]) of an instance of the associated information entity) used as associated information needs to be supported locally in the target specification.\nEach element of this list is a pair (label reference, local label). The label reference contains the name of the original specification where the information entity is defined, the information entity type and its name. The local label contains the name of the information entity that appears in the target specification. The local label may then be used throughout the target specification instead of that which appears in the label reference.\nThis information is provided in a table. An example of such a table is given here below:\n\nW4.2\tClass diagram\nW4.2.1\tRelationships\nThis first set of diagrams represents all classes and datatypes defined in this MnS with all their relationships, including relationships with imported information entities (if any). These diagrams shall contain class cardinalities (for associations as well as containment relationships) and may also contain role names. These shall be UML compliant class diagrams (see also TS 32.156 [3]).\nCharacteristics (attributes, relationships) of imported information entities need not to be repeated in the diagrams. Allowable classes are specified in TS 32.156 [3].\nUse this as the first paragraph: \"This clause depicts the set of classes (e.g. IOCs) that encapsulates the information relevant for this MnS. This clause provides an overview of the relationships between relevant classes in UML. Subsequent clauses provide more detailed specification of various aspects of these classes.\"\nW4.2.2\tInheritance\nThis second set of diagrams represents the inheritance hierarchy of all classes defined in this specification. These diagrams do not need to contain the complete inheritance hierarchy but shall at least contain the parent classes of all classes defined in the present document. By default, a class inherits from the class \"top\".\nCharacteristics (attributes, relationships) of imported classes need not to be repeated in the diagrams.\nNOTE:\tsome inheritance relationships presented in clause W4.2.2 may be repeated in clause W4.2.1 to enhance readability.\nUse \"This subclause depicts the inheritance relationships.\" as the first paragraph.\nW4.3\tClass definitions\nEach class, with its stereotype name, is defined using the following structure.\nInherited items (attributes etc.) shall not be shown, as they are defined in the parent class(es) and thus valid for the subclass.\nW4.3.a\tClassName <<StereotypeName>>\nStereotypeName is mandatory to be included in the clause header, except for the stereotype Information Object Class, for which it shall not be included in the clause header.\nAn example of a Class is Subnetwork of stereotype Information Object Class. The heading of sub-clause W4.3.a for SubNetwork would look as follows:\nW4.3.a SubNetwork\nAn example of a Class is SliceProfile of stereotype data type. The heading of W4.3.a for SliceProfile would look as follows:\nW4.3.a SliceProfile <<dataType>>\nThe various stereotypes can be found in TS 32.156 [3].\nThe \"a\" represents a number, starting at 1 and increasing by 1 with each new definition of a class.\nW4.3.a.1\tDefinition\nThis clause is written in natural language. The <definition> clause refers to the class itself.\nClasses (and datatypes) have a lifecycleStatus property as defined by [3] clause 5.2.A. If and only if the lifecycleStatus is not current (its default value), that shall be indicated in this clause.\nOptionally, information on traceability back to one or more requirements supported by this class may be defined here, in the following form:\n\nW4.3.a.2\tAttributes\nThis clause presents the list of attributes, which are the manageable properties of the class. Each attribute is characterised by some of the attribute properties (see TS 32.156 [3]), i.e. supportQualifier (abbreviated by S), isReadable, isWritable, isInvariant and isNotifyable.\nThe legal values and their semantics for attribute properties are defined in TS 32.156 [3].\nThis information is provided in a table.\nAn example below indicates\n\nAnother example below indicates that the attribute password1 is not readable, is writable, is not an invariant and no notifyAttributeValueChange will be emitted when the attribute value is changed.\n\nAnother example below indicates that the attribute password2 and password1 (in example above) have the same qualifiers for the shown properties except that of isReadable. In the case of password1, the standard specification determines the qualifier to be M, i.e. it is readable. In the case of password2, the standard specification does not make a determination. The vendor would make the determination if the attribute is readable or not readable.\n\nIn case there is one or more attributes related to role (see clause 5.2.9 of TS 32.156 [3]), the attributes related to role shall be specified at the bottom of the table with a divider \"Attribute related to role\", as shown in the following example:\n\nThis clause shall state \"None.\" when there is no attribute to define.\nW4.3.a.3\tAttribute constraints\nThis clause presents constraints for the attributes, and one use is to present the predicates for conditional qualifiers (CM/CO).\nThis information is provided in a table. An example of such a table is given here below:\n\nAttributes have a lifecycleStatus property as defined by [3] clause 5.2.A. If and only if the lifecycleStatus is not current (its default value), that shall be indicated in this table.\nThis clause shall state \"None.\" when there is no attribute constraint to define.\nW4.3.a.4\tNotifications\nThis clause, for this class, presents one of the following options:\na)\tThe class defines (and independent from those inherited) the support of a set of notifications that is identical to that defined in clause W4.5. In such case, use \"The common notifications defined in clause W4.5 are valid for this class, without exceptions or additions.\" as the lone sentence of this clause.\nb)\tThe class defines (and independent from those inherited) the support of a set of notifications that is a superset of that defined in clause W4.5. In such case, use \"The common notifications defined in clause W4.5 are valid for this IOC. In addition, the following set of notification is also valid.\" as the lone paragraph of this clause. Then, define the ‘additional’ notifications in a table. See clause W4.5 for the notification table format.\nc)\tThe class defines (and independent from those inherited) the support of a set of notifications that is not identical to, nor a superset of, that defined in clause W4.5. In such case, use \"The common notifications defined in clause W4.5 are not valid for this IOC. The set of notifications defined in the following table is valid.\" as the lone paragraph of this clause. Specify the set of notifications in a table. See clause W4.5 for the notification table format.\nd)\tThe class does not define (and independent from those inherited) the support of any notification. In such case, use \"There is no notification defined.\" as the lone sentence of this clause.\nThe notifications identified (i.e. option-a, option-b and option-c above) in this clause are notifications that may be emitted by the MnS producer, where the \"object class\" and \"object instance\" parameters of the notification header (see note 2) of these notifications identifies an instance of the class (or its direct or indirect derived class) defined by the encapsulating clause (i.e. clause W4.3.a).\nThe notifications identified (i.e. option-a and option-b above) in this clause, may originate from implementation object(s) whose identifier may or may not be the same as that carried in the notification parameters \"object class\" and \"object instance\". Hence the identification of notifications in this clause does not imply nor identify those notifications as being originated from an instance of the class (or its direct or indirect derived class) defined by the encapsulating clause (i.e. clause W4.3.a).\nThis clause shall state \"This class does not support any notification.\" (see option-c) when there is no notification defined for this class. (Note that if its parent class has defined some notifications, the implementation of this class is capable of emitting those inherited defined notifications.)\nThe notification header is defined in TS 32.302 [8].\nThe qualifier of a notification, specified in Notification Table, indicates if an implementation may generate a notification carrying the DN of the subject class.\nAn MnS consumer may receive notification-XYZ that carries DN (the \"object class\" and \"object instance\") of class-ABC instance if and only if:\na)\tThe class-ABC Notification Table defines the notification-XYZ and\nb)\tThe class-ABC instance implementation supports this notification-XYZ and\nc)\tAn MnS defines the notification-XYZ and\nd)\tThe MnS implementation supports this notification-XYZ.\nW4.3.a.5\tState diagram\nThis subclause contains state diagrams. A state diagram of an information object class defines permitted states of this information object class and the transitions between those states. A state is expressed in terms of individual attribute values or a combination of attribute values or involvement in relationships of the information object class being defined. This shall be a UML compliant state diagram.\nThis subclause shall state \"None.\" when there is no State diagram defined.\nW4.5\tAttribute definitions\nW4.5.1\tAttribute properties\nIt has a lone paragraph \"The following table defines the properties of attributes that are specified in the present document. \".\nEach information attribute is defined using the following structure.\nInherited attributes shall not be shown, as they are defined in the parent class(es) and thus valid for this class.\nAn attribute has properties (see TS 32.156 [3]). Some properties of an attribute are defined in W4.3.a.2 (e.g. Support Qualifier). The remaining properties of an attribute (e.g. documentation, default value) are defined here.\nThe information is provided in a table. In case a) attributes of the same name are specified in more than one class and b) the attributes have different properties, then the attribute names (first column) should be prefixed with the class name followed by a period.\nAn example is given below:\n\nIn case there is one or more attributes related to role (see clause 5.2.9 of TS 32.156 [3]), the attributes related to role shall be specified at the bottom of the table with a divider \"Attribute related to role\". See example below.\n\nThis clause shall state \"None.\" if there is no attribute to define.\nW4.5.2\tConstraints\nThis clause indicates whether there are any constraints affecting attributes. Each constraint is defined by a triplet (propertyName, affectedAttributes, propertyDefinition). PropertyDefinitions are expressed in natural language.\nAn example is given here below:\nThis clause shall state \"None.\" if there is no constraint.\nW4.6\tCommon notifications\nThis clause presents notifications that may be referred to by any class defined in the specification. This information is provided in tables.\nW4.6.1\tAlarm notifications\nThe following quoted text shall be copied as the only paragraph of this clause.\n\"This clause presents a list of notifications, defined in TS 28.532 [12], that an MnS consumer may receive. The notification header attribute objectClass/objectInstance, defined in TS 28.541 [7], shall capture the DN of an instance of a class defined in the present document.\"\nThe information is provided in a table. The following is an example.\n\nW4.6.2\tConfiguration notifications\nThe following quoted text shall be copied as the only paragraph of this clause.\n\"This clause presents a list of notifications, defined in TS 28.532 [12], that an MnS consumer may receive. The notification header attribute objectClass/objectInstance, defined in TS 32.302 [8], shall capture the DN of an instance of a class defined in the present document.\"\nThe information is provided in a table. The following is an example.\n\nW4.6.3\tThreshold Crossing notifications\nThe following quoted text shall be copied as the only paragraph of this clause.\n\"This clause presents a list of notifications, defined in TS 28.532 [12], that an MnS consumer may receive. The notification header attribute objectClass/objectInstance, defined in TS 28.541 [7], shall capture the DN of an instance of a class defined in the present document.\"\nThe information is provided in a table. The following is an example.\n",
                    "tables": [
                        {
                            "description": "This information is provided in a table. An example of such a table is given here below:",
                            "table number": 3,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "This information is provided in a table. An example of such a table is given here below:",
                            "table number": 4,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "Optionally, information on traceability back to one or more requirements supported by this class may be defined here, in the following form:",
                            "table number": 5,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "An example below indicates",
                            "table number": 6,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "Another example below indicates that the attribute password1 is not readable, is writable, is not an invariant and no notifyAttributeValueChange will be emitted when the attribute value is changed.",
                            "table number": 7,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "Another example below indicates that the attribute password2 and password1 (in example above) have the same qualifiers for the shown properties except that of isReadable. In the case of password1, the standard specification determines the qualifier to be M, i.e. it is readable. In the case of password2, the standard specification does not make a determination. The vendor would make the determination if the attribute is readable or not readable.",
                            "table number": 8,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "In case there is one or more attributes related to role (see clause 5.2.9 of TS 32.156 [3]), the attributes related to role shall be specified at the bottom of the table with a divider \"Attribute related to role\", as shown in the following example:",
                            "table number": 9,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "This information is provided in a table. An example of such a table is given here below:",
                            "table number": 10,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "An example is given below:",
                            "table number": 11,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "In case there is one or more attributes related to role (see clause 5.2.9 of TS 32.156 [3]), the attributes related to role shall be specified at the bottom of the table with a divider \"Attribute related to role\". See example below.",
                            "table number": 12,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "An example is given here below:",
                            "table number": 13,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "The information is provided in a table. The following is an example.",
                            "table number": 14,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "The information is provided in a table. The following is an example.",
                            "table number": 15,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "The information is provided in a table. The following is an example.",
                            "table number": 16,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.3\tTemplate for Management service operations and notifications",
                    "description": "",
                    "summary": "",
                    "text_content": "\nY4\tOverview\nYb\tManagement service name\nManagement service name should be replaced with the name of the Management Service (MnS).\n\"b\" represents a number, starting at 1 and increasing by 1 with each new definition of a Management Service.\nYb.1\tOperations and notifications\nYb.1.a\tOperation OperationName\nOperationName is the name of the operation followed by a qualifier indicating whether the operation is Mandatory (M), Optional (O), Conditional-Mandatory (CM), Conditional-Optional (CO), or SS-Conditional (C).\n\"a\" represents a number, starting at 1 and increasing by 1 with each new definition of an operation.\nYb.1.a.1\tDefinition\nYb.1.a.1.1\tDescription\nThis subclause shall be written in natural language.\nOperations have a lifecycleStatus property as defined by [3] clause 5.2.A. If and only if the lifecycleStatus is not current (its default value), that shall be indicated in this subclause.\nInformation on traceability back to one or more requirements supported by this operation should also be defined here, in the following form:\n\nYb.1.a.1.2\tPre-condition\nA pre-condition is a collection of assertions joined by AND, OR, and NOT logical operators. The pre-condition shall be true before the operation is invoked. An example is given here below:\nnotificationCategoriesNotAllSubscribed OR notificationCategoriesParameterAbsentAndNotAllSubscribed\nEach assertion is defined by a pair (propertyName, propertyDefinition). All assertions constituting the pre-condition are provided in a table. An example of such a table is given here below:\n\nYb.1.a.1.3\tPost-condition\nA post-condition is a collection of assertions joined by AND, OR, and NOT logical operators. The post-condition shall be true after the completion of the operation. When nothing is said in a post-condition regarding an information entity, the assumption is that this information entity has not changed compared to what is stated in the\npre-condition. An example is given here below:\nsubscriptionDeleted OR allSubscriptionDeleted\nEach assertion is defined by a pair (propertyName, propertyDefinition). All assertions constituting the post-condition shall be provided in a table. An example of such a table is given here below:\n\nYb.1.a.1.4\tExceptions\nList of exceptions that can be raised by the operation. Each element shall be a tuple (exceptionName, condition, ReturnedInformation, exitState).\nYb.1.a.1.4.c\t\texceptionName\nExceptionName is the name of an exception.\n\"c\" represents a number, starting at 1 and increasing by 1 with each new definition of an exception.\nThis information shall be provided in a table. An example of such a table is given here below:\n\nNOTE: An example of an exception can be a situation where an operation is raised and the required information between a consumer and producer cannot be conveyed via the input and output parameters.\nYb.1.a.2\tInput parameters\nList of input parameters of the operation. Each element shall be a tuple (Parameter Name, Support Qualifier, Information Type (see [10] and note 1) and an optional list of Legal Values supported by the parameter, Comment). Legal Values for the Support Qualifier are: Mandatory (M), Optional (O), Conditional-Mandatory (CM), Conditional-Optional (CO), or SS-Conditional (C).\nThis information shall be provided in a table. An example of such a table is given here below:\n\nNOTE:\tInformation Type qualifies the parameter of Parameter Name. In the case where the Legal Values can be enumerated, each element is a pair (Legal Value Name, Legal Value Semantics), unless a Legal Value Semantics applies to several values in which case the definition can be provided only once. When the Legal Values cannot be enumerated, the list of Legal Values is defined by a single definition.\nYb.1.a.3\tOutput parameters\nList of output parameters of the operation. Each element tuple (Parameter Name, Support Qualifier, Matching Information / Information Type (see [10]) (Note 1) and an optional list of Legal Values supported by the parameter, Comment). Legal Values for the Support Qualifier are: Mandatory (M), Optional (O), Conditional-Mandatory (CM), Conditional-Optional (CO), or SS-Conditional (C).\nThis information shall be provided in a table. An example of such a table is given here below:\n\nNOTE: \tInformation Type qualifies the parameter of Parameter Name. In the case where the Legal Values can be enumerated, each element is a pair (Legal Value Name, Legal Value Semantics), unless a Legal Value Semantics applies to several values in which case the definition can be provided only once. When the Legal Values cannot be enumerated, the list of Legal Values is defined by a single definition.\nThis table shall also include a special parameter ’status’ to indicate the completion status of the operation (success, partial success, failure reason etc.).\nYb.1.a.4\tResult\nYb.1.a.4,1\tError messages\nThis subclause presents error messages in case the operation is not successful.\nThis subclause does not need to be present when there are no error messages to define.\nYb.1.a.4,2\tConstraints\nThis subclause presents constraints for the operation or its parameters.\nThis subclause does not need to be present when there are no constraints to define.\nYb.1.a\tNotification NotificationName\nNotificationName shall be the name of the notification followed by a qualifier indicating whether the notification is Mandatory (M), Optional (O), Conditional-Mandatory (CM), Conditional-Optional (CO) or SS-Conditional (C).\n\"a\" represents a number, starting at 1 and increasing by 1 with each new definition of a notification.\nYb.1.a.1\tDefinition\nThis subclause shall be written in natural language.\nNotifications have a lifecycleStatus property as defined by [3] clause 5.2.A. If and only if the lifecycleStatus is not current (its default value), that shall be indicated in this subclause.\nInformation on traceability back to one or more requirements supported by this notification should also be defined here, in the following form:\n\nYb.1.a.2\tInput parameters\nList of input parameters of the notification. Each element is a tuple (Parameter Name, Qualifiers, Matching Information / Information Type (see [10]) (Note 1) and an optional list of Legal Values supported by the parameter, Comment).\nThe column \"Qualifiers\" contains the two qualifiers, Support Qualifier and Filtering Qualifier, separated by a comma. The Support Qualifier indicates whether the attribute is Mandatory (M), Optional (O), Conditional-Mandatory (CM), Conditional-Optional (CO), or SS-Conditional (C).\nThis information shall be provided in a table. An example of such a table is given here below:\n\nNOTE:\tInformation Type qualifies the parameter of Parameter Name. In the case where the Legal Values can be enumerated, each element is a pair (Legal Value Name, Legal Value Semantics), unless a Legal Value Semantics applies to several values in which case the definition can be provided only once. When the Legal Values cannot be enumerated, the list of Legal Values is defined by a single definition.\nYb.1.a.3\tTriggering event\nThe triggering event for the notification to be sent is the transition from the information state defined by the \"from state\" subclause to the information state defined by the \"to state\" subclause.\nYb.1.a.3.1\t\tFrom state\nThis subclause is a collection of assertions joined by AND, OR, and NOT logical operators. An example is given here below:\nalarmMatched AND alarmInformationNotCleared\nEach assertion is defined by a pair (propertyName, propertyDefinition). All assertions constituting the state \"from state\" are provided in a table. An example of such a table is given here below:\n\nYb.1.a.3.2\t\tTo state\nThis subclause contains a collection of assertions joined by AND, OR and NOT logical operators. When nothing is said in a to-state regarding an information entity, the assumption is that this information entity has not changed compared to what is stated in the from-state. An example is given here below:\nresetAcknowledgementInformation AND perceivedSeverityUpdated\nEach assertion is defined by a pair (propertyName, propertyDefinition). All assertions constituting the state \"to state\" are provided in a table. An example of such a table is given here below:\n\nYb.2\tManaged information\n",
                    "tables": [
                        {
                            "description": "Information on traceability back to one or more requirements supported by this operation should also be defined here, in the following form:",
                            "table number": 17,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "Each assertion is defined by a pair (propertyName, propertyDefinition). All assertions constituting the pre-condition are provided in a table. An example of such a table is given here below:",
                            "table number": 18,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "Each assertion is defined by a pair (propertyName, propertyDefinition). All assertions constituting the post-condition shall be provided in a table. An example of such a table is given here below:",
                            "table number": 19,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "This information shall be provided in a table. An example of such a table is given here below:",
                            "table number": 20,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "This information shall be provided in a table. An example of such a table is given here below:",
                            "table number": 21,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "This information shall be provided in a table. An example of such a table is given here below:",
                            "table number": 22,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "Information on traceability back to one or more requirements supported by this notification should also be defined here, in the following form:",
                            "table number": 23,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "This information shall be provided in a table. An example of such a table is given here below:",
                            "table number": 24,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "Each assertion is defined by a pair (propertyName, propertyDefinition). All assertions constituting the state \"from state\" are provided in a table. An example of such a table is given here below:",
                            "table number": 25,
                            "summary": "",
                            "name": ""
                        },
                        {
                            "description": "Each assertion is defined by a pair (propertyName, propertyDefinition). All assertions constituting the state \"to state\" are provided in a table. An example of such a table is given here below:",
                            "table number": 26,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "6\tNRM Stage 3 definition rules",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "6.1\tMappings from stage 2 artefacts to stage 3 JSON schema",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.1.1\tUsage of JSON schema",
                            "text_content": "JSON schema is used to describe a set of valid schema documents sent over the wire in HTTP request and response messages of the ProvMnS. JSON schema does not describe the concrete implementation of the NRM on the producer.\nDefinitions are written in YAML.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.1.2\tConcrete NRM classes",
                            "text_content": "A NRM class (managed object class) is represented by a JSON object. The properties of the JSON object are the NRM class attributes and the name contained NRM classes.\n\nIn the following example the class contains an \"attributeA\" of type \"string\" and an \"attributeB\" of type \"number\".\n\nThe JSON object representing the class instance is preceded by a key equal to the class name.\nIn the following example the class name is \"classA\". Attributes are omitted for the sake of simplicity.\n\nMultiple managed object instances of the same class are represented using a JSON array, where each item of the array is a JSON object with a managed object class instance representation.\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "A NRM class (managed object class) is represented by a JSON object. The properties of the JSON object are the NRM class attributes and the name contained NRM classes.",
                                    "table number": 27,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In the following example the class contains an \"attributeA\" of type \"string\" and an \"attributeB\" of type \"number\".",
                                    "table number": 28,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In the following example the class name is \"classA\". Attributes are omitted for the sake of simplicity.",
                                    "table number": 29,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Multiple managed object instances of the same class are represented using a JSON array, where each item of the array is a JSON object with a managed object class instance representation.",
                                    "table number": 30,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.1.3\tAbstract classes",
                            "text_content": "Abstract classes shall be defined in a \"definitions\" object and referenced in the schema of the concrete class using the \"$ref\" keyword.\nIn the following example the abstract class can be instantiated zero or one time..\n\nIn the following example the abstract class can be instantiated zero or more times.\n\nAbstract classes can be defined as well in separate files. Assume a file with the name \"myDefs.json\" includes the \"definitions\" object with the definition of \"ClassA-Abstract \".\n\nThe definition of \"ClassA-Abstract\" is then referenced like\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "In the following example the abstract class can be instantiated zero or one time..",
                                    "table number": 31,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In the following example the abstract class can be instantiated zero or more times.",
                                    "table number": 32,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Abstract classes can be defined as well in separate files. Assume a file with the name \"myDefs.json\" includes the \"definitions\" object with the definition of \"ClassA-Abstract \".",
                                    "table number": 33,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The definition of \"ClassA-Abstract\" is then referenced like",
                                    "table number": 34,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.1.4\tName containment",
                            "text_content": "Name contained NRM class instances are modeled as property of the containing class. The name of the property is the class name. The value is an array with manged object class representations of that class. Cardinality of the name containment relationship is specified using the \"minItems\" and \"maxItems\" keywords.\nIf the maximum number of items is unbounded, the \"maxItems\" keyword shall be omitted. If the minimum number of items is 0, the \"minItems\" keyword can be omitted.\nThe contained class shall not be listed as required property. This allows omitting the property representing the contained class instances completely in a JSON document instead of having an empty array.\nIn the following example an instance of \"classA\" name contains 1…1000 instances of \"classB\".\n\nManaged objects class instances of more than one class can be name contained.\n\nThe contained managed object classes may be defined as abstract classes first, and then referenced.\n\nor, when the abstract class is defined as an array, then\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "In the following example an instance of \"classA\" name contains 1…1000 instances of \"classB\".",
                                    "table number": 35,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Managed objects class instances of more than one class can be name contained.",
                                    "table number": 36,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "The contained managed object classes may be defined as abstract classes first, and then referenced.",
                                    "table number": 37,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "or, when the abstract class is defined as an array, then",
                                    "table number": 38,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.1.5\tRecursive name containment",
                            "text_content": "Classes may name contain themselves. This shall be modeled in JSON schema with recursion. Recursion requires using a \"definitions\" object with the definition of an abstract class.\nIn the following example each instance of \"classA\" contains zero or one instance of \"classA\".\n\nIn the following example each instance of \"classA\" contains zero or more instances of \"classA\".\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "In the following example each instance of \"classA\" contains zero or one instance of \"classA\".",
                                    "table number": 39,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "In the following example each instance of \"classA\" contains zero or more instances of \"classA\".",
                                    "table number": 40,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.1.6\tInheritance",
                            "text_content": "JSON schema does not have the concept of inheritance. Inheritance can be emulated by the composition of schemas with the \"allOf\" keyword.\nIn the following example the attribute \"attrB\" is added to the attribute \"attrA\" of \"classA-Abstract\" to construct \"ClassB\".\n\nThe other possibility is to specify the inherited attribute directly along with the added attributes, thus having no inheritenace or any emulation thereof in NRM stage 3 definitions.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "In the following example the attribute \"attrB\" is added to the attribute \"attrA\" of \"classA-Abstract\" to construct \"ClassB\".",
                                    "table number": 41,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.1.7\tNRM class naming attribute \"id\"",
                            "text_content": "The naming attribute \"id\" is mapped to a required property of the class object, where the key is \"id\" and the type is \"string\".\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "The naming attribute \"id\" is mapped to a required property of the class object, where the key is \"id\" and the type is \"string\".",
                                    "table number": 42,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.1.8\tNRM class attributes",
                            "text_content": "NRM class attributes other than the naming attribute \"id\" shall be carried as properties in an \"attributes\" object.\n\nThe class attributes are name/value pairs (properties) of the \"attributes\" object.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "NRM class attributes other than the naming attribute \"id\" shall be carried as properties in an \"attributes\" object.",
                                    "table number": 43,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.1.9\tVendor specific extensions",
                            "text_content": "Vendor-specific attributes shall be added to standardized JSON schemas using the mechanism in clause 6.1.6 \"Inheritance\".\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.1.10\tAttribute support qualifier",
                            "text_content": "The attribute support qualifier is defined in clause 6 of TS 32.156 [3]. This qualifier specifies a requirement for the MnS producer.\nAttributes may or may not be present in a JSON document carried in a HTTP request or response message, no matter what their support qualifier in the NRM is. For this reason, no qualification is required for attributes in the JSON schema for NRMs. By default, the properties defined by the \"properties\" keyword are not required and can be omitted in a document instance.\nHowever, some attributes like the \"id\" naming attribute shall be always present when a managed object class instance is carried in a HTTP request or response. These attributes shall be listed as array items in the value of the \"required\" keyword.\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "However, some attributes like the \"id\" naming attribute shall be always present when a managed object class instance is carried in a HTTP request or response. These attributes shall be listed as array items in the value of the \"required\" keyword.",
                                    "table number": 44,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.1.11\tAttribute properties",
                            "text_content": "The attribute properties are defined in clause 5.2.1.1 of TS 32.156 [3]. They reflect properties of the attributes exhibited by the MnS producer. Their purpose is not to specify requirements for the attribute when transferred over the wire. For this reason, care should be taken when mapping attribute properties to JSON schema keywords.\nAttributes of scalar type with multiplicity equal to \"1\" are mapped to a name/value pair whose value is either a number, a string or one of the literal names false, null or true.\nAttributes of scalar type with nultiplicity bigger than \"1\" are mapped to a name/value pair whose value is a JSON array, and the array items are either a number, a string or one of the literal names false, null or true.\nAttributes of structured type with multiplicity equal to \"1\" are mapped to a single name/value pair whose value is a JSON object, whose properties are described by the structured data type.\nAttributes of structured type with multiplicity greater than \"1\" are mapped to a name/value pair whose value is a JSON array, and the items are JSON objects, whose properties are described by the structured data type.\nThe semantics of his attribute property is mapped to the \"uniqueItems\" keyword with a value set to true.\nproperties:\nflower:\ntype: array\nuniqueItems: true\nitems:\ntype: string\n\nThis attribute property is a requirement for the MnS producer and not mapped to any JSON schema keyword.\nThis attribute property is a requirement for the MnS producer and not mapped to any JSON schema keyword.\nNote: \tThe OpenApi Specification [14] defines the \"default\" keyword. This default value represents what would be assumed by the consumer of the input as the value of the schema if a value is not provided in the consumed JSON instance document. The sematics of default in the OpenApi Specification [14] is hence different from the semantics of default in TS 32.156 [3].\nThe semantics of this attribute property is mapped to the \"nullable\" keyword with a value set to true.\nExample:\nproperties:\nflower:\ntype: string\nnullable: true\nNote: \tThe \"nullable\" keyword is defined only in the OpenApi Specification [14]. JSON schema as defined in [15], [16], [17] does not specify this keyword.\nThis attribute property is a requirement for the MnS producer and not mapped to any JSON schema keyword.\nThe semantics of these properties are mapped to the \"readOnly\" and \"writeOnly\" keywords with the values set according to the following table. The default value of the \"readOnly\" and \"writeOnly\" keywords is boolean \"false\".\n\nIf \"writeOnly\" for an attribute has a value of boolean \"true\", it indicates that the attribute shall never be present in instance documents sent by the MnS producer to the MnS consumer.\nIf \"readOnly\" for an attribute has a value of boolean \"true\", it indicates that the attribute shall never be present in instance documents sent by the the MnS consumer to the MnS producer.\nExample:\nproperties:\nflower:\ntype: string\nreadOnly: true\nwriteOnly: false\nThis attribute property is a requirement for the MnS producer and not mapped to any JSON schema keyword.\nAllowed values for \"string\" are specified using the \"minLength\", \"maxLength\" and \"pattern\" keywords.\nAllowed values for \"number\" and \"integer\" are specified using the \"multipleOf\", \"maximum\", \"exclusiveMaximum\", \"minimum\" and \"exclusiveMinimum\" keywords.\nAllowed values of any type can be restricted by using the \"enum\" and \"const\" keywords.\nLifecycleStatus=current is the default case so it is not mapped to any JSON schema keyword.\nLifecycleStatus=deprecated shall be mapped the \"deprecated\" keyword with a value of true.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "The semantics of these properties are mapped to the \"readOnly\" and \"writeOnly\" keywords with the values set according to the following table. The default value of the \"readOnly\" and \"writeOnly\" keywords is boolean \"false\".",
                                    "table number": 45,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                },
                {
                    "title": "6.2\tStage 3 YANG style and example",
                    "description": "",
                    "summary": "",
                    "text_content": "The next clause defines general rules for YANG modules. The following clauses specify how specific Stage to constructs should be mapped to YANG.  Each clause may include the following clauses:\n-\tThe clause of Reference [3] for which mapping is specified.\n-\tAn example model that will be mapped.\n-\tMapping rules.\n-\tAn example of the resulting YANG statements.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.2.1\tGeneral Modeling Rules",
                            "text_content": "Resources shall be modeled as YANG data nodes (leaf, leaf-list, container, list) instead of Classes and Attributes. Specific operations shall be modelled as YANG actions.\nThe names of 3GPP YANG modules shall start with the \"_3gpp\" prefix.\nThe namespace of a 3GPP YANG module's namespace shall have the following form:\nurn:3gpp:saX:<module-name>\n\nsaX denotes the group creating the relevant YANG model e.g. \"sa5\"\nReference:  [11].\n3GPP YANG Modules shall use prefixes ending with \"3gpp\". Prefixes should be short preferably not longer than 10 characters but 13 characters at most.\ne.g. prefix nrmtype -> prefix nrmtype3gpp\nNote: \tTo ensure that the prefix (in the yang prefix statement) is globally unique a prefix-suffix is used. While global uniqueness of prefixes is not mandatory most SW implementations have problems and need workarounds in case conflicting prefixes are found.\nYANG version 1.1 shall be used. See [18].\nThe following YANG constructs shall not be used in 3GPP YANG models as they are not available in the Stage 2 modeling terminology, thus not needed.\n-\tanyxml\n-\trpc – use actions instead\n-\tdeviation\nThe following YANG statements should not be used in 3GPP YANG models:\n-\tanydata. \tWhenever possible data should be modeled with list, leaf-list, leaf data nodes. In the rare case where the type of an attribute is unknown (E.g., a an attribute that can be of any attribute type) the YANG “anyadata” statement may be used.\nWhenever there is a suitable existing standard from another standard organization or industry forum its usage should be preferred before defining a 3GPP model covering the same scope.  E.g. ietf-types, ietf-inet-types\n3GPP models shall link to and reference YANG models from other standard organizations/industry forum whenever applicable.\nVendors shall not modify 3GPP YANG modules either by changing the original file or by adding vendor specific YANG modules that contain deviations targeting parts of a 3GPP module. Only the following exceptions are allowed from the above rule:\n-\tDeviations that maintain backwards compatibility as defined in RFC 7950 [18] are allowed\n-\tMarking as \"not supported\" any model element that is optional to support as defined by the 3GPP stage 2 supportQualifier is allowed.\nVendors extensions to the model shall be done in separate YANG modules; they do not impact compliance.\n\nVendor extensions to the model should follow the IOC/attribute structure based on TS 32.156[3] and the mapping defined in clause 6.2 and its subclauses. Inheritance from abstract 3GPP IOCs (e.g. Top) is encouraged.\nExample 1 – Add a vendor specific attribute to a 3GPP specified IOC:\naugment /me3gpp:ManagedElement/attributes {\nleaf isCabinetClosed {\ntype boolean ;\ndescription “Indicates whether the doors of the HW cabinet is closed.” ;\n}\n}\n\nExample 2 – Add a vendor specific IOC:\n//vendor class\ngrouping VendorClassGrp {\n// contains all attributes\nleaf exampleAttribute {\ntype string;\ndescription vendorMarker;\n}\n}\n\naugment /me3gpp:ManagedElement {\nlist VendorClass {\nkey id;\nuses top3gpp:Top_Grp;\ncontainer attributes {\nuses VendorClassGrp ;\n}\n//YANG lists representing contained classes\n}\n}\n3GPP YANG modules shall be checked with the pyang tool. See: PYANG an extensible YANG validator and converter [x].\nThe \"pyang –-strict\" command shall be run with no errors returned.\n\"pyang —lint\" should also be run against all 3GPP YANG modules. Errors and warning produced by the \"pyang –lint\" checks should be removed. However, as these errors/warnings do not affect the corretness or functionality of the YANG module, and in some cases the changes needed to remove them would actually degrade readability, it is not a required to remove the errors/warnings produced by the \"pyang –lint\".\nIf a module’s text is included in a technical specification, each YANG module shall be contained in a separate clause. The clause’s title shall not include the revision date of the module.\nTo facilitate automatic code extraction from the MS Word specification:\n-\tImmediately before the first line of a YANG module/submodule a line should be inserted containing only the text\n<CODE BEGINS>\n-\tthe module’s first statement shall start with the keyword \"module\" (or submodule) in the first place (no whitespace allowed before it on the line).\n-\tfollowed by a single space.\n-\tfollowed by the name of the module/submodule.\n-\tfollowed by a single space and an opening curly bracket \"{\".\n-\tAll following lines shall be indented at least with two spaces.\n-\tthe last line of the module shall be a single “}” without any characters before or after it  (especially no white space before it)\n-\tImmediately after the last line of a YANG module/submodule a line should be inserted containing only the text\n<CODE ENDS>\nA module’s organization and description statements shall be present. The organization shall include the string \"3GPP\".\nA module shall contain the following contact statement:\ncontact \"https://www.3gpp.org/DynaReport/TSG-WG--S5--officials.htm?Itemid=464;\"\n\nA \"description\" statement should be present for each YANG schema node. As an exception: for individual leafs, leaf-lists, enums, case statements, typedef statements, where the schema node’s name describes the node sufficiently, the \"description\" may be omitted.\nA \"reference\"substatement to the module statement shall be present that specifies the technical specification where the YANG module is defined. In order to easily list with a “grep” command YANG modules belonging to a specific technical specification, the format of the first line of this reference statement shall start exactly with:\n-\tnew-line followed by\n-\tthe string ‘  reference ”3GPP TS ‘\n(that is  2 leading spaces + reference + 1  space + a double quote + 3GPP TS + 1 more space) followed by\n-\tthe number of the technical specification.\nE.g.\"  reference \"3GPP TS 28.622\".\nA separate \"revision\" statement shall be present for each published version of a module. The revision statement shall contain a reference substatement listing the numbers of all 3GPP change requests and any other documents that resulted in the creation of the new revision.\nExample:\nrevision 1956-10-13 {\nreference “CR-0258, CR-0267”;}\n\n\nNOTE:\tVoid.\nIf multiple change requests modify the new revision of  a YANG module, the content of the reference substatements should be merged.\nIn order to avoid reusing the same revision date in multiple releases the revision date shall be set as follows. Instead of setting the exact revision date when the module was last edited, the date nearest to that day that is not in the future and that follows the rule below should be used.\nWhen divided by 6, the day in the date should have the same remainder as the the release number: (DAY modulo 6 == releaseNumber modulo 6).\nExamples:\n- Release 17 modulo 6 is 5 ; so day numbers 5, 11, 17, 23, 29 are acceptable while days e.g., 2 or 7 are not.\n- Release 18 modulo 6 is 0 ; so day numbers 6, 12, 18, 24, 30 are acceptable while days e.g., 8 or 31 are not.\nYANG statements config, mandatory, max-elements, min-elements, ordered-by, status, yin-element have a specific meaning even if they are absent.  The default meaning for these statements should not be explicitly declared in a YANG Module.\nE.g. if the mandatory statement is missing that is equivalent to the situation where \"mandatory false\" is specified; it does not change the meaning of the YANG module, it just makes it longer.\nYANG modules are part of the end-user documentation so to enhance readability the following guidelines should be followed. The guidelines are important as YANG files are often compared and processed as simple text files by SW tools.\n-\tYANG modules should not contain lines longer then 80 characters. (YANG files are often read by the end-users as-is, and reading files with long lines is problematic.)\n-\tA line in a YANG should not contain whitespace (space, tab) immediately before the end of a line or at the end of the file after the last non-blank line. Additional whitespace will confuse tooling when comparing different versions of the YAM.\n-\tInstead of tabs consecutive spaces (a.k.a. soft-tabs) should be used. As different editors use different length tabs (2,4,8 characters long) the indentation of the module might  become messed up. Using mixed indentation (both hard-tabs and spaces) is especially problematic.\n-\tIn order to avoid long lines the normal indentation should be 2 spaces.\n-\tYANG files should not use characters outside the US-ASCII character set unless there is a specific need for it.\n-\tEnd-of-line separator SHALL use only a single Newline without a Carriage-Return character.\nThe prefix substatement under an import statement shall use the same prefix value, that the imported module declared in it’s prefix substatement under it’s module statement.\nAll YANG schema nodes and identifiers that are a direct mapping from the stage 2 specifications (including leafs, leaf-list, containers, lists, enumerations, enums, typedefs) shall have the exact same name as used in stage 2 definitions except if\n- stage 2 name violates the allowed naming rules of the YANG language as defined in RFC7950 [18] section 6.2.\n- Specified otherwise in the present document.\nAll YANG modules and submodules shall contain a copyright notice at the end of the module’s/submodule’s  description statement.\nStandard text is: \"Copyright 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC) <Year>. All rights reserved.\"\n<Year> SHALL be an interval (e.g. 2012-2017) including the year of the file’s creation and last modification or a single 4 digit year if the file was only created/modified in a single year.\nExamples:\nCopyright 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC) 2023. All rights reserved.\nCopyright 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC) 2021-2023. All rights reserved.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.2\tInformationObjectClass – abstract",
                            "text_content": "Reference [3] clause 5.4.2\nAn abstract class shall be mapped to a \"grouping\". The name of the \"grouping\" will be <IocName>Grp. The \"grouping\" shall contain all attributes of the class. The naming attribute shall only be contained as a YANG comment, because all other attributes will be contained in a YANG \"non-presence container\" named \"attributes\", however the \"key leaf\" is contained immediately by the \"list\", it cannot be inside a child \"container\".\n// abstract class MyClass_\ngrouping MyClass_Grp {\n// contains all contained attributes\n// the leaf of the namingAttribute is either not included or\n// included only as a comment not as a real definition\n\n// leaf id {\n//   type string;\n//   description \"naming attribute of the IOC\";\n// }\nleaf attribute1 {..}\nleaf-list attribute2 {..}\n}\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.3\tNaming attribute",
                            "text_content": "Reference [3] clause 3.1\nThe \"leaf\" that is mapped from the naming attribute shall be used in the YANG \"key\" statement. This is usually called \"id\" as defined in the Top_ class in TS 28.620 Umbrella Information Model (UIM), clause 4.3.8.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.4\tInformationObjectClass – concrete",
                            "text_content": "Reference [3] clause 5.3.2\nA concrete class shall be mapped to a \"list\" that \"uses\" a \"grouping\". The \"grouping\" shall be named <IocName>Grp. It shall contain all attributes of the class in the same manner as the \"grouping\" for an abstract class. The \"list\" shall be named <IocName>. The NamingAttribute shall be used as a key. All other attributes shall be placed inside a \"container\" named \"attributes\". The \"container attributes\" will facilitate asking for all attributes of an object instance with a simple subtree or XPath filter.\n//concrete class\ngrouping MyConcreteClassGrp {\n// contains all attributes in the same manner as\n//   a grouping for  abstract class\n}\n\nlist MyConcreteClass {\nkey namingAttribute;  // usually named ‘id’\nleaf namingAttribute {…}\ncontainer attributes {\nuses MyConcreteClassGrp ;\n}\n//YANG lists representing contained classes\n}\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.5\tGeneralization relationship - inheritance from another class",
                            "text_content": "Reference [3] clause 5.2.5\nExample model: Class MyManagedFunction inherits from class ManagedFunction.\nGeneralization/Inheritance relationships are mapped to the inheriting class using the \"grouping\" of the inherited class in its own \"grouping\".\n// Inheritance\n\ngrouping ManagedFunctionGrp {\n// Attributes  of ManagedFunction\n}\n\ngrouping MyManagedFunctionGrp {\nuses ManagedFunctionGrp;\n//additional attributes\n}\n\nlist MyManagedFunction {\nkey id;\nleaf id {}\ncontainer attributes {\nuses MyManagedFunctionGrp;\n}\n}\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.6\tName containment",
                            "text_content": "Reference [3] clause 5.2.4 - Composite aggregation association relationship\nExample model: The classes ParentClass and LocalChildClass are defined in the YANG module _3gpp-ParentClass. ParentClass name-contains LocalChildClass. Another YANG module (_3gpp-ChildClass) defines classes ChildClass1 and ChildClass2. ParentClass name-contains ChildClass1 and ChildClass2.\nAs on Stage 2 all name-containment is optional, an if-feature statement should be added under “list”, “uses” or “augment” statements modeling name-containment.  However, if a YANG module models only a single containment relationship, which is modeled by an augment statement, the if-feature statement is not needed, as the optionality is modeled with the implementation or the non-implementation of the module.\nThe YANG feature should be named <Child>Under<ParentIocName>  . The <Child> section is usually not the name of a specific class, but some name identifying a collection of child classes. The feature statement should be placed in the YANG module where it is used.\nEven if a containment relationship (and the contained IOC) is marked as not supported by the YANG feature, any imported but not implemented YANG modules still need to be present in the product with a conformance statement import-only.(See RFC 8525 [19] conformance-type indicated either by leaf conformance-type or by placing the module under the import-only-module list).. This should not be a problem for implementers as real implementation is not needed, only the YANG files need to be present.\n\nThe containment of classes defined in the same YANG module is mapped as embedded \"lists\".\nContainment of classes defined in different YANG modules can be mapped in one of two ways.\nContainment is mapped using the \"augment\" statement. This is the preferred method.\n// Class containment\nmodule _3gpp-ParentClass {\nfeature LocalChildClassUnderParentClass {\ndescription “Indicates that LocalChildClass is contained under ParentClass”;\n}\n\ngrouping LocalChildClassGrp {\n// LocalChildClass attributes\n}\ngrouping ParentClassGrp {\n// ParentClass attributes\n}\n\nlist ParentClass {\nkey id;\nleaf id {}\nattributes {\nuse ParentClassGrp;\n}\n\nlist LocalChildClass {\nif-feature LocalChildClassUnderParentClass ;\nkey id;\nleaf id {}\nattributes {\nuses LocalChildClassGrp;\n}\n}\n// place to insert/augment child classes\n}\n}\n\nmodule _3gpp-ChildClass {\nimport _3gpp-ParentClass { prefix xx3gpp;}\n\nfeature ChildClass1UnderParentClass {\ndescription “Indicates that ChildClass1 is contained under\nParentClass”;\n}\nfeature ChildClass2UnderParentClass {\ndescription “Indicates that ChildClass2 is contained under\nParentClass”;\n}\n\ngrouping ChildClass1Grp {\n// ChildClass1Grp attributes\n}\n\ngrouping ChildClass2Grp {\n// ChildClass2Grp attribute\n}\n\naugment /xx3gpp:ParentClass {\nif-feature ChildClass1UnderParentClass;\nlist ChildClass1 {\nkey id;\nleaf id {}\nattributes {\nuses ChildClass1Grp;\n}\n}\n}\naugment /xx3gpp:ParentClass {\nif-feature ChildClass2UnderParentClass;\nlist ChildClass2 {\nkey id;\nleaf id {}\nattributes {\nuses ChildClass2Grp;\n}\n}\n}\n}\nContainment is mapped using the \"uses\" statement towards a subtree grouping that contains the lists representing the child IOCs; e.g. ParentClass contains ChildClass1 and ChildClass2. This method is recommended when a group of multiple classes is contained together in a number of other classes. In this case optionality is handled on the common subtree level. (The subtree may actually be a group of classes or multiple trees.)\n// Class containment\nmodule _3gpp-ParentClass {\nimport _3gpp-ChildClass { prefix yyy3gpp; }\n\nfeature CommonUnderParentClass {\ndescription \"Indicates that the CommonSubtree shall be contained\nunder ParentClass\";\n}\n\nfeature LocalChildClassUnderParentClass {\ndescription “Indicates that LocalChildClass is contained under\nParentClass”;\n}\n\ngrouping LocalChildClassGrp {\n// LocalChildClass attributes\n}\n\ngrouping ParentClassGrp {\n// ParentClass attributes\n}\n\nlist ParentClass {\nkey id;\nleaf id {}\nattributes {\nuse ParentClassGrp;\n}\nlist LocalChildClass {\nif-feature LocalChildClassUnderParentClass ;\nkey id;\nleaf id {}\nattributes {\nuses LocalChildClassGrp;\n}\n}\nuses yyy3gpp:CommonSubtree {\nif-feature CommonUnderParentClass ;\n}\n}\n}\n\nmodule _3gpp-ChildClass {\ngrouping ChildClass1Grp {\n// ChildClass1Grp attributes\n}\n\ngrouping ChildClass2Grp {\n// ChildClass2Grp attributes\n}\n\ngrouping CommonSubtree {\nlist ChildClass1 {\nkey id;\nleaf id {}\nattributes {\nuses ChildClass1Grp;\n}\n}\nlist ChildClass2 {\nkey id;\nleaf id {}\nattributes {\nuses ChildClass2Grp;\n}\n}\n}\n}\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.7\tRecursive containment - reference based solution",
                            "text_content": "The NRM information object class stage 2 definition contains one case where a class contains itself (so called recursive containment): the It is the SubNetwork class.\nThe name containment that a class has with itself in the stage 2 definition shall be modeled using a pair of \"leaf-list\" references between the instances of the class. The references shall be named \"leaf-list parents {…}\" and \"leaf-list containedChildren {…}\". Note the 2 reference \"leaf-lists\" should be defined directly under the \"list\" defining the class not in its \"grouping\" because the \"path\" statements are specific to each class, so the \"leaf-lists\" must not be inherited.\nlist SubNetwork {\nkey id;\nleaf id {..}\n\ncontainer attributes {\nuses SubNetworkGrp;\nleaf-list parents {\ndescription \"Reference to all containg SubNetwork instances\nin strict order from the root subnetwork down to the immediate\nparent subnetwork.\nIf subnetworks form a containment hierarchy this is\nmodeled using references between the child SubNetwork and the parent\nSubNetworks.\nThis reference MUST NOT be present for the top level SubNetwork and\nMUST be present for other SubNetworks.\";\ntype leafref {\npath \"../../../SubNetwork/id\";\n}\n}\n\nleaf-list containedChildren{\ndescription \"Reference to all directly contained SubNetwork instances.\nIf subnetworks form a containment hierarchy this is\nmodeled using references between the child SubNetwork and the parent\nSubNetwork.\";\ntype leafref {\npath \"../../../SubNetwork/id\";\n}\n}\n}\n\n\nThe following instance data example shows how the reference values specify the SubNetwork hierarchy:\nTop level:  subnet=root\n| \\   +----------------+\n|  +--------+          |\n|           |          |\nLevel 1:    subnet=A1    subnet=B1   subnet=C1\n| \\   +----------------+\n|  +--------+          |\n|           |          |\nLevel 2:    subnet=A2    subnet=B2   subnet=C2\n| \\   +----------------+\n|  +--------+          |\n|           |          |\nLevel 3:    subnet=A3    subnet=B3   subnet=C3\n\nTop level: id=root        parents=null         containedChildren= A1,B1,C1\nLevel 1:   id=A1,(B1,C1)  parents=root         containedChildren = A2,B2,C2\nLevel 2:   id=A2,(B2,C2)  parents=root,A1      containedChildren = A3,B3,C3\nLevel 3:   id=A3,(B3,C3)  parents=root,A1,A2   containedChildren = A4,B4\n\nWhen reading/writing self-contained classes only the last such class instance needs to be specified in the Netconf request as that uniquely identifies the exact instance. The following Netconf request could be used to retrieve all attributes of SubNetwork=root, SubNetwork=A1, SubNetwork=B2, NRFrequency=22\n<rpc message-id=\"101\" xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n<get-config>\n<source>\n<running/>\n</source>\n<!-- SubNetwork=root, SubNetwork=A1, SubNetwork=B2, NRFrequency=22 -->\n<filter type=\"subtree\"/>\n<SubNetwork>\n<id>B2</id>\n<NRFrequency>\n<id>22</>\n<attributes/>\n</NRFrequency>\n</SubNetwork>\n</get-config>\n</rpc>\n\nThere is no need to specify the ancestors SubNetwork=root, SubNetwork=A1 as any subNetwork can be addressed directly.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.8\tMulti-root management tree",
                            "text_content": "YANG supports multi-rooted managed models natively; the standardized IETF models have many root \"list\"/\"container\" nodes.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.9\tAlternative containment",
                            "text_content": "Stage 2 models allows multiple different name-containment hierarchies. A particular name-containment hierarchy implemented by a specific vendor/product can be discovered in run-time, by reading the content of the ietf-yang-library and the ietf-yang-schema mount modules.\nYANG provides multiple possible methods to model alternative containment hierarchies.\nIn cases where the number of YANG modules affected by the alternative containment is small, the use of a feature-controlled augmentation is proposed.\naugment \"/SubNetwork\" {\nif-feature ExternalsUnderSubNetwork ;\nuses ExternalNRCellCUWrapper;\n}\nIn cases where the number of YANG modules affected by the alternative containment is large (cca. more than 8), the following mapping is proposed (using the optional containment of SubNetwork and ManagedElement as an example):\n-\tIf the ManagedElement is a root class, no further documentation or implementation steps are required.\n- \tIf the ManagedElement shall be contained under Subnetwork it shall be mounted under the SubNetwork \"list\" using the YANG schema mount mechanism as described in RFC 8528 [13].\nMounted schemas will appear in Netconf, the CLI and management GUIs as if they were part of a common containment hierarchy.\nYang Schema Mount provides vendor the flexibility of arranging the containment tree in accordance of operator intention, and provides a way for a consumer to discover the actual mount and containment hierarchy in run-time.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.10\tAttribute – simple, single value",
                            "text_content": "Reference TS 32.156 [3] clause 5.2.1\nThe multiplicity of the attribute is either 0..1 or 1..1.\nNon-structured single value attributes are mapped to a \"leaf\".\n// attribute single value, nonstructured\nleaf myAttribute { type xxx; }\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.11\tAttribute – simple, multivalue",
                            "text_content": "Reference [3] clause 5.2.1\nThe multiplicity of the attribute may be greater than 1.\nIf the attribute is isUnique=true it shall be mapped mapped to a leaf-list.\nIf the attribute is isUnique=false it shall be mapped to a list with an additional dummy index. The name of the list shall be <attributeName>Wrap. The name of the dummyIndex shall be idx and shall have a type uint32 or uint64.\n// Attribute multivalue, non-structured\n\n// attribute is unique\nleaf-list mySimpleMultivalueAttribute1 { type xxx; }\n\n// attribute is non-unique\nlist mySimpleMultivalueAttribute2Wrap {\nkey idx;\nleaf idx { type uint32 ; }\nleaf mySimpleMultivalueAttribute2 {type xxx;}\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.12\tAttribute, structured",
                            "text_content": "Reference TS 32.156 [3] clause 5.2.1\nStructured attributes are mapped to a grouping containing member parts; and a list using the grouping. (Structured attributes that are not used in multiple places may define the member parts directly in the list.)\n// attribute, structured, isUnique=true\ngrouping pLMNIdGrp {\ndescription \"PLMN-Id= Mobile Country Codes (MCC) &\nMobile Network Codes(MNC)\";\nleaf MCC {\ntype t_mcc;\n}\nleaf MNC {\ntype t_mnc;\n}\n}\n\nlist pLMNIdList {\nkey \"MCC MNC\";\nconfig true;\ndescription \"a list of PLMN-Ids\";\nordered-by user;\nuses pLMNIdGrp;\n}\n\n\n// attribute, structured, isUnique=false\nlist pLMNIdList {\nkey \"idx\";\nleaf idx { type uint32 ; };\nleaf member1 { type xxx ; }\nleaf member2 { type yyy ; }\n}\n\nYANG keys for the list shall be selected according to the following steps:\n1)\tIf the attribute is isUnique=true and according to the descriptions of the sub-attributes, one or a combination of some subattributes are unique, and all these subattributes are mandatory, these subattribute(s) should be used as key(s) in YANG. (Note only mandatory subattributes should be considered for keys as declaring a subattribute a key makes it mandatory in YANG.)\n2)\tIf suitable key(s) cannot be found in step 1, an additional dummy index shall be defined in YANG. The name of the dummyIndex shall be “idx” and shall have a type uint32 or uint64. The dummy key \"idx\" usually does not appear on stage 2.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.13\tdefaultValue",
                            "text_content": "Reference TS 32.156 [3] clause 5.2.1.1.\nThe 3GPP/UML defaultValue has a different meaning then the YANG \"default\" statement.\nThe 3GPP defaultValue could be considered an initialValue as it has effect only at object creation. If the attribute is later deleted the 3GPP defaultValue has no effect. In YANG the \"default\" is always used whenever a leaf/leaf-list does not have a value: both at creation of the parent object and if the leaf/leaf-list is deleted (set to null in 3GPP operation).\nNote: \tVoid\nThe 3GPP defaultValue, isNullable and multiplicity properties cannot be mapped one-to-one into YANG statements. A combination of these three stage 2 input properties shall result in a combination of the four YANG statements mandatory, min-elements, default,and yext3gpp:initial-value (defined in the YANG module _3gpp-common-yang-extensions.yang). The table below describes the combinations of input properties and the resulting YANG statements.\n\nYANG mandatory indicates that the leaf shall have a “mandatory true;” substatement.\nYANG min-elements > 0 indicates that the list or leaf-list shall have a “min-elements” substatement that has an argument that is greater than zero.\nYANG default indicates that the leaf shall have a “default” substatement.\nYANG initial-value indicates that the leaf should have a “yext3gpp:initial-value” substatement.\nYANG \"default\" and \"initial-value\" statements are only used for simple attributes. For structured attributes describe the default in the YANG description. In some cases, the stage 2 default value is not defined as a specific value, but rather as a reference or defined in a human readable language. In these cases, the default value is described in the YANG description.\nYANG default or yext3gpp:initial-value statements shall be used as specified in the table in clause 6.2.13.1.\nNote 1: \tVoid\nNote 2: \tThe YANG extension statement yext3gpp:initial-value is not understood or enforced by standard YANG tools, it needs extra SW implementation.\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "The 3GPP defaultValue, isNullable and multiplicity properties cannot be mapped one-to-one into YANG statements. A combination of these three stage 2 input properties shall result in a combination of the four YANG statements mandatory, min-elements, default,and yext3gpp:initial-value (defined in the YANG module _3gpp-common-yang-extensions.yang). The table below describes the combinations of input properties and the resulting YANG statements.",
                                    "table number": 46,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.2.14\tmultiplicity and cardinality",
                            "text_content": "Reference TS 32.156 [3] clause 5.2.1.1\nReference TS 32.156 [3] clause 5.2.8\nYANG mandatory, or min-elements statements shall be used as specified in the table in clause 6.2.13.1.\nMultiplicity of attributes mapped to a list or leaf-list shall be mapped to the \"min-elements\" and \"max-elements\" YANG statements.\nCardinality for containment of classes shall be mapped to \"min-elements\" and \"max-elements\" on the list representing the child objects.\nCardinality for reference relationships shall be mapped to \"mandatory\", \"min-elements\" and \"max-elements\" on the reference attributes representing the reference.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.15\tisNullable",
                            "text_content": "Reference TS 32.156 [3] clause 5.2.1.1\nisNullable=false for attributes is not mapped to YANG. In this case the attribute’s multiplicity will dictate any YANG mandatory or min-elements statements. See table in clause 6.2.13.1.\nisNullable=true shall not be mapped to YANG, because isNullable=true makes the attribute optional to use, which is the default case in YANG, thus it should not be explicitly stated.\nA special case is an attribute that is mapped to a list or leaf-lists, is isNullable=true and has a minimum multiplicity greater than zero. In this case a \"must\" statement shall be added to the list/leaf-list forbidding any multiplicity values between 1 and the minimum multiplicity (but allowing zero and the minimum). See example below:\nlist nullableListWithMinimumMultiplicityOf5 {\nkey idx;\nmust ‘count(.) = 0 or count(.) >= 5’;\nleaf idx { type uint32 ; }\nleaf nonUniqueSingleValueAttribute [ type int32; };\nNote: \tVoid\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.16\tdataType",
                            "text_content": "Reference TS 32.156 [3] clause 5.3.4\nReference TS 32.156 [3] clause 5.4.3\nMapping for predefined datatypes shall be the following:\n-\tinteger -> One of the 8 YANG integer types\n-\tstring - > string\n-\tBoolean -> Boolean\n3GPP user-defined simple datatypes shall be mapped to the YANG \"typedef\" statement.\n3GPP user-defined structured datatypes shall be mapped to the YANG \"grouping\" statement with the name <typeName>Grp.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.17\tenumeration",
                            "text_content": "Reference TS 32.156 [3] clause 5.3.5\nThe 3GPP enumeration datatype shall be mapped to the YANG \"enumeration\" YANG type.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.18\tchoice",
                            "text_content": "Reference TS 32.156 [3] clause 5.3.6\nThe 3GPP choice stereotype shall be mapped to a Yang \"choice\" statement.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.19\tisInvariant on attribute",
                            "text_content": "Reference [TS 32.156 [3]   Model repertoire] clause 5.2.1.1\nAttributes with the property  isInvariant=true shall be  marked with the \"yext3gpp:inVariant\" extension defined in the YANG module _3gpp-common-yang-extensions.yang in 3GPP TS 28.623[20].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.20\tisReadable/isWritable",
                            "text_content": "Reference [TS 32.156 [3]  Model repertoire] clause 5.2.1.1\nisReadable=false attributes can not be represented in YANG.  Assumed not to be a problem. A YANG extension could be defined to handle it if needed.\nAttributes with the properties isReadable=true AND isWritable=false shall be mapped to YANG config=false leafs/leaf-lists/lists. As config=false is inherited down the containment tree, it should not be placed on each leaf, leaf-list, etc. once the containing list/container is marked config false;\nAttributes with the properties isReadable=true AND isWritable=true shall be mapped to YANG config=true leafs/leaf-lists/lists. \"config true;\" should not be explicitly declared as that is the default case.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.21\tisOrdered",
                            "text_content": "Reference [TS 32.156 [3]  Model repertoire] clause 5.2.1.1\nFor isWritable=true attributes the property isOrdered=true shall be mapped to the \"ordered-by user;\"  YANG statement. For isWritable=false attributes the isOrdered property shall be described in the description statement of the YANG leaf-list, list representing the attribute.\nNote: \tThe \"ordered-by user\" statement is ignored in YANG if the leaf-list or list is config=false.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.22\tisUnique",
                            "text_content": "Reference [TS 32.156 [3]  Model repertoire] clause 5.2.1.1\nThe property isUnique=True shall be mapped to the YANG \"unique\" statement. Leaf-list are always unique in YANG, no marking needed.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.23\tallowedValues",
                            "text_content": "Reference [TS 32.156 [3]  Model repertoire] clause 5.2.1.1\nFor attributes with a type=integer or a user-defined type based on integers allowedValues shall be mapped to a YANG \"range\" statement with specific values.\nFor attributes with a type=string or a user-defined type based on string allowedValues shall be mapped either to an enumerated YANG type or to a sting with alternatives defined using the YANG \"pattern\" statement.\nFor attributes with a type=enumeration or a user-defined type based on enumeration allowedValues shall be mapped to a YANG enumeration type restricted with YANG \"enum\" substatements. (https://tools.ietf.org/html/rfc7950#section-9.6.3)\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.24\tXor constraint",
                            "text_content": "Reference [TS 32.156 [3]  Model repertoire] clause 5.2.10\nModel elements with a Xor  constraint shall be mapped to the YANG \"choice\" statement.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.25\tProxyClass",
                            "text_content": "Reference [TS 32.156 [3]  Model repertoire] clause 5.3.1\nA proxyclass is not directly mapped to YANG. A proxyclass represents a number of specific classes. Attributes, links, methods (or operations), and interactions that are present in the proxyclass shall be modelled in the represented specific classes.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.26\tSupportQualifier",
                            "text_content": "Reference [3] clause 6 - Qualifiers\nSupportQualifier=M is the default case in YANG so it needs no mapping.\nSupportQualifier=O shall be mapped the same way as SupportQualifier=M. Just like in the other solution sets the supportQualifier shall not be directly visible in the 3GPP Stage 3 YANG model. The support is indicated the following way:\n-\tIf the vendor supports an optional item, there is no further modeling needed\n-\tIf the vendor does not support the optional item, it needs to create a separate vendor specific YANG module and include a “deviation” statement in it formally declaring the non-supported parts. A single YANG module may contain any number of deviations.  E.g.:\ndeviation /ManagedElement/attributes/optionalAttribute {deviate not-supported;}\n\nSupportQualifier=CO {if the item is not supported) is mapped the same way as a not supported SupportQualifier=O item.\nSupportQualifier=CM & CO (if item is supported) shall be mapped as a SupportQualifier=M item, also considering the following:\n-\tif the condition can be expressed with XPATH, an additional \"when\" statement shall be used.\n-\totherwise make the data node non-mandatory and define the condition in the description statement.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.27\tisNotifyable",
                            "text_content": "Reference TS 32.156 [3] clause 5.2.1.1\nAttributes that are isNotifyable=False shall be marked with the \"yext3gpp:notNotifiable\" YANG extension statement defined in the YANG module _3gpp-common-yang-extensions.yang.\nAttributes that are isNotifyable=True shall not be marked in any way, as it is a default case.\n6.2.28\tLifecycleStatus\n6.2.28.1\tIntroduction\nReference [3] clause 5.2.A - LifecycleStatus\n6.2.28.2\tYANG mapping\nLifecycleStatus=current is the default case in YANG so it needs no mapping.\nLifecycleStatus=deprecated shall be mapped to the YANG statement\nstatus deprecated;\n\nunder the relevant leaf, leaf-list, list, container or grouping.\n4\tManagement capabilities\n4.1\tLifecycle management\n4.1.1\tDescription\nThe lifecycle management of the edge components is to be enabled by the 3GPP Management System. The lifecycle management includes instantiation, termination, modification and query of the edge components.\n4.1.2\tUse cases\n4.1.2.1\t\tEAS deployment UC-LM-01\nThe goal of this use case is to enable ASP to deploy the EAS in the EDN, by requesting the provisioning MnS producer with the deployment requirements (e.g. the topological or geographical service areas, software image information, QoS, affinity/anti-affinity with other EAS, etc.) to deploy the EAS. The provisioning MnS producer returns a response indicating the operation is in progress to prevent the consumer from waiting, as the deployment in the edge cloud may take a while. Since, there can be multiple Edge Data Network (EDN) present/serving a particular edge location. This makes it critical for application service provider to have their EAS deployed at appropriate EDN(s) to provide high performance services for the UE. Therefore, provisioning MnS producer analyses the deployment requirements to determine where (i.e. on which EDN) and how many EAS VNF instance(s) should be instantiated, and requests the NFVO in ETSI NFV MANO to instantiate the EAS VNF instance(s). The provisioning MnS producer sends a notification to ASP indicating the result of instantiation (e.g. success, failure) when a notification is received from NFVO indicating the result of instantiation operation\n4.1.3\tRequirements\n\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "4.1.3\tRequirements",
                                    "table number": 47,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "",
                                    "table number": 48,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
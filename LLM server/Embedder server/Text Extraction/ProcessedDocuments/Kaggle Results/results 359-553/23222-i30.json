{
    "document_name": "23222-i30.docx",
    "content": [
        {
            "title": "Foreword",
            "description": "This Technical Specification has been produced by the 3rd Generation Partnership Project (3GPP).\nThe contents of the present document are subject to continuing work within the TSG and may change following formal TSG approval. Should the TSG modify the contents of the present document, it will be re-released by the TSG with an identifying change of release date and an increase in version number as follows:\nVersion x.y.z\nwhere:\nx\tthe first digit:\n1\tpresented to TSG for information;\n2\tpresented to TSG for approval;\n3\tor greater indicates TSG approved document under change control.\ny\tthe second digit is incremented for all changes of substance, i.e. technical enhancements, corrections, updates, etc.\nz\tthe third digit is incremented when editorial only changes have been incorporated in the document.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "Introduction",
            "description": "In 3GPP, there are multiple northbound API-related specifications (e.g. APIs for Service Capability Exposure Function (SCEF) functionalities defined in 3GPP TS 23.682 [2], API for the interface between MBMS service provider and BM-SC defined in 3GPP TR 26.981 [5]). To avoid duplication and inconsistency of approach between different API specifications, 3GPP has considered the development of a common API framework (CAPIF) that includes common aspects applicable to any northbound service APIs.\nThe present document specifies the functional model, procedures and information flows needed to support the CAPIF, and the guidelines for consistent northbound API (service and CAPIF APIs) development in 3GPP.\nNOTE:\tIt is possible to use the CAPIF defined common aspects for other APIs as well, apart from northbound APIs.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "1\tScope",
            "description": "The present document specifies the architecture, procedures and information flows necessary for the CAPIF. The aspects of this specification include identifying architecture requirements for the CAPIF (e.g. registration, discovery, identity management) that are applicable to any service APIs when used by northbound entities, as well as any interactions between the CAPIF and the service APIs themselves. The common API framework applies to both EPS and 5GS, can be hosted within a PLMN or SNPN, and is independent of the underlying 3GPP access (e.g. E-UTRA, NR).\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "2\tReferences",
            "description": "The following documents contain provisions which, through reference in this text, constitute provisions of the present document.\n-\tReferences are either specific (identified by date of publication, edition number, version number, etc.) or non-specific.\n-\tFor a specific reference, subsequent revisions do not apply.\n-\tFor a non-specific reference, the latest version applies. In the case of a reference to a 3GPP document (including a GSM document), a non-specific reference implicitly refers to the latest version of that document in the same Release as the present document.\n[1]\t3GPP TR 21.905: \"Vocabulary for 3GPP Specifications\".\n[2]\t3GPP TS 23.682: \"Architecture enhancements to facilitate communications\nwith packet data networks and applications\".\n[3]\t3GPP TS 23.501: \"System Architecture for the 5G System; Stage 2\".\n[4]\t3GPP TS 23.502: \"Procedures for the 5G System; Stage 2\".\n[5]\t3GPP TR 26.981: \"MBMS Extensions for Provisioning and Content Ingestion\".\n[6]\t3GPP TS 32.240: \"Telecommunication management; Charging management; Charging architecture and principles\".\n[7]\tETSI GS MEC 011 (V1.1.1): \"Mobile Edge Computing (MEC); Mobile Edge Platform Application Enablement\".\n[8]\tETSI GS MEC 009 (V1.1.1): \"Mobile Edge Computing (MEC); General Principles for Mobile Edge Service APIs\".\n[9]\tOMA-ER_Autho4API-V1_0-20141209-A: \"Authorization Framework for Network APIs\".\n[10]\tOMA-TS-REST_NetAPI_Common-V1_0-20180116-A: \"Common definitions for RESTful Network APIs\".\n[11]\tOMA-TS-NGSI_Registration_and_Discovery-V1_0-20120529-A: \"NGSI Registration and Discovery\".\n[12]\t3GPP TS 33.122: \"Security Aspects of Common API Framework for 3GPP Northbound APIs\".\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "3\tDefinitions and abbreviations",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "3.1\tDefinitions",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the terms and definitions given in 3GPP TR 21.905 [1] and the following apply. A term defined in the present document takes precedence over the definition of the same term, if any, in 3GPP TR 21.905 [1].\nAPI: The means by which an API invoker can access the service.\nAPI invoker: The entity which invokes the CAPIF or service APIs.\nAPI invoker profile: The set of information associated to an API invoker that allows that API invoker to utilize CAPIF APIs and service APIs.\nAPI exposing function:  The entity which provides the service communication entry point for the service APIs.\nAPI exposing function location: The location information (e.g. civic address, GPS coordinates, data center ID) where the API exposing function providing the service API is located.\nCAPIF administrator: An authorized user with special permissions for CAPIF operations.\nCommon API framework: A framework comprising common API aspects that are required to support service APIs.\nDesignated CAPIF core function: The CAPIF core function which is configured as the serving CAPIF core function for interconnection.\nNorthbound API: A service API exposed to higher-layer API invokers.\nOnboarding: One time registration process that enables the API invoker to subsequently access the CAPIF and the service APIs.\nResource: The object or component of the API on which the operations are acted upon.\nResource owner: An entity (either a UE user or an MNO subscriber) capable of granting access to a protected resource related to the invoked API.\nResource owner-aware northbound API access: An API invocation scenario where the API invoker needs an authorization from the resource owner.\nService API: The interface through which a component of the system exposes its services to API invokers by abstracting the services from the underlying mechanisms.\nServing Area Information: The location information for which the service APIs are being offered to.\nCAPIF provider domain: A domain that contains an instance of CAPIF core function and may contain API provider domains and API invokers. The CAPIF provider could be a PLMN, SNPN or 3rd party. Throughout this document, PLMN trust domain is often used as the typical deployment of a CAPIF provider domain however SNPN trust domain or 3rd party trust domain are applicable as well.\nPLMN trust domain: The entities protected by adequate security and controlled by the PLMN operator or a trusted 3rd party of the PLMN.\nSNPN trust domain: The entities protected by adequate security and controlled by the SNPN operator or a trusted 3rd party of the SNPN. 3rd party trust domain: The entities protected by adequate security and controlled by the 3rd party.\nFor the purposes of the present document, the following terms and definitions given in 3GPP TS 32.240 [6] apply:\nOffline charging\nOnline charging\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "3.2\tAbbreviations",
                    "description": "",
                    "summary": "",
                    "text_content": "For the purposes of the present document, the abbreviations given in 3GPP TR 21.905 [1] and the following apply. An abbreviation defined in the present document takes precedence over the definition of the same abbreviation, if any, in 3GPP TR 21.905 [1].\n5GS\t5G System\nAEF\tAPI Exposing Function\nAF\tApplication Function\nAMF\tAPI Management Function\nAPF\tAPI Publishing Function\nAPI\tApplication Program Interface\nAS\tApplication Server\nBM-SC\tBroadcast Multicast Service Centre\nCAPIF\tCommon API Framework\nCDR\tCharging Data Record\nCRUD\tCreate, Read, Update, Delete\nDDoS\tDistributed Denial of Service\nE-UTRA\tEvolved Universal Terrestrial Radio Access\nEPS\tEvolved Packet System\nETSI\tEuropean Telecommunications Standards Institute\nGS\tGroup Specification\nIP\tInternet Protocol\nMBMS\tMultimedia Broadcast and Multicast Service\nMEC\tMulti-access Edge Computing\nNEF\tNetwork Exposure Function\nNGSI\tNext Generation Service Interfaces\nNR\tNew Radio\nOMA\tOpen Mobile Alliance\nOAM\tOperations, Administration and Maintenance\nOWSER\tOMA Web Services\nPC\tProtocol Converter\nPLMN\tPublic Land Mobile Network\nREST\tREpresentational State Transfer\nRNAA\tResource owner-aware Northbound API Access\nRPC\tRemote Procedure Call\nSCEF\tService Capability Exposure Function\nSCS\tService Capability Server\nSNPN\tStand-alone Non-Public Network\nUDDI\tUniversal Description, Discovery and Integration\nURI\tUniform Resource Identifier\nWSDL\tWeb Services Description Language\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "4\tArchitectural requirements",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "4.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.1.1\tIntroduction",
                            "text_content": "This subclause specifies the general requirements for CAPIF architecture.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.1.2\tRequirements",
                            "text_content": "[AR-4.1.2-a] The CAPIF shall provide mechanisms (e.g. publish service APIs, authorization, logging, charging) to support service API operations.\n[AR-4.1.2-b] The CAPIF shall enable API invoker(s) to discover and communicate with service APIs from the API providers.\n[AR-4.1.2-c] Reference points between CAPIF and external applications shall be provided as APIs.\n[AR-4.1.2-d] Reference points internal to CAPIF may be provided as APIs.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.1.3\tRequirements for supporting 3rd party API providers",
                            "text_content": "[AR-4.1.3-a] The CAPIF shall provide mechanisms (e.g. publish service APIs, authorization, logging, charging) to support service API operations from trusted 3rd party API providers.\n[AR-4.1.3-b] The CAPIF shall enable API invoker(s) to discover and communicate with service APIs from trusted 3rd party API providers.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.2\tService API publish and discover",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.2.1\tIntroduction",
                            "text_content": "This subclause specifies the service API publish and discover related requirements.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.2\tRequirements",
                            "text_content": "[AR-4.2.2-a] The CAPIF shall provide a mechanism to publish the service API information to be used by the API invokers to discover and subsequently invoke the service API.\n[AR-4.2.2-b] The CAPIF shall provide a mechanism for the API invokers to discover the published service API information as specified in [AR-4.2.2-a] according to the API invokers' interest.\n[AR-4.2.2-c] The CAPIF shall provide a mechanism to restrict the discovery of the published service API information by the API invokers, based on configured policies.\n[AR-4.2.2-d] The CAPIF shall provide a mechanism to configure policies to restrict the discovery of the published service API information.\n[AR-4.2.2-e] The CAPIF shall provide mechanism to support Serving Area Information related to service APIs.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.2.3\tRequirements for 3rd party API providers",
                            "text_content": "[AR-4.2.3-a] The CAPIF shall provide a mechanism to publish the service API information of the 3rd party API providers.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.3\tSecurity",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.3.1\tIntroduction",
                            "text_content": "This subclause specifies the security related requirements for API invokers.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.2\tRequirements",
                            "text_content": "[AR-4.3.2-a] The CAPIF shall provide mechanisms to hide the topology of the PLMN trust domain from the API invokers accessing the service APIs from outside the PLMN trust domain.\n[AR-4.3.2-b] The CAPIF shall provide mechanisms to authenticate API invokers prior to accessing the service APIs.\n[AR-4.3.2-c] The CAPIF shall provide mechanisms to authenticate API invokers upon the service API invocation.\n[AR-4.3.2-d] The CAPIF shall provide mechanisms to authorize API invokers to access the service APIs.\n[AR-4.3.2-e] The CAPIF shall provide mechanisms to validate authorization of the API invokers upon the service API invocation.\n[AR-4.3.2-f] The CAPIF shall provide mechanisms for mutual authentication between the CAPIF and the API invoker.\n[AR-4.3.2-g] The CAPIF shall provide mechanisms to control the service API access for every API invocation.\n[AR-4.3.2-h] The communication between the CAPIF and the API invoker shall be confidentiality protected.\n[AR-4.3.2-i] The communication between the CAPIF and the API invoker shall be integrity protected.\n[AR-4.3.2-j] The CAPIF shall provide mechanisms to authenticate the service API publishers to publish and manage the service API information.\n[AR-4.3.2-k] The CAPIF shall provide mechanisms to authorize the service API publishers to publish and manage service API information.\n[AR-4.3.2-l] The CAPIF shall provide mechanisms to validate authorization of the service API publishers to publish and manage service API information.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.3.3\tAdditional requirements for 3rd party API provider",
                            "text_content": "[AR-4.3.3-a] The CAPIF shall provide mechanisms to hide the topology of the 3rd party API provider trust domain from the API invokers accessing the service APIs from outside the 3rd party API provider trust domain.\n[AR-4.3.3-b] The CAPIF shall provide authorization mechanism for service APIs from the 3rd party API providers.\n[AR-4.3.3-c] The CAPIF shall provide data confidentiality (across API providers) for data (e.g. logging, charging) related to service APIs from multiple API providers.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.4\tCharging",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.4.1\tIntroduction",
                            "text_content": "This subclause specifies the charging related requirements for the usage of service APIs.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.2\tRequirements",
                            "text_content": "[AR-4.4.2-a] The CAPIF shall support online and offline charging for service APIs usage.\n[AR-4.4.2-b] The CAPIF shall provide mechanisms to record the usage (e.g. invocation count) of the service APIs for charging purpose, on a per API invoker basis.\n[AR-4.4.2-c] The CAPIF shall provide mechanisms to record timestamp of the service API invocation.\n[AR-4.4.2-d] The CAPIF shall provide mechanisms to record the service API related information, e.g. API location.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.4.3\tRequirements for 3rd party API providers",
                            "text_content": "[AR-4.4.3-a] The CAPIF shall support online and offline charging for 3rd party API providers' service APIs usage.\n[AR-4.4.3-b] The CAPIF shall provide mechanisms to query charging related information of the 3rd party service APIs by the authorized users.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.5\tOperations, Administration and Maintenance",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.5.1\tIntroduction",
                            "text_content": "This subclause specifies the OAM aspects including performance monitoring, fault monitoring, policy configurations, and certain lifecycle management aspects such as monitoring the running status of service APIs and related operations.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.5.2\tRequirements",
                            "text_content": "[AR-4.5.2-a] The CAPIF shall provide mechanisms to monitor the status of service APIs, e.g. starting and stopping access of the service APIs.\n[AR-4.5.2-b] The CAPIF shall provide mechanisms to monitor and report the performance of the service APIs.\n[AR-4.5.2-c] The CAPIF shall provide mechanisms to monitor and report the fault information about the service APIs.\n[AR-4.5.2-d] The CAPIF shall provide mechanisms to record change events of service APIs, e.g. service APIs relocation.\n[AR-4.5.2-e] The CAPIF shall provide mechanisms to configure policies related to service APIs.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.5.3\tRequirements for 3rd party API providers",
                            "text_content": "[AR-4.5.3-a] The CAPIF shall provide mechanisms to configure policies related to 3rd party service APIs by the authorized users.\n[AR-4.5.3-b] The CAPIF shall provide mechanisms to monitor faults, performance and status of the 3rd party service APIs by the authorized users.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.6\tService API invocation monitoring",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.6.1\tIntroduction",
                            "text_content": "The CAPIF includes monitoring functions. This enables API provider to monitor service API invocations, to determine critical aspects such as system load, API usage information, uncover potential overload and attacks (e.g. DDoS) conditions.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.6.2\tRequirements",
                            "text_content": "[AR-4.6.2-a] The CAPIF shall provide mechanisms to capture service API invocation events and make them available to service API provider.\n[AR-4.6.2-b] The CAPIF shall provide mechanisms to notify events related to overload and threat conditions (e.g. system load, resource usage information).\n[AR-4.6.2-c] The CAPIF shall provide mechanisms to allow service API provider to apply monitoring filters based on criteria such as API invoker's ID and IP address, service API name and version, invoked operation, input parameters, and invocation result.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.7\tLogging",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.7.1\tIntroduction",
                            "text_content": "The CAPIF supports the ability to log events and store the corresponding logs. This enables the API providers to use the logs for the purpose of tracing back and statistical analysis.\nThe following events in CAPIF are supported for logging:\n-\tService API invocation events;\n-\tAPI invoker onboarding events; and\n-\tAPI invoker interactions with the CAPIF (e.g. authentication, authorization, discover service APIs).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.7.2\tLogging events related to service API invocations",
                            "text_content": "[AR-4.7.2-a] The CAPIF shall provide mechanisms for service API invocation event logging and storage functionality.\n[AR-4.7.2-b] The service API invocation log shall be stored for a configurable time period, according to the service API provider's policy.\n[AR-4.7.2-c] The service API invocation log shall be stored securely, and shall only be accessed by CAPIF administrators of the service API provider.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.7.3\tLogging events related to API invoker onboarding",
                            "text_content": "[AR-4.7.3-a] The CAPIF shall provide mechanisms for API invoker onboarding event logging and storage functionality.\n[AR-4.7.3-b] The API invoker onboarding log shall be stored at least for the duration during which the onboarding is valid.\n[AR-4.7.3-c] The API invoker onboarding log shall be stored securely, and shall only be accessed by CAPIF administrators.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.7.4\tLogging events related to API invoker interaction with the CAPIF",
                            "text_content": "[AR-4.7.4-a] The CAPIF shall provide mechanisms for the event logging of API invoker interactions with the CAPIF (e.g. authentication, authorization, discover service APIs).\n[AR-4.7.4-b] The API invoker interactions log shall be stored for a configurable time period.\n[AR-4.7.4-c] The API invoker interactions log shall be stored securely, accessed only by CAPIF administrators.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.8\tAuditing service API invocation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.8.1\tIntroduction",
                            "text_content": "The CAPIF includes auditing capabilities. This enables the service API provider to identify illegal service API invocations e.g. by querying the service API invocation log.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.8.2\tRequirements",
                            "text_content": "[AR-4.8.2-a] The CAPIF shall provide mechanisms to query the service API invocation log, by CAPIF administrators.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.9\tOnboarding API invoker",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.9.1\tIntroduction",
                            "text_content": "This subclause specifies the requirements related to onboarding API invoker to the CAPIF.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.9.2\tRequirements",
                            "text_content": "[AR-4.9.2-a] The CAPIF shall provide the capability to onboard new API invokers.\n[AR-4.9.2-b] The CAPIF shall support granting an API invoker's request to onboard with the CAPIF administrator.\n[AR-4.9.2-c] The CAPIF shall support offboarding an API invoker from the CAPIF.\n[AR-4.9.2-d] The CAPIF shall support updating an API invoker's API list e.g., subsequent to discovery of new API(s).\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.10\tPolicy configuration",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.10.1\tIntroduction",
                            "text_content": "This subclause specifies the policy configuration related requirements.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.10.2\tRequirements",
                            "text_content": "[AR-4.10.2-a] The CAPIF shall support policy configurations (e.g. related to the protection of platforms and network, specific functionalities exposed, message payload size or throughput).\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.11\tProtocol design",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.11.1\tIntroduction",
                            "text_content": "In order for the CAPIF to be common across all present and future API invokers for various usages and purposes, a minimum common protocol stack model is necessary so that all API invokers that use the common-framework-based API need to support only one and the same set of protocols, e.g. security layer protocol(s). Extensibility of this model allows evolution and re-use.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.11.2\tRequirements",
                            "text_content": "[AR-4.11.2-a] The CAPIF shall support a minimum common protocol stack model common for all API implementations to be based on.\n[AR-4.11.2-b] The CAPIF shall support a common security mechanism for all API implementations to provide confidentiality and integrity protection.\n[AR-4.11.2-c] The CAPIF shall be extensible to support different protocol stack models, including related security mechanisms, in addition to the minimum common protocol stack model.\nNOTE:\tPotentially, Stage 3 needs to consider all CAPIF APIs for protocol extensibility.\n[AR-4.11.2-d] CAPIF APIs and associated information flows shall be extensible to support vendor-specific functionality.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.12\tInterconnection between the CAPIF providers",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.12.1\tIntroduction",
                            "text_content": "Two organizations with a business relationship that have each deployed CAPIF may need to interoperate to allow API invokers in each trust domain to utilize service APIs from both CAPIFs as illustrated in figure 4.12.1-1.\nThe figure depicts the interconnection between the various providers of the CAPIF (Carrier Aggregation and Interference Management) system, illustrating the network topology and the distribution of services.\nFigure 4.12.1-1: Interconnection between the CAPIF providers\nNOTE:\tFrom each CAPIF provider's perspective the other CAPIF provider is a 3rd party.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.12.2\tRequirements",
                            "text_content": "[AR-4.12.2-a] The CAPIF shall provide mechanisms to enable the API invokers of the CAPIF provider to discover and invoke the service APIs of the 3rd party CAPIF provider.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.13\tIdentities",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.13.1\tIntroduction",
                            "text_content": "This subclause specifies the identities related requirements.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.13.2\tRequirements",
                            "text_content": "[AR-4.13.2-a] The CAPIF shall support uniform addressing (e.g. identity) for communication within the same trust domain or from the 3rd party trust domain.\n[AR-4.13.2-b] The CAPIF shall support identities for uniquely identifying each API.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.14\tAPI provider domain interactions",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.14.1\tIntroduction",
                            "text_content": "This subclause specifies the API provider domain interactions related requirements.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.14.2\tRequirements",
                            "text_content": "[AR-4.14.2-a] The CAPIF shall enable interactions between multiple API exposing functional entities within the same trust domain.\n[AR-4.14.2-b] The CAPIF shall enable interactions of multiple API exposing functional entities between trust domains.\nEditor's note: Adding architectural requirements for interactions between other functions within the API provider domain is FFS.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.15\tDynamic routing of service API invocation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.15.1\tIntroduction",
                            "text_content": "This subclause specifies the dynamic routing of service API invocation related requirements.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.15.2\tRequirements",
                            "text_content": "[AR-4.15.2-a] The CAPIF shall provide a mechanism to support the dynamic routing of service API invocation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.16\tRegistering API provider domain functions",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.16.1\tIntroduction",
                            "text_content": "This subclause specifies the requirements related to registration of API provider domain functions on the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.16.2\tRequirements",
                            "text_content": "[AR-4.16.2-a] The CAPIF shall provide the capability to register API provider domain functions.\n[AR-4.16.2-b] The CAPIF shall support the capability to update the registration information of the API provider domain functions.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "4.17\tResource owner-aware northbound API invocation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "4.17.1\tIntroduction",
                            "text_content": "This subclause specifies requirements related to the resource owner-aware northbound API invocation. In the current release, the scope of API invoker on a UE in Resource owner-aware northbound API access is limited to accessing its own resources only, i.e., resource owner is a user of the UE hosting the API invoker that can authorize the API access.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "4.17.2\tRequirements",
                            "text_content": "[AR-4.17.2-a] The CAPIF shall support applications on the UE acting as an API invoker.\n[AR-4.17.2-b] The CAPIF shall support the authentication of the resource owner.\n[AR-4.17.2-c] The CAPIF shall enable the resource owner(s) to provide and revoke the authorization information for the resource exposure by API provider.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "5\tInvolved business relationships",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "5.1\tBasic CAPIF business relationships",
                    "description": "",
                    "summary": "",
                    "text_content": "Figure 5.1-1 shows the typical business relationships in CAPIF.\nThe figure depicts a network diagram with various business relationships represented by different colored lines. The relationships are labeled as follows:\n\n- Business 1: Represents the relationship between the business and the service provider.\n- Business 2: Represents the relationship between the business and the network provider.\n- Business 3: Represents the relationship between the business and the network provider.\n- Business 4: Represents the relationship between the business and the network provider.\n- Business 5: Represents the relationship between the business and the network provider.\n\nThe figure also includes a legend that explains the colors and labels used to represent the relationships.\nFigure 5.1-1: Business relationships in CAPIF\nThe API invoker is typically provided by a 3rd party application provider who has service agreement with a CAPIF provider.\nThe API provider hosts one or more service APIs and has a service API arrangement with CAPIF provider to offer the service APIs to the API invoker.\nThe CAPIF provider and the API provider can be part of the same organization (e.g. PLMN operator), in which case the business relationship between the two is internal to a single organization. The CAPIF provider and the API provider can be part of different organizations, in which case the business relationship between the two must exist.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "5.2\tCAPIF business relationships for RNAA",
                    "description": "",
                    "summary": "",
                    "text_content": "Figure 5.2-1 shows the CAPIF business relationships for the resource owner-aware northbound API access (RNAA).\nThe figure depicts the business relationships between the various entities involved in the RNAA (Network Rail Authority of Australia) industry. It illustrates the relationships between the different stakeholders, such as the government, private companies, and unions, and their respective roles and responsibilities. The figure provides a clear understanding of the complex network of relationships that exist within the RNAA industry, highlighting the importance of collaboration and communication in order to ensure the smooth functioning of the network.\nFigure 5.2-1: CAPIF business relationships for RNAA\nThe business relationships the API invoker, the CAPIF provider, and the API provider follow the description in the clause 5.1. In addition to them, the resource owner is an entity capable of granting access to a protected resource related to the resource exposed by the API provider. The API invoker and the resource owner can be the same entity or separate entities. In the current release, the resource owner is a user of a UE and can provide authorization information using the UE.\nNOTE:\tIn the current release, both the CAPIF provider and the API provider should belong to the same organization (e.g., PLMN operator) and the service API arrangement is not required explicitly.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "6\tFunctional model",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "6.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The Common API framework (CAPIF) functional architecture is described in this subclause. The CAPIF architecture is defined as service-based and interactions between the CAPIF functions are represented in two ways:\n-\tA service-based representation, where CAPIF functions enable other authorized CAPIF functions to access their services;\n-\tA reference point representation, where interactions between any two CAPIF functions (e.g. CCF, AEF) is shown by an appropriate point-to-point reference point (e.g. CAPIF-3).\nThe CAPIF functional architecture can be adopted by any 3GPP functionality providing 3GPP northbound service APIs.\nNOTE 1:\tThe terms “functional architecture” and “functional model” mean the same and have been used interchangeably in this specification.\nNOTE 2:\tThe functional model described in this specification applies to both PLMN(s) and to SNPN(s).\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "6.2\tFunctional model description",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.2.0\tFunctional model description for the CAPIF",
                            "text_content": "Figure 6.2.0-1 shows the reference point based functional model for the CAPIF.\nThe figure depicts a functional model for the CAPIF, which is a crucial component in the design of a 5G network. The model illustrates the various layers and components involved in the network, including the base station (gNB), user equipment (UE), and scatterers. The diagram highlights the importance of beamforming techniques to mitigate interference and ensure reliable communication.\nFigure 6.2.0-1: Functional model for the CAPIF\nThe CAPIF is hosted within the PLMN operator network (or even an SNPN). The API invoker is typically provided by a 3rd party application provider who has service agreement with PLMN operator. The API invoker may reside within the same trust domain as the PLMN operator network.\nIn a reference point based model, the API invoker within the PLMN trust domain interacts with the CAPIF via CAPIF-1 and CAPIF-2. The API invoker from outside the PLMN trust domain interacts with the CAPIF via CAPIF-1e and CAPIF-2e. The API exposing function, the API publishing function and the API management function of the API provider domain (together known as API provider domain functions) within the PLMN trust domain interacts with the CAPIF core function via CAPIF-3, CAPIF-4 and CAPIF-5 respectively.\n\nThe figure depicts a functional model for interactions between API exposing functions, illustrating the various interactions and data flows between the API and the client. The model includes a set of functions that the API exposes, such as GET, POST, PUT, DELETE, and others, as well as the client's actions, such as GET, POST, PUT, DELETE, and others. The figure also includes a flowchart that illustrates the data flow between the API and the client, showing how data is sent and received.\nFigure 6.2.0-2: Functional model for interactions between API exposing functions\nAs illustrated in figure 6.2.0-2, the interactions between the API exposing functions within the PLMN trust domain is via CAPIF-7.\nThe CAPIF core function provides CAPIF APIs to the API invoker over CAPIF-1 and CAPIF-1e. The API exposing function provides the service APIs to the API invoker over CAPIF-2 and CAPIF-2e.\nNOTE 1:\tThe communication between the API exposing function and the CAPIF core function, between the API publishing function and the CAPIF core function and between the API management function and the CAPIF core function over CAPIF-3, CAPIF-4 and CAPIF-5 respectively can be API based.\nThe detailed information of the APIs provided by the CAPIF core function is specified in clause 10.\nThe security aspects of CAPIF reference points are specified in 3GPP TS 33.122 [12].\nFigure 6.2.0-3 illustrates the CAPIF functional model using service-based interfaces.\n\nThe figure depicts a functional model representation of the CAPIF (Communication Access Network Infrastructure Functional Model) using service-based interfaces. It illustrates the various components and their interconnections, including the core switches, optical line terminals (OLTs), and distributed nodes. The layered design aligns with SDN principles, emphasizing the importance of redundancy and failover mechanisms.\nFigure 6.2.0-3: CAPIF functional model representation using service-based interfaces\nTable 6.2.0-1 specifies the service-based interfaces supported by CAPIF.\nTable 6.2.0-1: Service-based interfaces supported by CAPIF\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 6.2.0-1: Service-based interfaces supported by CAPIF",
                                    "table number": 1,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "6.2.1\tFunctional model description to support 3rd party API providers",
                            "text_content": "Figure 6.2.1-1 shows the functional model for the CAPIF to support 3rd party API providers.\nThe figure depicts a functional model for the CAPIF, a third-party API provider, which is designed to support various third-party APIs. The model includes a set of APIs, each represented by a node, and a set of APIs, each represented by a link. The nodes are connected by links, which represent the communication between the APIs. The model also includes a set of APIs, each represented by a node, and a set of APIs, each represented by a link. The nodes are connected by links, which represent the communication between the APIs. The model also includes a set of APIs, each represented by a node, and a set of APIs, each represented by a link. The nodes are connected by links, which represent the communication between the APIs. The model also includes a set of APIs, each represented by a node, and a set of APIs, each represented by a link. The nodes are connected by links, which represent the communication between the APIs. The model also includes a set of APIs, each represented by a node, and a set of APIs, each represented by a link. The nodes are connected by links, which represent the communication between the APIs. The model also includes a set of APIs, each represented by a node, and a set\nFigure 6.2.1-1: Functional model for the CAPIF to support 3rd party API providers\nThe CAPIF core function in the PLMN trust domain supports service APIs from both the PLMN trust domain and the 3rd party trust domain having business relationship with PLMN. The API invokers may exist within the PLMN trust domain, or within the 3rd party trust domain or outside of both the PLMN trust domain and the 3rd party trust domain. The API provider domain 1 offers the service APIs from the PLMN operator. The API provider domain 2 offers the service APIs from the 3rd party. When the 3rd party API provider is a trusted 3rd party of the PLMN, the API provider domain 1 also offers the service APIs from the 3rd party.\nThe API invoker 2 within the PLMN trust domain interacts with the CAPIF core function via CAPIF-1, and invokes the service APIs in the PLMN trust domain via CAPIF-2 and invokes the service APIs in the 3rd party trust domain via CAPIF-2e. The API invoker 3 within the 3rd party trust domain interacts with the CAPIF core function via CAPIF-1e, and invokes the service APIs in the PLMN trust domain via CAPIF-2e and invokes the service APIs in 3rd party trust domain via CAPIF-2. The API invoker 1 from outside the PLMN trust domain and 3rd party trust domain, interacts with the CAPIF core function via CAPIF-1e and invokes the service APIs in the PLMN trust domain and the service APIs in the 3rd party trust domain via CAPIF-2e.\nThe API exposing function, the API publishing function and the API management function of the API provider domain 1 within the PLMN trust domain interacts with the CAPIF core function via CAPIF-3, CAPIF-4 and CAPIF-5 respectively. The API exposing function, the API publishing function and the API management function of the API provider domain 2 within the 3rd party trust domain interacts with the CAPIF core function in the PLMN trust domain via CAPIF-3e, CAPIF-4e and CAPIF-5e respectively. The API exposing function within the PLMN trust domain and the 3rd party trust domain provides the service APIs to the API invoker, offered by the respective trust domains.\nThe interactions between the API exposing functions within the PLMN trust domain is via CAPIF-7 (not shown in the figure 6.2.1-1 for simplicity). The API exposing function within the PLMN trust domain interacts with the API exposing function in the 3rd party trust domain via CAPIF-7e.\nNOTE 1:\tThe communication between the API exposing function and the CAPIF core function, between the API publishing function and the CAPIF core function and between the API management function and the CAPIF core function over CAPIF-3/3e, CAPIF-4/4e and CAPIF-5/5e respectively can be API based.\nThe detailed information of the APIs provided by the CAPIF core function is specified in clause 10.\nNOTE 2:\tThe security aspects of CAPIF reference points are under SA3 responsibility and out of scope of the present document.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.2\tFunctional model description to support CAPIF interconnection",
                            "text_content": "Figure 6.2.2-1 shows the architectural model for the CAPIF interconnection which allows API invokers of a CAPIF provider to utilize the service APIs from the 3rd party CAPIF provider.\nThe figure depicts a high-level functional architecture for CAPIF interconnection with multiple CAPIF provider domains. It illustrates the interconnection of various CAPIF provider domains, including the core switch, optical line terminal (OLT), and distributed nodes. The layered design aligns with SDN principles, ensuring failover reliability and redundancy.\nFigure 6.2.2-1: High level functional architecture for CAPIF interconnection with multiple CAPIF provider domains\nFigure 6.2.2-2 shows the architectural model for the CAPIF interconnection within the same CAPIF provider domain, which allows API invokers of CAPIF core function 1 to utilize the service APIs from CAPIF core function 2, where both CAPIF core function 1 and CAPIF core function 2 are hosted within the trust domain of the CAPIF provider A.\nThe figure depicts a high-level functional architecture for CAPIF interconnection within a CAPIF provider domain, illustrating the interconnection of various components such as the CAPIF provider, the CAPIF interconnection point, and the CAPIF interconnection point provider. The architecture is designed to ensure efficient and reliable interconnection, with redundancy paths and failover mechanisms in place.\nFigure 6.2.2-2: High level functional architecture for CAPIF interconnection within a CAPIF provider domain\nThe CAPIF provider A and CAPIF provider B host the CAPIF in their trust domains. A business relationship exists between the CAPIF providers.\nThe CAPIF providers in their respective trust domain hosts multiple CAPIF instances where each CAPIF instance consists of the CAPIF core function (local), the API provider domain and the API invokers. All interactions within the CAPIF instance is according to the functional model specified in clause 6.2.0.\nWhen multiple CAPIF instances are deployed by a CAPIF provider there may be a hierarchy associated with the multiple CAPIF core function deployed which allows:\n-\tthe designated CAPIF core function of the CAPIF provider A to interconnect with the designated CAPIF core function of the CAPIF provider B; and\n-\twithin CAPIF provider A, one or more CAPIF core function interacts with the designated CAPIF core function 1.\nThe designated CAPIF core function of the CAPIF provider A provides the information about the CAPIF instances and service APIs deployed by the CAPIF provider A to the designated CAPIF core function of the CAPIF provider B and vice versa over CAPIF-6e reference point.\nThe CAPIF core function 2 of CAPIF provider A provides the information about the service APIs to the CAPIF core function 1 over CAPIF-6 reference point.\nNOTE 1:\tVoid\nThe API invokers may exist within the trust domain of CAPIF provider A, or within the trust domain of CAPIF provider B or outside of the trust domains of both CAPIF provider A and CAPIF provider B. The API invoker of a CAPIF provider is onboarded with the CAPIF core function in the corresponding trust domain of the CAPIF provider.\nNOTE 2:\tFor sake of simplicity, the service API interactions of API invokers of the CAPIF provider B are not shown. From each CAPIF provider's perspective the other CAPIF provider is a 3rd party.\nOne or more CAPIF core function can publish service APIs to the designated CAPIF core function over CAPIF-6 reference point and, also discover the service APIs from the designated CAPIF core function and vice versa over CAPIF-6 reference point.\nThe API invoker within the trust domain of CAPIF provider A interacts with the CAPIF core function of the CAPIF provider A via CAPIF-1 and discovers the service APIs of both CAPIF providers, and invokes the service APIs in the trust domain of CAPIF provider A via CAPIF-2 and invokes the service APIs in the trust domain of CAPIF provider B via CAPIF-2e. The API invoker from outside the trust domain of CAPIF providers, interacts with the CAPIF core function of th CAPIF provider A via CAPIF-1e and invokes the service APIs in the trust domain of the CAPIF providers via CAPIF-2e.\nNOTE 3:\tThe communication between the CAPIF core function of the CAPIF providers over CAPIF-6 or CAPIF-6e can be API based.\nThe detailed information of the APIs provided by the CAPIF core function is specified in clause 10.\nNOTE 4:\tThe security aspects of CAPIF reference points are under SA3 responsibility and out of scope of the present document.\nNOTE 5:\tAll interactions among entities within the CAPIF provider domains (regardless if CAPIF is deployed in a PLMN, SNPN or 3rd party network) are ruled by the functional model in clause 6.2.0, the support of 3rd party API providers is as in clause 6.2.1, whereas the interconnection among CCFs is according to this clause.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.2.3\tFunctional model description to support RNAA",
                            "text_content": "Figure 6.2.3-1 shows the architectural model for the RNAA which allows the resource owner to provide authorization to the API invocation.\nThe figure depicts a high-level functional architecture for CAPIF, a network-based approach to support the Remote Network Access (RNAA) service. It illustrates the key components and their interconnections, including the network core, network services, and the network access layer. The architecture is designed to support the RNAA service, ensuring efficient and reliable network access for remote users.\nFigure 6.2.3-1: High level functional architecture for CAPIF supporting RNAA\nThe authorization function is an internal entity of the CAPIF core function.\nThe resource owner client(s) interacts with the authorization function in the CAPIF core function via CAPIF-8. The resource owner communicates with the authorization function in the CAPIF core function to manage resource owner consent.\nThe API exposing function (e.g. NEF, SCEF) acts as a resource owner consent enforcement point as specified in 3GPP TS 33.501 [8] and interacts with the authorization function in the CAPIF core function via CAPIF-3. The API exposing function can retrieve the resource owner consent parameters from the authorization function.\nNOTE 1:\tRNAA is supported for both 4G and 5G network.\nThe API invoker interacts with authorization function in the CAPIF core function via CAPIF-1/CAPIF-1e.\nNOTE 2:\tIn the current release, 3rd party API providers (i.e., API providers outside the PLMN trust domain) are not supported for RNAA.\nNOTE 3:\tThe interaction between Resource Owner Client and CCF over CAPIF-8 is not specified in the current release of the specification.\nThe security aspects of CAPIF supporting RNAA are specified in 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.3\tFunctional entities description",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.3.1\tGeneral",
                            "text_content": "Each subclause is a description of a functional entity and does not imply a physical entity.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.2\tAPI invoker",
                            "text_content": "The API invoker is typically provided by a 3rd party application provider who has service agreement with PLMN operator. The API invoker may reside within the same trust domain as the PLMN operator network. The API invoker may be either an application on a server or an application on a UE.\nThe API invoker supports the following capabilities:\n-\tTriggering API invoker onboarding/offboarding;\n-\tSupporting the authentication by providing the API invoker identity and other information required for authentication of the API invoker;\n-\tSupporting mutual authentication with CAPIF;\n-\tObtaining the authorization prior to accessing the service API;\n-\tDiscovering service APIs information; and\n-\tInvoking the service APIs.\nNOTE:\tThe details of the specific service APIs are out of scope of the present document.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.3\tCAPIF core function",
                            "text_content": "The CAPIF core function consists of the following capabilities:\n-\tAuthenticating the API invoker based on the identity and other information required for authentication of the API invoker;\n-\tSupporting mutual authentication with the API invoker;\n-\tProviding authorization for the API invoker prior to accessing the service API;\n-\tPublishing, storing and supporting the discovery of service APIs information;\n-\tControlling the service API access based on PLMN operator configured policies;\n-\tStoring the logs for the service API invocations and providing the service API invocation logs to authorized entities;\n-\tCharging based on the logs of the service API invocations;\n-\tMonitoring the service API invocations;\n-\tOnboarding a new API invoker and offboarding an API invoker;\n-\tStoring policy configurations related to CAPIF and service APIs;\n-\tSupport accessing the logs for auditing (e.g. detecting abuse); and\n-\tSupports publishing, discovery of service APIs information with another CAPIF core function in CAPIF interconnection.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.4\tAPI exposing function",
                            "text_content": "The API exposing function is the provider of the service APIs and is also the service communication entry point of the service API to the API invokers. The API exposing function consists of the following capabilities:\n-\tAuthenticating the API invoker based on the identity and other information required for authentication of the API invoker provided by the CAPIF core function;\n-\tValidating the authorization provided by the CAPIF core function; and\n-\tLogging the service API invocations at the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.5\tAPI publishing function",
                            "text_content": "The API publishing function enables the API provider to publish the service APIs information in order to enable the discovery of service APIs by the API invoker. The API publishing function consists of the following capability:\n-\tPublishing the service API information of the API provider to the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.6\tAPI management function",
                            "text_content": "The API management function enables the API provider to perform administration of the service APIs. The API management function consists of the following capabilities:\n-\tAuditing the service API invocation logs received from the CAPIF core function;\n-\tMonitoring the events reported by the CAPIF core function;\n-\tConfiguring the API provider policies to the CAPIF core function;\n-\tMonitoring the status of the service APIs;\n-\tOnboarding the new API invokers and offboarding API invokers; and\n-\tRegistering and maintaining registration information of the API provider domain functions on the CAPIF core function.\nNOTE:\tThe API invoker onboarding/offboarding in the API management function is out of the scope of the current release.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.7\tAuthorization function",
                            "text_content": "The authorization function consists of the following capabilities:\n-\tReceiving authorization from the resourse owner; and\n-\tProviding the API invoker with the authorization information which is needed to access the resource owner’s resources.\nNOTE:\tIn the current release, the authorization function is an internal entity of the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.3.8\tResource owner client",
                            "text_content": "The resource owner client consists of the following capabilities:\n-\tProviding authorization for resource access; and\n-\tManaging and revoking authorization for resource access.\nNOTE:\tThe procedures corresponding to these capabalities of Resource owner client are FFS and out of scope of the current release of the specification.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.4\tReference points",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "6.4.1\tGeneral",
                            "text_content": "The reference points for CAPIF are described in the following subclauses.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.2\tReference point CAPIF-1 (between the API invoker and the CAPIF core function)",
                            "text_content": "The CAPIF-1 reference point, which exists between the API invoker and the CAPIF core function, is used for the API invoker within the PLMN trust domain to discover service APIs, to authenticate and to get authorization.\nThe CAPIF-1 reference point supports:\n-\tOnboarding the new API invokers and offboarding API invokers;\n-\tAuthenticating the API invoker based on the identity and credentials of the API invoker;\n-\tMutual authentication between the API invoker and the CAPIF core function;\n-\tProviding authorization for the API invoker prior to accessing the service API;\n-\tProviding authorization for the API invoker based on RNAA; and\n-\tDiscovering the service APIs information.\nNOTE:\tThe security aspects of CAPIF-1 are specified in subclause 6.2 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.3\tReference point CAPIF-1e (between the API invoker and the CAPIF core function)",
                            "text_content": "The CAPIF-1e reference point, which exists between the API invoker and the CAPIF core function, is used for the API invoker outside the PLMN trust domain to discover service APIs, to authenticate and to get authorization.\nThe CAPIF-1e reference point supports all the functions of CAPIF-1.\nNOTE:\tThe security aspects of CAPIF-1e are specified in subclause 6.3 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.4\tReference point CAPIF-2 (between the API invoker and the API exposing function)",
                            "text_content": "The CAPIF-2 reference point, which exists between the API invoker and the API exposing function belonging to the same trust domain, is used for the API invoker to communicate with the service APIs.\nThe CAPIF-2 reference point supports:\n-\tAuthenticating the API invoker based on the identity and credentials of the API invoker;\n-\tAuthorization verification for the API invoker upon accessing the service API; and\n-\tInvocation of service APIs.\nNOTE 1:\tThe aspects related to the specific service API invocation in reference point CAPIF-2 are out of scope of the present document.\nNOTE 2:\tThe security aspects of CAPIF-2 are specified in subclause 6.4 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.5\tReference point CAPIF-2e (between the API invoker and the API exposing function)",
                            "text_content": "The CAPIF-2e reference point, which exists between the API invoker and the API exposing function belonging to a different trust domain, is used for the API invoker to communicate with the service APIs.\nThe CAPIF-2e reference point supports all the functions of CAPIF-2.\nNOTE:\tThe security aspects of CAPIF-2e are specified in subclause 6.5 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.6\tReference point CAPIF-3 (between the API exposing function and the CAPIF core function)",
                            "text_content": "The CAPIF-3 reference point, which exists between the API exposing function and the CAPIF core function, is used for exercising access and policy related control for service API communications initiated by the API invoker.\nThe CAPIF-3 reference point supports:\n-\tAuthenticating the API invoker based on the identity and credentials of the API invoker;\n-\tProviding authorization for the API invoker prior to accessing the service API;\n-\tAuthorization verification for the API invoker upon accessing the service API;\n-\tAuthorization verification for the API invoker based on RNAA;\n-\tControlling the service API access based on PLMN operator configured policies;\n-\tLogging the service API invocations; and\n-\tCharging the service API invocations.\nNOTE:\tThe security aspects of CAPIF-3 are specified in subclause 6.6 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.7\tReference point CAPIF-4 (between the API publishing function and the CAPIF core function)",
                            "text_content": "The CAPIF-4 reference point, which exists between the API publishing function and the CAPIF core function, is used for publishing the service API information.\nThe CAPIF-4 reference point supports:\n-\tPublishing the service APIs information by the API publishing function.\nNOTE:\tThe security aspects of CAPIF-4 are specified in subclause 6.6 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.8\tReference point CAPIF-5 (between the API management function and the CAPIF core function)",
                            "text_content": "The CAPIF-5 reference point, which exists between the API management function and the CAPIF core function, is used for management of service API, API invoker and API provider domain function information.\nThe CAPIF-5 reference point supports:\n-\tAccessing the service API invocation logs by the API management function;\n-\tEnabling the API management function to monitor the events reported due to the service APIs invocations;\n-\tOnboarding new API invokers by provisioning the API invoker information at the CAPIF core function, requesting explicit grant of new API invokers onboarding and confirming onboarding success;\n-\tOffboarding API invokers;\n-\tEnabling the API management function to configure policies at the CAPIF core function e.g. service API invocation throttling, blocking API invocation for certain duration;\n-\tEnabling the API provider to monitor the status of service APIs (e.g. pilot or live status, start or stop status of service API);\n-\tRegistering API provider domain functions on the CAPIF core function; and\n-\tUpdate of the registration information of API provider domain functions on the CAPIF core function.\nNOTE 1:\tThe security aspects of CAPIF-5 are specified in subclause 6.6 of 3GPP TS 33.122 [12].\nNOTE 2:\tThe API invoker onboarding/offboarding over CAPIF-5 is out of the scope of the current release.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.9\tReference point CAPIF-3e (between the API exposing function and the CAPIF core function)",
                            "text_content": "The CAPIF-3e reference point, which exists between the API exposing function within the 3rd party trust domain and the CAPIF core function within the PLMN trust domain, is used for exercising access and policy related control for service API communications initiated by the API invoker.\nThe CAPIF-3e supports all the functions of CAPIF-3.\nNOTE:\tThe security aspects of CAPIF-3e are specified in clause 6.10 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.10\tReference point CAPIF-4e (between the API publishing function and the CAPIF core function)",
                            "text_content": "The CAPIF-4e reference point, which exists between the API publishing function within the 3rd party trust domain and the CAPIF core function within the PLMN trust domain, is used for publishing the service API information.\nThe CAPIF-4e reference point supports all the functions of CAPIF-4.\nNOTE:\tThe security aspects of CAPIF-4e are specified in clause 6.10 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.11\tReference point CAPIF-5e (between the API management function and the CAPIF core function)",
                            "text_content": "The CAPIF-5e reference point, which exists between the API management function within the 3rd party trust domain and the CAPIF core function within the PLMN trust domain, is used for management of service API, API invoker and API provider domain function information.\nThe CAPIF-5e reference point supports all the functions of CAPIF-5.\nNOTE:\tThe security aspects of CAPIF-5e are specified in clause 6.10 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.12\tReference point CAPIF-7 (between the API exposing functions)",
                            "text_content": "The CAPIF-7 reference point, which exists between the API exposing functions belonging to the same trust domain, is used for the forwarding or routing of the API invoker's service API invocation from one API exposing function to the other API exposing function deployed in the PLMN trust domain.\nThe CAPIF-7 reference point supports all the functions of CAPIF-2.\nThe CAPIF-7 reference point supports invocation of service APIs originated by the API invoker using CAPIF-2.\nNOTE 1:\tThe aspects related to the specific service API invocation in reference point CAPIF-7 are out of scope of the present document.\nNOTE 2:\tThe security aspects of CAPIF-7 are the responsibility of SA3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.13\tReference point CAPIF-7e (between the API exposing functions)",
                            "text_content": "The CAPIF-7e reference point, which exists between the API exposing functions belonging to different trust domains, is used for the forwarding or routing of the API invoker's service API invocation from one API exposing function to the other API exposing function between different trust domains.\nThe CAPIF-7e reference point supports all the functions of CAPIF-2e.\nNOTE:\tThe security aspects of CAPIF-7e are the responsibility of SA3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.14\tReference point CAPIF-6 (between the CAPIF core functions of the same CAPIF provider)",
                            "text_content": "The CAPIF-6 reference point exists between the CAPIF core functions within the same trust domain of CAPIF provider.\nThe CAPIF-6 reference point supports:\n-\tPublishing the service APIs information; and\n-\tDiscovering the service APIs information.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.15\tReference point CAPIF-6e (between the CAPIF core functions of different CAPIF providers)",
                            "text_content": "The CAPIF-6e reference point exists between the CAPIF core function within the 3rd party trust domain and the CAPIF core function within the PLMN trust domain.\nThe CAPIF-6e reference point supports all the functions of CAPIF-6.\nNOTE:\tThe security aspects of CAPIF-6e will be specified by SA3.\nEditor's note:\tReference to the appropriate SA3 specification is needed.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "6.4.16\tReference point CAPIF-8 (between the CAPIF core function and the resource owner client)",
                            "text_content": "The CAPIF-8 reference point exists between the CAPIF core function and the resource owner client.\nThe CAPIF-8 reference point supports:\n-\tProviding authorization for resource access; and\n-\tManaging and revoking the provided authorization.\nNOTE:\tThe functionalities over CAPIF-8 is FFS and out of scope of the current release of the specification.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "6.5\tService-based interfaces",
                    "description": "",
                    "summary": "",
                    "text_content": "The CAPIF architecture contains the following service-based interfaces:\n-\tCccf:\tService-based interface exhibited by CAPIF core function.\n-\tCaef:\tService-based interface exhibited by API exposing function.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "7\tApplication of functional model to deployments",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "7.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The CAPIF deployments in centralized and distributed models are described in clause 7.2 and clause 7.3. The multiple CCFs deployment is described in clause 7.4.\nThe RNAA deployments are described in clause 7.5.\nThe CAPIF deployment models shown are not exhaustive.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.2\tCentralized deployment",
                    "description": "",
                    "summary": "",
                    "text_content": "The CAPIF can be deployed centrally as illustrated in the figure 7.2-1.\n\nThe figure depicts a centralized deployment of CAPIF (Centralized Access Point Infrastructure) in a 5G network, showcasing its role in providing high-speed connectivity and efficient network management.\nFigure 7.2-1: Centralized deployment of CAPIF\nIn one centralized deployment, the CAPIF core function and the API provider domain functions are co-located. The API invoker can interact independently with the CAPIF core function and the API exposing function including the service APIs. The CAPIF appears as a gateway for all API invoker interactions. The API invoker obtains the service API information and its entry point details from the CAPIF core function via CAPIF-1. The service communication point of entry for the service API is the API exposing function which also applies any access control or policy control to the internal interactions between the API invoker and the service API in coordination with the CAPIF core function.\nNOTE:\tThe API invoker can be outside the PLMN trust domain and will access the CAPIF via CAPIF-1e and CAPIF-2e instead of CAPIF-1 and CAPIF-2.\nAnother variation of the centralized deployment is where the CAPIF core function and the API exposing function is co-located where as other API provider domain functions (API publishing function and API management function) are not co-located with the API exposing function. In such deployment scenario, the CAPIF core function interacts with the API publishing function and the API management function via CAPIF-4 and CAPIF-5 reference points respectively.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.3\tDistributed deployment",
                    "description": "",
                    "summary": "",
                    "text_content": "The CAPIF can be deployed in a distributed manner illustrated in the figure 7.3-1.\n\nThe figure depicts a distributed deployment of the CAPIF within the PLMN trust domain, showcasing the various components and their interconnections. The CAPIF is a key component in the network, responsible for managing and controlling the flow of data within the network. The figure illustrates the various layers and components involved in the CAPIF's operation, including the central processing unit (CPU), memory, and network interface controllers (NICs). The figure also highlights the importance of network virtualization and the use of software-defined networking (SDN) in managing the CAPIF's operations. Overall, the figure provides a comprehensive overview of the CAPIF's role in the network and its integration with the PLMN trust domain.\nFigure 7.3-1: Distributed deployment of the CAPIF within PLMN trust domain\nIn distributed deployment, the CAPIF core function and the API provider domain functions are not co-located. The CAPIF core function interacts with the API exposing function, the API publishing function and the API management function via CAPIF-3, CAPIF-4 and CAPIF-5 reference points respectively. The API invoker can interact independently with the CAPIF core function and the API exposing function including the service APIs. In this deployment, the API exposing function appears as an agent for all service API invocations from the API invoker. The API invoker obtains the service API information and its entry point details from the CAPIF core function via CAPIF-1 interface. The first point of entry for the service API is the API exposing function during API invocation. The API exposing function acts as agent for service API applying any access control or policy control to the interactions between the API invoker and the service API in coordination with the CAPIF core function via CAPIF-3 interface.\nThe CAPIF can be deployed by splitting the functionality of the API exposing function among multiple API exposing function entities, of which one acts as the entry point. However there will be single API publishing function and single API management function in the API provider domain although there could be multiple API exposing function entities. The CAPIF deployment with cascading API exposing functions is as illustrated in the figure 7.3-2.\nThe figure depicts a distributed deployment of the CAPIF (Centralized Application Programming Interface Function) with cascading API exposing functions, illustrating the architecture of the system.\nFigure 7.3-2: Distributed deployment of the CAPIF with cascading API exposing functions\nIn this deployment option, the API exposing function can have several instances like AEF-1, AEF-2 and AEF-3 which can be assigned with different roles. The roles for each API exposing function are decided by the operator. In this illustration, the API exposing functions AEF-2 and AEF-3 provide service APIs for service X and service Y respectively. The API exposing function AEF-1 provides the service communication entry point to the service APIs for service X APIs and service Y APIs. The API exposing function AEF-1 for instance can hide the topology of service X APIs and service Y APIs from the API invoker. The API exposing function AEF-1 also applies any access control or policy control to the interactions between the API invoker and service X APIs and between the API invoker and service Y APIs, in coordination with the CAPIF core function using CAPIF-3.\nThe API invoker interacts with the CAPIF core function via CAPIF-1. The API invoker interacts with service (X&Y) APIs on the API exposing function AEF-1 via CAPIF-2. The API exposing function AEF-1 forwards the invocation of the service X API or service Y API from the API invoker to the API exposing functions AEF-2 or AEF-3 respectively via CAPIF-2. The API messages are forwarded via CAPIF-7 (in compliance with CAPIF-2 interaction between the API invoker and the AEF-1) in the interactions between API exposing functions. The API invoker cannot directly interact with service X APIs and service Y APIs provided by API exposing functions AEF-2 and AEF-3 respectively.\nDifferent splits of responsibility are possible. In another example illustrated in figure 7.3-3, the API exposing function AEF-1 could provide topology hiding for API exposing functions AEF-2 and AEF-3, plus access control for AEF-3. The API exposing function AEF-2 would provide its own access control, interacting with the CAPIF core function via CAPIF-3.\nThe figure depicts a distributed deployment of the CAPIF (Cloud-based Application Programming Interface Framework) with cascading API exposing functions. The architecture is designed to be scalable and flexible, allowing for easy integration and management of various applications. The figure illustrates the use of APIs to enable seamless communication and data exchange between different components of the system.\nFigure 7.3-3: Another example of distributed deployment of the CAPIF with cascading API exposing functions\nNOTE 1:\tThe API invoker can be outside the PLMN trust domain and will access the CAPIF via CAPIF-1e and CAPIF-2e instead of CAPIF-1 and CAPIF-2.\nWhen considering the 3rd party trust domain deployment, the API provider domain belongs to a 3rd party trust domain, the CAPIF core function belongs to PLMN trust domain and the API invoker belongs to PLMN trust domain as illustrated in figure 7.3-4.\nThe figure depicts a distributed deployment of CAPIF considering PLMN trust domain and third-party trust domain, with a focus on the PLMN trust domain. It illustrates the use of CAPIF (Centralized Authentication, Provisioning, and Identity Framework) to manage authentication, authorization, and trust in a distributed network. The figure shows the PLMN trust domain, which is the domain where the PLMN (Public Mobile Network) is trusted, and the third-party trust domain, which is the domain where third-party entities are trusted. The figure also includes a visual representation of the CAPIF framework, which is a key component of the distributed network architecture.\nFigure 7.3-4: Distributed deployment of CAPIF considering PLMN trust domain and 3rd party trust domain\nThe interactions between the AEF and the CAPIF core function is based on CAPIF-3e. The interactions between the API publisher function and the CAPIF core function is based on CAPIF-4e. The interactions between the API management function and the CAPIF core functions are based on CAPIF-5e. The interactions between the API invoker and the AEF are based on CAPIF-2e. The API provider domain functions may be deployed in the PLMN trust domain and the interactions of the API provider domain functions within CAPIF of the PLMN trust domain is not shown in the figure 7.3-4 and is as illustrated in figure 7.3-1.\nNOTE 2:\tFor deployments illustrated in figure 7.3-2 and figure 7.3-3, when the API provider domain belongs to the 3rd party trust domain, the interactions between the AEF of the API provider domain and API invoker belonging to the PLMN trust domain are carried over CAPIF-2e reference point and the interactions between the entities of the API provider domain and the CAPIF core function belonging to the PLMN trust domain are carried over CAPIF-3e, CAPIF-4e and CAPIF-5e as illustrated in figure 7.3-4.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.4\tMultiple CCFs deployment",
                    "description": "",
                    "summary": "",
                    "text_content": "Multiple CAPIF core functions may be deployed within the PLMN trust domain as illustrated in the figure 7.4-1. For simplicity, the API invoker is not shown.\nThe figure depicts a 4-1 configuration of multiple Cloud Computing Facilities (CCFs) within the PLMN trust domain, illustrating the deployment of these services within the network.\nFigure 7.4-1: Multiple CCFs deployment within the PLMN trust domain\nIn the distributed deployment, the CAPIF core function 1 and the CAPIF core function 2 interact with CAPIF core function 3 via CAPIF-6 reference point. The CAPIF core function 3 assumes the role of a centralized repository of service APIs in the PLMN trust domain.\nNOTE:\tThe CAPIF core function 3 can be connected with the API exposing function(s) and API invokers.\nThe CAPIF core function 1 and the CAPIF core function 2 publishes the service API provided by its connected API exposing function(s) to the CAPIF core function 3, and obtains the service API information provided by other CAPIF core function(s).\nAn API invoker (not shown in the figure for simplicity) connected to the CAPIF core function 1 is able to discover and invoke the service APIs provided by the API exposing function connected to the CAPIF core function 2.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "7.5\tRNAA deployments",
                    "description": "",
                    "summary": "",
                    "text_content": "CAPIF supports RNAA and has enabled API invoker(s) to have authorized access to resources of a resource owner provided by service APIs offered by the AEF. The CCF acts as the Authorization Function and supports the authentication and authorization of the resource owner. Based on resource owner's authorization, the CCF provides the access token for a service API access to the API invoker. The API invoker performs service API invocations on the AEF by utilizing the access token.\nThe API invoker may be deployed in the following ways:\na.\tAPI invoker may be deployed as AF on the UE (i.e. 3rd party application).\nb.\tAPI invoker may be deployed as AF on the UE supporting several other 3rd party applications deployed on the UE.\nc.\tAPI invoker may be deployed on the network as AF.\nThe resource owner is considered to be connected via a UE and can interact using a Resource Owner Client deployed on the UE with the CCF acting as the Authorization Function for authentication and authorization i.e., granting permission to the API invoker to access resource(s) of the resource owner provided by the service API.\nNOTE:\tThe details of the protocol for CAPIF supporting RNAA is specified in 3GPP TS 33.122 [12].\nWhen API invoker is deployed on a UE (cases a and b), the API invoker is allowed to access the resources of the resource owner corresponding to the UE.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "8\tProcedures and information flows",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "8.1\tOnboarding the API invoker to the CAPIF",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.1.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for onboarding the API invoker to the CAPIF. The CAPIF enables a one time onboarding process that enrolls the API invoker as a recognized user of the CAPIF, which may be triggered by the API invoker via CAPIF-1 or CAPIF-1e, or may be based on provisioning.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.1.2\tInformation flows",
                            "text_content": "Table 8.1.2.1-1 describes the information flow onboard API invoker request from the API invoker to the CAPIF core function.\nTable 8.1.2.1-1: Onboard API invoker request\n\nTable 8.1.2.2-1 describes the information flow onboard API invoker response from the CAPIF core function to the API invoker.\nTable 8.1.2.2-1: Onboard API invoker response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.1.2.1-1: Onboard API invoker request",
                                    "table number": 2,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.1.2.2-1: Onboard API invoker response",
                                    "table number": 3,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.1.3\tProcedure",
                            "text_content": "Figure 8.1.3-1 illustrates the procedure for onboarding the API invoker to the CAPIF. The security aspects of this procedure are specified in subclause 6.1 of 3GPP TS 33.122 [12].\nPre-conditions:\n1.\tThe API invoker is not a recognized user of the CAPIF.\n2.\tThe API invoker has visibility to APIs information (e.g., API catalogue or dashboard - central place for the API provider to manage which APIs are displayed, giving API invokers the ability to enroll for).\nThe figure depicts a step-by-step procedure for onboarding an API invoker to the CAPIF, a cloud-based platform for API management. The figure includes a flowchart with arrows indicating the sequence of actions, a list of steps, and a brief description of each step. The steps involve setting up the API invoker, configuring the API, and integrating the API with the CAPIF. The figure is useful for understanding the process and ensuring a smooth integration.\nFigure 8.1.3-1: Procedure for onboarding the API invoker to the CAPIF\n1.\tFor enrollment of the API invoker to be a recognized user of the CAPIF, the API invoker triggers onboard API invoker request towards the CAPIF core function, providing the information as required for the API management.\n2.\tThe CAPIF core function begins the onboarding process by verifying whether all the necessary information has been provided to onboard the API invoker, and further initiates a grant process. Successful onboarding results in provisioning API invoker profile which includes identity for the API invoker. The authorization information and the list of APIs and the types of APIs that the API invoker can access subsequent to successful onboarding may also be created.\nNOTE 1:\tCompletion of onboarding process can require explicit grant by the CAPIF administrator or the API management, which is left out-of-scope of this solution. CAPIF can handle the grant process internally without the need of explicit grant by the CAPIF administrator.\nNOTE 2:\tThe API invoker profile consists of at least the identity information for the API invoker, information required for the authentication and authorization by the CAPIF and the CAPIF identity information.\n3.\tIf the API invoker has triggered the onboard API invoker request and is granted permission, the onboard API invoker response provides success indication including information from the provisioned API invoker profile which may include information to allow the API invoker to be authenticated and to obtain authorization for service APIs.\n4.\tAs a result of successful onboarding process, the CAPIF core function is able to authenticate and authorize the API invoker.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.2\tOffboarding the API invoker from the CAPIF",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.2.1\tGeneral",
                            "text_content": "This subclause defines the procedure for offboarding the API invoker from the CAPIF. The offboarding process makes the API invoker no longer a recognized user of the CAPIF. The procedure is triggered by the API invoker over CAPIF-1 or CAPIF-1e.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.2.2\tInformation flows",
                            "text_content": "This subclause describes the information flows for the API invoker offboarding.\nTable 8.2.2.1-1 describes the information flow offboard API invoker request from the API invoker to the CAPIF core function.\nTable 8.2.2.1-1: Offboard API invoker request\n\nTable 8.2.2.2-1 describes the information flow offboard API invoker response from the CAPIF core function to the API invoker.\nTable 8.2.2.2-1: Offboard API invoker response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.2.2.1-1: Offboard API invoker request",
                                    "table number": 4,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.2.2.2-1: Offboard API invoker response",
                                    "table number": 5,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.2.3\tProcedure",
                            "text_content": "Figure 8.2.3-1 illustrates the procedure for offboarding the API invoker from the CAPIF, triggered by the API invoker. The security aspects of this procedure are specified in subclause 6.8 of 3GPP TS 33.122 [12].\nPre-conditions:\n1.\tThe API invoker has been onboarded as a recognized user of the CAPIF.\nThe figure depicts a procedure for offboarding the API invoker from the CAPIF, illustrating the steps involved in terminating the API invoker's access to the CAPIF. The figure includes a flowchart with arrows indicating the sequence of actions, and labels for each step, such as \"Request,\" \"Confirm,\" and \"Confirm.\" The figure also includes a \"Done\" button at the end, indicating that the API invoker's access has been terminated.\nFigure 8.2.3-1: Procedure for offboarding the API invoker from the CAPIF\n1.\tThe API invoker triggers offboard API invoker request to the CAPIF core function, providing the information as required for the API management.\n2.\tThe CAPIF core function cancels the enrollment of the API invoker from CAPIF. The API invoker ceases to be a recognized user of the CAPIF. All the authorizations corresponding to the API invoker are revoked from CAPIF. Optionally, the information of the API invoker may be retained at the CAPIF core function as per the operator policy.\nNOTE:\tCompletion of offboarding process can require explicit notification to the CAPIF administrator or the API management, which is left out-of-scope of this solution. CAPIF can handle the de-provisioning process internally without the need of explicit grant by the CAPIF administrator.\n3.\tThe CAPIF core function returns the offboard API invoker response providing successful offboarding indication.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.3\tPublish service APIs",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.3.1\tGeneral",
                            "text_content": "The CAPIF supports publishing service APIs by the API provider. The API publishing function can be within PLMN trust domain or within 3rd party trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.3.2\tInformation flows",
                            "text_content": "Table 8.3.2.1-1 describes the information flow service API publish request from the API publishing function to the CAPIF core function.\nTable 8.3.2.1-1: Service API publish request\n\nThe Service KPIs is defined as below:\nTable 8.3.2.1-2: Service KPIs\n\nTable 8.3.2.2-1 describes the information flow service API publish response from the CAPIF core function to the API publishing function.\nTable 8.3.2.2-1: Service API publish response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.3.2.1-1: Service API publish request",
                                    "table number": 6,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.3.2.1-2: Service KPIs",
                                    "table number": 7,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.3.2.2-1: Service API publish response",
                                    "table number": 8,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.3.3\tProcedure",
                            "text_content": "Figure 8.3.3-1 illustrates the procedure for publishing the service APIs. The service API publish mechanism is supported by the CAPIF core function.\nPre-conditions:\n1.\tAuthorization details of the APF are available with the CAPIF core function.\n2.\tAPI invokers may have subscribed with the CAPIF core function to obtain new service API information.\n\nThe figure depicts a 3D representation of the publish service APIs, illustrating their structure and functionality. The APIs are organized in a hierarchical manner, with each API represented as a separate entity. The figure also includes a legend to help users understand the different types of APIs and their respective functions.\nFigure 8.3.3-1: Publish service APIs\n1.\tThe API publishing function sends a service API publish request to the CAPIF core function, with the details of the service API. If the service API is to be shared to other CAPIF core functions, the shareable information and the CAPIF provider domain information are included.\n2.\tUpon receiving the service API publish request, the CAPIF core function checks whether the API publishing function is authorized to publish service APIs. If the check is successful, the service API information provided by the API publishing function is stored at the CAPIF core function (API registry).\n3.\tThe CAPIF core function provides a service API publish response to the API publishing function indicating success or failure result and triggers notifications to subscribed API invokers as described in subclause 8.8.4.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.4\tUnpublish service APIs",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.4.1\tGeneral",
                            "text_content": "The CAPIF supports unpublishing service APIs by the API provider. Once the service API information is unpublished, it is no more available to be discovered by API invokers. The API publishing function can be within PLMN trust domain or within 3rd party trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.4.2\tInformation flows",
                            "text_content": "Table 8.4.2.1-1 describes the information flow service API unpublish request from the API publishing function to the CAPIF core function.\nTable 8.4.2.1-1: Service API unpublish request\n\nTable 8.4.2.2-1 describes the information flow service API unpublish response from the CAPIF core function to the API publishing function.\nTable 8.4.2.2-1: Service API unpublish response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.4.2.1-1: Service API unpublish request",
                                    "table number": 9,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.4.2.2-1: Service API unpublish response",
                                    "table number": 10,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.4.3\tProcedure",
                            "text_content": "Figure 8.4.3-1 illustrates the procedure for unpublishing the service APIs. The service API unpublish mechanism is supported by the CAPIF core function.\nPre-conditions:\n1.\tAuthorization details of the APF are available with the CAPIF core function.\n2.\tAPI invokers may have subscribed with the CAPIF core function to obtain notification regarding service API unpublish.\nThe figure depicts a simplified representation of the publish service APIs in a 4.3-1 version of the software. The APIs are organized into three main categories: publish, subscribe, and subscribe-to-publish. Each category is further divided into sub-categories, such as publish-to-publish, publish-to-subscribe, and subscribe-to-publish. The APIs are designed to be modular and can be used independently, allowing for easy integration with other services. The figure also includes a diagram of the publish service, illustrating the flow of data between the different components.\nFigure 8.4.3-1: Unpublish service APIs\n1.\tThe API publishing function sends a service API unpublish request to the CAPIF core function, with service API published information reference provided by the CAPIF core function when the service API was published.\n2.\tUpon receiving the service API unpublish request, the CAPIF core function checks whether the API publishing function is authorized to unpublish service APIs. If the check is successful, the service API information provided by the API publishing function is removed at the CAPIF core function (API registry).\n3.\tThe CAPIF core function provides a service API unpublish response to the API publishing function and triggers notifications to subscribed API invokers as described in subclause 8.8.4.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.5\tRetrieve service APIs",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.5.1\tGeneral",
                            "text_content": "The CAPIF supports retrieving the published service APIs information by the API provider. The API publishing function can be within PLMN trust domain or within 3rd party trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.5.2\tInformation flows",
                            "text_content": "Table 8.5.2.1-1 describes the information flow service API get request from the API publishing function to the CAPIF core function.\nTable 8.5.2.1-1: Service API get request\n\nTable 8.5.2.2-1 describes the information flow service API get response from the CAPIF core function to the API publishing function.\nTable 8.5.2.2-1: Service API get response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.5.2.1-1: Service API get request",
                                    "table number": 11,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.5.2.2-1: Service API get response",
                                    "table number": 12,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.5.3\tProcedure",
                            "text_content": "Figure 8.5.3-1 illustrates the procedure for retrieving the service APIs. The service API retrieval mechanism is supported by the CAPIF core function.\nPre-condition:\n1.\tAuthorization details of the APF are available with the CAPIF core function.\nThe figure depicts a network diagram with various service APIs highlighted, illustrating the different APIs that can be used to retrieve information or perform tasks within the network.\nFigure 8.5.3-1: Retrieve service APIs\n1.\tThe API publishing function sends a service API get request to the CAPIF core function, with service API published information reference provided by the CAPIF core function when the service API was published.\n2.\tUpon receiving the service API get request, the CAPIF core function checks whether the API publishing function is authorized to get published service APIs information. If the check is successful, the corresponding service API information is retrieved from the CAPIF core function (API registry).\n3.\tThe CAPIF core function provides a service API get response to the API publishing function which includes the service API information.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.6\tUpdate service APIs",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.6.1\tGeneral",
                            "text_content": "The CAPIF core function allows the service API provider to update the information related to the published service API, e.g. a change in the characteristics of the service API. This procedure is initiated by the API publishing function to the CAPIF core function. The API publishing function can be within PLMN trust domain or within 3rd party trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.6.2\tInformation flows",
                            "text_content": "Table 8.6.2.1-1 describes the information flow service API update request from the API publishing function to the CAPIF core function.\nTable 8.6.2.1-1: Service API update request\n\nNOTE:\tHow to monitor service API status when the APF is unable to update service API status is not specified in this release.\nTable 8.6.2.2-1 describes the information flow service API update response from the CAPIF core function to the API publishing function.\nTable 8.6.2.2-1: Service API update response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.6.2.1-1: Service API update request",
                                    "table number": 13,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.6.2.2-1: Service API update response",
                                    "table number": 14,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.6.3\tProcedure",
                            "text_content": "Figure 8.6.3-1 illustrates the procedure for updating the published service APIs information. The service API update mechanism is supported by the CAPIF core function.\nPre-conditions:\n1.\tAuthorization details of the APF are available with the CAPIF core function.\n2.\tAPI invokers may have subscribed with the CAPIF core function to obtain notification regarding update to service API information.\nThe figure depicts a simplified representation of the update service APIs for an application. The APIs are represented as a series of rectangles, each labeled with a service name and a corresponding API endpoint. The rectangles are connected by lines, indicating the flow of data between the APIs. The figure is a visual aid for understanding the structure and flow of the update service APIs, making it easier to navigate and understand the updates.\nFigure 8.6.3-1: Update service APIs\n1.\tThe API publishing function sends a service API update request to the CAPIF core function, which includes the service API published information reference provided by the CAPIF core function when the service API was published and the new service API information which is to be updated.\n2.\tUpon receiving the service API update request, the CAPIF core function checks whether the API publishing function is authorized to update the published service APIs information. If the check is successful, the service API information provided by the API publishing function is updated at the CAPIF core function (API registry).\n3.\tThe CAPIF core function provides a service API update response to the API publishing function and triggers notifications to subscribed API invokers as described in subclause 8.8.4.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.7\tDiscover service APIs",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.7.1\tGeneral",
                            "text_content": "The following procedure in this subclause corresponds to the architectural requirements on discover service APIs.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.7.2\tInformation flows",
                            "text_content": "Table 8.7.2.1-1 describes the information flow service API discover request from the API invoker to the CAPIF core function.\nTable 8.7.2.1-1: Service API discover request\n\nTable 8.7.2.2-1 describes the information flow service API discover response from the CAPIF core function to the API invoker.\nTable 8.7.2.2-1: Service API discover response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.7.2.1-1: Service API discover request",
                                    "table number": 15,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.7.2.2-1: Service API discover response",
                                    "table number": 16,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.7.3\tProcedure",
                            "text_content": "Figure 8.7.3-1 illustrates the procedure for discover service APIs.\nThe service API discovery mechanism is supported by the CAPIF core function.\nPre-conditions:\n1.\tThe API invoker is onboarded and has received an API invoker identity.\n2.\tThe CAPIF core function is configured with a discovery policy information (e.g. to restrict discovery to category of APIs) for API invoker(s).\nThe figure depicts a simplified representation of the service APIs available for discovering and accessing various telecommunication services. The APIs are organized into three categories: discovery APIs, access APIs, and management APIs. Each category is further divided into sub-categories, such as discovery APIs for mobile networks, access APIs for fixed networks, and management APIs for network management. The figure also includes a legend to help users understand the different types of APIs and their corresponding functions.\nFigure 8.7.3-1: Discover service APIs\n1.\tThe API invoker sends a service API discover request to the CAPIF core function. It includes the API invoker identity, and may include query information.\n2.\tUpon receiving the service API discover request, the CAPIF core function verifies the identity of the API invoker (via authentication). The CAPIF core function retrieves the stored service API(s) information from the CAPIF core function (API registry) as per the query information in the service API discover request. Further, the CAPIF core function applies the discovery policy and performs filtering of service APIs information retrieved from the CAPIF core function.\n3.\tThe CAPIF core function sends a service API discover response to the API invoker with the list of service API information for which the API invoker has the required authorization.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.8\tSubscription, unsubscription and notifications for the CAPIF events",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.8.1\tGeneral",
                            "text_content": "The CAPIF core function enables the subscribing entity (i.e. the API invoker, the API exposing function, the API publishing function, the API management function) to subscribe to and unsubscribe from the CAPIF events such as availability events of service APIs, change in service API information, monitoring service API invocations, API invoker onboarding events, etc. The subscription, unsubscription and notification for the CAPIF events are enabled on the following CAPIF reference points:\n-\tCAPIF-1 or CAPIF-1e: the API invoker can subscribe to and unsubscribe from CAPIF events and receive notifications from the CAPIF core function;\n-\tCAPIF-3 or CAPIF-3e: the AEF can subscribe to and unsubscribe from CAPIF events and receive notifications from the CAPIF core function;\n-\tCAPIF-4 or CAPIF-4e: the API publishing function can subscribe to and unsubscribe from CAPIF events and receive notifications from the CAPIF core function; and\n-\tCAPIF-5 or CAPIF-5e: the API management function can subscribe to and unsubscribe from CAPIF events and receive notifications from the CAPIF core function.\nNOTE:\tSupport for subscriptions and notifications can also be part of the actual service APIs. That type of subscriptions and notifications is not covered by the provisions in this clause.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.8.2\tInformation flows",
                            "text_content": "Table 8.8.2.1-1 describes the information flow for event subscription request from the subscribing entity to the CAPIF core function.\nTable 8.8.2.1-1: Event subscription request\n\nTable 8.8.2.2-1 describes the information flow for event subscription response from the CAPIF core function to the subscribing entity.\nTable 8.8.2.2-1: Event subscription response\n\nTable 8.8.2.3-1 describes the information flow for event notification from the CAPIF core function to the subscribing entity. A notification about an event is sent to a subscribing entity if the event criteria in the related subscription match the corresponding attributes of the event content.\nTable 8.8.2.3-1: Event notification\n\nTable 8.8.2.4-1 describes the information flow event notification acknowledgement from the subscribing entity to the CAPIF core function.\nTable 8.8.2.4-1: Event notification acknowledgement\n\nTable 8.8.2.5-1 describes the information flow for event unsubscription request from the subscribing entity to the CAPIF core function.\nTable 8.8.2.5-1: Event unsubscription request\n\nTable 8.8.2.6-1 describes the information flow for event unsubscription response from the CAPIF core function to the subscribing entity.\nTable 8.8.2.6-1: Event unsubscription response\n\nTable 8.8.2.7-1 describes the information flow for event subscription update request from the subscribing entity to the CAPIF core function.\nTable 8.8.2.7-1: Event subscription update request\n\nTable 8.8.2.8-1 describes the information flow for event subscription update response from the CAPIF core function to the subscribing entity.\nTable 8.8.2.2-1: Event subscription update response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.8.2.1-1: Event subscription request",
                                    "table number": 17,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.8.2.2-1: Event subscription response",
                                    "table number": 18,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.8.2.3-1: Event notification",
                                    "table number": 19,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.8.2.4-1: Event notification acknowledgement",
                                    "table number": 20,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.8.2.5-1: Event unsubscription request",
                                    "table number": 21,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.8.2.6-1: Event unsubscription response",
                                    "table number": 22,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.8.2.7-1: Event subscription update request",
                                    "table number": 23,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.8.2.2-1: Event subscription update response",
                                    "table number": 24,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.8.3\tProcedure for CAPIF event subscription",
                            "text_content": "Figure 8.8.3-1 illustrates the procedure for CAPIF events subscription.\nPre-conditions:\n1.\tThe subscribing entity has the authorization to subscribe for the CAPIF events.\n\nThe figure depicts a procedure for CAPIF event subscription, which is a crucial step in managing and monitoring network events. The figure shows a step-by-step process for initiating the subscription, including selecting the event type, specifying the event parameters, and submitting the subscription request. The figure is essential for ensuring that network events are accurately recorded and managed, contributing to the overall security and reliability of the network.\nFigure 8.8.3-1: Procedure for CAPIF event subscription\n1.\tThe subscribing entity sends an event subscription request to the CAPIF core function in order to receive notification of events.\n2.\tUpon receiving the event subscription request from the subscribing entity, the CAPIF core function checks for the relevant authorization for the event subscription.\n3.\tIf the authorization is successful, the CAPIF core function stores the subscription information.\n4.\tThe CAPIF core function sends an event subscription response indicating successful operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.8.4\tProcedure for CAPIF event notifications",
                            "text_content": "Figure 8.8.4-1 illustrates the procedure for CAPIF event notifications.\nPre-conditions:\n1.\tThe subscription procedure as illustrated in figure 8.8.3-1 is performed by the subscribing entity.\n\nThe figure depicts a procedure for CAPIF (Cellular Automatic Packet Identifier) event notifications, illustrating the steps involved in notifying network operators of a cellular packet identifier (CPID) event. The figure includes a flowchart with arrows indicating the sequence of actions, and a legend to clarify the different symbols and their meanings. The diagram is a visual representation of the process, making it easy to understand and follow.\nFigure 8.8.4-1: Procedure for CAPIF event notifications\n1.\tThe CAPIF core function generates events to be consumed by the subscribing entity(s).\n2.\tFor the generated event, the CAPIF core function retrieves the list of corresponding subscriptions.\n3.\tThe CAPIF core function sends event notifications to all the subscribing entity(s) that have subscribed for the event matching the criteria. If a notification reception information is available as part of the subscribing entity event subscription, then the notification reception information is used by the CAPIF core function to send event notifications to the subscribing entity.\n4.\tThe subscribing entity sends an event notification acknowledgement to the CAPIF core function for the event notification received.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.8.5\tProcedure for CAPIF event unsubscription",
                            "text_content": "Figure 8.8.5-1 illustrates the procedure for CAPIF event unsubscription.\nPre-condition:\n1.\tThe subscribing entity has subscribed to the CAPIF events.\nThe figure depicts a procedure for unsubscription from the CAPIF event, which is a crucial step in managing network traffic and ensuring network stability. The figure shows a step-by-step process for unsubscription, including the identification of the event, the removal of the subscription, and the re-subscription of the event. This procedure is essential for maintaining network performance and preventing network congestion.\nFigure 8.8.5-1: Procedure for CAPIF event unsubscription\n1.\tThe subscribing entity sends an event unsubscription request to the CAPIF core function with the information of the subscribed CAPIF event.\n2.\tUpon receiving the event unsubscription request from the subscribing entity, the CAPIF core function checks for the event subscription corresponding to the subscribing entity and further checks if the subscribing entity is authorized to unsubscribe from the CAPIF event.\n3.\tIf the event subscription information corresponding to the subscribing entity is available and the subscribing entity is authorized to unsubscribe for the CAPIF event, the CAPIF core function removes the subscription information.\n4.\tThe CAPIF core function sends an event unsubscription response indicating successful operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.8.5a\tProcedure for CAPIF event subscription update",
                            "text_content": "Figure 8.8.5a-1 illustrates the procedure for CAPIF events subscription update.\nPre-conditions:\n1.\tThe subscribing entity has the authorization to update subscriptions for CAPIF events.\n2.\tThe subscribing entity has created subscriptions for CAPIF events.\n\nThe figure depicts a procedure for CAPIF event subscription, which is a crucial step in managing and monitoring network events in a 5G network. The figure shows a step-by-step process for initiating the subscription, including selecting the appropriate event type, specifying the event parameters, and submitting the subscription request. The figure also includes a visual representation of the event subscription process, with arrows indicating the flow of data and the steps involved. This figure is essential for network administrators and operators to ensure that they can effectively manage and monitor network events in a 5G network.\nFigure 8.8.5a-1: Procedure for CAPIF event subscription\n1.\tThe subscribing entity sends an event subscription update request to the CAPIF core function in order update a previous subscription to receive notification of events.\n2.\tUpon receiving the event subscription update request from the subscribing entity, the CAPIF core function checks for the relevant authorization for the event subscription update.\n3.\tIf the authorization is successful, the CAPIF core function updates the subscription information.\n4.\tThe CAPIF core function sends an event subscription update response indicating successful operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.8.6\tList of CAPIF events",
                            "text_content": "Table 8.8.6-1 provides a non-exhaustive list of CAPIF events.\nTable 8.8.6-1: List of CAPIF events\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.8.6-1: List of CAPIF events",
                                    "table number": 25,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        }
                    ]
                },
                {
                    "title": "8.9\tRevoking subscription of the CAPIF events",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.9.1\tGeneral",
                            "text_content": "The CAPIF core function allows to revoke subscription of CAPIF events for the subscribing entity related to the service API changes, such as availability events of service APIs, change in service API information, monitoring service API invocations, API invoker onboarding events, etc. This procedure is initiated by the CAPIF core function.\nNOTE:\tIt is optional to trigger notification by the CAPIF core function for revocation of subscription for CAPIF event(s).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.9.2\tInformation flows",
                            "text_content": "This subclause describes the information flows for CAPIF event subscription revocation.\nTable 8.9.2.1-1 describes the information flow for subscription revoke notification from the CAPIF core function to the subscribing entity.\nTable 8.9.2.1-1: Subscription revoke notification\n\nTable 8.9.2.2-1 describes the information flow for subscription revoke notification acknowledgement from the subscribing entity to the CAPIF core function.\nTable 8.9.2.2-1: Subscription revoke notification acknowledgement\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.9.2.1-1: Subscription revoke notification",
                                    "table number": 26,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.9.2.2-1: Subscription revoke notification acknowledgement",
                                    "table number": 27,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.9.3\tProcedure",
                            "text_content": "Figure 8.9.3-1 illustrates the procedure for subscription revocation, triggered by the CAPIF core function.\nPre-conditions:\n1.\tThe subscribing entity has previously subscribed to CAPIF event(s) to the CAPIF core function.\nThe figure depicts a procedure for revoking a subscription of the CAPIF events, which is a crucial step in managing and controlling the flow of information within a telecommunications network. The figure shows a step-by-step process, including the identification of the event, the cancellation of the subscription, and the notification to the subscriber. This figure is essential for ensuring the smooth operation of the network and maintaining the security and reliability of the communication services.\nFigure 8.9.3-1: Procedure for revoking subscription of the CAPIF events\n1.\tThe CAPIF core function decides to revoke subscription of CAPIF event(s) for the subscribing entity.\n2.\tThe CAPIF core function sends subscription revoke notification to the subscribing entity.\n3.\tThe subscribing entity provides a subscription revoke notification acknowledgement to the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.10\tAuthentication between the API invoker and the CAPIF core function",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.10.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for authentication between the API invoker and the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.10.2\tInformation flows",
                            "text_content": "NOTE:\tThe security aspects of this procedure are specified in subclause 6.2 and subclause 6.3.1 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.10.3\tProcedure",
                            "text_content": "Figure 8.10.3-1 illustrates the procedure for authentication between the API invoker and the CAPIF core function.\nPre-conditions:\n1.\tThe API invoker is onboarded with the CAPIF core function and the API invoker profile is created.\n\nThe figure depicts a step-by-step procedure for authentication between the API invoker and the CAPIF core function, illustrating the process of API interaction and authentication.\nFigure 8.10.3-1: Procedure for authentication between the API invoker and the CAPIF core function\n1.\tThe API invoker triggers authentication to the CAPIF core function, including the identity confirmed after successful onboarding.\n2.\tUpon receiving the authentication request, the CAPIF core function verifies the identity with the API invoker profile and authenticates the API invoker.\nNOTE 1:\tThe authentication process is specified in subclause 6.2 and subclause 6.3.1 of 3GPP TS 33.122 [12].\n3.\tThe CAPIF core function returns the result of the API invoker identity verification in the authentication response.\nNOTE 2:\tThe CAPIF core function can share the information required for authentication of the API invoker at the AEF.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.11\tAPI invoker obtaining authorization to access service API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.11.1\tGeneral",
                            "text_content": "The API invoker requires to execute this procedure when it needs to obtain or re-obtain (e.g. upon expiry of the authorization information) the authorization to access the service API. Once the API invoker receives the authorization to access the service API, the API invoker can perform one or multiple service API invocations as per the permission limit. This procedure may be performed during the API invoker onboarding process.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.11.2\tInformation flows",
                            "text_content": "NOTE:\tThe security aspects of this procedure are specified in subclause 6.5.2.3 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.11.3\tProcedure",
                            "text_content": "Figure 8.11.3-1 illustrates the procedure for obtaining authorization to access the service API.\nPre-condition:\n1.\tThe API invoker is onboarded and has received an API invoker identity.\nThe figure depicts a procedure for an API invoker to obtain authorization for service API access. It includes steps such as obtaining the API key, verifying the API's existence, and validating the API's permissions. The figure is essential for ensuring secure and authorized access to the API.\nFigure 8.11.3-1: Procedure for the API invoker obtaining authorization for service API access\n1.\tThe API invoker sends an obtain service API authorization request to the CAPIF core function for obtaining permission to access the service API by including the API invoker identity information and any information required for authentication of the API invoker.\n2.\tThe CAPIF core function validates the authentication of the API invoker (using authentication information) and checks whether the API invoker is permitted to access the requested service API.\nNOTE 1:\tThe authentication process is specified in subclause 6.5.2.3 of 3GPP TS 33.122 [12].\n3.\tBased on the API invoker's subscription information the authorization information to access the service APIs is sent to the API invoker in the obtain service API authorization response.\nNOTE 2:\tThe mechanism for distribution of the authorization information for the API invoker to the API exposing function is specified in subclause 6.5.2.3 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.12\tAEF obtaining service API access control policy",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.12.1\tGeneral",
                            "text_content": "The CAPIF core function is the central repository of all the policies related to service APIs. The AEF executes this procedure when it needs to obtain the policy to perform access control on the service API invocations (e.g. when policy for performing access control on service API is unavailable at the AEF). The AEF can be within PLMN trust domain or within 3rd party trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.12.2\tInformation flows",
                            "text_content": "Table 8.12.2.1-1 describes the information flow obtain access control policy request from the AEF to the CAPIF core function.\nTable 8.12.2.1-1: Obtain access control policy request\n\nTable 8.12.2.2-1 describes the information flow obtain access control policy response from the CAPIF core function to the AEF.\nTable 8.12.2.2-1: Obtain access control policy response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.12.2.1-1: Obtain access control policy request",
                                    "table number": 28,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.12.2.2-1: Obtain access control policy response",
                                    "table number": 29,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.12.3\tProcedure",
                            "text_content": "Figure 8.12.3-1 illustrates the procedure for obtaining policy to perform access control on the service API invocations.\nPre-conditions:\n1.\tThe AEF is hosting the service API but the policy to perform access control is not available with AEF.\n2.\tThe CAPIF core function is configured with the access control policies corresponding to one or more service APIs.\n3.\tAuthorization details of the AEF are available with the CAPIF core function.\nThe figure depicts a procedure for obtaining service API access control policy, which is crucial for ensuring secure and efficient communication in a telecommunication network.\nFigure 8.12.3-1: Procedure for the AEF obtaining service API access control policy\n1.\tThe AEF sends an obtain access control policy request to the CAPIF core function for obtaining the policy to perform the access control on service API invocations by including the details of the hosted service API.\n2.\tThe CAPIF core function checks whether the AEF is authorized to receive the access control policy corresponding to the service APIs requested.\n3.\tIf authorization check is successful, the AEF is provided the access control policy for the service API via an obtain access control policy response. If authorization check is not successful, the AEF is provided with a failure indication via a obtain access control policy response.\nNOTE:\tTo maintain synchronization between the AEF and the CAPIF core function for the policy cached at AEF, the AEF can subscribe to the policy update event at CAPIF core function according to the procedure in subclause 8.8.3 and receive notifications about any updated policy at CAPIF core function according to the procedure in subclause 8.8.4.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.13\tTopology hiding",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.13.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for hiding the topology of the PLMN trust domain from the API invokers accessing the service APIs from outside the PLMN trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.13.2\tInformation flows",
                            "text_content": "The information flow service API invocation request from the API invoker to AEF-1 (AEF acting as service communication entry point) is service API specific and the complete detail of the service API invocation request is out of scope of the present document. Table 8.17.2.1-1 describes the CAPIF related information elements which are included in the service API invocation request.\nThe information flow service API invocation request from AEF-1 (AEF acting as service communication entry point) to AEF-2 (destination AEF for handling service API) is service API specific and the complete detail of the service API invocation request is out of scope of the present document. Table 8.17.2.1-1 describes the CAPIF related information elements which are included in the service API invocation request.\nThe information flow service API invocation response from AEF-2 (destination AEF for handling service API) to AEF-1 (AEF acting as service communication entry point) is service API specific and the complete detail of the service API invocation response is out of scope of the present document. Table 8.17.2.2-1 describes the CAPIF related information elements which are included in the service API invocation response.\nThe information flow service API invocation response from AEF-1 (AEF acting as service communication entry point) to the API invoker is service API specific and the complete detail of the service API invocation response is out of scope of the present document. Table 8.17.2.2-1 describes the CAPIF related information elements which are included in the service API invocation response.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.13.3\tProcedure",
                            "text_content": "Figure 8.13.3-1 illustrates the procedure for CAPIF topology hiding.\nPre-conditions:\n1.\tThe API invoker has performed the service discovery and received the details of the service API which includes the information about the service communication entry point of the AEF-1 in the CAPIF.\n2.\tThe API invoker is authenticated and authorized to use the service API.\n3.\tThe AEF-1 in the CAPIF is configured with a policy for topology hiding including the entry point address of the service API (provided via AEF-2).\nThe figure depicts a CAPIF (Cross-Layer Architecture for IP Flow Inhibition) topology, which is a method used to hide IP flows in a network. The diagram shows the steps involved in the process, including the use of routing protocols and network protocols. The figure is used to illustrate the concept of hiding IP flows in a network, which is an important aspect of network security and network management.\nFigure 8.13.3-1: Procedure for CAPIF topology hiding\n1.\tThe API invoker performs service API invocation according to the interface of the service API by sending a service API invocation request towards the AEF-1 which exposes the service API towards the API invoker, and acts as topology hiding entity.\nNOTE:\tSteps 2 and 3 are not necessary when the AEF-1 is capable to serve the service API invocation request.\n2.\tThe AEF-1 further resolves the actual destination service API address information according to the topology hiding policy and forwards the incoming service API invocation request to the service API of the related AEF-2.\n3.\tThe AEF-1 receives a response request for service API invocation from service API provided by AEF-2.\n4.\tThe AEF-1 resolves the destination API invoker address and also modifies the source address information of the AEF-2 within the response request as per topology hiding policy and forwards the response request to the API invoker.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.14\tAuthentication between the API invoker and the AEF prior to service API invocation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.14.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for authentication of the API invoker by the AEF.\nTo reduce latency during API invocation, the API invoker associated authentication information can be made available at the AEF after authentication between the API invoker and the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.14.2\tInformation flows",
                            "text_content": "NOTE:\tThe security aspects of this procedure are specified in subclause 6.4 and subclause 6.5.2 of 3GPP TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.14.3\tProcedure",
                            "text_content": "Figure 8.14.3-1 illustrates the procedure for authentication between the API invoker and the AEF.\nPre-conditions:\n1.\tOptionally, the CAPIF core function has shared the information required for authentication of the API invoker with the AEF.\nThe figure depicts a step-by-step procedure for authentication between the API invoker and the AEF before service API invocation. It includes steps such as API request, API response, and API invocation. The figure is important for ensuring secure communication between the API invoker and the AEF, as it helps to prevent unauthorized access to sensitive information.\nFigure 8.14.3-1: Procedure for authentication between the API invoker and the AEF prior to service API invocation\n1.\tThe API invoker triggers authentication initiation to the AEF, including the API invoker identity.\n2.\tThe AEF obtains the API invoker information required for authentication by the AEF, if not available.\n3.\tThe AEF returns the result of authentication initiation in the authentication initiation response.\n4.\tThe AEF verifies the identity of the API invoker and authenticates the API invoker.\nNOTE 1:\tThe authentication process is specified in subclause 6.4 and subclause 6.5.2 of 3GPP TS 33.122 [12].\nNOTE 2:\tThe authentication is terminated at the AEF acting as the service communication entry point when topology hiding is enabled for the service API.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.15\tAuthentication between the API invoker and the AEF upon the service API invocation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.15.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for authentication of the API invoker by the AEF upon the service API invocation.\nTo reduce latency during API invocation, the API invoker associated authentication information can be made available at the AEF after authentication between the API invoker and the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.15.2\tInformation flows",
                            "text_content": "NOTE:\tThe security aspects of this procedure are specified in subclause 6.5.2.3 of 3GPP TS 33.122 [12].\nThe information flow service API invocation request with authentication information from the API invoker to the AEF is service API specific and the complete detail of the service API invocation request is out of scope of the present document. Table 8.15.2.1-1 describes only the CAPIF related information elements which are included in the service API invocation request.\nTable 8.15.2.1-1: Service API invocation request with authentication information\n\nThe information flow service API invocation response from the AEF to the API invoker is service API specific and the complete detail of the service API invocation response is out of scope of the present document. Table 8.15.2.2-1 describes only the CAPIF related information elements which are included in the service API invocation response.\nTable 8.15.2.2-1: Service API invocation response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.15.2.1-1: Service API invocation request with authentication information",
                                    "table number": 30,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.15.2.2-1: Service API invocation response",
                                    "table number": 31,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.15.3\tProcedure",
                            "text_content": "Figure 8.15.3-1 illustrates the procedure for authentication of the API invoker by the AEF, where the authentication information is carried in the API invocation request.\nPre-conditions:\n1.\tOptionally, the CAPIF core function has shared the information required for authentication of the API invoker with the AEF.\n\nThe figure depicts a procedure for authentication between the API invoker and the AEF upon the service API invocation. It illustrates the steps involved in verifying the identity of the API invoker and the AEF, ensuring secure communication between the two entities.\nFigure 8.15.3-1: Procedure for authentication between the API invoker and the AEF upon the service API invocation\n1.\tThe API invoker invokes a service API invocation request with authentication information to the AEF, and includes in this request authentication information, including the API invoker identity.\n2.\tThe AEF obtains the API invoker information required for authentication by the AEF, if not available.\n3.\tThe AEF verifies the identity of the API invoker and authenticates the API invoker.\nNOTE 1:\tThe authentication process is specified in subclause 6.5.2.3 of 3GPP TS 33.122 [12].\n4.\tIf the verification was successful, the AEF returns the result of the service API invocation in the Service API invocation response.\nNOTE 2:\tThe authentication is terminated at the AEF acting as the service communication entry point when topology hiding is enabled for the service API.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.16\tService API invocation with AEF authorization",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.16.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements to validate authorization of API invokers upon the service API invocation.\nTo reduce latency during API invocation, the API invoker associated authorization information can be made available at the AEF after authentication between the API invoker and the CAPIF core function.\nNOTE:\tThe security aspects of service API invocation are specified in TS 33.122 [12] clause 6.4 (CAPIF-2) and 6.5 (CAPIF-2e).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.16.2\tInformation flows",
                            "text_content": "The information flow service API invocation request from the API invoker to the AEF is service API specific and the complete detail of the service API invocation request is out of scope of the present document. Table 8.16.2.1-1 describes only the CAPIF related information elements which are included in the service API invocation request.\nTable 8.16.2.1-1: Service API invocation request\n\nThe information flow service API invocation response from the AEF to the API invoker is service API specific and the complete detail of the service API invocation response is out of scope of the present document. Table 8.16.2.2-1 describes only the CAPIF related information elements which are included in the service API invocation response.\nTable 8.16.2.2-1: Service API invocation response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.16.2.1-1: Service API invocation request",
                                    "table number": 32,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.16.2.2-1: Service API invocation response",
                                    "table number": 33,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.16.3\tProcedure",
                            "text_content": "Figure 8.16.3-1 illustrates the procedure for API invoker authorization to access service APIs.\nPre-conditions:\n1.\tThe API invoker has been authenticated.\n2.\tThe API invoker associated authorization information is available at AEF.\n\n\nThe figure depicts a step-by-step procedure for API invoker authorization to access service APIs, with a focus on the authorization process. It includes steps such as obtaining the API key, validating the API key, and accessing the API. The figure is a visual representation of the process, making it easy to understand and follow.\nFigure 8.16.3-1: Procedure for API invoker authorization to access service APIs\n1.\tThe API invoker triggers service API invocation request to the AEF, including the service API to be invoked.\nNOTE 1:\tAuthentication can also be performed if not authenticated previously.\nNOTE 2:\tThe API invoker can trigger several service API invocations asynchronously.\n2.\tUpon receiving the service API invocation request, the AEF checks whether the API invoker is authorized to invoke that service API, based on the authorization information.\n2a.\tIf the AEF does not have information required to authorize service API invocation, the AEF obtains the authorization information from the CAPIF core function.\n3.\tThe AEF executes the service logic for the invoked service API.\n4.\tThe API invoker receives the service API invocation response as a result of the service API invocation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.17\tCAPIF access control",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.17.1\tGeneral",
                            "text_content": "The CAPIF controls the access of service API by the API invoker based on policy or usage limits.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.17.2\tInformation flows",
                            "text_content": "The information flow service API invocation request from the API invoker to the AEF is service API specific and the complete detail of the service API invocation request is out of scope of the present document. Table 8.17.2.1-1 describes only the CAPIF related information elements which are included in the service API invocation request.\nTable 8.17.2.1-1: Service API invocation request\n\nThe information flow service API invocation response from the AEF to the API invoker is service API specific and the complete detail of the service API invocation response is out of scope of the present document. Table 8.17.2.2-1 describes only the CAPIF related information elements which are included in the service API invocation response.\nTable 8.17.2.2-1: Service API invocation response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.17.2.1-1: Service API invocation request",
                                    "table number": 34,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.17.2.2-1: Service API invocation response",
                                    "table number": 35,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.17.3\tProcedure",
                            "text_content": "Figure 8.17.3-1 illustrates the procedure for service API access control.\nPre-conditions:\n1.\tThe API invoker has performed the service API discovery and received the details of the service API which includes the information about the service communication entry point of the AEF in the CAPIF.\n2.\tThe API invoker is authenticated and authorized to use the service API.\n3.\tThe AEF in the CAPIF is configured with at least one access policy to be applied to the service API invocation corresponding to the API invoker and service API.\n\nThe figure depicts a procedure for accessing the service API, with steps outlined in a step-by-step manner. The figure includes a flowchart, which visually represents the process, and a list of steps, providing a clear and concise guide for users to follow.\nFigure 8.17.3-1: Procedure for service API access control\n1.\tThe API invoker performs service API invocation according to the interface of the service API by sending a service API invocation request towards the AEF which exposes the service API towards the API invoker. The AEF acts as an access control entity.\n2.\tIf the access control policy is not configured with AEF, then the AEF may obtain the access control policy configuration from the CAPIF core function.\n3.\tUpon receiving the service API invocation request from the API invoker, the AEF checks for configuration for access control. As per the configuration for access control, the AEF performs access control on the service API invocation request as per the operator policy.\n4.\tThe API invoker receives a service API invocation response for service API invocation from the AEF providing the service API.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.18\tCAPIF access control with cascaded AEFs",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.18.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements related to some common access control requirements for service API invocations. It provides access control, based on two cascaded API Exposing Function (AEF) instances. While one AEF instance provides the entry point for the service API and acts as access controller, further AEF instances deliver the functionality of the actual service APIs.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.18.2\tInformation flows",
                            "text_content": "The information flow service API invocation request from the API invoker to the AEF and between AEFs is service API specific and the complete detail of the service API invocation request is out of scope of the present document. Table 8.17.2.1-1 describes the CAPIF related information elements which are included in the service API invocation request.\nThe information flow service API invocation response from the AEF to the API invoker and between AEFs is service API specific and the complete detail of the service API invocation response is out of scope of the present document. Table 8.17.2.2-1 describes the CAPIF related information elements which are included in the service API invocation response.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.18.3\tProcedure",
                            "text_content": "Figure 8.18.3-1 illustrates the procedure for CAPIF access control.\nPre-conditions:\n1.\tThe API invoker has performed the service discovery and received the details of the service API which includes the information about the service communication entry point of the AEF-1 in the CAPIF.\n2.\tThe API invoker is authenticated and authorized to use the service API.\n3.\tThe AEF-1 in the CAPIF is configured with at least one access policy to be applied to the service API invocation corresponding to the API invoker and service API.\nThe figure depicts a procedure for accessing CAPIF (Control Access Point Interface) in a network, with cascaded AEFs (Access Edge Facing) for enhanced security.\nFigure 8.18.3-1: Procedure for CAPIF access control with cascaded AEFs\n1.\tThe API invoker performs service API invocation according to the interface of the service API by sending a service API invocation request towards the AEF-1 which exposes the service API towards the API invoker, and acts as access control entity.\n2.\tUpon receiving the service API invocation request from the API invoker, the AEF-1 checks for configuration for access control. As per the configuration for access control, the AEF-1 performs access control on the service API invocation as per the operator policy.\n3.\tThe AEF-1 forwards the incoming service API invocation request to the service API provided by AEF-2.\n4.\tThe AEF-1 receives a service API invocation response for service API invocation from AEF-2.\n5.\tThe AEF-1 resolves the destination API invoker address and modifies the source address information of AEF-2 within the service API invocation response and forwards the service API invocation response to the API invoker.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.19\tLogging service API invocations",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.19.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for logging service API invocations at AEF. The AEF can be within PLMN trust domain or within 3rd party trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.19.2\tInformation flows",
                            "text_content": "Table 8.19.2.1-1 describes the information flow API invocation log request from the API exposing function to the CAPIF core function.\nTable 8.19.2.1-1: API invocation log request\n\nTable 8.19.2.2-1 describes the information flow API invocation log response from the CAPIF core function to the API exposing function.\nTable 8.19.2.2-1: API invocation log response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.19.2.1-1: API invocation log request",
                                    "table number": 36,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.19.2.2-1: API invocation log response",
                                    "table number": 37,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.19.3\tProcedure",
                            "text_content": "Figure 8.19.3-1 illustrates the procedure for logging service API invocations at AEF.\nPre-conditions:\n1.\tThe API invoker(s) has invoked certain service API(s).\n2.\tAuthorization details of the AEF are available with the CAPIF core function.\n\nThe figure depicts a step-by-step procedure for logging service API invocations, illustrating the process of logging requests and responses. The figure includes a flowchart with arrows indicating the sequence of actions, and labels for each step, such as \"Request\", \"Response\", and \"Error\". The figure is a visual representation of the process, making it easy to understand and follow.\nFigure 8.19.3-1: Procedure for logging service API invocations\n1.\tUpon invocation of service API(s) from one more API invokers, the AEF triggers API invocation log request towards the CAPIF core function.\nNOTE 1:\tThe AEF can collect the log information associated to several API invocations before triggering API invocation log request asynchronously.\n2.\tThe CAPIF core function makes a log entry and stores the information e.g. for charging purposes, for access by authorized users and entities.\nNOTE 2:\tAPI invocation log is stored for a configured duration.\n3.\tAEF receives the API invocation log response from the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.20\tCharging the invocation of service APIs",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.20.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for charging the invocation of service APIs. The AEF can be within PLMN trust domain or within 3rd party trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.20.2\tInformation flows",
                            "text_content": "NOTE:\tIt is in SA5 scope to develop the charging related information flows for this procedure.\nEditor's note:\tReference to the appropriate SA5 specification is needed.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.20.3\tProcedure",
                            "text_content": "Figure 8.20.3-1 illustrates the procedure for charging the invocation of service APIs.\nPre-conditions:\n1.\tAuthorization details of the AEF are available with the CAPIF core function.\nThe figure depicts a step-by-step procedure for charging the invocation of service APIs, illustrating the process of initiating a request to a service. The steps include setting up the API, creating a request, and finally, charging the request. This figure is crucial for understanding the process of using APIs and is essential for developers and system administrators.\nFigure 8.20.3-1: Procedure for charging the invocation of service APIs\n1.\tUpon invocation of service API(s) from one more API invokers, the AEF triggers an API invocation charging request and includes API invoker information (e.g. invoker's ID and IP address, location, timestamp) and service API information (e.g. service API name and version, invoked operation, input parameters, invocation result) towards the CAPIF core function.\nNOTE:\tThese requests can be triggered asynchronously.\n2.\tThe CAPIF core function performs a charging procedure which includes storing the information for access by authorized API management.\n3.\tThe AEF receives the API invocation charging response from the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.21\tMonitoring service API invocation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.21.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for monitoring service API invocation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.21.2\tInformation flows",
                            "text_content": "The information flow for the monitoring service API event notification from the CAPIF core function to the API management function is same as the event notification from the CAPIF core function to the subscribing entity. Table 8.8.2.3-1 describes the information elements which are included in the monitoring service API event notification.\nThe information flow for the monitoring service API event notification acknowledgement from the API management function to the CAPIF core function is same as the event notification acknowledgement from subscribing entity to the CAPIF core function. Table 8.8.2.4-1 describes the information elements which are included in the monitoring service API event notification acknowledgement.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.21.3\tProcedure",
                            "text_content": "Figure 8.21.3-1 illustrates the procedure for monitoring service API invocation.\nPre-conditions:\n1.\tThe API management function has subscribed to monitoring event including filters such as invoker's ID and IP address, service API name and version, input parameters, and invocation result.\n\nThe figure depicts a procedure for monitoring service API invocation, illustrating the steps involved in monitoring the API calls. The figure includes a flowchart with arrows indicating the sequence of actions, a list of steps, and a legend to clarify the meaning of each step. The steps include setting up the API, invoking the API, and monitoring the response. The figure is useful for understanding the process of monitoring API calls and can be used in various applications to ensure the proper functioning of APIs.\nFigure 8.21.3-1: Procedure for monitoring service API invocation\n1.\tThe CAPIF core function monitors the service API invocations applying the monitoring filters specified before.\n2.\tDetection of a monitoring event by the CAPIF core function triggers notification to the API management function with the details of the monitored event.\nNOTE:\tAPI provider action subsequent to monitoring service API notification is out-of-scope of this specification.\n3.\tThe API management function sends a monitoring service API event notification acknowledgement to the CAPIF core function for the notification received.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.22\tAuditing service API invocation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.22.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for auditing service API invocation. This procedure can be used for auditing of other CAPIF interactions i.e. service API invocation events, API invoker onboarding events and API invoker interactions with the CAPIF (e.g. authentication, authorization, discover service APIs) as well. The API management function can be within PLMN trust domain or within 3rd party trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.22.2\tInformation flows",
                            "text_content": "Table 8.22.2.1-1 describes the information flow query service API log request from the API management function to the CAPIF core function.\nTable 8.22.2.1-1: Query service API log request\n\nTable 8.22.2.2-1 describes the information flow query service API log response from the CAPIF core function to the API management function.\nTable 8.22.2.2-1: Query service API log response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.22.2.1-1: Query service API log request",
                                    "table number": 38,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.22.2.2-1: Query service API log response",
                                    "table number": 39,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.22.3\tProcedure",
                            "text_content": "Figure 8.22.3-1 illustrates the procedure for auditing service API invocation.\nPre-conditions:\n1.\tService API invocation logs are available at the CAPIF core function.\n2.\tAuthorization details of the AMF are available with the CAPIF core function.\nThe figure depicts a procedure for auditing service API invocation, illustrating the steps involved in verifying the correctness of API calls. It includes a flowchart that outlines the process, with key steps such as checking the request headers, verifying the request body, and validating the response. The figure is crucial for ensuring that APIs are functioning correctly and for identifying any potential issues that may arise during API usage.\nFigure 8.22.3-1: Procedure for auditing service API invocation\n1.\tFor auditing service API invocations, the API management function triggers query service API log request to the CAPIF core function.\n2.\tUpon receiving the query service API log request, the CAPIF core function accesses the necessary service API log information for auditing purposes.\n3.\tThe CAPIF core function returns the log information to the API management function in the query service API log response.\nNOTE:\tThe API management function detecting abuse of the service API invocation and actions, subsequent to query service API log response, are out-of-scope of this specification.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.23\tCAPIF revoking API invoker authorization",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.23.1\tGeneral",
                            "text_content": "The CAPIF controls the access of service API by the API invoker based on policy or usage limits. If the usage limits have exceeded, the authorization of the API invoker for accessing the service APIs is revoked. The decision to revoke the API invoker authorization may be triggered by the AEF or the CAPIF core function. The AEF can be within PLMN trust domain or within 3rd party trust domain.\nIn RNAA scenarios, the decision to revoke the API invoker authorization may be initiated by the CAPIF core function based on triggers at the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.23.2\tInformation flows",
                            "text_content": "Table 8.23.2.1-1 describes the information flow revoke API invoker authorization request from the API exposing function to the CAPIF core function or from the CAPIF core function to the API exposing function.\nTable 8.23.2.1-1: Revoke API invoker authorization request\n\nTable 8.23.2.2-1 describes the information flow revoke API invoker authorization response from the CAPIF core function to the API exposing function or from the API exposing function to the CAPIF core function.\nTable 8.23.2.2-1: Revoke API invoker authorization response\n\nTable 8.23.2.3-1 describes the information flow revoke API invoker authorization notify from the CAPIF core function to the API invoker.\nTable 8.23.2.3-1: Revoke API invoker authorization notify\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.23.2.1-1: Revoke API invoker authorization request",
                                    "table number": 40,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.23.2.2-1: Revoke API invoker authorization response",
                                    "table number": 41,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.23.2.3-1: Revoke API invoker authorization notify",
                                    "table number": 42,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.23.3\tProcedure for CAPIF revoking API invoker authorization initiated by AEF",
                            "text_content": "Figure 8.23.3-1 illustrates the procedure for revoking API invoker authorization to access service API initiated by the AEF.\nPre-conditions:\n1.\tThe API invoker is authenticated and authorized to use the service API.\n2.\tThe AEF in the CAPIF is configured with the access policy to be applied to the service API invocation corresponding to the API invoker and the service API.\n3.\tAuthorization details of the AEF are available with the CAPIF core function.\nThe figure depicts a procedure for revoking API invoker authorization initiated by AEF, which is a crucial step in ensuring secure communication between the API invoker and the API server. The figure illustrates the steps involved in revoking the authorization, including the identification of the API invoker, the initiation of the revocation process, and the subsequent steps to ensure the revocation is successful. The figure is important for ensuring that unauthorized access to the API is prevented, and that the API server is protected from potential attacks.\nFigure 8.23.3-1: Procedure for revoking API invoker authorization initiated by AEF\n1.\tThe AEF triggers the revocation of the API invoker authorization.\n2.\tThe AEF sends revoke API invoker authorization request to the CAPIF core function with the details of the API invoker and the service API.\n3.\tUpon receiving the information to revoke the API invoker's authorization for service API invocation, the CAPIF core function invalidates the API invoker authorization corresponding to the service API.\n4.\tThe CAPIF core function sends a revoke API invoker authorization response to the AEF.\n5.\tUpon successful revocation of API invoker authorization corresponding to the service API at the CAPIF core function, the AEF invalidates the API invoker authorization corresponding to the service API.\n6.\tThe CAPIF core function sends a revoke API invoker authorization notify to the API invoker whose authorization to access the service API has been revoked.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.23.4\tProcedure for CAPIF revoking API invoker authorization initiated by CAPIF core function",
                            "text_content": "Figure 8.23.4-1 illustrates the procedure for revoking API invoker authorization to access service API initiated by the CAPIF core function. This procedure is also used for revoking API invoker authorization supporting RNAA scenarios.\nPre-conditions:\n1.\tThe API invoker is authenticated and authorized to use the service API.\n2.\tThe AEF in the CAPIF is configured with the access policy to be applied to the service API invocation corresponding to the API invoker and the service API.\nThe figure depicts a procedure for revoking API invoker authorization initiated by CAPIF core function, which is a crucial step in ensuring secure communication between the API invoker and the API server. The figure illustrates the steps involved in revoking the authorization, including the identification of the API invoker, the initiation of the revocation process, and the subsequent steps to ensure the revocation is successful.\nFigure 8.23.4-1: Procedure for revoking API invoker authorization initiated by CAPIF core function\n1.\tThe CAPIF core function is triggered to revoke the API invoker authorization.\n2.\tThe CAPIF core function sends revoke API invoker authorization request to the AEF with the details of the API invoker and the service API.\n3.\tUpon receiving the information to revoke the API invoker's authorization for service API invocation, the AEF invalidates the API invoker authorization corresponding to the service API.\n4.\tThe AEF sends a revoke API invoker authorization response to the CAPIF core function.\n5.\tThe CAPIF core function invalidates the API invoker authorization corresponding to the service API.\n6.\tThe CAPIF core function sends a revoke API invoker authorization notify to the API invoker whose authorization to access the service API has been revoked.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.24\tAPI topology hiding management",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.24.1\tGeneral",
                            "text_content": "The following procedure in this subclause corresponds to the architectural requirements on API topology hiding. The procedure in this subclause supports API topology hiding by dynamically configuring the address of the AEF providing the Service API to the AEF entry point providing the topology hiding. The API publishing function and the API exposing function can be within PLMN trust domain or within 3rd party trust domain.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.24.2\tInformation flows",
                            "text_content": "Table 8.24.2.1-1 describes the information flow API topology hiding notify from the CAPIF core function to the API exposing function.\nTable 8.24.2.1-1: API topology hiding notify\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.24.2.1-1: API topology hiding notify",
                                    "table number": 43,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.24.3\tProcedure",
                            "text_content": "Figure 8.24.3-1 illustrates the procedure for API topology hiding management by API (un)publish function.\nPre-condition:\n1.\tAuthorization details of the APF are available with the CAPIF core function.\n2.\tThe API exposing function has subscribed to CAPIF event for API topology hiding status.\n\nThe figure depicts a network topology with API-based hiding, where API 1 is the primary API and API 2 is the secondary API. The primary API is responsible for publishing data, while the secondary API is responsible for receiving and publishing data. The figure shows the network's structure with the primary API at the top, followed by the secondary API, and then the data flow between the two APIs.\nFigure 8.24.3-1: API topology hiding via API (un)publish\n1.\tThe API publishing function sends a service API publish request as described in subclause 8.3.2.1 or a service API unpublish request as described in subclause 8.4.2.1 to the CAPIF core function.\n2.\tUpon receiving the service API (un)publish request, the CAPIF core function checks whether the API publishing function is authorized to perform the service API (un)publish. If authorized, based on the service APIs and policy:\n-\tFor service API publish, the CCF applies the topology hiding by selecting an AEF providing the topology hiding as the entry point for service API invocation. The selected AEF information is stored with the service API information received from API publish function at the CAPIF core function (API registry).\n-\tFor service API unpublish, the previously selected AEF as topology hinding entry point and the associated service API information at the CAPIF core function (API registry) are removed.\n3.\tThe CCF sends the API topology notify to the AEF selected as the entry point for service API invocation. The service API identification and the AEF(s) information which provides the service API details are included.\n4.\tUpon receiving the notification, the AEF stores the received information for further service API invocation request forwarding if the action in the API topology notify indicates \"created\" or removes the stored API forwarding information if the action in the API topology notify indicates \"revoked\".\n5.\tThe CCF sends an API (un)publish response to the API publish function.\n\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.25\tSupport for CAPIF interconnection",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.25.1\tGeneral",
                            "text_content": "The procedures in this subclause corresponds to the architectural requirements on CAPIF interconnection.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.25.2\tInformation flows",
                            "text_content": "Table 8.25.2.1-1 describes the information flow interconnection API publish request from CAPIF core function to CAPIF core function.\nTable 8.25.2.1-1: Interconnection API publish request\n\nTable 8.25.2.2-1 describes the information flow interconnection API publish response from CAPIF core function to CAPIF core function.\nTable 8.25.2.2-1: Interconnection API publish response\n\nTable 8.25.2.3-1 describes the information flow interconnection service API discover request from one CAPIF core function to another CAPIF core function.\nTable 8.25.2.3-1: Interconnection service API discover request\n\nTable 8.25.2.4-1 describes the information flow interconnection service API discover response from one CAPIF core function to another CAPIF core function.\nTable 8.25.2.4-1: Interconnection service API discover response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.25.2.1-1: Interconnection API publish request",
                                    "table number": 44,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.25.2.2-1: Interconnection API publish response",
                                    "table number": 45,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.25.2.3-1: Interconnection service API discover request",
                                    "table number": 46,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.25.2.4-1: Interconnection service API discover response",
                                    "table number": 47,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.25.3\tProcedure",
                            "text_content": "This subclause describes the procedure for service API publish for CAPIF interoperation.\nPre-condition:\n1.\tCCF-A and CCF-B connect to each other, and either belong to the single trust domain of the same CAPIF provider or trust domains of different CAPIF providers.\n2.\tCCF-B is configured as the designated CAPIF core function in the trust domain of CAPIF provider A.\n3.\tWhen CCF-A and CCF-B belong to trust domains of different CAPIF providers, the two CAPIF providers have business agreement for service API sharing.\n\n\nThe figure depicts a network interface controller (NIC) interface, specifically the 25.3.1-1 interface, which is used for publishing API services. The interface is connected to a network interface controller (NIC) and is responsible for managing the network's API services. The figure shows the interface's layout and connections, including the network interface controller (NIC) and the network interface controller (NIC) interface.\nFigure 8.25.3.1-1: Interconnection API publish\n1.\tCCF-A gets the service APIs to be shared with CCF-B from the API publish function which is in the same CAPIF provider domain of CCF-A as described in subclause 8.3.3, or from another CCF as described in this procedure.\n2.\tBased on the shareable information for the service API or the service API category information, the CCF-A determines to publish the service API or the service API category information to the CCF-B. The CCF-A sends the interconnection API publish request to CCF-B with the details of at least one of service APIs or the category information of the service APIs, along with the identity information of CCF-A, shareable information and CAPIF provider domain information if allowed to share. The API topology hiding may be enabled.\n3.\tCCF-B stores the service API information or service API category provided by the CCF-A.\n4.\tCCF-B provides an interconnection API publish response to the CCF-A indicating success or failure result and triggers notifications to subscribed API invokers as described in subclause 8.8.4.\nThis subclause describes a procedure for service API discovery involving multiple CCFs\nPre-condition:\n1.\tCCF-A and CCF-B connect to each other, and either belong to the single trust domain of the same CAPIF provider or trust domains of different CAPIF providers.\n2.\tWhen CCF-A and CCF-B belong to trust domains of different CAPIF providers, the two CAPIF providers have business agreement for service API sharing.\n\nThe figure depicts a service API discover process involving multiple Cloud Compute Functions (CCFs), illustrating the complexity and interdependence of cloud services.\nFigure 8.25.3.2-1: Service API discovery y involving multiple CCFs\n1.\tThe API invoker sends a service API discover request to the CCF-A. It includes the API invoker identity, and may include query information.\n2.\tThe CCF-A verifies the identity of the API invoker and retrieves the stored service API(s) information and service API categories. The information of CCF-B with the service API category matching the discovery criteria is returned to API invoker in the service API discover response.\nNOTE:\tThe remaining steps are only applied when the service API category is included in the interconnection API publish request as described in subclause 8.25.2.1.\n3.\tThe API invoker sends an service API discover request to the CCF-B. The identity of API invoker is included. The query information is also provided.\n4.\tUpon receiving the service API discover request, the CCF-B verifies the identity of the API invoker. The CCF-B retrieves the stored service API(s) information as per the query information in the service API discover request. Further, the CCF-B applies the discovery policy and performs filtering of service APIs information which matches the discovery criteria.\n5.\tThe CCF-B sends an service API discover response to the API invoker with the list of service API information for which the API invoker has the required authorization.\nThis subclause describes a procedure for service API discovery for CAPIF interconnection. The CCF-A and the CCF-B may belong to the same CAPIF provider domain or different CAPIF provider domains. When the CCF-A and the CCF-B belong to different CAPIF provider domains, the two CAPIF providers shall have business agreement for service API discovery.\nPre-conditions:\n1.\tThe CCF-A is configured with the CCF-B information.\n2.\tThe CCF-B is configured with the CCF-A information.\n3.\tThe CCF-A is triggered (e.g. API invoker service API discovery, periodic service API discovery) to perform service API discovery with the CCF-B.\nThe figure depicts a service API discover Y for CAPIF interconnection, illustrating the process of discovering a service API for CAPIF interconnection. The figure includes various components such as the CAPIF interconnection, service API, and the discovery process.\nFigure 8.25.3.3-1: Service API discovery for CAPIF interconnection\n1.\tThe CCF-A sends the interconnection service API discover request to the CCF-B. The identity of the CCF-A and the query information are included.\n2.\tThe CCF-B upon receiving the interconnection service API discover request verifies the identity of the CCF-A. The CCF-B retrieves the stored service API(s) or the CCF(s) information as per the query information in the interconnection service API discover request. Further, the CCF-B applies the discovery policy and performs the filtering of service APIs or the CCF(s) information. The topology hiding policy may be applied to the retrieved list of service API information.\n3.\tThe CCF-B sends the interconnection service API discover response to the CCF-A with the list of service API information for which the CCF-A has the required authorization or the CCF(s) information that matches the discovery criteria.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.26\tUpdate API invoker's API list",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.26.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for updating the API invoker's API list on the CAPIF core function. The CAPIF enables API invoker to update its own API list e.g. subsequent to discovering new API(s).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.26.2\tInformation flows",
                            "text_content": "Table 8.26.2.1-1 describes the information flow update API invoker API list request from the API invoker to the CAPIF core function.\nTable 8.26.2.1-1: Update API invoker API list request\n\nTable 8.26.2.2-1 describes the information flow update API invoker API list response from the CAPIF core function to the API invoker.\nTable 8.26.2.2-1: Update API invoker API list response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.26.2.1-1: Update API invoker API list request",
                                    "table number": 48,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.26.2.2-1: Update API invoker API list response",
                                    "table number": 49,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.26.3\tProcedure",
                            "text_content": "Figure 8.26.3-1 illustrates the procedure for updating the API invoker API list on the CAPIF.\nPre-conditions:\n1.\tThe API invoker has been onboarded as a recognized user of the CAPIF and associated API invoker profile is provisioned.\n2.\tThe API invoker has visibility to new APIs information (e.g. updates on API catalogue or dashboard, API discovery).\nThe figure depicts a procedure for updating the API invoker profile on the CAPIF, which is a crucial component of the CAPIF API. The figure illustrates the steps involved in updating the profile, including the selection of the API invoker, the creation of a new profile, and the submission of the updated profile to the CAPIF. The figure is essential for ensuring that the API invoker profile is up-to-date and meets the requirements of the CAPIF.\nFigure 8.26.3-1: Procedure for updating the API invoker profile on the CAPIF\n1.\tFor updating of the API invoker API list on the CAPIF, the API invoker triggers update API invoker API list request towards the CAPIF core function, providing the information to be updated (e.g. enroll new APIs, disenroll APIs).\n2.\tThe CAPIF core function updates the API invoker API list of the requesting API invoker, according to the grant from the CAPIF administrator or the API management.\nNOTE:\tCompletion of updating process can require explicit grant by the CAPIF administrator or the API management, which is left out-of-scope of this solution. CAPIF can handle the grant process internally without the need of explicit grant by the CAPIF administrator.\n3.\tThe update API invoker API list response provides partial success or complete success or failure indication. Partial success and complete success result will include APIs information that the API invoker can access. When the update status is failure, the reason for failure and information for which API(s) the update operation has failed is included.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.27\tDynamically routing service API invocation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.27.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for dynamic routing of service API invocation. The CAPIF enables dynamically routing the service API invocation request based on the detailed information of the invocation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.27.2\tInformation flows",
                            "text_content": "Table 8.27.2.1-1 describes the information flow dynamic routing information request from the API exposing function to the CAPIF core function.\nTable 8.27.2.1-1: Obtain routing information request\n\nTable 8.27.2.2-1 describes the information flow dynamic routing information response from the CAPIF core function to the API exposing function.\nTable 8.27.2.2-1: Obtain routing information response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.27.2.1-1: Obtain routing information request",
                                    "table number": 50,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.27.2.2-1: Obtain routing information response",
                                    "table number": 51,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.27.3\tProcedure",
                            "text_content": "Figure 8.27.3-1 illustrates the procedure for dynamically routing the service API invocation from the AEF acting as service communication entry point to the destination AEF for handling service API.\nPre-conditions:\n1.\tThe API invoker has performed the service discovery and received the details of the service API which includes the information about the service communication entry point of the AEF-1 in the CAPIF.\n2.\tThe API invoker is authenticated and authorized to use the service API.\n3.\tThe AEF-1 is the AEF acting as service communication entry point for the service API, and AEF-2 is one of the multiple destination AEF which provides the service API.\nThe figure depicts a procedure for dynamic routing of service API invocation, illustrating the steps involved in routing requests to the appropriate service API. The figure includes a flowchart with arrows indicating the sequence of actions, such as initiating the request, selecting the service API, and finally, the response. The figure also includes a legend to explain the different colors and symbols used in the flowchart, such as \"Request\", \"Service API\", \"Response\", and \"Error\". The figure is a visual representation of the process, making it easy to understand and follow.\nFigure 8.27.3-1: Procedure for dynamic routing of service API invocation\n1.\tThe API invoker performs service API invocation according to the interface of the service API by sending a service API invocation request towards the AEF-1 which exposes the service API towards the API invoker, and acts as topology hiding entity.\n2.\tIf the routing rule information for the service API invocation is not available, the AEF-1 sends obtain routing information request to the CAPIF core function.\n3.\tThe CAPIF core function creates routing rule information for the service API and sends obtain routing information response with the routing rule information.\nNOTE:\tSteps 2 and 3 can be performed before step 1and after receiving the API topology hiding notify as described in subclause 8.24.3.\n4.\tThe AEF-1 further resolves the actual destination of the service API address information (AEF-2) according to the routing rule information and the invocation parameters in service API invocation request.\n5.\tThe AEF-1 forwards the incoming service API invocation request to AEF-2.\n6.\tThe AEF-2 returns the service API invocation response to AEF-1.\n7.\tThe AEF-1 sends the service API invocation response to the API invoker.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.28\tRegistering the API provider domain functions on the CAPIF",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.28.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for registering the API provider domain functions on the CAPIF. This procedure registers the API provider domain functions as authorized users of the CAPIF functionalities.\nEditor's Note:\tThe security aspects of this procedure are FFS in SA3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.28.2\tInformation flows",
                            "text_content": "Table 8.28.2.1-1 describes the information flow, registration request, from the API management function to the CAPIF core function.\nTable 8.28.2.1-1: Registration request\n\nTable 8.28.2.2-1 describes the information flow, registration response, from the CAPIF core function to the API management function.\nTable 8.28.2.2-1: Registration response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.28.2.1-1: Registration request",
                                    "table number": 52,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.28.2.2-1: Registration response",
                                    "table number": 53,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.28.3\tProcedure",
                            "text_content": "Figure 8.28.3-1 illustrates the procedure for registering API provider domain functions on the CAPIF core function.\nThe figure depicts a procedure for registering API provider domain functions on CAPIF, a cloud-based platform for API management. The process involves creating a new API provider domain, defining the functions to be registered, and submitting the request to CAPIF for approval. The figure illustrates the steps involved in the registration process, including the creation of a new domain, the selection of functions to be registered, and the submission of the request to CAPIF for approval.\nFigure 8.28.3-1: Procedure for registration of API provider domain functions on CAPIF\n1.\tFor registration of API provider domain functions on the CAPIF core function, the API management function sends a registration request to the CAPIF core function. The registration request contains a list of information about all the API provider domain functions, which require registration on the CAPIF core function.\n2.\tThe CAPIF core function validates the received request and generates the identity and other security related information for all the API provider domain functions listed in the registration request.\n3.\tThe CAPIF core function sends the generated information in the registration response message to the API management function.\n4.\tThe API management function configures the received information to the individual API provider domain functions.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.29\tUpdate registration information of the API provider domain functions on the CAPIF",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.29.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for update of the registration information of the API provider domain functions on the CAPIF.\nEditor's Note:\tThe security aspects of this procedure are FFS in SA3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.29.2\tInformation flows",
                            "text_content": "Table 8.29.2.1-1 describes the information flow, registration update request, from the API management function to the CAPIF core function.\nTable 8.29.2.1-1: Registration update request\n\nTable 8.29.2.2-1 describes the information flow, registration update response, from the CAPIF core function to the API management function.\nTable 8.29.2.2-1: Registration update response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.29.2.1-1: Registration update request",
                                    "table number": 54,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.29.2.2-1: Registration update response",
                                    "table number": 55,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.29.3\tProcedure",
                            "text_content": "Figure 8.29.3-1 illustrates the procedure for updating the registration information of the API provider domain functions on the CAPIF core function.\nThe figure depicts a procedure for updating registration information of API provider domain functions on CAPIF, with a focus on the steps involved in the update process.\nFigure 8.29.3-1: Procedure for update of registration information of API provider domain functions on CAPIF\n1.\tFor updating the registration information of API provider domain functions on the CAPIF core function, the API management function sends a registration update request to the CAPIF core function. The registration update request contains a list of information about all the API provider domain functions, which require registration update on the CAPIF core function.\n2.\tThe CAPIF core function validates the received request and updates the identity and other security related information for all the API provider domain functions listed in the registration request.\n3.\tThe CAPIF core function sends the updated information in the registration update response message to the API management function.\n4.\tThe API management function configures the received information to the individual API provider domain functions.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.30\tDeregistering the API provider domain functions on the CAPIF",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.30.1\tGeneral",
                            "text_content": "The procedure in this subclause corresponds to the architectural requirements for deregistering the API provider domain functions on the CAPIF. This procedure deregisters the API provider domain functions as authorized users of the CAPIF functionalities.\nEditor's Note:\tThe security aspects of this procedure are FFS in SA3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.30.2\tInformation flows",
                            "text_content": "Table 8.30.2.1-1 describes the information flow, deregistration request, from the API management function to the CAPIF core function.\nTable 8.30.2.1-1: Deregistration request\n\nTable 8.30.2.2-1 describes the information flow, deregistration response, from the CAPIF core function to the API management function.\nTable 8.30.2.2-1: Deregistration response\n\n",
                            "figures_meta_data": [],
                            "tables": [
                                {
                                    "description": "Table 8.30.2.1-1: Deregistration request",
                                    "table number": 56,
                                    "summary": "",
                                    "name": ""
                                },
                                {
                                    "description": "Table 8.30.2.2-1: Deregistration response",
                                    "table number": 57,
                                    "summary": "",
                                    "name": ""
                                }
                            ]
                        },
                        {
                            "title": "8.30.3\tProcedure",
                            "text_content": "Figure 8.30.3-1 illustrates the procedure for deregistering API provider domain functions on the CAPIF core function.\nThe figure depicts a procedure for de-registration of API provider domain functions on CAPIF, with a focus on the steps involved in the process. The figure includes a flowchart, which outlines the sequence of actions and the logical flow of the process. The steps are numbered and labeled, making it easy to follow the procedure. The figure also includes a legend, which provides a visual representation of the different functions that can be de-registered. Overall, the figure provides a clear and concise overview of the de-registration process for API provider domain functions on CAPIF.\nFigure 8.30.3-1: Procedure for deregistration of API provider domain functions on CAPIF\n1.\tFor deregistration of API provider domain functions on the CAPIF core function, the API management function sends a deregistration request to the CAPIF core function.\n2.\tThe CAPIF core function validates the received request and processes the deregistration request.\n3.\tThe CAPIF core function sends a deregistration response message to the API management function.\n4.\tThe API management function processes the deregistration to the individual API provider domain functions.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.31\tAPI invoker obtaining authorization from resource owner",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.31.1\tGeneral",
                            "text_content": "CAPIF may authorize the API invoker to invoke the service API based on the authorization information from the resource owner given before the API invocation.\nClause 8.31.3 shows the procedure for obtaining the authorization information.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.31.2\tInformation flows",
                            "text_content": "NOTE:\tThe security aspects of this procedure are specified in TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.31.3\t\tProcedure",
                            "text_content": "Figure 8.31.3-1 illustrates the procedure for API invoker obtaining authorization from resource owner.\nPre-conditions:\n1.\tThe resource owner can communicate with the API invoker.\n2.\tThe service API access requires obtaining authorization from resource owner.\n\nThe figure depicts a procedure for an API invoker to obtain authorization from a resource owner. It shows the steps involved in obtaining authorization, including obtaining the necessary permissions, verifying the identity of the resource owner, and obtaining the necessary permissions. The figure is important for ensuring that APIs are used responsibly and that the rights of the resource owner are respected.\nFigure 8.31.3-1: Procedure for API invoker obtaining authorization from resource owner\n1.\tThe API invoker requests to obtain resource owner authorization information to invoke the service API exposed by the API exposing function. The authorization function provides the authorization by involving the resource owner.\nNOTE:\tThe detailed procedure to obtain the resource owner's authorization information is specified in TS 33.122 [12].\n2.\tThe API invoker sends service API invocation request to the API exposing function with the resource owner authorization information received in step 1.\n3.\tThe API invoker receives the service API invocation response resulting from the service API invocation once the API exposing function has checked whether the API invoker is authorized to invoke that service API based on the authorization information.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "8.32\tReducing authorization information inquiry in a nested API invocation",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "8.32.1\tGeneral",
                            "text_content": "The nested API invocation scenario is a scenario where the first API invocation towards the API exposing function 1 triggers this API exposing function to request another API invocation towards the API exposing function 2, which is in the same API provider domain that the API exposing function 1. Some service APIs may require invoking another service APIs. For example, if the API invoker invokes SEAL locationInfoRetrieval API, the location management server (acting as an API exposing server for the API invoker and as an API invoker for the NEF) may invoke NEF API to retrieve UE location information from 5GC. The CAPIF may reduce the authorization information inquiries for a nested API invocation scenario using procedure described in clause 8.32.3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.32.2\tInformation flows",
                            "text_content": "NOTE:\tThe security aspects of this procedure are specified in TS 33.122 [12].\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "8.32.3\t\tProcedure",
                            "text_content": "Figure 8.32.3-1 illustrates the procedure to obtain authorization information in a nested API invocation, in which an API exposing function receiving the service API invocation request interacts with another API exposing function to provide the service.\nPre-conditions:\n1.\tThe resource owner can communicate with the API invoker.\n2.\tThe API exposing functions 1 and 2 are in the same trust domain.\n\nThe figure depicts a procedure for obtaining authorization information in a nested API invocation, illustrating the steps involved in obtaining authorization for a nested API. The figure includes a flowchart with arrows indicating the sequence of actions, a list of steps, and a description of each step. The steps involve obtaining the authorization token, validating the token, and using the token to make API calls. The figure is useful for understanding the process of obtaining authorization for a nested API invocation and can be used in software development to ensure secure and compliant API usage.\nFigure 8.32.3-1: Procedure for obtaining authorization information in a nested API invocation\n1.\tThe API invoker requests authorization information to invoke the service API exposed by API exposing function 1.\nNOTE:\tThis step may use either the existing procedure to obtain authorization to access service API specified in clause 8.11 or the procedure that involves the resource owner client to get authorization information. For the latter case, the mechanisms to support interactions with Resource owner are specified in 3GPP TS 33.122 [12], with further possible CAPIF support for these mechanisms being out of scope of the current release.\n2.\tThe API invoker sends service API invocation request to the API exposing function 1 with the authorization information received in step 1.\n3.\tBased on the service API invocation request, the API exposing function 1 decides to invoke another service API exposed by the API exposing function 2.\n4.\tThe API exposing function 1, acting as an API invoker, obtains the authorization information to access the service API exposed by the API exposing function 2.\n5.\tThe API invoker sends service API invocation request to API exposing function 2 with the authorization information received in step 4.\n6.\tThe API exposing function 2, acting as an API invoker, receives the service API invocation response resulting from the service API invocation once API exposing function 2 has checked whether the API invoker is authorized to invoke that service API based on the authorization information.\n7.\tThe API invoker receives the service API invocation response resulting from the service API invocation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "9\tAPI consistency guidelines",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "9.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "This clause specifies the API consistency guidelines for all northbound APIs utilizing CAPIF architecture. The guidelines are categorized as follows:\n-\tfundamental API guidelines, applicable to all northbound APIs utilizing CAPIF; and\n-\tarchitecture design considerations, applicable to all northbound APIs utilizing CAPIF.\nThe API guidelines are also applicable for CAPIF APIs specified in the current specification.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "9.2\tFundamental API Guidelines",
                    "description": "",
                    "summary": "",
                    "text_content": "The specification of each northbound API utilizing the common API framework should define:\n1.\tthe function of the API;\n2.\tthe resource(s) or endpoints involved;\n3.\tthe list of supported operations and their usage;\n4.\tthe list of input and output parameters along with applicable schemas, as required;\n5.\tthe list of supported response codes;\n6.\tthe behaviour of the network entity exposing the APIs (e.g. the CAPIF core function or the API exposing function) for each supported operation;\n7.\tthe list of applicable data types; and\n8.\tthe list of applicable protocols and data serialization formats.\nIn order to facilitate the consistency of the northbound APIs utilizing the common API framework it is recommended to adopt the guidelines which define the following:\n1.\tconsistent nomenclature for the operations, data structures and resources/endpoints;\n2.\tdesign principles for the use of operations for common tasks; and\n3.\ta template for the consistent documentation of APIs.\nThe northbound APIs utilizing the common API framework should support the following properties:\n1.\tbe extensible, such that it is possible to accommodate future requirements, including vendor-specific needs;\nNOTE:\tThe extension does not replace any existing function in Northbound APIs.\n2.\tsupport access control mechanisms;\n3.\tsupport charging, if applicable; and\n4.\tbe backward and forward compatible with different versions of the same API.\nThe guidelines above are generic with regard to the API architecture. They are valid for network APIs that follow the RESTful architectural style and that expose resources towards the API invoker, as well as for network APIs of other architectures that expose general network endpoints towards the API invoker. A network endpoint represents one end of a communication channel through which the API consumer communicates with the API producer, using messages of a protocol defined by the API architecture. A resource is identified, and the corresponding endpoint is addressed, by a resource identifier (such as a URI).\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "9.3\tArchitecture design considerations",
                    "description": "",
                    "summary": "",
                    "text_content": "Northbound APIs utilizing common API framework should adhere to RESTful architecture, whenever possible. Service operations can use custom API operations (RPC-style interaction), when it is seen a better fit for the style of interaction to model, e.g. non-CRUD service operations.\nNOTE:\tThe selection of a particular API style is specific to each API implementation, and subject to Stage 3 scope.\nThe API design:\n1.\tshould have a uniform interface that conveys the resource/data model of the API to its client developers and:\na.\tthe implementation of the resource(s)/operations involved in the APIs should be hidden from the client, and adequate operations should be designed to operate on the resource(s)/data;\nb.\tany single API should be atomic;\nc.\tall resources/operations involved in APIs should be accessible through a common approach, and resources/data should be similarly modified using a consistent approach;\n2.\tshould allow the client (such as the API invoker) and the server (such as the CAPIF core function or the API exposing function) to evolve independently, i.e. the client should not have to be aware of the execution aspects of the APIs on the server;\n3.\tshould be stateless such that each request from the client (such as the API invoker) to the server (such as the CAPIF core function or the API exposing function) contains all of the information necessary for the server to understand the request;\n4.\tshould define the usage of standard operations, such as Create, Read, Update and Delete, consistently along with the applicable response codes;\n5.\tshould allow to label responses as cacheable or non-cacheable, to improve network efficiency by supporting caching in the client (such as the API invoker), if applicable in the API architecture;\n6.\tshould prevent unwanted modification of the resources/data during invocation of APIs; and\n7.\tshould support version control.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                }
            ]
        },
        {
            "title": "10\tCAPIF core function APIs",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "10.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "Table 10.1-1 illustrates the CAPIF core function APIs.\nTable 10.1-1: List of CAPIF core function APIs\n\n",
                    "tables": [
                        {
                            "description": "Table 10.1-1: List of CAPIF core function APIs",
                            "table number": 58,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "10.2\tCAPIF_Discover_Service_API API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.2.1\tGeneral",
                            "text_content": "API description: This API enables the API invoker to communicate with the CAPIF core function to discover the published service API information over CAPIF-1 or CAPIF-1e.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.2.2\tDiscover_Service_API operation",
                            "text_content": "API operation name: Discover_Service_API\nDescription: Provides the published service APIs information.\nKnown Consumers: API invoker.\nInputs: Refer subclause 8.7.2.1.\nOutputs: Refer subclause 8.7.2.2.\nSee subclause 8.7.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.2.3\tSubscribe_Event operation",
                            "text_content": "API operation name: Subscribe_Event\nDescription: Provides subscription to the CAPIF related event information.\nKnown Consumers: API invoker.\nInputs: Refer subclause 8.8.2.1.\nOutputs: Refer subclause 8.8.2.2.\nSee subclause 8.8.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.2.4\tNotify_Event operation",
                            "text_content": "API operation name: Notify_Event\nDescription: Provides the relevant CAPIF event information to the subscribed entities.\nKnown Consumers: API invoker.\nInputs: Refer subclause 8.8.2.3.\nOutputs: Refer subclause 8.8.2.4.\nSee subclause 8.8.4 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.2.5\tUnsubscribe_Event operation",
                            "text_content": "API operation name: Unsubscribe_Event\nDescription: Unsubscription to the CAPIF event information.\nKnown Consumers: API invoker.\nInputs: Refer subclause 8.8.2.5.\nOutputs: Refer subclause 8.8.2.6.\nSee subclause 8.8.5 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.2.6\tUpdate_Event_Subscription operation",
                            "text_content": "API operation name: Update_Event_Subscription\nDescription: Updates a subscription to CAPIF related event information.\nKnown Consumers: API invoker.\nInputs: Refer subclause 8.8.2.7.\nOutputs: Refer subclause 8.8.2.8.\nSee subclause 8.8.5a for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.3\tCAPIF_Publish_Service_API API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.3.1\tGeneral",
                            "text_content": "API description: This API enables the API publishing function to communicate with the CAPIF core function to publish the service API information and manage the published service API information over CAPIF-4.\nNOTE:\tStage 3 can decide whether the API for CAPIF_Publish_Service_API can be enabled over CAPIF-4.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.2\tPublish_Service_API operation",
                            "text_content": "API operation name: Publish_Service_API\nDescription: Publish the service API information.\nKnown Consumers: API publishing function.\nInputs: Refer subclause 8.3.2.1.\nOutputs: Refer subclause 8.3.2.2.\nSee subclause 8.3.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.3\tUnpublish_Service_API operation",
                            "text_content": "API operation name: Unpublish_Service_API\nDescription: Remove the published service API information.\nKnown Consumers: API publishing function.\nInputs: Refer subclause 8.4.2.1.\nOutputs: Refer subclause 8.4.2.2.\nSee subclause 8.4.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.4\tUpdate_Service_API operation",
                            "text_content": "API operation name: Update_Service_API\nDescription: Update the published service API information.\nKnown Consumers: API publishing function.\nInputs: Refer subclause 8.6.2.1.\nOutputs: Refer subclause 8.6.2.2.\nSee subclause 8.6.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.5\tGet_Service_API operation",
                            "text_content": "API operation name: Get_Service_API\nDescription: Retrieve the published service API information.\nKnown Consumers: API publishing function.\nInputs: Refer subclause 8.5.2.1.\nOutputs: Refer subclause 8.5.2.2.\nSee subclause 8.5.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.6\tSubscribe_Event operation",
                            "text_content": "API operation name: Subscribe_Event\nDescription: Provides subscription to the CAPIF related event information.\nKnown Consumers: API publishing function.\nInputs: Refer subclause 8.8.2.1.\nOutputs: Refer subclause 8.8.2.2.\nSee subclause 8.8.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.7\tNotify_Event operation",
                            "text_content": "API operation name: Notify_Event\nDescription: Provides the relevant CAPIF event information to the subscribed entities.\nKnown Consumers: API publishing function.\nInputs: Refer subclause 8.8.2.3.\nOutputs: Refer subclause 8.8.2.4.\nSee subclause 8.8.4 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.8\tUnsubscribe_Event operation",
                            "text_content": "API operation name: Unsubscribe_Event\nDescription: Unsubscription to the CAPIF event information.\nKnown Consumers: API publishing function.\nInputs: Refer subclause 8.8.2.5.\nOutputs: Refer subclause 8.8.2.6.\nSee subclause 8.8.5 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.3.9\tUpdate_Event_Subscription operation",
                            "text_content": "API operation name: Update_Event_Subscription\nDescription: Updates a subscription to CAPIF related event information.\nKnown Consumers: API publishing function.\nInputs: Refer subclause 8.8.2.7.\nOutputs: Refer subclause 8.8.2.8.\nSee subclause 8.8.5a for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.4\tCAPIF_Events API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.4.1\tGeneral",
                            "text_content": "API description: This API enables the API subscribing entity to communicate with the CAPIF core function to subscribe to and unsubscribe from CAPIF events and receive subsequent notification of CAPIF events. This API is used for the subscription to and notifications of those CAPIF events that are not bound to any of the other CAPIF core function APIs. The following are the key functionalities:\n-\tAPI invoker subscribes to CAPIF events over CAPIF-1 or CAPIF-1e.\n-\tAPI invoker receives notifications for subscribed CAPIF events over CAPIF-1 or CAPIF-1e.\n-\tAPI invoker unsubscribes from CAPIF events over CAPIF-1 or CAPIF-1e.\n-\tAPI invoker updates subscriptions for CAPIF events over CAPIF-1 or CAPIF-1e.\n-\tAPI exposing function subscribes to CAPIF events over CAPIF-3.\n-\tAPI exposing function receives notifications for subscribed CAPIF events over CAPIF-3.\n-\tAPI exposing function unsubscribes from CAPIF events over CAPIF-3.\n-\tAPI exposing function updates subscriptions for CAPIF events over CAPIF-3.\n-\tAPI publishing function subscribes to CAPIF events over CAPIF-4.\n-\tAPI publishing function receives notifications for subscribed CAPIF events over CAPIF-4.\n-\tAPI publishing function unsubscribes from CAPIF events over CAPIF-4.\n-\tAPI publishing function updates subscriptions for CAPIF events over CAPIF-4.\n-\tAPI management function subscribes to CAPIF events over CAPIF-5.\n-\tAPI management function receives notifications for subscribed CAPIF events over CAPIF-5.\n-\tAPI management function unsubscribes from CAPIF events over CAPIF-5.\n-\tAPI management function updates subscriptions for CAPIF events over CAPIF-5.\nNOTE:\tStage 3 can further decide if CAPIF_Events API can be further fine grained into more APIs.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.4.2\tSubscribe_Event operation",
                            "text_content": "API operation name: Subscribe_Event\nDescription: Provides subscription to the CAPIF related event information.\nKnown Consumers: API invoker, API publishing function, API management function, API exposing function.\nInputs: Refer subclause 8.8.2.1.\nOutputs: Refer subclause 8.8.2.2.\nSee subclause 8.8.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.4.3\tNotify_Event operation",
                            "text_content": "API operation name: Notify_Event\nDescription: Provides the relevant CAPIF event information to the subscribed entities.\nKnown Consumers: API invoker, API publishing function, API management function, API exposing function.\nInputs: Refer subclause 8.8.2.3.\nOutputs: Refer subclause 8.8.2.4.\nSee subclause 8.8.4 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.4.4\tUnsubscribe_Event operation",
                            "text_content": "API operation name: Unsubscribe_Event\nDescription: Unsubscription to the CAPIF event information.\nKnown Consumers: API invoker, API publishing function, API management function, API exposing function.\nInputs: Refer subclause 8.8.2.5.\nOutputs: Refer subclause 8.8.2.6.\nSee subclause 8.8.5 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.4.5\tUpdate_Event_Subscription operation",
                            "text_content": "API operation name: Update_Event_Subscription\nDescription: Updates a subscription to CAPIF related event information.\nKnown Consumers: API invoker, API publishing function, API management function, API exposing function.\nInputs: Refer subclause 8.8.2.7.\nOutputs: Refer subclause 8.8.2.8.\nSee subclause 8.8.5a for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.5\tCAPIF_API_invoker_management API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.5.1\tGeneral",
                            "text_content": "API description: This API enables the API invoker to communicate with the CAPIF core function to enroll as a registered user of CAPIF and manage the enrollment information over CAPIF-1 or CAPIF-1e.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.5.2\tOnboard_API_Invoker operation",
                            "text_content": "API operation name: Onboard_API_Invoker\nDescription: Enrolls the API invoker as a recognized user of the CAPIF.\nKnown Consumers: API invoker.\nInputs: Refer subclause 8.1.2.1.\nOutputs: Refer subclause 8.1.2.2.\nSee subclause 8.1.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.5.3\tOffboard_API_Invoker operation",
                            "text_content": "API operation name: Offboard_API_Invoker\nDescription: Cancels enrollment of the API invoker as a recognized user of the CAPIF.\nKnown Consumers: API invoker.\nInputs: Refer subclause 8.2.2.1.\nOutputs: Refer subclause 8.2.2.2.\nSee subclause 8.2.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.5.4\tSubscribe_Event operation",
                            "text_content": "API operation name: Subscribe_Event\nDescription: Provides subscription to the CAPIF related event information.\nKnown Consumers: API management function.\nInputs: Refer subclause 8.8.2.1.\nOutputs: Refer subclause 8.8.2.2.\nSee subclause 8.8.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.5.5\tNotify_Event operation",
                            "text_content": "API operation name: Notify_Event\nDescription: Provides the relevant CAPIF event information to the subscribed entities.\nKnown Consumers: API management function.\nInputs: Refer subclause 8.8.2.3.\nOutputs: Refer subclause 8.8.2.4.\nSee subclause 8.8.4 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.5.6\tUnsubscribe_Event operation",
                            "text_content": "API operation name: Unsubscribe_Event\nDescription: Unsubscription to the CAPIF event information.\nKnown Consumers: API management function.\nInputs: Refer subclause 8.8.2.5.\nOutputs: Refer subclause 8.8.2.6.\nSee subclause 8.8.5 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.5.7\tUpdate_Event_Subscription operation",
                            "text_content": "API operation name: Update_Event_Subscription\nDescription: Updates a subscription to CAPIF related event information.\nKnown Consumers: API management function.\nInputs: Refer subclause 8.8.2.7.\nOutputs: Refer subclause 8.8.2.8.\nSee subclause 8.8.5a for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.6\tCAPIF_Security API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.6.1\tGeneral",
                            "text_content": "API description: This API enables the API invoker to communicate with the CAPIF core function to authenticate and obtain authorization to access service APIs over CAPIF-1 or CAPIF-1e. This API also enables the API exposing function (AEF) to obtain API invoker information and revoke API invoker authorization over CAPIF-3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.6.2\tObtain_Security_Method operation",
                            "text_content": "API operation name: Obtain_Security_Method\nDescription: Obtain information about service API security method with CAPIF core function for service API invocations.\nKnown Consumers: API invoker.\nInputs: Refer subclause 8.10.2.\nOutputs: Refer subclause 8.10.2.\nSee subclause 8.10.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.6.3\tObtain_Authorization operation",
                            "text_content": "API operation name: Obtain_Authorization\nDescription: Provides the authorization information to access relevant service API.\nKnown Consumers: API invoker.\nInputs: Refer subclause 8.11.2.\nOutputs: Refer subclause 8.11.2.\nSee subclause 8.11.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.6.4\tObtain_API_Invoker_Info operation",
                            "text_content": "API operation name: Obtain_API_Invoker_Info\nDescription: Obtains the API invoker information.\nKnown Consumers: API exposing function.\nInputs: Refer subclause 8.16.2.1.\nOutputs: Refer subclause 8.16.2.2.\nSee subclause 8.16.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.6.5\tRevoke_Authorization operation",
                            "text_content": "API operation name: Revoke_Authorization\nDescription: Revokes API invoker authorization to access service API.\nKnown Consumers: API exposing function.\nInputs: Refer subclause 8.23.2.\nOutputs: Refer subclause 8.23.2.\nSee subclause 8.23.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.7\tCAPIF_Monitoring API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.7.1\tGeneral",
                            "text_content": "API description: This API enables the API management function to communicate with the CAPIF core function to subscribe to and unsubscribe from CAPIF events related to monitoring and receive subsequent notification of CAPIF monitoring events over CAPIF-5.\nNOTE:\tStage 3 can decide whether the API for CAPIF_Monitoring can be enabled over CAPIF-5.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.7.2\tSubscribe_Event operation",
                            "text_content": "API operation name: Subscribe_Event\nDescription: Provides subscription to the CAPIF related event information.\nKnown Consumers: API management function.\nInputs: Refer subclause 8.8.2.1.\nOutputs: Refer subclause 8.8.2.2.\nSee subclause 8.8.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.7.3\tNotify_Monitoring_Service_Event operation",
                            "text_content": "API operation name: Notify_Monitoring_Service_Event\nDescription: Provides the notification of the events related to monitoring service API invocations to the subscribed API management function.\nKnown Consumers: API management function.\nInputs: Refer subclause 8.21.2.1.\nOutputs: Refer subclause 8.21.2.2.\nSee subclause 8.21.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.7.4\tUnsubscribe_Event operation",
                            "text_content": "API operation name: Unsubscribe_Event\nDescription: Unsubscription to the CAPIF event information.\nKnown Consumers: API management function.\nInputs: Refer subclause 8.8.2.5.\nOutputs: Refer subclause 8.8.2.6.\nSee subclause 8.8.5 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.7.5\tUpdate_Event_Subscription operation",
                            "text_content": "API operation name: Update_Event_Subscription\nDescription: Updates a subscription to CAPIF related event information.\nKnown Consumers: API management function.\nInputs: Refer subclause 8.8.2.7.\nOutputs: Refer subclause 8.8.2.8.\nSee subclause 8.8.5a for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.8\tCAPIF_Logging_API_Invocation API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.8.1\tGeneral",
                            "text_content": "API description: This API enables the API exposing function to communicate with the CAPIF core function to log the information related to service API invocation over CAPIF-3.\nNOTE:\tStage 3 can decide whether the API for CAPIF_Logging_API_Invocation can be enabled over CAPIF-3.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.8.2\tLog_API_Invocation operation",
                            "text_content": "API operation name: Log_API_Invocation\nDescription: Enables to log API invocation information.\nKnown Consumers: API exposing function.\nInputs: Refer subclause 8.19.2.1.\nOutputs: Refer subclause 8.19.2.2.\nSee subclause 8.19.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.9\tCAPIF_Auditing API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.9.1\tGeneral",
                            "text_content": "API description: This API enables the API management function to communicate with the CAPIF core function to retrieve the log information related to service API invocation over CAPIF-5.\nNOTE:\tStage 3 can decide whether the API for CAPIF_Auditing can be enabled over CAPIF-5.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.9.2\tQuery_ API_Invocation_Log operation",
                            "text_content": "API operation name: Query_API_Invocation_Log\nDescription: Query the API invocation log information.\nKnown Consumers: API management function.\nInputs: Refer subclause 8.22.2.1.\nOutputs: Refer subclause 8.22.2.2.\nSee subclause 8.22.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.10\tCAPIF_Access_Control_Policy API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.10.1\tGeneral",
                            "text_content": "API description: This API enables the API exposing function to obtain the policy to perform access control on the service API invocations.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.10.2\tObtain_Access_Control_Policy operation",
                            "text_content": "API operation name: Obtain_Access_Control_Policy\nDescription: Allows obtaining the policy to perform access control on the service API invocations.\nKnown Consumers: API exposing function.\nInputs: Refer subclause 8.12.2.1.\nOutputs: Refer subclause 8.12.2.2.\nSee subclause 8.12.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.11\tCAPIF_Routing_Info API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.11.1\tGeneral",
                            "text_content": "API description: This API enables the API exposing function to obtain the routing information to forward the API invocation to another API exposing function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.11.2\tObtain_Routing_Info operation",
                            "text_content": "API operation name: Obtain_Routing_Info\nDescription: Allows obtaining the API routing information.\nKnown Consumers: API exposing function.\nInputs: Refer subclause 8.27.2.1.\nOutputs: Refer subclause 8.27.2.2.\nSee subclause 8.27.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                },
                {
                    "title": "10.12\tCAPIF_API_provider_management API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "10.12.1\tGeneral",
                            "text_content": "API description: This API enables the API Management Function to communicate with the CAPIF core function to register the API provider domain functions as authorized users of the CAPIF functionalities.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.12.2\tRegister_API_Provider operation",
                            "text_content": "API operation name: Register_API_Provider\nDescription: Registers the API provider domain functions as authorized users of the CAPIF.\nKnown Consumers: API Management Function.\nInputs: Refer subclause 8.28.2.1.\nOutputs: Refer subclause 8.28.2.2.\nSee subclause 8.28.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.12.3\tUpdate_API_Provider operation",
                            "text_content": "API operation name: Update_API_Provider\nDescription: Updates registration information of the API provider domain functions.\nKnown Consumers: API Management Function.\nInputs: Refer subclause 8.29.2.1.\nOutputs: Refer subclause 8.29.2.2.\nSee subclause 8.29.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "10.12.4\tDeregister_API_Provider operation",
                            "text_content": "API operation name: Deregister_API_Provider\nDescription: Registers the API provider domain functions as authorized users of the CAPIF.\nKnown Consumers: API Management Function.\nInputs: Refer subclause 8.30.2.1.\nOutputs: Refer subclause 8.30.2.2.\nSee subclause 8.30.3 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "11\tAPI exposing function APIs",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "11.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "Table 11.1-1 illustrates the API exposing function APIs.\nTable 11.1-1: List of API exposing function APIs\n\n",
                    "tables": [
                        {
                            "description": "Table 11.1-1: List of API exposing function APIs",
                            "table number": 59,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "11.2\tAEF_Security API",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "11.2.1\tGeneral",
                            "text_content": "API description: This API allows CAPIF core function to revoke access to service APIs and API invokers to request the authentication parameters necessary for authentication of the API invoker available with the API exposing function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "11.2.2\tRevoke_Authorization operation",
                            "text_content": "API operation name: Revoke_Authorization\nDescription: Revokes API invoker authorization to access service API.\nKnown Consumers: CAPIF core function.\nInputs: Refer subclause 8.23.2.\nOutputs: Refer subclause 8.23.2.\nSee subclause 8.23.4 for the details of usage of this API operation.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "11.2.3\tInitiate_Authentication operation",
                            "text_content": "API operation name: Initiate_Authentication\nDescription: Authentication between the API invoker and the AEF prior to service API invocation.\nKnown Consumers: API Invoker.\nInputs: Refer subclause 8.14.2.\nOutputs: Refer subclause 8.14.2.\nSee subclause 8.14.3 for the details of usage of this API operation.\n\nDepicted in figure A-1 is the overview of CAPIF operations. CAPIF operations occur between different actors involving the API invoker, the CAPIF core function, the API exposing function, the API publishing function and the API management function, and optionally the resource owner client for RNAA. High level CAPIF interactions between the actors are shown in figure A-1. This figure is only provided for illustration purposes, and does not represent the order of operations.\n\nThe figure depicts a simplified overview of CAPIF operations, highlighting the key steps and components involved in the process. It illustrates the process of data collection, processing, and transmission, with a focus on the role of the CAPIF (Center for Advanced Planning and Informatics) in managing and optimizing these operations.\nFigure A-1: Overview of CAPIF operations\nThe CAPIF defines the functional entities in subclause 6.3.\nThe CAPIF defines the reference points between the functional entities in subclause 6.4.\nThe following operations require the communication between the CAPIF entities:\n1.\tPublishing service APIs: the API provider utilizes the API publishing function over CAPIF-4 reference point to publish the service APIs on the CAPIF core function, as specified in subclause 8.3 of this specification;\n2.\tDiscovering service APIs: the API invoker discovers the service APIs over CAPIF-1/CAPIF-1e reference points, as specified in subclause 8.7 of this specification;\n3.\tAPI event subscription and notification: the API invoker subscribes to and receive service API event notifications over CAPIF-1/CAPIF-1e reference points, as specified in subclause 8.8 of this specification;\n4.\tAuthenticating with CAPIF: the API invoker authenticates itself over CAPIF-1/CAPIF-1e reference points, as specified in subclause 8.10 of this specification;\n5.\tAuthorizing with CAPIF: the API invoker obtains service API authorization over CAPIF-1/CAPIF-1e reference points, as specified in subclause 8.11 of this specification. In RNAA scenarios, API authorization is based on the authorization information obtained from the resource owner, as specified in clause 8.31;\n6.\tTopology hiding:\tthe API provider, to hide the topology, utilizes the API exposing function over CAPIF-3 reference point, as specified in subclause 8.13 of this specification;\n7.\tAuthenticating the API invoker prior to service API invocation: the API provider, to authenticate the API invoker prior to the service API invocation, utilizes the API exposing function over CAPIF-2/CAPIF-2e and CAPIF-3, as specified in subclause 8.14 of this specification;\n8.\tAuthenticating the API invoker upon the service API invocation: the API provider, to authenticate the API invoker upon invocation of the service APIs, utilizes the API exposing function over CAPIF-2/CAPIF-2e and CAPIF-3, as specified in subclause 8.15 of this specification;\n9.\tAuthorizing API invoker:  the API provider, to authorize the API invoker to access the service APIs, utilizes the API exposing function over CAPIF-2/CAPIF-2e and CAPIF-3, as specified in subclause 8.16 of this specification;\n10.\tAccess control: the API provider, to control the access of the service API by the API invoker based on policy or usage limits,\n-\tutilizes the API exposing function over CAPIF-2/CAPIF-2e and CAPIF-3, as specified in subclause 8.17 of this specification; or\n-\tin a cascaded deployment, utilizes API exposing functions over CAPIF-2/CAPIF-2e, as specified in subclause 8.18 of this specification;\n11.\tLogging service: the API provider, to maintain the log of the API invocations at the CAPIF core function for services such as charging, invocation history, utilizes the API exposing function over CAPIF-3, as specified in subclause 8.19 of this specification;\n12.\tCharging service: the API provider, to facilitate charging of the API invocations, utilizes the API exposing function over CAPIF-3, as specified in subclause 8.20 of this specification;\n13.\tService monitoring: the API provider, to facilitate monitoring such as API invoker's ID and IP address, utilizes the API management function over CAPIF-5, as specified in subclause 8.21 of this specification; and\n14.\tAuditing: the API provider, for auditing, utilizes the API management function over CAPIF-5, as specified in subclause 8.22 of this specification.\nThis annex provides the relationship of CAPIF with network exposure aspects of 3GPP systems. Any system exposing capabilities as service APIs can implement CAPIF. Generic model for CAPIF utilization by service API provider is included. Network exposure aspects of EPS and 5GS are considered for illustration.\nNOTE:\tAs there are no impacts on CAPIF's relationship with network exposure aspects of 3GPP systems due to deployment of 3rd party trust domain, it is not illustrated in the figures.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "B.0\tCAPIF utilization by service API provider",
            "description": "Figure B.0-1 illustrates the service API interaction with the CAPIF for utilizing framework aspects provided by the CAPIF.\n\nThe figure depicts the utilization of CAPIF (Cloud Application Programming Interface) by service API providers, illustrating the different APIs used for different services. The figure shows the utilization of CAPIF by each service API provider, with different colors representing different APIs. The figure also includes a legend to help understand the different APIs and their corresponding colors.\nFigure B.0-1: CAPIF utilization by service API provider\nThe service API aspects of the 3GPP network services and capabilities such as subscriber management, mobility management, transport and other communication services can be exposed for consumption by external 3rd party applications (e.g. API invoker).\nFramework aspects typically horizontal in nature caters to common functionality such as onboarding, offboarding, publishing, unpublishing, update service API, discovery, authentication, registration, authorization, logging, charging, monitoring, configuration, topology hiding, that are required to provide service APIs to API invokers. Service APIs can utilize the functions of the API provider domain (i.e. API exposing function, API publishing function, API management function) and interfaces CAPIF-3, CAPIF-4 and CAPIF-5 as specified in this specification.\nThe service API exposure function is connected to 3GPP network entity(s) via 3GPP internal interface(s). The API publishing function provides the service API information for publishing to the CAPIF core function.\nFor consuming service API, the API invoker interacts with the service API exposure function via service API interface and CAPIF-2/2e. While the service API interface is responsible for providing service aspects, CAPIF-2/2e supports service API by providing framework aspects such as authentication of the API invoker, authorization verification for the API invoker upon accessing the service API.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "B.1\tCAPIF relationship with 3GPP EPS network exposure",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "B.1.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The table B.1.1-1 shows the relationship between CAPIF and EPS network exposure aspects. The details of SCEF and its role in exposing network capabilities of EPS to 3rd party applications are specified in 3GPP TS 23.682 [2]\nTable B.1.1-1: CAPIF relationship with 3GPP EPS network exposure\n\n",
                    "tables": [
                        {
                            "description": "Table B.1.1-1: CAPIF relationship with 3GPP EPS network exposure",
                            "table number": 60,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.1.2\tDeployment models",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "B.1.2.1\tGeneral",
                            "text_content": "Based on the relationship captured in table B.1.1-1, the following deployment models for CAPIF are possible to enable EPS network exposure.\nNOTE:\tThe deployment models captured in subclause 7 are possible for the SCEF deployment compliant with CAPIF. Not all deployment models are illustrated in this subclause.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "B.1.2.2\tSCEF implements the CAPIF architecture",
                            "text_content": "Figure B.1.2.2-1 illustrates the deployment model where SCEF implements the CAPIF architecture.\nThe figure depicts the schematic representation of the Capacitive Amplifier Interference Filter (CAPIF) architecture, which is a key component in the signal processing system used in 5G networks. The CAPIF filters out interference signals, ensuring a high-quality signal transmission. The figure illustrates the various components, such as the input signal, the filter, and the output signal, highlighting the importance of this component in maintaining the integrity of the network.\nFigure B.1.2.2-1: SCEF implements the CAPIF architecture\nThe SCEF can implement the functionalities of the CAPIF core function, the API exposing function, the API publishing function and the API management function.\nAccording to the CAPIF architecture, CAPIF-2 and CAPIF-2e consist of framework aspects and service specific aspects. The service specific aspects are out of scope of CAPIF. T8 can implement the service specific aspects of CAPIF-2 and CAPIF-2e, and can provide the service APIs exposed by SCEF (AEF) to the SCS/AS (API invoker).\nThe SCEF can additionally provide CAPIF-1 and CAPIF-1e (CAPIF APIs) to the SCS/AS (API invokers).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "B.1.2.3\tSCEF implements the service specific aspect compliant with the CAPIF architecture",
                            "text_content": "Figure B.1.2.3-1 illustrates the deployment model where SCEF implements the service specific aspect compliant with the CAPIF architecture.\nThe figure depicts the Service-Specific Aspect (SCEF) compliant with the CAPIF architecture, which is a key component of the CAPIF framework. The figure illustrates the various services and their respective interfaces, including the Service-Specific Element (SSE), the Communication Application Interface (CAI), and the Service-Specific Function (SSF). The figure also includes the Service-Specific Element (SSE) interface, which is a key component of the CAPIF architecture. The figure also includes the Service-Specific Element (SSE) interface, which is a key component of the CAPIF architecture. The figure also includes the Service-Specific Element (SSE) interface, which is a key component of the CAPIF architecture. The figure also includes the Service-Specific Element (SSE) interface, which is a key component of the CAPIF architecture. The figure also includes the Service-Specific Element (SSE) interface, which is a key component of the CAPIF architecture. The figure also includes the Service-Specific Element (SSE) interface, which is a key component of the CAPIF architecture. The figure also includes the Service-Specific Element (SSE) interface, which is a key component of the CAPIF architecture. The figure also includes\nFigure B.1.2.3-1: SCEF implements the service specific aspect compliant with the CAPIF architecture\n3GPP EPS can deploy the CAPIF core function along with the SCEF.\nThe SCEF can implement the functionalities of the API provider domain functions.\nAccording to the CAPIF architecture, CAPIF-2 and CAPIF-2e consist of framework aspects and service specific aspects. The service specific aspects are out of scope of CAPIF. T8 can implement the service specific aspects of CAPIF-2 and CAPIF-2e, and can provide the service APIs exposed by SCEF (AEF) to the SCS/AS (API invoker).\nThe SCEF can implement the CAPIF-3 reference point/interface to the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "B.1.2.4\tDistributed deployment of the SCEF compliant with the CAPIF architecture",
                            "text_content": "Figure B.1.2.4-1 illustrates the distributed deployment model where the SCEF implements the service specific aspect compliant with the CAPIF architecture.\nThe figure depicts a distributed deployment of the Software-Defined Networking (SDN) compliant with the CAPIF architecture, showcasing the various components and their interconnections.\nFigure B.1.2.4-1: Distributed deployment of SCEF compliant with the CAPIF architecture\nThe 3GPP EPS can deploy the CAPIF core function, the SCEF-2 (API exposing function as a gateway) along with the SCEF-1 as illustrated in subclause 7.3.\nThe SCEF can implement the functionalities of API provider domain functions.\nAccording to the CAPIF architecture, CAPIF-2 or CAPIF-2e consists of framework aspects and service specific aspects. The service specific aspects are out of scope of the CAPIF. T8 can implement the service specific aspects of CAPIF-2 or CAPIF-2e and can provide the service APIs exposed by the SCEF-2 (AEF as a gateway) to the SCS/AS (API invoker).\nThe SCEF-2 can implement the CAPIF-3 reference point to the CAPIF core function and the SCEF-1 can implement the CAPIF-4 and CAPIF-5 reference points to the CAPIF core function.\nEditor's Note:\tThe illustration of this deployment model requires further study.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "B.2\tCAPIF relationship with 3GPP 5GS network exposure",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "B.2.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "The table B.2.1-1 shows the relationship between CAPIF and 5GS network exposure aspects. The details of NEF and its role in exposing network capabilities of 5GS to 3rd party applications are specified in 3GPP TS 23.501 [3] and the details of NEF service operations are specified in 3GPP TS 23.502 [4].\nTable B.2.1-1: CAPIF relationship with 3GPP 5GS network exposure\n\n",
                    "tables": [
                        {
                            "description": "Table B.2.1-1: CAPIF relationship with 3GPP 5GS network exposure",
                            "table number": 61,
                            "summary": "",
                            "name": ""
                        }
                    ],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.2.2\tDeployment models",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "B.2.2.1\tGeneral",
                            "text_content": "Based on the relationship captured in table B.2.1-1, the following deployment models for CAPIF are possible to enable 5GS network exposure.\nNOTE:\tThe deployment models captured in subclause 7 are possible for the NEF deployment compliant with CAPIF. Not all deployment models are illustrated in this subclause.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "B.2.2.2\tNEF implements the CAPIF architecture",
                            "text_content": "Figure B.2.2.2-1 illustrates the deployment model where the NEF implements the CAPIF architecture.\nNEF (Network Element Framework) implements the CAPIF (Center Area Framework) architecture, which is a key component of the NEF framework. The CAPIF architecture is designed to provide a flexible and scalable solution for managing and optimizing network elements, such as routers, switches, and other network components. The CAPIF architecture is based on the principles of OpenFlow, which allows for the transparent and efficient management of network traffic. This architecture enables the efficient and reliable operation of the network, ensuring that data is transmitted and received in a timely and efficient manner.\nFigure B.2.2.2-1: NEF implements the CAPIF architecture\nThe NEF can implement the functionalities of the CAPIF core function, the API exposing function, the API publishing function and the API management function.\nAccording to the CAPIF architecture, CAPIF-2 and CAPIF-2e consist of framework aspects and service specific aspects. The service specific aspects are out of scope of CAPIF. Nnef can implement the service specific aspects of CAPIF-2 and CAPIF-2e, and can provide the service APIs exposed by the NEF (AEF) to the AF (API invoker).\nThe NEF can additionally provide CAPIF-1 and CAPIF-1e (CAPIF APIs) to the AF (API invokers).\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "B.2.2.3\tNEF implements the service specific aspect compliant with the CAPIF architecture",
                            "text_content": "Figure B.2.2.3-1 illustrates the deployment model where the NEF implements the service specific aspect compliant with the CAPIF architecture.\nNEF (Network Element Framework) is a service-specific aspect compliant with the CAPIF architecture, which is designed to provide a comprehensive framework for managing and implementing service-specific aspects in a network.\nFigure B.2.2.3-1: NEF implements the service specific aspect compliant with the CAPIF architecture\n3GPP 5GS can deploy the CAPIF core function along with the NEF.\nThe NEF can implement the functionalities of the API provider domain functions.\nAccording to the CAPIF architecture, CAPIF-2 and CAPIF-2e consist of framework aspects and service specific aspects. The service specific aspects are out of scope of CAPIF. Nnef can implement the service specific aspects of CAPIF-2 and CAPIF-2e, and can provide the service APIs exposed by NEF (AEF) to the AF (API invoker).\nThe NEF can implement the CAPIF-3 reference point/interface to the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "B.2.2.4\tDistributed deployment of the NEF compliant with the CAPIF architecture",
                            "text_content": "Figure B.2.2.4-1 illustrates the distributed deployment model where the NEF implements the service specific aspect compliant with the CAPIF architecture.\nThe figure depicts a distributed deployment of NEF (Network Element Function) compliant with the CAPIF (Center for Advanced Planning and Interoperability Framework) architecture, showcasing the various components and their interconnections.\nFigure B.2.2.4-1: Distributed deployment of NEF compliant with the CAPIF architecture\nThe 3GPP 5GS can deploy the CAPIF core function, the NEF-2 (API exposing function as a gateway) along with the NEF-1 as illustrated in subclause 7.3.\nThe NEF can implement the functionalities of API provider domain functions.\nAccording to the CAPIF architecture, CAPIF-2 or CAPIF-2e consists of framework aspects and service specific aspects. The service specific aspects are out of scope of the CAPIF. Nnef can implement the service specific aspects of CAPIF-2 and CAPIF-2 or CAPIF-2e can provide the service APIs exposed by the NEF-2 (AEF as a gateway) to the AF (API invoker).\nThe NEF-2 (AEF) can implement the CAPIF-3 reference point to the CAPIF core function and the NEF-1 can implement the CAPIF-4 and CAPIF-5 reference points to the CAPIF core function.\nEditor's Note:\tThe illustration of this deployment model requires further study.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "B.3\tIntegrated deployment of 3GPP network exposure systems with the CAPIF",
            "description": "",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": [
                {
                    "title": "B.3.1\tGeneral",
                    "description": "",
                    "summary": "",
                    "text_content": "According to 3GPP TS 23.682 [2], when the CAPIF is supported, the SCEF supports the API provider domain functions. According to 3GPP TS 23.501 [3], when the CAPIF is supported,the NEF supports the API provider domain functions.\n",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": []
                },
                {
                    "title": "B.3.2\tDeployment model",
                    "description": "",
                    "summary": "",
                    "text_content": "",
                    "tables": [],
                    "figures_meta_data": [],
                    "subsubsections": [
                        {
                            "title": "B.3.2.1\tGeneral",
                            "text_content": "The SCEF and the NEF may be integrated with a single CAPIF core function to offer their respective service APIs to the API invokers. The following deployment model is possible for integrated deployment of the SCEF and the NEF with the CAPIF core function.\n",
                            "figures_meta_data": [],
                            "tables": []
                        },
                        {
                            "title": "B.3.2.2\tIntegrated deployment of the SCEF and the NEF with the CAPIF",
                            "text_content": "Figure B.3.2.2-1 illustrates integrated deployment of the SCEF and the NEF with the CAPIF.\nThe figure depicts an integrated deployment of the Secure Core Enabling Framework (SCF) and the Network Enabling Framework (NEF) with the CAPIF, illustrating the seamless integration of these technologies in a 5G network. The figure highlights the use of redundancy paths to ensure failover reliability, and the layered design aligns with SDN principles.\nFigure B.3.2.2-1: Integrated deployment of the SCEF and the NEF with the CAPIF\nThe CAPIF core function, the SCEF and the NEF are deployed in the PLMN trust domain, where the CAPIF core function takes the role of a unified gateway and provides services to different API invokers. The API invokers obtains the T8 and N33 service API information and the corresponding entry point details from the CAPIF core function via CAPIF-1 or CAPIF-1e reference points.\nThe API invokers can interact independently with the SCEF, the NEF and the 3rd party API exposing functions via CAPIF-2 or CAPIF-2e reference points. In this case, T8 and N33 can be reused to implement the service specific aspects of CAPIF-2 or CAPIF-2e reference points for the corresponding service API interactions of the SCEF and the NEF respectively.\nThe SCEF and the NEF applies any service API access policy control to the interactions between the API invokers and the T8 and N33 service APIs respectively by communicating with the same CAPIF core function via the CAPIF-3 reference point.\n",
                            "figures_meta_data": [],
                            "tables": []
                        }
                    ]
                }
            ]
        },
        {
            "title": "C.1\tGeneral",
            "description": "This annex provides the information about the role of CAPIF in charging service API invocations. The common architecture for charging is illustrated in clause 4 of 3GPP TS 32.240 [6]. There are two charging mechanisms - offline charging and online charging. The role of CAPIF in both these charging mechanims is illustrated for informational purpose in this subclause.\nThe API invocations are subjected to charging (online, offline) as illustrated in figure C.1-1.\nNOTE:\tAs there are no impacts on CAPIF's role in charging due to deployment of 3rd party trust domain, it is not illustrated in the figures.\n\nThe figure depicts a simplified representation of the Charging Application Programming Interface (CAPIF) role in a charging system. It illustrates the various components and their interactions, such as the charging station (CS), the charging device (CD), and the charging application (CA). The figure shows the flow of data between the CS and CD, as well as the communication between the CA and the CS. The CAPIF role is crucial in ensuring the smooth operation of the charging system, as it handles the communication between the CS and CD, and the communication between the CA and the CS.\nFigure C.1-1: CAPIF role in charging\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "C.2\tCAPIF role in online charging",
            "description": "The API invocations are subjected to online charging as illustrated in figure C.1-1.\nThe API exposing function provides the API invocation charging information to the CAPIF core function. The CAPIF core function further interacts with an online charging system in real-time by providing the charging information and further the CAPIF core function receives the authorization corresponding to the charging information.\nNOTE:\tThe online charging architecture for CAPIF including specification of online charging system entities and reference points is under the responsibility of SA5.\n",
            "summary": "",
            "tables": [],
            "figures_meta_data": [],
            "subsections": []
        },
        {
            "title": "C.3\tCAPIF role in offline charging",
            "description": "The API invocations are subjected to offline charging as illustrated in figure C.1-1.\nThe API exposing function provides the API invocation charging information to the CAPIF core function. The CAPIF core function provides the charging information to the offline charging system. The offline charging system generates the CDRs for the API invocation and further transfers the CDR files to the billing domain.\nNOTE:\tThe offline charging architecture for CAPIF including specification of offline charging system entities and reference points is under the responsibility of SA5.\nThis annex provides the relationship of CAPIF with the OMA Network APIs and the ETSI MEC API framework. The relationship of CAPIF with these external API frameworks is illustrated in the table D-1. \"Yes\" means that the external API framework supports the CAPIF functionality, \"No\" means that the API framework does not support the CAPIF functionality, and \"Partial\" means that it provides a mechanism that partially supports the CAPIF functionality.\nTable D-1: CAPIF relationship with external API frameworks\n\nThe configuration data is stored in the CAPIF core function and provided by the CAPIF administrator.\nThe configuration data for CAPIF is specified in table E-1.\nTable E-1: Configuration data for CAPIF\n\n\n",
            "summary": "",
            "tables": [
                {
                    "description": "Table D-1: CAPIF relationship with external API frameworks",
                    "table number": 62,
                    "summary": "",
                    "name": ""
                },
                {
                    "description": "Table E-1: Configuration data for CAPIF",
                    "table number": 63,
                    "summary": "",
                    "name": ""
                },
                {
                    "description": "",
                    "table number": 64,
                    "summary": "",
                    "name": ""
                }
            ],
            "figures_meta_data": [],
            "subsections": []
        }
    ]
}
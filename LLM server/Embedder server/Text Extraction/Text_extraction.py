import time

from docx import Document
from docx.document import Document as DocxDocument
from docx.oxml.table import CT_Tbl
from docx.oxml.text.paragraph import CT_P
from docx.table import Table
from docx.text.paragraph import Paragraph
from docx.text.paragraph import Run
import os
from typing import Dict, List, Any
import json

def iter_block_items(parent):
    if isinstance(parent, DocxDocument):
        parent_elm = parent._element.body
    else:
        parent_elm = parent
    for child in parent_elm.iterchildren():
        if isinstance(child, CT_P):
            yield Paragraph(child, parent)
        elif isinstance(child, CT_Tbl):
            yield Table(child, parent)


def run_has_image(run : Run):
    return bool(run._element.xpath('.//wp:inline'))


def preprocess_figure(run : Run) -> str:
    return "[Description of image generated by vision LM]"


def process_paragraph(paragraph : Paragraph) -> str:
    para_text = []
    for run in paragraph.runs:
        if run_has_image(run):
            para_text.append(preprocess_figure(run))
        else:
            para_text.append(run.text)
    return ''.join(para_text).strip()


def extract_docx_structure(file_path: str) -> Dict[str, Any]:
    dictt = {
        "document_name": os.path.basename(file_path),
        "content": []
    }

    doc = Document(file_path)
    current_section = None
    current_subsection = None
    current_subsubsection = None
    last_processed_paragraph = None

    for element in iter_block_items(doc):
        if isinstance(element, Paragraph):
            paragraph = element
            if paragraph.style.name.startswith('Heading'):
                try:
                    heading_level = int(paragraph.style.name.split()[1])
                except:
                    continue

                if heading_level == 1:
                    current_section = {
                        "title": paragraph.text.strip(),
                        "description": "",
                        "summary": "",
                        "tables": [],
                        "subsections": []
                    }
                    dictt["content"].append(current_section)
                    current_subsection = None
                    current_subsubsection = None
                elif heading_level == 2:
                    current_subsection = {
                        "title": paragraph.text.strip(),
                        "description": "",
                        "summary": "",
                        "text_content": "",
                        "tables": [],
                        "subsubsections": []
                    }
                    if current_section:
                        current_section["subsections"].append(current_subsection)
                    current_subsubsection = None
                elif heading_level == 3:
                    current_subsubsection = {
                        "title": paragraph.text.strip(),
                        "text_content": "",
                        "tables": []
                    }
                    if current_subsection:
                        current_subsection["subsubsections"].append(current_subsubsection)
                last_processed_paragraph = None
            else:
                processed_text = process_paragraph(paragraph)
                if current_subsubsection:
                    current_subsubsection["text_content"] += processed_text + "\n"
                elif current_subsection:
                    current_subsection["text_content"] += processed_text + "\n"
                elif current_section:
                    current_section["description"] += processed_text + "\n"
                last_processed_paragraph = paragraph

        elif isinstance(element, Table):
            table_description = last_processed_paragraph.text.strip() if last_processed_paragraph else ""
            table_entry = {
                "description": table_description,
                "summary": "",
                "name (in the NoSql database)": ""
            }

            if current_subsubsection:
                current_subsubsection["tables"].append(table_entry)
            elif current_subsection:
                current_subsection["tables"].append(table_entry)
            elif current_section:
                current_section["tables"].append(table_entry)
            last_processed_paragraph = None

    return dictt


testing_docx_path = "./Text Extraction/Testing Docx/22104-i30.docx"
doc = Document(testing_docx_path)
t1 = time.time()
results = extract_docx_structure(testing_docx_path)
t2 = time.time()
print("it takes :", t2-t1)

with open('./Text Extraction/Results/22104-i30-testing.json', 'w', encoding='utf-8') as f:
    json.dump(results, f, ensure_ascii=False, indent=4)

"""
for item in iter_block_items(doc):
    if isinstance(item, Paragraph):
        print("The style name is :",item.style.name)
        print("Paragraph:", item.text, end="\n\n")
    elif isinstance(item, Table):
        print("Table detected",end="\n\n")        
"""